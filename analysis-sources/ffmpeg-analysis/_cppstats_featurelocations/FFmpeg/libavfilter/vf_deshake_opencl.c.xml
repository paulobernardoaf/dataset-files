<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavfilter\vf_deshake_opencl.c">














































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libavutil/lfg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"framequeue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"formats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencl_source.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"video.h"</cpp:file></cpp:include>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BREIFN</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRIEF_PATCH_SIZE</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRIEF_PATCH_SIZE_HALF</name></cpp:macro> <cpp:value>(BRIEF_PATCH_SIZE / 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCHES_CONTIG_SIZE</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUNDED_UP_DIV</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a + (b - 1)) / b)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>PointPair</name> <block>{

<decl_stmt><decl><type><name>cl_float2</name></type> <name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_float2</name></type> <name>p2</name></decl>;</decl_stmt>
}</block></struct></type> <name>PointPair</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MotionVector</name> <block>{
<decl_stmt><decl><type><name>PointPair</name></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_int</name></type> <name>should_consider</name></decl>;</decl_stmt>
}</block></struct></type> <name>MotionVector</name>;</typedef>


<enum>enum <name>RingbufferIndices</name> <block>{
<decl><name>RingbufX</name></decl>,
<decl><name>RingbufY</name></decl>,
<decl><name>RingbufRot</name></decl>,
<decl><name>RingbufScaleX</name></decl>,
<decl><name>RingbufScaleY</name></decl>,


<decl><name>RingbufCount</name></decl>
}</block>;</enum>


<typedef>typedef <type><struct>struct <name>DebugMatches</name> <block>{
<decl_stmt><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>matches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MotionVector</name></type> <name><name>model_matches</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_matches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_model_matches</name></decl>;</decl_stmt>
}</block></struct></type> <name>DebugMatches</name>;</typedef>



<typedef>typedef <type><struct>struct <name>AbsoluteFrameMotion</name> <block>{

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name><name>ringbuffers</name><index>[<expr><name>RingbufCount</name></expr>]</index></name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>curr_frame_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>data_start_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_end_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>debug_matches</name></decl>;</decl_stmt>
}</block></struct></type> <name>AbsoluteFrameMotion</name>;</typedef>



<function><type><specifier>static</specifier> <name>void</name></type> <name>free_debug_matches</name><parameter_list>(<parameter><decl><type><name>AbsoluteFrameMotion</name> <modifier>*</modifier></type><name>afm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DebugMatches</name></type> <name>dm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>afm</name><operator>-&gt;</operator><name>debug_matches</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>afm</name><operator>-&gt;</operator><name>debug_matches</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(
<argument><expr><name><name>afm</name><operator>-&gt;</operator><name>debug_matches</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dm</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DebugMatches</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dm</name><operator>.</operator><name>matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>afm</name><operator>-&gt;</operator><name>debug_matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <name>FrameDelta</name> <block>{
<decl_stmt><decl><type><name>cl_float2</name></type> <name>translation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_float2</name></type> <name>scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_float2</name></type> <name>skew</name></decl>;</decl_stmt>
}</block></struct></type> <name>FrameDelta</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SimilarityMatrix</name> <block>{

<decl_stmt><decl><type><name>double</name></type> <name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SimilarityMatrix</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CropInfo</name> <block>{

<decl_stmt><decl><type><name>cl_float2</name></type> <name>top_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_float2</name></type> <name>bottom_right</name></decl>;</decl_stmt>
}</block></struct></type> <name>CropInfo</name>;</typedef>



<typedef>typedef <type><struct>struct <name>IterIndices</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
}</block></struct></type> <name>IterIndices</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DeshakeOpenCLContext</name> <block>{
<decl_stmt><decl><type><name>OpenCLFilterContext</name></type> <name>ocf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>initialized</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>AVLFG</name></type> <name>alfg</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FFFrameQueue</name></type> <name>fq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AbsoluteFrameMotion</name></type> <name>abs_motion</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>smooth_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curr_frame</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>gauss_kernel</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ransac_err</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CropInfo</name></type> <name>crop_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CropInfo</name></type> <name>crop_uv</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>is_yuv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sw_format</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>matches_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>matches_contig_host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>inliers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_command_queue</name></type> <name>command_queue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel_grayscale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel_harris_response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel_refine_features</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel_brief_descriptors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel_match_descriptors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel_transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel_crop_upscale</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>cl_mem</name></type> <name>grayscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>harris_buf</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>cl_mem</name></type> <name>refined_features</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>prev_refined_features</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>cl_mem</name></type> <name>brief_pattern</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>descriptors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>prev_descriptors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>matches_contig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>transform_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_mem</name></type> <name>transform_uv</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>tripod_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>debug_on</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>should_crop</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>cl_int</name></type> <name>refine_features</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>smooth_percent</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>smooth_window_multiplier</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>cl_kernel</name></type> <name>kernel_draw_debug_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>debug_matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>debug_model_matches</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>grayscale_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>harris_response_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>refine_features_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>brief_descriptors_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>match_descriptors_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>transform_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>crop_upscale_time</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>read_buf_time</name></decl>;</decl_stmt>
}</block></struct></type> <name>DeshakeOpenCLContext</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rand_in</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>alfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name>av_lfg_get</name><argument_list>(<argument><expr><name>alfg</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>low</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>double</name></type> <name>averaged_event_time_ms</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>total_time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_frames</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>double</name><operator>)</operator><name>total_time</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>num_frames</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>run_estimate_kernel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MotionVector</name> <modifier>*</modifier></type><name>point_pairs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>x1</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y1</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x2</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y2</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>x3</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>y3</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>X1</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Y1</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>X2</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Y2</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>X3</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Y3</name> <init>= <expr><name><name>point_pairs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator> <name>x1</name><operator>*</operator><operator>(</operator><name>y2</name><operator>-</operator><name>y3</name><operator>)</operator> <operator>+</operator> <name>x2</name><operator>*</operator><operator>(</operator><name>y3</name><operator>-</operator><name>y1</name><operator>)</operator> <operator>+</operator> <name>x3</name><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y2</name><operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>model</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator> <name>X1</name><operator>*</operator><operator>(</operator><name>y2</name><operator>-</operator><name>y3</name><operator>)</operator> <operator>+</operator> <name>X2</name><operator>*</operator><operator>(</operator><name>y3</name><operator>-</operator><name>y1</name><operator>)</operator> <operator>+</operator> <name>X3</name><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y2</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator> <name>X1</name><operator>*</operator><operator>(</operator><name>x3</name><operator>-</operator><name>x2</name><operator>)</operator> <operator>+</operator> <name>X2</name><operator>*</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x3</name><operator>)</operator> <operator>+</operator> <name>X3</name><operator>*</operator><operator>(</operator><name>x2</name><operator>-</operator><name>x1</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator> <name>X1</name><operator>*</operator><operator>(</operator><name>x2</name><operator>*</operator><name>y3</name> <operator>-</operator> <name>x3</name><operator>*</operator><name>y2</name><operator>)</operator> <operator>+</operator> <name>X2</name><operator>*</operator><operator>(</operator><name>x3</name><operator>*</operator><name>y1</name> <operator>-</operator> <name>x1</name><operator>*</operator><name>y3</name><operator>)</operator> <operator>+</operator> <name>X3</name><operator>*</operator><operator>(</operator><name>x1</name><operator>*</operator><name>y2</name> <operator>-</operator> <name>x2</name><operator>*</operator><name>y1</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator> <name>Y1</name><operator>*</operator><operator>(</operator><name>y2</name><operator>-</operator><name>y3</name><operator>)</operator> <operator>+</operator> <name>Y2</name><operator>*</operator><operator>(</operator><name>y3</name><operator>-</operator><name>y1</name><operator>)</operator> <operator>+</operator> <name>Y3</name><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y2</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator> <name>Y1</name><operator>*</operator><operator>(</operator><name>x3</name><operator>-</operator><name>x2</name><operator>)</operator> <operator>+</operator> <name>Y2</name><operator>*</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x3</name><operator>)</operator> <operator>+</operator> <name>Y3</name><operator>*</operator><operator>(</operator><name>x2</name><operator>-</operator><name>x1</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator> <name>Y1</name><operator>*</operator><operator>(</operator><name>x2</name><operator>*</operator><name>y3</name> <operator>-</operator> <name>x3</name><operator>*</operator><name>y2</name><operator>)</operator> <operator>+</operator> <name>Y2</name><operator>*</operator><operator>(</operator><name>x3</name><operator>*</operator><name>y1</name> <operator>-</operator> <name>x1</name><operator>*</operator><name>y3</name><operator>)</operator> <operator>+</operator> <name>Y3</name><operator>*</operator><operator>(</operator><name>x1</name><operator>*</operator><name>y2</name> <operator>-</operator> <name>x2</name><operator>*</operator><name>y1</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>points_not_collinear</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cl_float2</name> <modifier>*</modifier><modifier>*</modifier></type><name>points</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>dx1</name> <init>= <expr><name><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dy1</name> <init>= <expr><name><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>dx2</name> <init>= <expr><name><name>points</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dy2</name> <init>= <expr><name><name>points</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>dx2</name><operator>*</operator><name>dy1</name> <operator>-</operator> <name>dy2</name><operator>*</operator><name>dx1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>check_subset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MotionVector</name> <modifier>*</modifier></type><name>pairs_subset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>cl_float2</name> <modifier>*</modifier></type><name><name>prev_points</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>&amp;</operator><name><name>pairs_subset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name></name></expr>,
<expr><operator>&amp;</operator><name><name>pairs_subset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name></name></expr>,
<expr><operator>&amp;</operator><name><name>pairs_subset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>cl_float2</name> <modifier>*</modifier></type><name><name>curr_points</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>&amp;</operator><name><name>pairs_subset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name></name></expr>,
<expr><operator>&amp;</operator><name><name>pairs_subset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name></name></expr>,
<expr><operator>&amp;</operator><name><name>pairs_subset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>points_not_collinear</name><argument_list>(<argument><expr><name>prev_points</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>points_not_collinear</name><argument_list>(<argument><expr><name>curr_points</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>get_subset</name><parameter_list>(
<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>alfg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MotionVector</name> <modifier>*</modifier></type><name>point_pairs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_point_pairs</name></decl></parameter>,
<parameter><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>pairs_subset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>max_attempts</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>iters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>iters</name> <operator>&lt;</operator> <name>max_attempts</name></expr>;</condition> <incr><expr><name>iters</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>iters</name> <operator>&lt;</operator> <name>max_attempts</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx_i</name> <operator>=</operator> <name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rand_in</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_point_pairs</name></expr></argument>, <argument><expr><name>alfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx_i</name> <operator>==</operator> <name><name>idx</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pairs_subset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>point_pairs</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>check_subset</name><argument_list>(<argument><expr><name>pairs_subset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<return>return <expr><name>i</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>iters</name> <operator>&lt;</operator> <name>max_attempts</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_error</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>MotionVector</name> <modifier>*</modifier></type><name>point_pairs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_point_pairs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>model</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>err</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>F0</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>F1</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>F2</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>F3</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>F4</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>F5</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_point_pairs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>cl_float2</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>&amp;</operator><name><name>point_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cl_float2</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>&amp;</operator><name><name>point_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><name>F0</name><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>F1</name><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>F2</name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><name>F3</name><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>F4</name><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>F5</name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>err</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name><operator>*</operator><name>a</name> <operator>+</operator> <name>b</name><operator>*</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>find_inliers</name><parameter_list>(
<parameter><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>point_pairs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_point_pairs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>model</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>thresh</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>thresh</name> <operator>*</operator> <name>thresh</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name>num_point_pairs</name></expr></init></decl>, <decl><type ref="prev"/><name>num_inliers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_error</name><argument_list>(<argument><expr><name>point_pairs</name></expr></argument>, <argument><expr><name>num_point_pairs</name></expr></argument>, <argument><expr><name>model</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>err</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>point_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>should_consider</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_inliers</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>point_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>should_consider</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>num_inliers</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>ransac_update_num_iters</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>confidence</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>num_outliers</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_iters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>denom</name></decl>;</decl_stmt>

<expr_stmt><expr><name>confidence</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>confidence</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_outliers</name> <operator>=</operator> <call><name>av_clipd</name><argument_list>(<argument><expr><name>num_outliers</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>confidence</name></expr></argument>, <argument><expr><name>DBL_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>denom</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>num_outliers</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>denom</name> <operator>&lt;</operator> <name>DBL_MIN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>denom</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>-</operator><name>num</name> <operator>&gt;=</operator> <name>max_iters</name> <operator>*</operator> <operator>(</operator><operator>-</operator><name>denom</name><operator>)</operator></expr> ?</condition><then> <expr><name>max_iters</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>num</name> <operator>/</operator> <name>denom</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_affine_2d</name><parameter_list>(
<parameter><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name></decl></parameter>,
<parameter><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>point_pairs</name></decl></parameter>,
<parameter><decl><type><name>DebugMatches</name> <modifier>*</modifier></type><name>debug_matches</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_point_pairs</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>model_out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>threshold</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_iters</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>confidence</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>best_model</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>model</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MotionVector</name></type> <name><name>pairs_subset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>best_pairs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iter</name></decl>, <decl><type ref="prev"/><name>niters</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>max_iters</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>good_count</name></decl>, <decl><type ref="prev"/><name>max_good_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>num_point_pairs</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_point_pairs</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>run_estimate_kernel</name><argument_list>(<argument><expr><name>point_pairs</name></expr></argument>, <argument><expr><name>model_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>point_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>should_consider</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>niters</name></expr>;</condition> <incr><expr><operator>++</operator><name>iter</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><call><name>get_subset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>alfg</name></name></expr></argument>, <argument><expr><name>point_pairs</name></expr></argument>, <argument><expr><name>num_point_pairs</name></expr></argument>, <argument><expr><name>pairs_subset</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>run_estimate_kernel</name><argument_list>(<argument><expr><name>pairs_subset</name></expr></argument>, <argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>good_count</name> <operator>=</operator> <call><name>find_inliers</name><argument_list>(<argument><expr><name>point_pairs</name></expr></argument>, <argument><expr><name>num_point_pairs</name></expr></argument>, <argument><expr><name>model</name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>ransac_err</name></name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>good_count</name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_good_count</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mi</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>mi</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>best_model</name><index>[<expr><name>mi</name></expr>]</index></name> <operator>=</operator> <name><name>model</name><index>[<expr><name>mi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>pi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>pi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>best_pairs</name><index>[<expr><name>pi</name></expr>]</index></name> <operator>=</operator> <name><name>pairs_subset</name><index>[<expr><name>pi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>max_good_count</name> <operator>=</operator> <name>good_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>niters</name> <operator>=</operator> <call><name>ransac_update_num_iters</name><argument_list>(
<argument><expr><name>confidence</name></expr></argument>,
<argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>num_point_pairs</name> <operator>-</operator> <name>good_count</name><operator>)</operator> <operator>/</operator> <name>num_point_pairs</name></expr></argument>,
<argument><expr><name>niters</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max_good_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mi</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>mi</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>model_out</name><index>[<expr><name>mi</name></expr>]</index></name> <operator>=</operator> <name><name>best_model</name><index>[<expr><name>mi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>pi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>pi</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>debug_matches</name><operator>-&gt;</operator><name>model_matches</name><index>[<expr><name>pi</name></expr>]</index></name> <operator>=</operator> <name><name>best_pairs</name><index>[<expr><name>pi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>debug_matches</name><operator>-&gt;</operator><name>num_model_matches</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>find_inliers</name><argument_list>(<argument><expr><name>point_pairs</name></expr></argument>, <argument><expr><name>num_point_pairs</name></expr></argument>, <argument><expr><name>best_model</name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>ransac_err</name></name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>optimize_model</name><parameter_list>(
<parameter><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name></decl></parameter>,
<parameter><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>best_pairs</name></decl></parameter>,
<parameter><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>inliers</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_inliers</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>best_err</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>model_out</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>move_x_val</name> <init>= <expr><literal type="number">0.01</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>move_y_val</name> <init>= <expr><literal type="number">0.01</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>move_x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>old_move_x_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>model</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>iters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iters</name> <operator>&lt;</operator> <literal type="number">200</literal></expr>;</condition> <incr><expr><name>iters</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>total_err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>move_x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>best_pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>move_x_val</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>best_pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>move_y_val</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>run_estimate_kernel</name><argument_list>(<argument><expr><name>best_pairs</name></expr></argument>, <argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_error</name><argument_list>(<argument><expr><name>inliers</name></expr></argument>, <argument><expr><name>num_inliers</name></expr></argument>, <argument><expr><name>model</name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>ransac_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_inliers</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total_err</name> <operator>+=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>ransac_err</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>total_err</name> <operator>&lt;</operator> <name>best_err</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mi</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>mi</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>model_out</name><index>[<expr><name>mi</name></expr>]</index></name> <operator>=</operator> <name><name>model</name><index>[<expr><name>mi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>best_err</name> <operator>=</operator> <name>total_err</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_changed</name> <operator>=</operator> <name>iters</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>move_x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>best_pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>move_x_val</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>best_pairs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>move_y_val</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iters</name> <operator>-</operator> <name>last_changed</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_move_x_val</name> <operator>=</operator> <name>move_x_val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>move_x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>move_x_val</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>move_y_val</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_move_x_val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>move_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>move_x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>minimize_error</name><parameter_list>(
<parameter><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name></decl></parameter>,
<parameter><decl><type><name>MotionVector</name> <modifier>*</modifier></type><name>inliers</name></decl></parameter>,
<parameter><decl><type><name>DebugMatches</name> <modifier>*</modifier></type><name>debug_matches</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_inliers</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>model_out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_iters</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>best_err</name> <init>= <expr><name>FLT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>best_model</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>model</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MotionVector</name></type> <name><name>pairs_subset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>best_pairs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_iters</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>total_err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><call><name>get_subset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>alfg</name></name></expr></argument>, <argument><expr><name>inliers</name></expr></argument>, <argument><expr><name>num_inliers</name></expr></argument>, <argument><expr><name>pairs_subset</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>run_estimate_kernel</name><argument_list>(<argument><expr><name>pairs_subset</name></expr></argument>, <argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_error</name><argument_list>(<argument><expr><name>inliers</name></expr></argument>, <argument><expr><name>num_inliers</name></expr></argument>, <argument><expr><name>model</name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>ransac_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_inliers</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total_err</name> <operator>+=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>ransac_err</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>total_err</name> <operator>&lt;</operator> <name>best_err</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mi</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>mi</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>best_model</name><index>[<expr><name>mi</name></expr>]</index></name> <operator>=</operator> <name><name>model</name><index>[<expr><name>mi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>pi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>pi</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>best_pairs</name><index>[<expr><name>pi</name></expr>]</index></name> <operator>=</operator> <name><name>pairs_subset</name><index>[<expr><name>pi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>best_err</name> <operator>=</operator> <name>total_err</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mi</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>mi</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>model_out</name><index>[<expr><name>mi</name></expr>]</index></name> <operator>=</operator> <name><name>best_model</name><index>[<expr><name>mi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>pi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>pi</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>debug_matches</name><operator>-&gt;</operator><name>model_matches</name><index>[<expr><name>pi</name></expr>]</index></name> <operator>=</operator> <name><name>best_pairs</name><index>[<expr><name>pi</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>debug_matches</name><operator>-&gt;</operator><name>num_model_matches</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>optimize_model</name><argument_list>(<argument><expr><name>deshake_ctx</name></expr></argument>, <argument><expr><name>best_pairs</name></expr></argument>, <argument><expr><name>inliers</name></expr></argument>, <argument><expr><name>num_inliers</name></expr></argument>, <argument><expr><name>best_err</name></expr></argument>, <argument><expr><name>model_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>FrameDelta</name></type> <name>decompose_transform</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FrameDelta</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>c</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>e</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><name><name>model</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><name>a</name> <operator>*</operator> <name>d</name> <operator>-</operator> <name>b</name> <operator>*</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>translation</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>translation</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>hypot</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>rotation</name></name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>acos</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>scale</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>scale</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>delta</name> <operator>/</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>skew</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>atan</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>r</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>skew</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>c</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>d</name> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>rotation</name></name> <operator>=</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>scale</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>delta</name> <operator>/</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>scale</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>skew</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>skew</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>atan</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>*</operator> <name>c</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>d</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>s</name> <operator>*</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt> 

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>make_vectors_contig</name><parameter_list>(
<parameter><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size_x</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num_vectors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size_y</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size_x</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>MotionVector</name></type> <name>v</name> <init>= <expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches_host</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>size_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>should_consider</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches_contig_host</name><index>[<expr><name>num_vectors</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>num_vectors</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>num_vectors</name> <operator>==</operator> <name>MATCHES_CONTIG_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>num_vectors</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><name>num_vectors</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>float</name></type> <name>gaussian_for</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sigma</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">1.0f</literal> <operator>/</operator> <call><name>expf</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>x</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <name>sigma</name> <operator>*</operator> <name>sigma</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>make_gauss_kernel</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>gauss_kernel</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sigma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>gauss_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>window_half</name> <init>= <expr><name>length</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>gaussian_for</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>window_half</name></expr></argument>, <argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>gauss_sum</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gauss_kernel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>gauss_kernel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/=</operator> <name>gauss_sum</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>IterIndices</name></type> <name>start_end_for</name><parameter_list>(<parameter><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>IterIndices</name></type> <name>indices</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>indices</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>curr_frame_offset</name></name> <operator>-</operator> <operator>(</operator><name>length</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indices</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>curr_frame_offset</name></name> <operator>+</operator> <operator>(</operator><name>length</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>length</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>indices</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>ringbuf_float_at</name><parameter_list>(
<parameter><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name></decl></parameter>,
<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>clip_start</name></decl>, <decl><type ref="prev"/><name>clip_end</name></decl>, <decl><type ref="prev"/><name>offset_clipped</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clip_end</name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>clip_end</name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_window</name></name> <operator>-</operator> <operator>(</operator><call><name>av_fifo_space</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_start_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clip_start</name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_start_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>clip_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset_clipped</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(
<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>clip_start</name></expr></argument>,
<argument><expr><name>clip_end</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_peek_at</name><argument_list>(
<argument><expr><name>values</name></expr></argument>,
<argument><expr><name>val</name></expr></argument>,
<argument><expr><name>offset_clipped</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>float</name></type> <name>smooth</name><parameter_list>(
<parameter><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>gauss_kernel</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>max_val</name></decl></parameter>,
<parameter><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>values</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>new_large_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>new_small_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>new_best</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>old</name></decl>, <decl><type ref="prev"/><name>diff_between</name></decl>,
<decl><type ref="prev"/><name>percent_of_max</name></decl>, <decl><type ref="prev"/><name>inverted_percent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IterIndices</name></type> <name>indices</name> <init>= <expr><call><name>start_end_for</name><argument_list>(<argument><expr><name>deshake_ctx</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>large_sigma</name> <init>= <expr><literal type="number">40.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>small_sigma</name> <init>= <expr><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>best_sigma</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_percent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_sigma</name> <operator>=</operator> <operator>(</operator><name>large_sigma</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>*</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_percent</name></name> <operator>+</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>









<expr_stmt><expr><call><name>make_gauss_kernel</name><argument_list>(<argument><expr><name>gauss_kernel</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>large_sigma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>indices</name><operator>.</operator><name>start</name></name></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>indices</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ringbuf_float_at</name><argument_list>(<argument><expr><name>deshake_ctx</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_large_s</name> <operator>+=</operator> <name>old</name> <operator>*</operator> <name><name>gauss_kernel</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>make_gauss_kernel</name><argument_list>(<argument><expr><name>gauss_kernel</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>small_sigma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>indices</name><operator>.</operator><name>start</name></name></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>indices</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ringbuf_float_at</name><argument_list>(<argument><expr><name>deshake_ctx</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_small_s</name> <operator>+=</operator> <name>old</name> <operator>*</operator> <name><name>gauss_kernel</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>diff_between</name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name>new_large_s</name> <operator>-</operator> <name>new_small_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>percent_of_max</name> <operator>=</operator> <name>diff_between</name> <operator>/</operator> <name>max_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inverted_percent</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>percent_of_max</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_sigma</name> <operator>=</operator> <name>large_sigma</name> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><name>inverted_percent</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>make_gauss_kernel</name><argument_list>(<argument><expr><name>gauss_kernel</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>best_sigma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>indices</name><operator>.</operator><name>start</name></name></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>indices</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ringbuf_float_at</name><argument_list>(<argument><expr><name>deshake_ctx</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_best</name> <operator>+=</operator> <name>old</name> <operator>*</operator> <name><name>gauss_kernel</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>new_best</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>cl_float2</name></type> <name>transformed_point</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>transform</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cl_float2</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>*</operator> <name><name>transform</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>transform</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>transform</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>*</operator> <name><name>transform</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>transform</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>transform</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>transform_center_scale</name><parameter_list>(
<parameter><decl><type><name>float</name></type> <name>x_shift</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>y_shift</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>angle</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>scale_x</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>scale_y</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>center_w</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>center_h</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>cl_float2</name></type> <name>center_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>center_s_w</name></decl>, <decl><type ref="prev"/><name>center_s_h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_get_matrix</name><argument_list>(
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>scale_x</name></expr></argument>,
<argument><expr><name>scale_y</name></expr></argument>,
<argument><expr><name>matrix</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>center_s</name> <operator>=</operator> <call><name>transformed_point</name><argument_list>(<argument><expr><name>center_w</name></expr></argument>, <argument><expr><name>center_h</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>center_s_w</name> <operator>=</operator> <name>center_w</name> <operator>-</operator> <name><name>center_s</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>center_s_h</name> <operator>=</operator> <name>center_h</name> <operator>-</operator> <name><name>center_s</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_get_matrix</name><argument_list>(
<argument><expr><name>x_shift</name> <operator>+</operator> <name>center_s_w</name></expr></argument>,
<argument><expr><name>y_shift</name> <operator>+</operator> <name>center_s_h</name></expr></argument>,
<argument><expr><name>angle</name></expr></argument>,
<argument><expr><name>scale_x</name></expr></argument>,
<argument><expr><name>scale_y</name></expr></argument>,
<argument><expr><name>matrix</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>update_needed_crop</name><parameter_list>(
<parameter><decl><type><name>CropInfo</name><modifier>*</modifier></type> <name>crop</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>transform</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>frame_width</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>frame_height</name></decl></parameter>
)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>new_width</name></decl>, <decl><type ref="prev"/><name>new_height</name></decl>, <decl><type ref="prev"/><name>adjusted_width</name></decl>, <decl><type ref="prev"/><name>adjusted_height</name></decl>, <decl><type ref="prev"/><name>adjusted_x</name></decl>, <decl><type ref="prev"/><name>adjusted_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cl_float2</name></type> <name>top_left</name> <init>= <expr><call><name>transformed_point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_float2</name></type> <name>top_right</name> <init>= <expr><call><name>transformed_point</name><argument_list>(<argument><expr><name>frame_width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_float2</name></type> <name>bottom_left</name> <init>= <expr><call><name>transformed_point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frame_height</name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_float2</name></type> <name>bottom_right</name> <init>= <expr><call><name>transformed_point</name><argument_list>(<argument><expr><name>frame_width</name></expr></argument>, <argument><expr><name>frame_height</name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ar_h</name> <init>= <expr><name>frame_height</name> <operator>/</operator> <name>frame_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ar_w</name> <init>= <expr><name>frame_width</name> <operator>/</operator> <name>frame_height</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>frame_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>frame_height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX3</name><argument_list>(
<argument><expr><name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bottom_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX3</name><argument_list>(
<argument><expr><name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>top_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN3</name><argument_list>(
<argument><expr><name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>top_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN3</name><argument_list>(
<argument><expr><name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bottom_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>new_height</name> <operator>=</operator> <name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_width</name> <operator>=</operator> <name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>adjusted_width</name> <operator>=</operator> <name>new_height</name> <operator>*</operator> <name>ar_w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>adjusted_x</name> <operator>=</operator> <name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>adjusted_width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>adjusted_x</name> <operator>&gt;=</operator> <name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>adjusted_x</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>adjusted_height</name> <operator>=</operator> <name>new_width</name> <operator>*</operator> <name>ar_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>adjusted_y</name> <operator>=</operator> <name><name>crop</name><operator>-&gt;</operator><name>bottom_right</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>adjusted_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crop</name><operator>-&gt;</operator><name>top_left</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>adjusted_y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>deshake_opencl_uninit</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RingbufCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free_debug_matches</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ransac_err</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ransac_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>matches_host</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>matches_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>matches_contig_host</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>matches_contig_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>inliers</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>inliers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_framequeue_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel_grayscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel_harris_response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel_refine_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel_brief_descriptors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel_match_descriptors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel_crop_upscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CL_RELEASE_KERNEL</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kernel_draw_debug_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CL_RELEASE_QUEUE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>grayscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>harris_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>refined_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_refined_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>brief_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>descriptors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_descriptors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>matches_contig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform_uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_RELEASE_MEMORY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_model_matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_opencl_filter_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>deshake_opencl_init</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PointPair</name> <modifier>*</modifier></type><name>pattern_host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_ulong8</name></type> <name>zeroed_ulong8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFFrameQueueGlobal</name></type> <name>fqg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_format</name></type> <name>grayscale_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_image_desc</name></type> <name>grayscale_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_command_queue_properties</name></type> <name>queue_props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>disallowed_formats</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP</name></expr>,
<expr><name>AV_PIX_FMT_GBRP9BE</name></expr>,
<expr><name>AV_PIX_FMT_GBRP9LE</name></expr>,
<expr><name>AV_PIX_FMT_GBRP10BE</name></expr>,
<expr><name>AV_PIX_FMT_GBRP10LE</name></expr>,
<expr><name>AV_PIX_FMT_GBRP16BE</name></expr>,
<expr><name>AV_PIX_FMT_GBRP16LE</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP10BE</name></expr>,
<expr><name>AV_PIX_FMT_GBRAP10LE</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>image_grid_32</name> <init>= <expr><call><name>ROUNDED_UP_DIV</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ROUNDED_UP_DIV</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>descriptor_buf_size</name> <init>= <expr><name>image_grid_32</name> <operator>*</operator> <operator>(</operator><name>BREIFN</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>features_buf_size</name> <init>= <expr><name>image_grid_32</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cl_float2</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hw_frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>inlink</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>hw_frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_framequeue_global_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fqg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_framequeue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fqg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>smooth_window</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_rate</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>smooth_window_multiplier</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>curr_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zeroed_ulong8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cl_ulong8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>smooth_window</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ransac_err</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>MATCHES_CONTIG_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>ransac_err</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RingbufCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_fifo_alloc_array</name><argument_list>(
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>smooth_window</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>debug_matches</name></name> <operator>=</operator> <call><name>av_fifo_alloc_array</name><argument_list>(
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>smooth_window</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DebugMatches</name></expr></argument>)</argument_list></sizeof></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>debug_matches</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>curr_frame_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_start_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pattern_host</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>BREIFN</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PointPair</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pattern_host</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>matches_host</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>image_grid_32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>matches_host</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>matches_contig_host</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>MATCHES_CONTIG_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>matches_contig_host</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inliers</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>MATCHES_CONTIG_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inliers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>alfg</name></name></expr></argument>, <argument><expr><literal type="number">234342424</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BREIFN</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PointPair</name></type> <name>pair</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pair</name><operator>.</operator><name>p1</name><operator>.</operator><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>rand_in</name><argument_list>(<argument><expr><operator>-</operator><name>BRIEF_PATCH_SIZE_HALF</name></expr></argument>, <argument><expr><name>BRIEF_PATCH_SIZE_HALF</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>alfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>.</operator><name>p2</name><operator>.</operator><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>rand_in</name><argument_list>(<argument><expr><operator>-</operator><name>BRIEF_PATCH_SIZE_HALF</name></expr></argument>, <argument><expr><name>BRIEF_PATCH_SIZE_HALF</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>alfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pattern_host</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pair</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>==</operator> <name><name>disallowed_formats</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported format in deshake_opencl.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_load_program</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_opencl_source_deshake</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>queue_props</name> <operator>=</operator> <name>CL_QUEUE_PROFILING_ENABLE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>queue_props</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>command_queue</name></name> <operator>=</operator> <call><name>clCreateCommandQueue</name><argument_list>(
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>device_id</name></name></expr></argument>,
<argument><expr><name>queue_props</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create OpenCL command queue %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_CREATE_KERNEL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>grayscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_KERNEL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>harris_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_KERNEL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>refine_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_KERNEL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>brief_descriptors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_KERNEL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>match_descriptors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_KERNEL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_KERNEL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>crop_upscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CL_CREATE_KERNEL</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>draw_debug_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grayscale_format</name><operator>.</operator><name>image_channel_order</name></name> <operator>=</operator> <name>CL_R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grayscale_format</name><operator>.</operator><name>image_channel_data_type</name></name> <operator>=</operator> <name>CL_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>grayscale_desc</name> <operator>=</operator> <operator>(</operator><name>cl_image_desc</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>image_type</name> <operator>=</operator> <name>CL_MEM_OBJECT_IMAGE2D</name></expr>,
<expr><operator>.</operator><name>image_width</name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr>,
<expr><operator>.</operator><name>image_height</name> <operator>=</operator> <name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr>,
<expr><operator>.</operator><name>image_depth</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>image_array_size</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>image_row_pitch</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>image_slice_pitch</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>num_mip_levels</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>num_samples</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>grayscale</name></name> <operator>=</operator> <call><name>clCreateImage</name><argument_list>(
<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ocf</name><operator>.</operator><name>hwctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>grayscale_format</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>grayscale_desc</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cle</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to create grayscale image: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>harris_buf</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name> <operator>*</operator> <name><name>outlink</name><operator>-&gt;</operator><name>w</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>refined_features</name></expr></argument>, <argument><expr><name>features_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>prev_refined_features</name></expr></argument>, <argument><expr><name>features_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER_FLAGS</name><argument_list>(
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>brief_pattern</name></expr></argument>,
<argument><expr><name>CL_MEM_READ_WRITE</name> <operator>|</operator> <name>CL_MEM_COPY_HOST_PTR</name></expr></argument>,
<argument><expr><name>BREIFN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PointPair</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>pattern_host</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>descriptors</name></expr></argument>, <argument><expr><name>descriptor_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>prev_descriptors</name></expr></argument>, <argument><expr><name>descriptor_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>image_grid_32</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>matches_contig</name></expr></argument>, <argument><expr><name>MATCHES_CONTIG_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>transform_y</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>transform_uv</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>debug_matches</name></expr></argument>, <argument><expr><name>MATCHES_CONTIG_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_CREATE_BUFFER</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>debug_model_matches</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattern_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>transform_debug</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>new_vals</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>old_vals</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curr_frame</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Frame %d:\n"</literal>
<literal type="string">"\tframe moved from: %f x, %f y\n"</literal>
<literal type="string">"\t to: %f x, %f y\n"</literal>
<literal type="string">"\t rotated from: %f degrees\n"</literal>
<literal type="string">"\t to: %f degrees\n"</literal>
<literal type="string">"\t scaled from: %f x, %f y\n"</literal>
<literal type="string">"\t to: %f x, %f y\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"\tframe moved by: %f x, %f y\n"</literal>
<literal type="string">"\t rotated by: %f degrees\n"</literal>
<literal type="string">"\t scaled by: %f x, %f y\n"</literal></expr></argument>,
<argument><expr><name>curr_frame</name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">180.0</literal> <operator>/</operator> <name>M_PI</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">180.0</literal> <operator>/</operator> <name>M_PI</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">180.0</literal> <operator>/</operator> <name>M_PI</name><operator>)</operator> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">180.0</literal> <operator>/</operator> <name>M_PI</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cropped_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>transformed_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>new_vals</name><index>[<expr><name>RingbufCount</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>old_vals</name><index>[<expr><name>RingbufCount</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>transform_y</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>transform_uv</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>transform_crop_y</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>transform_crop_uv</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>transform_debug_rgb</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>global_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>transformed</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name><name>transforms</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CropInfo</name></type> <name><name>crops</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name>transform_event</name></decl>, <decl><type ref="prev"/><name>crop_upscale_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DebugMatches</name></type> <name>debug_matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>num_model_matches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>center_w</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>center_h</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_width</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_height</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>center_w_chroma</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>chroma_width</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>center_h_chroma</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>chroma_height</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>luma_w_over_chroma_w</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>chroma_width</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>luma_h_over_chroma_h</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>chroma_height</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>debug_matches</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>debug_matches</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DebugMatches</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_frame</name><operator>-&gt;</operator><name>pkt_duration</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>pkt_duration</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>input_frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name>duration</name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RingbufCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_generic_peek_at</name><argument_list>(
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>old_vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>curr_frame_offset</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>tripod_mode</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>=</operator> <call><name>smooth</name><argument_list>(
<argument><expr><name>deshake_ctx</name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_window</name></name></expr></argument>,
<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>=</operator> <call><name>smooth</name><argument_list>(
<argument><expr><name>deshake_ctx</name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_window</name></name></expr></argument>,
<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>RingbufY</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>=</operator> <call><name>smooth</name><argument_list>(
<argument><expr><name>deshake_ctx</name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_window</name></name></expr></argument>,
<argument><expr><name>M_PI</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>RingbufRot</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>=</operator> <call><name>smooth</name><argument_list>(
<argument><expr><name>deshake_ctx</name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_window</name></name></expr></argument>,
<argument><expr><literal type="number">2.0f</literal></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>=</operator> <call><name>smooth</name><argument_list>(
<argument><expr><name>deshake_ctx</name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>gauss_kernel</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_window</name></name></expr></argument>,
<argument><expr><literal type="number">2.0f</literal></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>transform_center_scale</name><argument_list>(
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>,
<argument><expr><name>center_w</name></expr></argument>,
<argument><expr><name>center_h</name></expr></argument>,
<argument><expr><name>transform_y</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transform_center_scale</name><argument_list>(
<argument><expr><operator>(</operator><name><name>old_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>luma_w_over_chroma_w</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>old_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>luma_h_over_chroma_h</name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>,
<argument><expr><name>center_w_chroma</name></expr></argument>,
<argument><expr><name>center_h_chroma</name></expr></argument>,
<argument><expr><name>transform_uv</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_BLOCKING_WRITE_BUFFER</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>transform_y</name></name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>transform_y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_BLOCKING_WRITE_BUFFER</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>transform_uv</name></name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>transform_uv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>transform_debug</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>new_vals</name></expr></argument>, <argument><expr><name>old_vals</name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cropped_frame</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cropped_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>transformed_frame</name> <operator>=</operator> <call><name>ff_get_video_buffer</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>outlink</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transformed_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>transforms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>transform_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>transforms</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>transforms</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>transform_uv</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>transformed_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>transformed</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>transformed_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transformed</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_work_size_from_image</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>global_work</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<macro><name>CL_RUN_KERNEL_WITH_ARGS</name><argument_list>(
<argument>deshake_ctx-&gt;command_queue</argument>,
<argument>deshake_ctx-&gt;kernel_transform</argument>,
<argument>global_work</argument>,
<argument>NULL</argument>,
<argument>&amp;transform_event</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;src }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;transformed }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;transforms[p] }</argument>,
)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>is_yuv</name></name> <operator>&amp;&amp;</operator> <name><name>debug_matches</name><operator>.</operator><name>num_matches</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CL_BLOCKING_WRITE_BUFFER</name><argument_list>(
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_matches</name></name></expr></argument>,
<argument><expr><name><name>debug_matches</name><operator>.</operator><name>num_matches</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>debug_matches</name><operator>.</operator><name>matches</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_BLOCKING_WRITE_BUFFER</name><argument_list>(
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_model_matches</name></name></expr></argument>,
<argument><expr><name><name>debug_matches</name><operator>.</operator><name>num_model_matches</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>debug_matches</name><operator>.</operator><name>model_matches</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_model_matches</name> <operator>=</operator> <name><name>debug_matches</name><operator>.</operator><name>num_model_matches</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>transform_center_scale</name><argument_list>(
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>-</operator> <name><name>old_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>-</operator> <name><name>old_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>-</operator> <name><name>old_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>/</operator> <name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>old_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>/</operator> <name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>,
<argument><expr><name>center_w</name></expr></argument>,
<argument><expr><name>center_h</name></expr></argument>,
<argument><expr><name>transform_debug_rgb</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CL_BLOCKING_WRITE_BUFFER</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>transform_y</name></name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>transform_debug_rgb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>transformed</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>transformed_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<macro><name>CL_RUN_KERNEL_WITH_ARGS</name><argument_list>(
<argument>deshake_ctx-&gt;command_queue</argument>,
<argument>deshake_ctx-&gt;kernel_draw_debug_info</argument>,
<argument>(size_t[]){ debug_matches.num_matches }</argument>,
<argument>NULL</argument>,
<argument>NULL</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;transformed }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;debug_matches }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;debug_model_matches }</argument>,
<argument>{ sizeof(cl_int)</argument>, <argument>&amp;num_model_matches }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;transform_y }</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>should_crop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>transform_center_scale</name><argument_list>(
<argument><expr><operator>(</operator><name><name>old_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>old_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>old_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>,
<argument><expr><name>center_w</name></expr></argument>,
<argument><expr><name>center_h</name></expr></argument>,
<argument><expr><name>transform_crop_y</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_needed_crop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>crop_y</name></name></expr></argument>, <argument><expr><name>transform_crop_y</name></expr></argument>, <argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>transform_center_scale</name><argument_list>(
<argument><expr><operator>(</operator><name><name>old_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>luma_w_over_chroma_w</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name><name>old_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>luma_h_over_chroma_h</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name><name>old_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>-</operator> <name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>/</operator> <name><name>old_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name></expr></argument>,
<argument><expr><name>center_w_chroma</name></expr></argument>,
<argument><expr><name>center_h_chroma</name></expr></argument>,
<argument><expr><name>transform_crop_uv</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_needed_crop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>crop_uv</name></name></expr></argument>, <argument><expr><name>transform_crop_uv</name></expr></argument>, <argument><expr><name>chroma_width</name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crops</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>crop_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crops</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>crops</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>crop_uv</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>cropped_frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>cropped_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>transformed</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>transformed_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_work_size_from_image</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>global_work</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<macro><name>CL_RUN_KERNEL_WITH_ARGS</name><argument_list>(
<argument>deshake_ctx-&gt;command_queue</argument>,
<argument>deshake_ctx-&gt;kernel_crop_upscale</argument>,
<argument>global_work</argument>,
<argument>NULL</argument>,
<argument>&amp;crop_upscale_event</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;transformed }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;dst }</argument>,
<argument>{ sizeof(cl_float2)</argument>, <argument>&amp;crops[p].top_left }</argument>,
<argument>{ sizeof(cl_float2)</argument>, <argument>&amp;crops[p].bottom_right }</argument>,
)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name> <operator>&lt;</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_window</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><operator>++</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>curr_frame_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>--</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name> <operator>==</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>curr_frame_offset</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_start_offset</name></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>curr_frame_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_start_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>--</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_start_offset</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>transform_time</name></name> <operator>+=</operator> <call><name>ff_opencl_get_event_time</name><argument_list>(<argument><expr><name>transform_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>should_crop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>crop_upscale_time</name></name> <operator>+=</operator> <call><name>ff_opencl_get_event_time</name><argument_list>(<argument><expr><name>crop_upscale_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>debug_matches</name><operator>.</operator><name>matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>should_crop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>cropped_frame</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transformed_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>cropped_frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name>transformed_frame</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cropped_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_filter_frame</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>transformed_frame</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>clFinish</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>debug_matches</name><operator>.</operator><name>matches</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>debug_matches</name><operator>.</operator><name>matches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transformed_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cropped_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>queue_frame</name><parameter_list>(<parameter><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>input_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>link</name><operator>-&gt;</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_vectors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_inliers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_int</name></type> <name>cle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameDelta</name></type> <name>relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SimilarityMatrix</name></type> <name>model</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>global_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>harris_global_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>grid_32_global_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grid_32_h</name></decl>, <decl><type ref="prev"/><name>grid_32_w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>local_work</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_mem</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>prev_vals</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>new_vals</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cl_event</name></type> <name>grayscale_event</name></decl>, <decl><type ref="prev"/><name>harris_response_event</name></decl>, <decl><type ref="prev"/><name>refine_features_event</name></decl>,
<decl><type ref="prev"/><name>brief_event</name></decl>, <decl><type ref="prev"/><name>match_descriptors_event</name></decl>, <decl><type ref="prev"/><name>read_buf_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DebugMatches</name></type> <name>debug_matches</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_vectors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>local_work</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>local_work</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_work_size_from_image</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>global_work</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_work_size_from_image</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>harris_global_work</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_opencl_filter_work_size_from_image</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>grid_32_global_work</name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>grid_32_global_work</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid_32_global_work</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>grid_32_h</name> <operator>=</operator> <call><name>ROUNDED_UP_DIV</name><argument_list>(<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>grid_32_w</name> <operator>=</operator> <call><name>ROUNDED_UP_DIV</name><argument_list>(<argument><expr><name><name>input_frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>grayscale</name></name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>cl_mem</name><operator>)</operator><name><name>input_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<macro><name>CL_RUN_KERNEL_WITH_ARGS</name><argument_list>(
<argument>deshake_ctx-&gt;command_queue</argument>,
<argument>deshake_ctx-&gt;kernel_grayscale</argument>,
<argument>global_work</argument>,
<argument>NULL</argument>,
<argument>&amp;grayscale_event</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;src }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;grayscale }</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>

<macro><name>CL_RUN_KERNEL_WITH_ARGS</name><argument_list>(
<argument>deshake_ctx-&gt;command_queue</argument>,
<argument>deshake_ctx-&gt;kernel_harris_response</argument>,
<argument>harris_global_work</argument>,
<argument>local_work</argument>,
<argument>&amp;harris_response_event</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;grayscale }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;harris_buf }</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>CL_RUN_KERNEL_WITH_ARGS</name><argument_list>(
<argument>deshake_ctx-&gt;command_queue</argument>,
<argument>deshake_ctx-&gt;kernel_refine_features</argument>,
<argument>grid_32_global_work</argument>,
<argument>NULL</argument>,
<argument>&amp;refine_features_event</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;grayscale }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;harris_buf }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;refined_features }</argument>,
<argument>{ sizeof(cl_int)</argument>, <argument>&amp;deshake_ctx-&gt;refine_features }</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>CL_RUN_KERNEL_WITH_ARGS</name><argument_list>(
<argument>deshake_ctx-&gt;command_queue</argument>,
<argument>deshake_ctx-&gt;kernel_brief_descriptors</argument>,
<argument>grid_32_global_work</argument>,
<argument>NULL</argument>,
<argument>&amp;brief_event</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;grayscale }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;refined_features }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;descriptors }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;brief_pattern}</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<goto>goto <name>no_motion_data</name>;</goto>
</block_content>}</block></if></if_stmt>

<macro><name>CL_RUN_KERNEL_WITH_ARGS</name><argument_list>(
<argument>deshake_ctx-&gt;command_queue</argument>,
<argument>deshake_ctx-&gt;kernel_match_descriptors</argument>,
<argument>grid_32_global_work</argument>,
<argument>NULL</argument>,
<argument>&amp;match_descriptors_event</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;prev_refined_features }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;refined_features }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;descriptors }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;prev_descriptors }</argument>,
<argument>{ sizeof(cl_mem)</argument>, <argument>&amp;deshake_ctx-&gt;matches }</argument>
)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>cle</name> <operator>=</operator> <call><name>clEnqueueReadBuffer</name><argument_list>(
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches</name></name></expr></argument>,
<argument><expr><name>CL_TRUE</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>grid_32_h</name> <operator>*</operator> <name>grid_32_w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches_host</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>read_buf_event</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CL_FAIL_ON_ERROR</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Failed to read matches to host: %d.\n"</literal></expr></argument>, <argument><expr><name>cle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_vectors</name> <operator>=</operator> <call><name>make_vectors_contig</name><argument_list>(<argument><expr><name>deshake_ctx</name></expr></argument>, <argument><expr><name>grid_32_h</name></expr></argument>, <argument><expr><name>grid_32_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_vectors</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>












<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>data_end_offset</name></name> <operator>=</operator>
<call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<goto>goto <name>no_motion_data</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>estimate_affine_2d</name><argument_list>(
<argument><expr><name>deshake_ctx</name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches_contig_host</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>debug_matches</name></expr></argument>,
<argument><expr><name>num_vectors</name></expr></argument>,
<argument><expr><name><name>model</name><operator>.</operator><name>matrix</name></name></expr></argument>,
<argument><expr><literal type="number">10.0</literal></expr></argument>,
<argument><expr><literal type="number">3000</literal></expr></argument>,
<argument><expr><literal type="number">0.999999999999</literal></expr></argument>
)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>no_motion_data</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_vectors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches_contig_host</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>should_consider</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>inliers</name><index>[<expr><name>num_inliers</name></expr>]</index></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches_contig_host</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_inliers</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>minimize_error</name><argument_list>(
<argument><expr><name>deshake_ctx</name></expr></argument>,
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>inliers</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>debug_matches</name></expr></argument>,
<argument><expr><name>num_inliers</name></expr></argument>,
<argument><expr><name><name>model</name><operator>.</operator><name>matrix</name></name></expr></argument>,
<argument><expr><literal type="number">400</literal></expr></argument>
)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>no_motion_data</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>relative</name> <operator>=</operator> <call><name>decompose_transform</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RingbufCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_generic_peek_at</name><argument_list>(
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>prev_vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>=</operator> <name><name>prev_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>+</operator> <name><name>relative</name><operator>.</operator><name>translation</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>=</operator> <name><name>prev_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>+</operator> <name><name>relative</name><operator>.</operator><name>translation</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>=</operator> <name><name>prev_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>+</operator> <name><name>relative</name><operator>.</operator><name>rotation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>=</operator> <name><name>prev_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>/</operator> <name><name>relative</name><operator>.</operator><name>scale</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>=</operator> <name><name>prev_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>/</operator> <name><name>relative</name><operator>.</operator><name>scale</name><operator>.</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>is_yuv</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>grayscale_time</name></name> <operator>+=</operator> <call><name>ff_opencl_get_event_time</name><argument_list>(<argument><expr><name>grayscale_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>harris_response_time</name></name> <operator>+=</operator> <call><name>ff_opencl_get_event_time</name><argument_list>(<argument><expr><name>harris_response_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>refine_features_time</name></name> <operator>+=</operator> <call><name>ff_opencl_get_event_time</name><argument_list>(<argument><expr><name>refine_features_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>brief_descriptors_time</name></name> <operator>+=</operator> <call><name>ff_opencl_get_event_time</name><argument_list>(<argument><expr><name>brief_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>match_descriptors_time</name></name> <operator>+=</operator> <call><name>ff_opencl_get_event_time</name><argument_list>(<argument><expr><name>match_descriptors_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>read_buf_time</name></name> <operator>+=</operator> <call><name>ff_opencl_get_event_time</name><argument_list>(<argument><expr><name>read_buf_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<goto>goto <name>end</name>;</goto>

<label><name>no_motion_data</name>:</label>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufX</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufY</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufRot</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleX</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_vals</name><index>[<expr><name>RingbufScaleY</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_vectors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches_contig_host</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>should_consider</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>debug_matches</name><operator>.</operator><name>num_model_matches</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"\n[ALERT] No motion data found in queue_frame, motion reset to 0\n\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<goto>goto <name>end</name>;</goto>

<label><name>end</name>:</label>


<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>prev_descriptors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>prev_descriptors</name></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>descriptors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>descriptors</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>


<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>prev_refined_features</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>prev_refined_features</name></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>refined_features</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>refined_features</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_vectors</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>debug_matches</name><operator>.</operator><name>matches</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>debug_matches</name><operator>.</operator><name>matches</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_vectors</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>debug_matches</name><operator>.</operator><name>matches</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_vectors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>debug_matches</name><operator>.</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>matches_contig_host</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>debug_matches</name><operator>.</operator><name>num_matches</name></name> <operator>=</operator> <name>num_vectors</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>debug_matches</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>debug_matches</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DebugMatches</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RingbufCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(
<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>new_vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>ff_framequeue_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>fq</name></name></expr></argument>, <argument><expr><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>clFinish</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>command_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>activate</name><parameter_list>(<parameter><decl><type><name>AVFilterContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>inlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFilterLink</name> <modifier>*</modifier></type><name>outlink</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeshakeOpenCLContext</name> <modifier>*</modifier></type><name>deshake_ctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_FILTER_FORWARD_STATUS_BACK</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_inlink_consume_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deshake_opencl_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>RingbufX</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RingbufCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_drain</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>queue_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>ff_framequeue_queued_frames</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>fq</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>deshake_ctx</name><operator>-&gt;</operator><name>smooth_window</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><call><name>ff_framequeue_take</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>fq</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <call><name>ff_inlink_acknowledge_status</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><call><name>ff_framequeue_queued_frames</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>fq</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RingbufCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_drain</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>abs_motion</name><operator>.</operator><name>ringbuffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>filter_frame</name><argument_list>(<argument><expr><name>inlink</name></expr></argument>, <argument><expr><call><name>ff_framequeue_take</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>fq</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>debug_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Average kernel execution times:\n"</literal>
<literal type="string">"\t grayscale: %0.3f ms\n"</literal>
<literal type="string">"\t harris_response: %0.3f ms\n"</literal>
<literal type="string">"\t refine_features: %0.3f ms\n"</literal>
<literal type="string">"\tbrief_descriptors: %0.3f ms\n"</literal>
<literal type="string">"\tmatch_descriptors: %0.3f ms\n"</literal>
<literal type="string">"\t transform: %0.3f ms\n"</literal>
<literal type="string">"\t crop_upscale: %0.3f ms\n"</literal>
<literal type="string">"Average buffer read times:\n"</literal>
<literal type="string">"\t features buf: %0.3f ms\n"</literal></expr></argument>,
<argument><expr><call><name>averaged_event_time_ms</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>grayscale_time</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>averaged_event_time_ms</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>harris_response_time</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>averaged_event_time_ms</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>refine_features_time</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>averaged_event_time_ms</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>brief_descriptors_time</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>averaged_event_time_ms</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>match_descriptors_time</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>averaged_event_time_ms</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>transform_time</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>averaged_event_time_ms</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>crop_upscale_time</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>averaged_event_time_ms</name><argument_list>(<argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>read_buf_time</name></name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_outlink_set_status</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>AVERROR_EOF</name></expr></argument>, <argument><expr><name><name>deshake_ctx</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>deshake_ctx</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FF_FILTER_FORWARD_WANTED</name><argument_list>(<argument><expr><name>outlink</name></expr></argument>, <argument><expr><name>inlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>FFERROR_NOT_READY</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>deshake_opencl_inputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_config_input</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVFilterPad</name></type> <name><name>deshake_opencl_outputs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"default"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>config_props</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_config_output</name></expr>,
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DeshakeOpenCLContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_FILTERING_PARAM|AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>deshake_opencl_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="string">"tripod"</literal></expr>, <expr><literal type="string">"simulates a tripod by preventing any camera movement whatsoever "</literal>
<literal type="string">"from the original frame"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tripod_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="string">"debug"</literal></expr>, <expr><literal type="string">"turn on additional debugging information"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>debug_on</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="string">"adaptive_crop"</literal></expr>, <expr><literal type="string">"attempt to subtly crop borders to reduce mirrored content"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>should_crop</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="string">"refine_features"</literal></expr>, <expr><literal type="string">"refine feature point locations at a sub-pixel level"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>refine_features</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="string">"smooth_strength"</literal></expr>, <expr><literal type="string">"smoothing strength (0 attempts to adaptively determine optimal strength)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>smooth_percent</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>}</block></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><name>FLAGS</name></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="string">"smooth_window_multiplier"</literal></expr>, <expr><literal type="string">"multiplier for number of frames to buffer for motion data"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>smooth_window_multiplier</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">2.0</literal></expr>}</block></expr>, <expr><literal type="number">0.1</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><name>FLAGS</name></expr>
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVFILTER_DEFINE_CLASS</name><argument_list>(<argument><expr><name>deshake_opencl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFilter</name></type> <name>ff_vf_deshake_opencl</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"deshake_opencl"</literal></expr>,
<expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Feature-point based video stabilization filter"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DeshakeOpenCLContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>deshake_opencl_class</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>deshake_opencl_uninit</name></expr>,
<expr><operator>.</operator><name>query_formats</name> <operator>=</operator> <operator>&amp;</operator><name>ff_opencl_filter_query_formats</name></expr>,
<expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>activate</name></expr>,
<expr><operator>.</operator><name>inputs</name> <operator>=</operator> <name>deshake_opencl_inputs</name></expr>,
<expr><operator>.</operator><name>outputs</name> <operator>=</operator> <name>deshake_opencl_outputs</name></expr>,
<expr><operator>.</operator><name>flags_internal</name> <operator>=</operator> <name>FF_FILTER_FLAG_HWFRAME_AWARE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
