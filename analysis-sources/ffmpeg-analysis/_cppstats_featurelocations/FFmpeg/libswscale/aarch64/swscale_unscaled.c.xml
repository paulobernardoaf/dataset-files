<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\aarch64\swscale_unscaled.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aarch64/cpu.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV_TO_RGB_TABLE</name></cpp:macro> <cpp:value>c-&gt;yuv2rgb_v2r_coeff, c-&gt;yuv2rgb_u2g_coeff, c-&gt;yuv2rgb_v2g_coeff, c-&gt;yuv2rgb_u2b_coeff,</cpp:value></cpp:define> 





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FF_YUVX_TO_RGBX_FUNCS</name><parameter_list>(<parameter><type><name>ifmt</name></type></parameter>, <parameter><type><name>ofmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int ff_##ifmt##_to_##ofmt##_neon(int w, int h, uint8_t *dst, int linesize, const uint8_t *srcY, int linesizeY, const uint8_t *srcU, int linesizeU, const uint8_t *srcV, int linesizeV, const int16_t *table, int y_offset, int y_coeff); static int ifmt##_to_##ofmt##_neon_wrapper(SwsContext *c, const uint8_t *src[], int srcStride[], int srcSliceY, int srcSliceH, uint8_t *dst[], int dstStride[]) { const int16_t yuv2rgb_table[] = { YUV_TO_RGB_TABLE }; ff_##ifmt##_to_##ofmt##_neon(c-&gt;srcW, srcSliceH, dst[0] + srcSliceY * dstStride[0], dstStride[0], src[0], srcStride[0], src[1], srcStride[1], src[2], srcStride[2], yuv2rgb_table, c-&gt;yuv2rgb_y_offset &gt;&gt; 6, c-&gt;yuv2rgb_y_coeff); return 0; }</cpp:value></cpp:define> 

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FF_YUVX_TO_ALL_RGBX_FUNCS</name><parameter_list>(<parameter><type><name>yuvx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DECLARE_FF_YUVX_TO_RGBX_FUNCS(yuvx, argb) DECLARE_FF_YUVX_TO_RGBX_FUNCS(yuvx, rgba) DECLARE_FF_YUVX_TO_RGBX_FUNCS(yuvx, abgr) DECLARE_FF_YUVX_TO_RGBX_FUNCS(yuvx, bgra)</cpp:value></cpp:define> 





<macro><name>DECLARE_FF_YUVX_TO_ALL_RGBX_FUNCS</name><argument_list>(<argument>yuv420p</argument>)</argument_list></macro>
<macro><name>DECLARE_FF_YUVX_TO_ALL_RGBX_FUNCS</name><argument_list>(<argument>yuv422p</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FF_NVX_TO_RGBX_FUNCS</name><parameter_list>(<parameter><type><name>ifmt</name></type></parameter>, <parameter><type><name>ofmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int ff_##ifmt##_to_##ofmt##_neon(int w, int h, uint8_t *dst, int linesize, const uint8_t *srcY, int linesizeY, const uint8_t *srcC, int linesizeC, const int16_t *table, int y_offset, int y_coeff); static int ifmt##_to_##ofmt##_neon_wrapper(SwsContext *c, const uint8_t *src[], int srcStride[], int srcSliceY, int srcSliceH, uint8_t *dst[], int dstStride[]) { const int16_t yuv2rgb_table[] = { YUV_TO_RGB_TABLE }; ff_##ifmt##_to_##ofmt##_neon(c-&gt;srcW, srcSliceH, dst[0] + srcSliceY * dstStride[0], dstStride[0], src[0], srcStride[0], src[1], srcStride[1], yuv2rgb_table, c-&gt;yuv2rgb_y_offset &gt;&gt; 6, c-&gt;yuv2rgb_y_coeff); return 0; }</cpp:value></cpp:define> 























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FF_NVX_TO_ALL_RGBX_FUNCS</name><parameter_list>(<parameter><type><name>nvx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DECLARE_FF_NVX_TO_RGBX_FUNCS(nvx, argb) DECLARE_FF_NVX_TO_RGBX_FUNCS(nvx, rgba) DECLARE_FF_NVX_TO_RGBX_FUNCS(nvx, abgr) DECLARE_FF_NVX_TO_RGBX_FUNCS(nvx, bgra)</cpp:value></cpp:define> 





<macro><name>DECLARE_FF_NVX_TO_ALL_RGBX_FUNCS</name><argument_list>(<argument>nv12</argument>)</argument_list></macro>
<macro><name>DECLARE_FF_NVX_TO_ALL_RGBX_FUNCS</name><argument_list>(<argument>nv21</argument>)</argument_list></macro>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FF_NVX_TO_RGBX_FUNC</name><parameter_list>(<parameter><type><name>ifmt</name></type></parameter>, <parameter><type><name>IFMT</name></type></parameter>, <parameter><type><name>ofmt</name></type></parameter>, <parameter><type><name>OFMT</name></type></parameter>, <parameter><type><name>accurate_rnd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (c-&gt;srcFormat == AV_PIX_FMT_##IFMT &amp;&amp; c-&gt;dstFormat == AV_PIX_FMT_##OFMT &amp;&amp; !(c-&gt;srcH &amp; 1) &amp;&amp; !(c-&gt;srcW &amp; 15) &amp;&amp; !accurate_rnd) c-&gt;swscale = ifmt##_to_##ofmt##_neon_wrapper; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FF_NVX_TO_ALL_RGBX_FUNC</name><parameter_list>(<parameter><type><name>nvx</name></type></parameter>, <parameter><type><name>NVX</name></type></parameter>, <parameter><type><name>accurate_rnd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SET_FF_NVX_TO_RGBX_FUNC(nvx, NVX, argb, ARGB, accurate_rnd); SET_FF_NVX_TO_RGBX_FUNC(nvx, NVX, rgba, RGBA, accurate_rnd); SET_FF_NVX_TO_RGBX_FUNC(nvx, NVX, abgr, ABGR, accurate_rnd); SET_FF_NVX_TO_RGBX_FUNC(nvx, NVX, bgra, BGRA, accurate_rnd); } while (0)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type> <name>get_unscaled_swscale_neon</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>accurate_rnd</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_ACCURATE_RND</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SET_FF_NVX_TO_ALL_RGBX_FUNC</name><argument_list>(<argument><expr><name>nv12</name></expr></argument>, <argument><expr><name>NV12</name></expr></argument>, <argument><expr><name>accurate_rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FF_NVX_TO_ALL_RGBX_FUNC</name><argument_list>(<argument><expr><name>nv21</name></expr></argument>, <argument><expr><name>NV21</name></expr></argument>, <argument><expr><name>accurate_rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FF_NVX_TO_ALL_RGBX_FUNC</name><argument_list>(<argument><expr><name>yuv420p</name></expr></argument>, <argument><expr><name>YUV420P</name></expr></argument>, <argument><expr><name>accurate_rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_FF_NVX_TO_ALL_RGBX_FUNC</name><argument_list>(<argument><expr><name>yuv422p</name></expr></argument>, <argument><expr><name>YUV422P</name></expr></argument>, <argument><expr><name>accurate_rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_get_unscaled_swscale_aarch64</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_unscaled_swscale_neon</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
