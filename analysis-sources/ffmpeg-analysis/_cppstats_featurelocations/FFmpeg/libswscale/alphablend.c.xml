<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\alphablend.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_sws_alphablendaway</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_components</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane_count</name> <init>= <expr><ternary><condition><expr><call><name>isGray</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sixteen_bits</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>target_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>alphablend</name></name> <operator>==</operator> <name>SWS_ALPHA_BLEND_CHECKERBOARD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>target_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>plane</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>plane</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>plane_count</name> <operator>==</operator> <name>nb_components</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name>plane</name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_subsample</name> <init>= <expr><ternary><condition><expr><name>plane</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_subsample</name> <init>= <expr><ternary><condition><expr><name>plane</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>srcSliceY</name> <operator>&gt;&gt;</operator> <name>y_subsample</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>y_subsample</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x_subsample</name> <operator>||</operator> <name>y_subsample</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sixteen_bits</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>alpha_step</name> <init>= <expr><name><name>srcStride</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>srcStride</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>y_subsample</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dst</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>!</operator><name>HAVE_BIGENDIAN</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y_subsample</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
<name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>alpha_step</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>alpha_step</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><name>alpha</name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>max</name><operator>-</operator><name>alpha</name><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>u</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y_subsample</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
<call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>alpha_step</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>alpha_step</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><name>alpha</name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>max</name><operator>-</operator><name>alpha</name><operator>)</operator> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>u</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>alpha_step</name> <init>= <expr><name><name>srcStride</name><index>[<expr><name>plane_count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>src</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>src</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>srcStride</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>y_subsample</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dst</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>y_subsample</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
<name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>alpha_step</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>alpha_step</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><name>alpha</name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>-</operator><name>alpha</name><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">257</literal><operator>*</operator><name>u</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sixteen_bits</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dst</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>!</operator><name>HAVE_BIGENDIAN</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name> <init>= <expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>max</name><operator>-</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>u</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>aswap</name> <init>=<expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name> <init>= <expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><name>aswap</name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>max</name><operator>-</operator><name>aswap</name><operator>)</operator> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>u</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>src</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>src</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><name>plane_count</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dst</name><index>[<expr><name>plane</name></expr> ]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name> <init>= <expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>-</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">257</literal><operator>*</operator><name>u</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_pos</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane_count</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>srcSliceY</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sixteen_bits</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>!</operator><name>alpha_pos</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>alpha_pos</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator> <name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>!</operator><name>HAVE_BIGENDIAN</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_index</name> <init>= <expr><operator>(</operator><name>plane_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name> <init>= <expr><name><name>s</name><index>[<expr><name>x_index</name> <operator>+</operator> <name>plane</name></expr>]</index></name><operator>*</operator><name><name>a</name><index>[<expr><name>x_index</name></expr>]</index></name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>max</name><operator>-</operator><name><name>a</name><index>[<expr><name>x_index</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>plane_count</name><operator>*</operator><name>x</name> <operator>+</operator> <name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>u</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_index</name> <init>= <expr><operator>(</operator><name>plane_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>aswap</name> <init>=<expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name> <init>= <expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>x_index</name> <operator>+</operator> <name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><name>aswap</name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>max</name><operator>-</operator><name>aswap</name><operator>)</operator> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>plane_count</name><operator>*</operator><name>x</name> <operator>+</operator> <name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>u</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>!</operator><name>alpha_pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>alpha_pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_index</name> <init>= <expr><operator>(</operator><name>plane_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name> <init>= <expr><name><name>s</name><index>[<expr><name>x_index</name> <operator>+</operator> <name>plane</name></expr>]</index></name><operator>*</operator><name><name>a</name><index>[<expr><name>x_index</name></expr>]</index></name> <operator>+</operator> <name><name>target_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>plane</name></expr>]</index></name><operator>*</operator><operator>(</operator><literal type="number">255</literal><operator>-</operator><name><name>a</name><index>[<expr><name>x_index</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>plane_count</name><operator>*</operator><name>x</name> <operator>+</operator> <name>plane</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">257</literal><operator>*</operator><name>u</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
