<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\x86\hscale_fast_bilinear_simd.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../swscale_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET</name></cpp:macro> <cpp:value>0xC3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFETCH</name></cpp:macro> <cpp:value>"prefetchnta"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<function><type><name>av_cold</name> <name>int</name></type> <name>ff_init_hscaler_mmxext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>filterCode</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>numSplits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fragmentA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>imm8OfPShufW1A</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>imm8OfPShufW2A</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>fragmentLengthA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fragmentB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>imm8OfPShufW1B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>imm8OfPShufW2B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>fragmentLengthB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fragmentPos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>










<asm>__asm__ <specifier>volatile</specifier> (
"jmp 9f \n\t"

"0: \n\t"
"movq (%%"FF_REG_d", %%"FF_REG_a"), %%mm3 \n\t"
"movd (%%"FF_REG_c", %%"FF_REG_S"), %%mm0 \n\t"
"movd 1(%%"FF_REG_c", %%"FF_REG_S"), %%mm1 \n\t"
"punpcklbw %%mm7, %%mm1 \n\t"
"punpcklbw %%mm7, %%mm0 \n\t"
"pshufw $0xFF, %%mm1, %%mm1 \n\t"
"1: \n\t"
"pshufw $0xFF, %%mm0, %%mm0 \n\t"
"2: \n\t"
"psubw %%mm1, %%mm0 \n\t"
"movl 8(%%"FF_REG_b", %%"FF_REG_a"), %%esi \n\t"
"pmullw %%mm3, %%mm0 \n\t"
"psllw $7, %%mm1 \n\t"
"paddw %%mm1, %%mm0 \n\t"

"movq %%mm0, (%%"FF_REG_D", %%"FF_REG_a") \n\t"

"add $8, %%"FF_REG_a" \n\t"

"9: \n\t"
"lea " LOCAL_MANGLE(0b) ", %0 \n\t"
"lea " LOCAL_MANGLE(1b) ", %1 \n\t"
"lea " LOCAL_MANGLE(2b) ", %2 \n\t"
"dec %1 \n\t"
"dec %2 \n\t"
"sub %0, %1 \n\t"
"sub %0, %2 \n\t"
"lea " LOCAL_MANGLE(9b) ", %3 \n\t"
"sub %0, %3 \n\t"


: "=r" (fragmentA), "=r" (imm8OfPShufW1A), "=r" (imm8OfPShufW2A),
"=r" (fragmentLengthA)
);</asm>

<asm>__asm__ <specifier>volatile</specifier> (
"jmp 9f \n\t"

"0: \n\t"
"movq (%%"FF_REG_d", %%"FF_REG_a"), %%mm3 \n\t"
"movd (%%"FF_REG_c", %%"FF_REG_S"), %%mm0 \n\t"
"punpcklbw %%mm7, %%mm0 \n\t"
"pshufw $0xFF, %%mm0, %%mm1 \n\t"
"1: \n\t"
"pshufw $0xFF, %%mm0, %%mm0 \n\t"
"2: \n\t"
"psubw %%mm1, %%mm0 \n\t"
"movl 8(%%"FF_REG_b", %%"FF_REG_a"), %%esi \n\t"
"pmullw %%mm3, %%mm0 \n\t"
"psllw $7, %%mm1 \n\t"
"paddw %%mm1, %%mm0 \n\t"

"movq %%mm0, (%%"FF_REG_D", %%"FF_REG_a") \n\t"

"add $8, %%"FF_REG_a" \n\t"

"9: \n\t"
"lea " LOCAL_MANGLE(0b) ", %0 \n\t"
"lea " LOCAL_MANGLE(1b) ", %1 \n\t"
"lea " LOCAL_MANGLE(2b) ", %2 \n\t"
"dec %1 \n\t"
"dec %2 \n\t"
"sub %0, %1 \n\t"
"sub %0, %2 \n\t"
"lea " LOCAL_MANGLE(9b) ", %3 \n\t"
"sub %0, %3 \n\t"


: "=r" (fragmentB), "=r" (imm8OfPShufW1B), "=r" (imm8OfPShufW2B),
"=r" (fragmentLengthB)
);</asm>

<expr_stmt><expr><name>xpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>fragmentPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>/</operator> <name>numSplits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><name>xpos</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><operator>(</operator><name>xpos</name> <operator>+</operator> <name>xInc</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>xx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><operator>(</operator><name>xpos</name> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>xx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><operator>(</operator><name>xpos</name> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>xx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><operator>(</operator><name>d</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fragment</name> <init>= <expr><ternary><condition><expr><name>inc</name></expr> ?</condition><then> <expr><name>fragmentB</name></expr> </then><else>: <expr><name>fragmentA</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>imm8OfPShufW1</name> <init>= <expr><ternary><condition><expr><name>inc</name></expr> ?</condition><then> <expr><name>imm8OfPShufW1B</name></expr> </then><else>: <expr><name>imm8OfPShufW1A</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>imm8OfPShufW2</name> <init>= <expr><ternary><condition><expr><name>inc</name></expr> ?</condition><then> <expr><name>imm8OfPShufW2B</name></expr> </then><else>: <expr><name>imm8OfPShufW2A</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>fragmentLength</name> <init>= <expr><ternary><condition><expr><name>inc</name></expr> ?</condition><then> <expr><name>fragmentLengthB</name></expr> </then><else>: <expr><name>fragmentLengthA</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxShift</name> <init>= <expr><literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name>d</name> <operator>+</operator> <name>inc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filterCode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>xpos</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>xpos</name> <operator>+</operator> <name>xInc</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>xpos</name> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>xpos</name> <operator>+</operator> <name>xInc</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filterPos</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>filterCode</name> <operator>+</operator> <name>fragmentPos</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>fragmentLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filterCode</name><index>[<expr><name>fragmentPos</name> <operator>+</operator> <name>imm8OfPShufW1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>inc</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>b</name> <operator>+</operator> <name>inc</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>c</name> <operator>+</operator> <name>inc</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>d</name> <operator>+</operator> <name>inc</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filterCode</name><index>[<expr><name>fragmentPos</name> <operator>+</operator> <name>imm8OfPShufW2</name></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>d</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <name>inc</name> <operator>&gt;=</operator> <name>dstW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>maxShift</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>filterPos</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;=</operator> <name>maxShift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>filterPos</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name>shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filterCode</name><index>[<expr><name>fragmentPos</name> <operator>+</operator> <name>imm8OfPShufW1</name></expr>]</index></name> <operator>+=</operator> <literal type="number">0x55</literal> <operator>*</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filterCode</name><index>[<expr><name>fragmentPos</name> <operator>+</operator> <name>imm8OfPShufW2</name></expr>]</index></name> <operator>+=</operator> <literal type="number">0x55</literal> <operator>*</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filterPos</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-=</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fragmentPos</name> <operator>+=</operator> <name>fragmentLength</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filterCode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filterCode</name><index>[<expr><name>fragmentPos</name></expr>]</index></name> <operator>=</operator> <name>RET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>xpos</name> <operator>+=</operator> <name>xInc</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>filterCode</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filterPos</name><index>[<expr><operator>(</operator><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>xpos</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>fragmentPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hyscale_fast_mmxext</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilterPos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mmxextFilterCode</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxextFilterCode</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>retsave</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ebxsave</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<asm>__asm__ <specifier>volatile</specifier>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
"mov -8(%%rsp), %%"FF_REG_a" \n\t"
"mov %%"FF_REG_a", %5 \n\t" 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
"mov %%"FF_REG_b", %5 \n\t" 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"pxor %%mm7, %%mm7 \n\t"
"mov %0, %%"FF_REG_c" \n\t"
"mov %1, %%"FF_REG_D" \n\t"
"mov %2, %%"FF_REG_d" \n\t"
"mov %3, %%"FF_REG_b" \n\t"
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t" 
PREFETCH" (%%"FF_REG_c") \n\t"
PREFETCH" 32(%%"FF_REG_c") \n\t"
PREFETCH" 64(%%"FF_REG_c") \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_MMXEXT_FILTER_CODE</name></cpp:macro> <cpp:value>"movl (%%"FF_REG_b"), %%esi \n\t""call *%4 \n\t""movl (%%"FF_REG_b", %%"FF_REG_a"), %%esi \n\t""add %%"FF_REG_S", %%"FF_REG_c" \n\t""add %%"FF_REG_a", %%"FF_REG_D" \n\t""xor %%"FF_REG_a", %%"FF_REG_a" \n\t"
</cpp:value></cpp:define>






<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_MMXEXT_FILTER_CODE</name></cpp:macro> <cpp:value>"movl (%%"FF_REG_b"), %%esi \n\t""call *%4 \n\t""addl (%%"FF_REG_b", %%"FF_REG_a"), %%"FF_REG_c" \n\t""add %%"FF_REG_a", %%"FF_REG_D" \n\t""xor %%"FF_REG_a", %%"FF_REG_a" \n\t"
</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
"mov %5, %%"FF_REG_a" \n\t"
"mov %%"FF_REG_a", -8(%%rsp) \n\t"
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
"mov %5, %%"FF_REG_b" \n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
:: "m" (src), "m" (dst), "m" (filter), "m" (filterPos),
"m" (mmxextFilterCode)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
,"m"(retsave)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
,"m" (ebxsave)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "%"FF_REG_a, "%"FF_REG_c, "%"FF_REG_d, "%"FF_REG_S, "%"FF_REG_D
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name> <operator>||</operator> <name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
,"%"FF_REG_b
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
);</asm>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>dstWidth</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name><operator>*</operator><name>xInc</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&gt;=</operator><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hcscale_fast_mmxext</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstWidth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilterPos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mmxextFilterCode</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxextFilterCode</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>retsave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ebxsave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<asm>__asm__ <specifier>volatile</specifier>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
"mov -8(%%rsp), %%"FF_REG_a" \n\t"
"mov %%"FF_REG_a", %7 \n\t" 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
"mov %%"FF_REG_b", %7 \n\t" 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"pxor %%mm7, %%mm7 \n\t"
"mov %0, %%"FF_REG_c" \n\t"
"mov %1, %%"FF_REG_D" \n\t"
"mov %2, %%"FF_REG_d" \n\t"
"mov %3, %%"FF_REG_b" \n\t"
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t" 
PREFETCH" (%%"FF_REG_c") \n\t"
PREFETCH" 32(%%"FF_REG_c") \n\t"
PREFETCH" 64(%%"FF_REG_c") \n\t"

CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t" 
"mov %5, %%"FF_REG_c" \n\t" 
"mov %6, %%"FF_REG_D" \n\t" 
PREFETCH" (%%"FF_REG_c") \n\t"
PREFETCH" 32(%%"FF_REG_c") \n\t"
PREFETCH" 64(%%"FF_REG_c") \n\t"

CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE
CALL_MMXEXT_FILTER_CODE

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
"mov %7, %%"FF_REG_a" \n\t"
"mov %%"FF_REG_a", -8(%%rsp) \n\t"
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
"mov %7, %%"FF_REG_b" \n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
:: "m" (src1), "m" (dst1), "m" (filter), "m" (filterPos),
"m" (mmxextFilterCode), "m" (src2), "m"(dst2)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
,"m"(retsave)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
,"m" (ebxsave)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "%"FF_REG_a, "%"FF_REG_c, "%"FF_REG_d, "%"FF_REG_S, "%"FF_REG_D
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name> <operator>||</operator> <name>HAVE_EBX_AVAILABLE</name></expr></cpp:if>
,"%"FF_REG_b
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
);</asm>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>dstWidth</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name><operator>*</operator><name>xInc</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&gt;=</operator><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src2</name><index>[<expr><name>srcW</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
