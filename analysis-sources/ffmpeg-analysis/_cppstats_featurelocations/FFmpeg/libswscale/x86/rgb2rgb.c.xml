<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\x86\rgb2rgb.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/rgb2rgb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mmx_ff</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x00000000000000FFULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mmx_null</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000000000000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mmx_one</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xFFFFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask32b</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x000000FF000000FFULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask32g</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000FF000000FF00ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask32r</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x00FF000000FF0000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask32a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xFF000000FF000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask32</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x00FFFFFF00FFFFFFULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask3216br</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x00F800F800F800F8ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask3216g</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000FC000000FC00ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask3215g</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000F8000000F800ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mul3216</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x2000000420000004ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mul3215</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x2000000820000008ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask24b</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x00FF0000FF0000FFULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask24g</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xFF0000FF0000FF00ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask24r</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000FF0000FF0000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask24l</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000000000FFFFFFULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask24h</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000FFFFFF000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask24hh</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xffff000000000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask24hhh</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xffffffff00000000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask24hhhh</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xffffffffffff0000ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask15b</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x001F001F001F001FULL</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask15rg</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x7FE07FE07FE07FE0ULL</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask15s</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xFFE0FFE0FFE0FFE0ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask15g</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x03E003E003E003E0ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask15r</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x7C007C007C007C00ULL</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mask16b</name></cpp:macro> <cpp:value>mask15b</cpp:value></cpp:define>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask16g</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x07E007E007E007E0ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mask16r</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xF800F800F800F800ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>red_16mask</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000f8000000f800ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>green_16mask</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x000007e0000007e0ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>blue_16mask</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000001f0000001fULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>red_15mask</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x00007c0000007c00ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>green_15mask</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x000003e0000003e0ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>blue_15mask</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000001f0000001fULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mul15_mid</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x4200420042004200ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mul15_hi</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0210021002100210ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>mul16_mid</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x2080208020802080ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>extern</specifier> <specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_bgr2YOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>extern</specifier> <specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_w1111</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>extern</specifier> <specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_bgr2UVOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BY</name></cpp:macro> <cpp:value>((int)( 0.098*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BV</name></cpp:macro> <cpp:value>((int)(-0.071*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BU</name></cpp:macro> <cpp:value>((int)( 0.439*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GY</name></cpp:macro> <cpp:value>((int)( 0.504*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GV</name></cpp:macro> <cpp:value>((int)(-0.368*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GU</name></cpp:macro> <cpp:value>((int)(-0.291*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RY</name></cpp:macro> <cpp:value>((int)( 0.257*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV</name></cpp:macro> <cpp:value>((int)( 0.439*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RU</name></cpp:macro> <cpp:value>((int)(-0.148*(1&lt;&lt;RGB2YUV_SHIFT)+0.5))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_MMXEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_AMD3DNOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_SSE2</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_AVX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_mmx</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb_template.c"</cpp:file></cpp:include>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_MMXEXT</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_MMXEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_mmxext</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb_template.c"</cpp:file></cpp:include>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_SSE2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_SSE2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_sse2</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb_template.c"</cpp:file></cpp:include>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_AVX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_AVX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_avx</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb_template.c"</cpp:file></cpp:include>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_MMXEXT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_SSE2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_AVX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_AMD3DNOW</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_MMXEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_SSE2</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_AVX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_AMD3DNOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_3dnow</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb_template.c"</cpp:file></cpp:include>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>void</name></type> <name>ff_shuffle_bytes_2103_mmxext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_shuffle_bytes_2103_ssse3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_shuffle_bytes_0321_ssse3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_shuffle_bytes_1230_ssse3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_shuffle_bytes_3012_ssse3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_shuffle_bytes_3210_ssse3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>ff_uyvytoyuv422_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_uyvytoyuv422_avx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>av_cold</name> <name>void</name></type> <name>rgb2rgb_init_x86</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rgb2rgb_init_mmx</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_AMD3DNOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rgb2rgb_init_3dnow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rgb2rgb_init_mmxext</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rgb2rgb_init_sse2</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rgb2rgb_init_avx</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shuffle_bytes_2103</name> <operator>=</operator> <name>ff_shuffle_bytes_2103_mmxext</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<expr_stmt><expr><name>uyvytoyuv422</name> <operator>=</operator> <name>ff_uyvytoyuv422_sse2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shuffle_bytes_0321</name> <operator>=</operator> <name>ff_shuffle_bytes_0321_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shuffle_bytes_2103</name> <operator>=</operator> <name>ff_shuffle_bytes_2103_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shuffle_bytes_1230</name> <operator>=</operator> <name>ff_shuffle_bytes_1230_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shuffle_bytes_3012</name> <operator>=</operator> <name>ff_shuffle_bytes_3012_ssse3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shuffle_bytes_3210</name> <operator>=</operator> <name>ff_shuffle_bytes_3210_ssse3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>
<expr_stmt><expr><name>uyvytoyuv422</name> <operator>=</operator> <name>ff_uyvytoyuv422_avx</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
