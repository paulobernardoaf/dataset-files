<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\x86\swscale.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<expr_stmt><expr><specifier>const</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ff_dither4</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0x0103010301030103LL</literal></expr>,
<expr><literal type="number">0x0200020002000200LL</literal></expr>,}</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ff_dither8</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">0x0602060206020602LL</literal></expr>,
<expr><literal type="number">0x0004000400040004LL</literal></expr>,}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHER1XBPP</name></cpp:macro></cpp:define>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>bF8</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0xF8F8F8F8F8F8F8F8LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>bFC</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0xFCFCFCFCFCFCFCFCLL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>w10</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0010001000100010LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>w02</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x0002000200020002LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>b16Mask</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x001F001F001F001FLL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>g16Mask</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x07E007E007E007E0LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>r16Mask</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0xF800F800F800F800LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>b15Mask</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x001F001F001F001FLL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>g15Mask</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x03E003E003E003E0LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>r15Mask</name></expr></argument>)</argument_list></call><operator>=</operator> <literal type="number">0x7C007C007C007C00LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_M24A</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x00FF0000FF0000FFLL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_M24B</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xFF0000FF0000FF00LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_M24C</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0000FF0000FF0000LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_bgr2YOffset</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x1010101010101010ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_bgr2UVOffset</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x8080808080808080ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_w1111</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_MMXEXT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_mmx</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_template.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RENAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMPILE_TEMPLATE_MMXEXT</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPILE_TEMPLATE_MMXEXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_mmxext</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_template.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>ff_updateMMXDitherTables</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstY</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstH</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SwsPlane</name> <modifier>*</modifier></type><name>lumPlane</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>numSlice</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SwsPlane</name> <modifier>*</modifier></type><name>chrUPlane</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>numSlice</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SwsPlane</name> <modifier>*</modifier></type><name>alpPlane</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>numSlice</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hasAlpha</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vLumFilterPos</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vLumFilterPos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vChrFilterPos</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vChrFilterPos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vLumFilter</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vLumFilter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vChrFilter</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vChrFilter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lumMmxFilter</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>lumMmxFilter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>chrMmxFilter</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>chrMmxFilter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <name>av_unused</name> <modifier>*</modifier></type><name>alpMmxFilter</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>alpMmxFilter</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vLumFilterSize</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vLumFilterSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vChrFilterSize</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>vChrFilterSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chrDstY</name><init>= <expr><name>dstY</name><operator>&gt;&gt;</operator><name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>firstLumSrcY</name><init>= <expr><name><name>vLumFilterPos</name><index>[<expr><name>dstY</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>firstChrSrcY</name><init>= <expr><name><name>vChrFilterPos</name><index>[<expr><name>chrDstY</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blueDither</name></name><operator>=</operator> <name><name>ff_dither8</name><index>[<expr><name>dstY</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB555</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR555</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>greenDither</name></name><operator>=</operator> <name><name>ff_dither8</name><index>[<expr><name>dstY</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>greenDither</name></name><operator>=</operator> <name><name>ff_dither4</name><index>[<expr><name>dstY</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>redDither</name></name><operator>=</operator> <name><name>ff_dither8</name><index>[<expr><operator>(</operator><name>dstY</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dstY</name> <operator>&lt;</operator> <name>dstH</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrcPtr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>lumPlane</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>firstLumSrcY</name> <operator>-</operator> <name><name>lumPlane</name><operator>-&gt;</operator><name>sliceY</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrcPtr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>chrUPlane</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>firstChrSrcY</name> <operator>-</operator> <name><name>chrUPlane</name><operator>-&gt;</operator><name>sliceY</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrcPtr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>CONFIG_SWSCALE_ALPHA</name> <operator>&amp;&amp;</operator> <name>hasAlpha</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>alpPlane</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>firstLumSrcY</name> <operator>-</operator> <name><name>alpPlane</name><operator>-&gt;</operator><name>sliceY</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>firstLumSrcY</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>firstLumSrcY</name> <operator>+</operator> <name>vLumFilterSize</name></expr></argument> &gt;</argument_list></name> <name><name>c</name><operator>-&gt;</operator><name>srcH</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmpY</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>lumPlane</name><operator>-&gt;</operator><name>tmp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><operator>-</operator><name>firstLumSrcY</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcH</name></name> <operator>-</operator> <name>firstLumSrcY</name></expr></argument>, <argument><expr><name>vLumFilterSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neg</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmpY</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lumSrcPtr</name><index>[<expr><name>neg</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmpY</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lumSrcPtr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vLumFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmpY</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmpY</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>lumSrcPtr</name> <operator>=</operator> <name>tmpY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpSrcPtr</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmpA</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>alpPlane</name><operator>-&gt;</operator><name>tmp</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neg</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmpA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>alpSrcPtr</name><index>[<expr><name>neg</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmpA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>alpSrcPtr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vLumFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmpA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmpA</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>alpSrcPtr</name> <operator>=</operator> <name>tmpA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>firstChrSrcY</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>firstChrSrcY</name> <operator>+</operator> <name>vChrFilterSize</name></expr></argument> &gt;</argument_list></name> <name><name>c</name><operator>-&gt;</operator><name>chrSrcH</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmpU</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>chrUPlane</name><operator>-&gt;</operator><name>tmp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><operator>-</operator><name>firstChrSrcY</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcH</name></name> <operator>-</operator> <name>firstChrSrcY</name></expr></argument>, <argument><expr><name>vChrFilterSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>neg</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmpU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>chrUSrcPtr</name><index>[<expr><name>neg</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmpU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>chrUSrcPtr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vChrFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmpU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmpU</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>chrUSrcPtr</name> <operator>=</operator> <name>tmpU</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SWS_ACCURATE_RND</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>= <expr><name>APCK_SIZE</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>vLumFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lumMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name></expr> ]</index></name><operator>=</operator> <name><name>lumSrcPtr</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lumMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_PTR2</name><operator>/</operator><literal type="number">4</literal></expr> ]</index></name><operator>=</operator> <name><name>lumSrcPtr</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>vLumFilterSize</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lumMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_COEF</name><operator>/</operator><literal type="number">4</literal></expr> ]</index></name><operator>=</operator>
<name><name>lumMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_COEF</name><operator>/</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>vLumFilter</name><index>[<expr><name>dstY</name><operator>*</operator><name>vLumFilterSize</name> <operator>+</operator> <name>i</name></expr> ]</index></name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>vLumFilterSize</name><operator>&gt;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>vLumFilter</name><index>[<expr><name>dstY</name><operator>*</operator><name>vLumFilterSize</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_SWSCALE_ALPHA</name> <operator>&amp;&amp;</operator> <name>hasAlpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>alpMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name></expr> ]</index></name><operator>=</operator> <name><name>alpSrcPtr</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>alpMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_PTR2</name><operator>/</operator><literal type="number">4</literal></expr> ]</index></name><operator>=</operator> <name><name>alpSrcPtr</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>vLumFilterSize</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_COEF</name><operator>/</operator><literal type="number">4</literal></expr> ]</index></name><operator>=</operator>
<name><name>alpMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_COEF</name><operator>/</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>lumMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_COEF</name><operator>/</operator><literal type="number">4</literal></expr> ]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>vChrFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>chrMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name></expr> ]</index></name><operator>=</operator> <name><name>chrUSrcPtr</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>chrMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_PTR2</name><operator>/</operator><literal type="number">4</literal></expr> ]</index></name><operator>=</operator> <name><name>chrUSrcPtr</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>vChrFilterSize</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chrMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_COEF</name><operator>/</operator><literal type="number">4</literal></expr> ]</index></name><operator>=</operator>
<name><name>chrMmxFilter</name><index>[<expr><name>s</name><operator>*</operator><name>i</name><operator>+</operator><name>APCK_COEF</name><operator>/</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>vChrFilter</name><index>[<expr><name>chrDstY</name><operator>*</operator><name>vChrFilterSize</name> <operator>+</operator> <name>i</name></expr> ]</index></name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>vChrFilterSize</name><operator>&gt;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>vChrFilter</name><index>[<expr><name>chrDstY</name><operator>*</operator><name>vChrFilterSize</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>vLumFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lumMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>lumSrcPtr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lumMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator>
<name><name>lumMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator>
<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>vLumFilter</name><index>[<expr><name>dstY</name><operator>*</operator><name>vLumFilterSize</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">0x10001U</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_SWSCALE_ALPHA</name> <operator>&amp;&amp;</operator> <name>hasAlpha</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>alpMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>alpSrcPtr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>alpMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator>
<name><name>alpMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name><name>lumMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>vChrFilterSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>chrMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>chrUSrcPtr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chrMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator>
<name><name>chrMmxFilter</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator>
<operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>vChrFilter</name><index>[<expr><name>chrDstY</name><operator>*</operator><name>vChrFilterSize</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">0x10001U</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>yuv2yuvX_sse3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>yuv2yuvX_mmxext</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>filterSize</name><operator>--</operator></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAIN_FUNCTION</name></cpp:macro> <cpp:value>"pxor %%xmm0, %%xmm0 \n\t" "punpcklbw %%xmm0, %%xmm3 \n\t" "movd %4, %%xmm1 \n\t" "punpcklwd %%xmm1, %%xmm1 \n\t" "punpckldq %%xmm1, %%xmm1 \n\t" "punpcklqdq %%xmm1, %%xmm1 \n\t" "psllw $3, %%xmm1 \n\t" "paddw %%xmm1, %%xmm3 \n\t" "psraw $4, %%xmm3 \n\t" "movdqa %%xmm3, %%xmm4 \n\t" "movdqa %%xmm3, %%xmm7 \n\t" "movl %3, %%ecx \n\t" "mov %0, %%"FF_REG_d" \n\t""mov (%%"FF_REG_d"), %%"FF_REG_S" \n\t"".p2align 4 \n\t" /* FIXME Unroll? */"1: \n\t""movddup 8(%%"FF_REG_d"), %%xmm0 \n\t" /* filterCoeff */"movdqa (%%"FF_REG_S", %%"FF_REG_c", 2), %%xmm2 \n\t" /* srcData */"movdqa 16(%%"FF_REG_S", %%"FF_REG_c", 2), %%xmm5 \n\t" /* srcData */"add $16, %%"FF_REG_d" \n\t""mov (%%"FF_REG_d"), %%"FF_REG_S" \n\t""test %%"FF_REG_S", %%"FF_REG_S" \n\t""pmulhw %%xmm0, %%xmm2 \n\t""pmulhw %%xmm0, %%xmm5 \n\t""paddw %%xmm2, %%xmm3 \n\t""paddw %%xmm5, %%xmm4 \n\t"" jnz 1b \n\t""psraw $3, %%xmm3 \n\t""psraw $3, %%xmm4 \n\t""packuswb %%xmm4, %%xmm3 \n\t""movntdq %%xmm3, (%1, %%"FF_REG_c") \n\t""add $16, %%"FF_REG_c" \n\t""cmp %2, %%"FF_REG_c" \n\t""movdqa %%xmm7, %%xmm3 \n\t" "movdqa %%xmm7, %%xmm4 \n\t" "mov %0, %%"FF_REG_d" \n\t""mov (%%"FF_REG_d"), %%"FF_REG_S" \n\t""jb 1b \n\t"
</cpp:value></cpp:define>






































<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %5, %%xmm3 \n\t"
"movdqa %%xmm3, %%xmm4 \n\t"
"psrlq $24, %%xmm3 \n\t"
"psllq $40, %%xmm4 \n\t"
"por %%xmm4, %%xmm3 \n\t"
MAIN_FUNCTION
:: "g" (filter),
"r" (dest-offset), "g" ((x86_reg)(dstW+offset)), "m" (offset),
"m"(filterSize), "m"(((uint64_t *) dither)[0])
: XMM_CLOBBERS("%xmm0" , "%xmm1" , "%xmm2" , "%xmm3" , "%xmm4" , "%xmm5" , "%xmm7" ,)
"%"FF_REG_d, "%"FF_REG_S, "%"FF_REG_c
);</asm>
</block_content>}</block></if> <else>else <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %5, %%xmm3 \n\t"
MAIN_FUNCTION
:: "g" (filter),
"r" (dest-offset), "g" ((x86_reg)(dstW+offset)), "m" (offset),
"m"(filterSize), "m"(((uint64_t *) dither)[0])
: XMM_CLOBBERS("%xmm0" , "%xmm1" , "%xmm2" , "%xmm3" , "%xmm4" , "%xmm5" , "%xmm7" ,)
"%"FF_REG_d, "%"FF_REG_S, "%"FF_REG_c
);</asm>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_FUNC</name><parameter_list>(<parameter><type><name>filter_n</name></type></parameter>, <parameter><type><name>from_bpc</name></type></parameter>, <parameter><type><name>to_bpc</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_hscale ##from_bpc ##to ##to_bpc ##_ ##filter_n ##_ ##opt( SwsContext *c, int16_t *data, int dstW, const uint8_t *src, const int16_t *filter, const int32_t *filterPos, int filterSize)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_FUNCS</name><parameter_list>(<parameter><type><name>filter_n</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SCALE_FUNC(filter_n, 8, 15, opt); SCALE_FUNC(filter_n, 9, 15, opt); SCALE_FUNC(filter_n, 10, 15, opt); SCALE_FUNC(filter_n, 12, 15, opt); SCALE_FUNC(filter_n, 14, 15, opt); SCALE_FUNC(filter_n, 16, 15, opt); SCALE_FUNC(filter_n, 8, 19, opt); SCALE_FUNC(filter_n, 9, 19, opt); SCALE_FUNC(filter_n, 10, 19, opt); SCALE_FUNC(filter_n, 12, 19, opt); SCALE_FUNC(filter_n, 14, 19, opt); SCALE_FUNC(filter_n, 16, 19, opt)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_FUNCS_MMX</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SCALE_FUNCS(4, opt); SCALE_FUNCS(8, opt); SCALE_FUNCS(X, opt)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_FUNCS_SSE</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SCALE_FUNCS(4, opt); SCALE_FUNCS(8, opt); SCALE_FUNCS(X4, opt); SCALE_FUNCS(X8, opt)</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><call><name>SCALE_FUNCS_MMX</name><argument_list>(<argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SCALE_FUNCS_SSE</name><argument_list>(<argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALE_FUNCS_SSE</name><argument_list>(<argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALE_FUNCS_SSE</name><argument_list>(<argument><expr><name>sse4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSCALEX_FUNC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_yuv2planeX_ ##size ##_ ##opt(const int16_t *filter, int filterSize, const int16_t **src, uint8_t *dest, int dstW, const uint8_t *dither, int offset)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSCALEX_FUNCS</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VSCALEX_FUNC(8, opt); VSCALEX_FUNC(9, opt); VSCALEX_FUNC(10, opt)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><call><name>VSCALEX_FUNCS</name><argument_list>(<argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>VSCALEX_FUNCS</name><argument_list>(<argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSCALEX_FUNCS</name><argument_list>(<argument><expr><name>sse4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSCALEX_FUNC</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSCALEX_FUNCS</name><argument_list>(<argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSCALE_FUNC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_yuv2plane1_ ##size ##_ ##opt(const int16_t *src, uint8_t *dst, int dstW, const uint8_t *dither, int offset)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSCALE_FUNCS</name><parameter_list>(<parameter><type><name>opt1</name></type></parameter>, <parameter><type><name>opt2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VSCALE_FUNC(8, opt1); VSCALE_FUNC(9, opt2); VSCALE_FUNC(10, opt2); VSCALE_FUNC(16, opt1)</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><call><name>VSCALE_FUNCS</name><argument_list>(<argument><expr><name>mmx</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>VSCALE_FUNCS</name><argument_list>(<argument><expr><name>sse2</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSCALE_FUNC</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSCALE_FUNCS</name><argument_list>(<argument><expr><name>avx</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_Y_FUNC</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_ ##fmt ##ToY_ ##opt(uint8_t *dst, const uint8_t *src, const uint8_t *unused1, const uint8_t *unused2, int w, uint32_t *unused)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_UV_FUNC</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_ ##fmt ##ToUV_ ##opt(uint8_t *dstU, uint8_t *dstV, const uint8_t *unused0, const uint8_t *src1, const uint8_t *src2, int w, uint32_t *unused)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_FUNC</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INPUT_Y_FUNC(fmt, opt); INPUT_UV_FUNC(fmt, opt)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_FUNCS</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INPUT_FUNC(uyvy, opt); INPUT_FUNC(yuyv, opt); INPUT_UV_FUNC(nv12, opt); INPUT_UV_FUNC(nv21, opt); INPUT_FUNC(rgba, opt); INPUT_FUNC(bgra, opt); INPUT_FUNC(argb, opt); INPUT_FUNC(abgr, opt); INPUT_FUNC(rgb24, opt); INPUT_FUNC(bgr24, opt)</cpp:value></cpp:define>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<expr_stmt><expr><call><name>INPUT_FUNCS</name><argument_list>(<argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>INPUT_FUNCS</name><argument_list>(<argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INPUT_FUNCS</name><argument_list>(<argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INPUT_FUNCS</name><argument_list>(<argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sws_init_swscale_x86</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sws_init_swscale_mmx</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sws_init_swscale_mmxext</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE3</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>use_mmx_vfilter</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_ACCURATE_RND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name> <operator>=</operator> <name>yuv2yuvX_sse3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN_SCALE_FUNC2</name><parameter_list>(<parameter><type><name>hscalefn</name></type></parameter>, <parameter><type><name>filtersize</name></type></parameter>, <parameter><type><name>opt1</name></type></parameter>, <parameter><type><name>opt2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (c-&gt;srcBpc == 8) { hscalefn = c-&gt;dstBpc &lt;= 14 ? ff_hscale8to15_ ##filtersize ##_ ##opt2 : ff_hscale8to19_ ##filtersize ##_ ##opt1; } else if (c-&gt;srcBpc == 9) { hscalefn = c-&gt;dstBpc &lt;= 14 ? ff_hscale9to15_ ##filtersize ##_ ##opt2 : ff_hscale9to19_ ##filtersize ##_ ##opt1; } else if (c-&gt;srcBpc == 10) { hscalefn = c-&gt;dstBpc &lt;= 14 ? ff_hscale10to15_ ##filtersize ##_ ##opt2 : ff_hscale10to19_ ##filtersize ##_ ##opt1; } else if (c-&gt;srcBpc == 12) { hscalefn = c-&gt;dstBpc &lt;= 14 ? ff_hscale12to15_ ##filtersize ##_ ##opt2 : ff_hscale12to19_ ##filtersize ##_ ##opt1; } else if (c-&gt;srcBpc == 14 || ((c-&gt;srcFormat==AV_PIX_FMT_PAL8||isAnyRGB(c-&gt;srcFormat)) &amp;&amp; av_pix_fmt_desc_get(c-&gt;srcFormat)-&gt;comp[0].depth&lt;16)) { hscalefn = c-&gt;dstBpc &lt;= 14 ? ff_hscale14to15_ ##filtersize ##_ ##opt2 : ff_hscale14to19_ ##filtersize ##_ ##opt1; } else { av_assert0(c-&gt;srcBpc == 16);hscalefn = c-&gt;dstBpc &lt;= 14 ? ff_hscale16to15_ ##filtersize ##_ ##opt2 : ff_hscale16to19_ ##filtersize ##_ ##opt1; } } while (0)</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN_MMX_SCALE_FUNC</name><parameter_list>(<parameter><type><name>hscalefn</name></type></parameter>, <parameter><type><name>filtersize</name></type></parameter>, <parameter><type><name>opt1</name></type></parameter>, <parameter><type><name>opt2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (filtersize) { case 4: ASSIGN_SCALE_FUNC2(hscalefn, 4, opt1, opt2); break; case 8: ASSIGN_SCALE_FUNC2(hscalefn, 8, opt1, opt2); break; default: ASSIGN_SCALE_FUNC2(hscalefn, X, opt1, opt2); break; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN_VSCALEX_FUNC</name><parameter_list>(<parameter><type><name>vscalefn</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>do_16_case</name></type></parameter>, <parameter><type><name>condition_8bit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch(c-&gt;dstBpc){ case 16: do_16_case; break; case 10: if (!isBE(c-&gt;dstFormat) &amp;&amp; c-&gt;dstFormat != AV_PIX_FMT_P010LE) vscalefn = ff_yuv2planeX_10_ ##opt; break; case 9: if (!isBE(c-&gt;dstFormat)) vscalefn = ff_yuv2planeX_9_ ##opt; break; case 8: if ((condition_8bit) &amp;&amp; !c-&gt;use_mmx_vfilter) vscalefn = ff_yuv2planeX_8_ ##opt; break; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN_VSCALE_FUNC</name><parameter_list>(<parameter><type><name>vscalefn</name></type></parameter>, <parameter><type><name>opt1</name></type></parameter>, <parameter><type><name>opt2</name></type></parameter>, <parameter><type><name>opt2chk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch(c-&gt;dstBpc){ case 16: if (!isBE(c-&gt;dstFormat)) vscalefn = ff_yuv2plane1_16_ ##opt1; break; case 10: if (!isBE(c-&gt;dstFormat) &amp;&amp; c-&gt;dstFormat != AV_PIX_FMT_P010LE &amp;&amp; opt2chk) vscalefn = ff_yuv2plane1_10_ ##opt2; break; case 9: if (!isBE(c-&gt;dstFormat) &amp;&amp; opt2chk) vscalefn = ff_yuv2plane1_9_ ##opt2; break; case 8: vscalefn = ff_yuv2plane1_8_ ##opt1; break; default: av_assert0(c-&gt;dstBpc&gt;8); }</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>case_rgb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>X</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case AV_PIX_FMT_ ##X: c-&gt;lumToYV12 = ff_ ##x ##ToY_ ##opt; if (!c-&gt;chrSrcHSubSample) c-&gt;chrToYV12 = ff_ ##x ##ToUV_ ##opt; break</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSIGN_MMX_SCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilterSize</name></name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN_MMX_SCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilterSize</name></name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN_VSCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, <argument><expr><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMXEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>ff_yuyvToY_mmx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>ff_uyvyToY_mmx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>ff_yuyvToY_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_yuyvToUV_mmx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>ff_uyvyToY_mmx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_uyvyToUV_mmx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_nv12ToUV_mmx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV21</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_nv21ToUV_mmx</name></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>rgb24</name></expr></argument>, <argument><expr><name>RGB24</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>bgr24</name></expr></argument>, <argument><expr><name>BGR24</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>bgra</name></expr></argument>, <argument><expr><name>BGRA</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>rgba</name></expr></argument>, <argument><expr><name>RGBA</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>abgr</name></expr></argument>, <argument><expr><name>ABGR</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>argb</name></expr></argument>, <argument><expr><name>ARGB</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSIGN_VSCALEX_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSIGN_SSE_SCALE_FUNC</name><parameter_list>(<parameter><type><name>hscalefn</name></type></parameter>, <parameter><type><name>filtersize</name></type></parameter>, <parameter><type><name>opt1</name></type></parameter>, <parameter><type><name>opt2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (filtersize) { case 4: ASSIGN_SCALE_FUNC2(hscalefn, 4, opt1, opt2); break; case 8: ASSIGN_SCALE_FUNC2(hscalefn, 8, opt1, opt2); break; default: if (filtersize &amp; 4) ASSIGN_SCALE_FUNC2(hscalefn, X4, opt1, opt2); else ASSIGN_SCALE_FUNC2(hscalefn, X8, opt1, opt2); break; }</cpp:value></cpp:define>







<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSIGN_SSE_SCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilterSize</name></name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN_SSE_SCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilterSize</name></name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN_VSCALEX_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, ,
<argument><expr><name>HAVE_ALIGNED_STACK</name> <operator>||</operator> <name>ARCH_X86_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN_VSCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>ff_yuyvToY_sse2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>ff_uyvyToY_sse2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>ff_yuyvToY_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_yuyvToUV_sse2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>ff_uyvyToY_sse2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_uyvyToUV_sse2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_nv12ToUV_sse2</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV21</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_nv21ToUV_sse2</name></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>rgb24</name></expr></argument>, <argument><expr><name>RGB24</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>bgr24</name></expr></argument>, <argument><expr><name>BGR24</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>bgra</name></expr></argument>, <argument><expr><name>BGRA</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>rgba</name></expr></argument>, <argument><expr><name>RGBA</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>abgr</name></expr></argument>, <argument><expr><name>ABGR</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>argb</name></expr></argument>, <argument><expr><name>ARGB</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSIGN_SSE_SCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilterSize</name></name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN_SSE_SCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilterSize</name></name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>rgb24</name></expr></argument>, <argument><expr><name>RGB24</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>bgr24</name></expr></argument>, <argument><expr><name>BGR24</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE4</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASSIGN_SSE_SCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hLumFilterSize</name></name></expr></argument>, <argument><expr><name>sse4</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN_SSE_SCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hChrFilterSize</name></name></expr></argument>, <argument><expr><name>sse4</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ASSIGN_VSCALEX_FUNC</name><argument_list>(<argument>c-&gt;yuv2planeX</argument>, <argument>sse4</argument>,
<argument>if (!isBE(c-&gt;dstFormat)) c-&gt;yuv2planeX = ff_yuv2planeX_16_sse4</argument>,
<argument>HAVE_ALIGNED_STACK || ARCH_X86_64</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstBpc</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name> <operator>=</operator> <name>ff_yuv2plane1_16_sse4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSIGN_VSCALEX_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2planeX</name></name></expr></argument>, <argument><expr><name>avx</name></expr></argument>, ,
<argument><expr><name>HAVE_ALIGNED_STACK</name> <operator>||</operator> <name>ARCH_X86_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASSIGN_VSCALE_FUNC</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2plane1</name></name></expr></argument>, <argument><expr><name>avx</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_yuyvToUV_avx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_uyvyToUV_avx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_nv12ToUV_avx</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV21</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>ff_nv21ToUV_avx</name></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>rgb24</name></expr></argument>, <argument><expr><name>RGB24</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>bgr24</name></expr></argument>, <argument><expr><name>BGR24</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>bgra</name></expr></argument>, <argument><expr><name>BGRA</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>rgba</name></expr></argument>, <argument><expr><name>RGBA</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>abgr</name></expr></argument>, <argument><expr><name>ABGR</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>case_rgb</name><argument_list>(<argument><expr><name>argb</name></expr></argument>, <argument><expr><name>ARGB</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
