<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\x86\rgb2rgb_template.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFETCH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MOVNTQ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMMS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SFENCE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PAVGB</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFETCH</name></cpp:macro> <cpp:value>"prefetch"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAVGB</name></cpp:macro> <cpp:value>"pavgusb"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>COMPILE_TEMPLATE_MMXEXT</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFETCH</name></cpp:macro> <cpp:value>"prefetchnta"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAVGB</name></cpp:macro> <cpp:value>"pavgb"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFETCH</name></cpp:macro> <cpp:value>" #nop"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMMS</name></cpp:macro> <cpp:value>"femms"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMMS</name></cpp:macro> <cpp:value>"emms"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_MMXEXT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVNTQ</name></cpp:macro> <cpp:value>"movntq"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFENCE</name></cpp:macro> <cpp:value>"sfence"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVNTQ</name></cpp:macro> <cpp:value>"movq"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFENCE</name></cpp:macro> <cpp:value>" #nop"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb24tobgr32</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*s):"memory");</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>("movq %0, %%mm7"::"m"(mask32a):"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"punpckldq 3(%1), %%mm0 \n\t"
"movd 6(%1), %%mm1 \n\t"
"punpckldq 9(%1), %%mm1 \n\t"
"movd 12(%1), %%mm2 \n\t"
"punpckldq 15(%1), %%mm2 \n\t"
"movd 18(%1), %%mm3 \n\t"
"punpckldq 21(%1), %%mm3 \n\t"
"por %%mm7, %%mm0 \n\t"
"por %%mm7, %%mm1 \n\t"
"por %%mm7, %%mm2 \n\t"
"por %%mm7, %%mm3 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
MOVNTQ" %%mm1, 8(%0) \n\t"
MOVNTQ" %%mm2, 16(%0) \n\t"
MOVNTQ" %%mm3, 24(%0)"
:: "r"(dest), "r"(s)
:"memory");</asm>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_BGR24_MMX</name></cpp:macro> <cpp:value>"psrlq $8, %%mm2 \n\t" "psrlq $8, %%mm3 \n\t" "psrlq $8, %%mm6 \n\t" "psrlq $8, %%mm7 \n\t" "pand "MANGLE(mask24l)", %%mm0\n\t" "pand "MANGLE(mask24l)", %%mm1\n\t" "pand "MANGLE(mask24l)", %%mm4\n\t" "pand "MANGLE(mask24l)", %%mm5\n\t" "pand "MANGLE(mask24h)", %%mm2\n\t" "pand "MANGLE(mask24h)", %%mm3\n\t" "pand "MANGLE(mask24h)", %%mm6\n\t" "pand "MANGLE(mask24h)", %%mm7\n\t" "por %%mm2, %%mm0 \n\t" "por %%mm3, %%mm1 \n\t" "por %%mm6, %%mm4 \n\t" "por %%mm7, %%mm5 \n\t" "movq %%mm1, %%mm2 \n\t" "movq %%mm4, %%mm3 \n\t" "psllq $48, %%mm2 \n\t" "psllq $32, %%mm3 \n\t" "por %%mm2, %%mm0 \n\t" "psrlq $16, %%mm1 \n\t" "psrlq $32, %%mm4 \n\t" "psllq $16, %%mm5 \n\t" "por %%mm3, %%mm1 \n\t" "por %%mm5, %%mm4 \n\t" MOVNTQ" %%mm0, (%0) \n\t" MOVNTQ" %%mm1, 8(%0) \n\t" MOVNTQ" %%mm4, 16(%0)"</cpp:value></cpp:define>

































<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb32tobgr24</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*s):"memory");</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movq (%1), %%mm0 \n\t"
"movq 8(%1), %%mm1 \n\t"
"movq 16(%1), %%mm4 \n\t"
"movq 24(%1), %%mm5 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm1, %%mm3 \n\t"
"movq %%mm4, %%mm6 \n\t"
"movq %%mm5, %%mm7 \n\t"
STORE_BGR24_MMX
:: "r"(dest), "r"(s)
NAMED_CONSTRAINTS_ADD(mask24l,mask24h)
:"memory");</asm>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb15to16</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s</name><init>=<expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>d</name><init>=<expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*s));</asm>
<asm>__asm__ <specifier>volatile</specifier>("movq %0, %%mm4"::"m"(mask15s));</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name><operator>&lt;</operator><name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movq (%1), %%mm0 \n\t"
"movq 8(%1), %%mm2 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"pand %%mm4, %%mm0 \n\t"
"pand %%mm4, %%mm2 \n\t"
"paddw %%mm1, %%mm0 \n\t"
"paddw %%mm3, %%mm2 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
MOVNTQ" %%mm2, 8(%0)"
:: "r"(d), "r"(s)
);</asm>
<expr_stmt><expr><name>d</name><operator>+=</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name></type> <name>x</name><init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>d</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">0x7FFF7FFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">0x7FE07FE0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>short</name></type> <name>x</name><init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>d</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">0x7FFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">0x7FE0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb16to15</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s</name><init>=<expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>d</name><init>=<expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*s));</asm>
<asm>__asm__ <specifier>volatile</specifier>("movq %0, %%mm7"::"m"(mask15rg));</asm>
<asm>__asm__ <specifier>volatile</specifier>("movq %0, %%mm6"::"m"(mask15b));</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name><operator>&lt;</operator><name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movq (%1), %%mm0 \n\t"
"movq 8(%1), %%mm2 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"psrlq $1, %%mm0 \n\t"
"psrlq $1, %%mm2 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm2 \n\t"
"pand %%mm6, %%mm1 \n\t"
"pand %%mm6, %%mm3 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm3, %%mm2 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
MOVNTQ" %%mm2, 8(%0)"
:: "r"(d), "r"(s)
);</asm>
<expr_stmt><expr><name>d</name><operator>+=</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>x</name><init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>d</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x7FE07FE0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">0x001F001F</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint16_t</name></type> <name>x</name><init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>d</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x7FE0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">0x001F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb32to16</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %3, %%mm5 \n\t"
"movq %4, %%mm6 \n\t"
"movq %5, %%mm7 \n\t"
"jmp 2f \n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"movd 4(%1), %%mm3 \n\t"
"punpckldq 8(%1), %%mm0 \n\t"
"punpckldq 12(%1), %%mm3 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm3, %%mm4 \n\t"
"pand %%mm6, %%mm0 \n\t"
"pand %%mm6, %%mm3 \n\t"
"pmaddwd %%mm7, %%mm0 \n\t"
"pmaddwd %%mm7, %%mm3 \n\t"
"pand %%mm5, %%mm1 \n\t"
"pand %%mm5, %%mm4 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm4, %%mm3 \n\t"
"psrld $5, %%mm0 \n\t"
"pslld $11, %%mm3 \n\t"
"por %%mm3, %%mm0 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
"add $16, %1 \n\t"
"add $8, %0 \n\t"
"2: \n\t"
"cmp %2, %1 \n\t"
" jb 1b \n\t"
: "+r" (d), "+r"(s)
: "r" (mm_end), "m" (mask3216g), "m" (mask3216br), "m" (mul3216)
);</asm>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>rgb</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xFC00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xF80000</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb32tobgr16</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*src):"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %0, %%mm7 \n\t"
"movq %1, %%mm6 \n\t"
::"m"(red_16mask),"m"(green_16mask));</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"movd 4(%1), %%mm3 \n\t"
"punpckldq 8(%1), %%mm0 \n\t"
"punpckldq 12(%1), %%mm3 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm3, %%mm4 \n\t"
"movq %%mm3, %%mm5 \n\t"
"psllq $8, %%mm0 \n\t"
"psllq $8, %%mm3 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm3 \n\t"
"psrlq $5, %%mm1 \n\t"
"psrlq $5, %%mm4 \n\t"
"pand %%mm6, %%mm1 \n\t"
"pand %%mm6, %%mm4 \n\t"
"psrlq $19, %%mm2 \n\t"
"psrlq $19, %%mm5 \n\t"
"pand %2, %%mm2 \n\t"
"pand %2, %%mm5 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm2, %%mm0 \n\t"
"por %%mm5, %%mm3 \n\t"
"psllq $16, %%mm3 \n\t"
"por %%mm3, %%mm0 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
:: "r"(d),"r"(s),"m"(blue_16mask):"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>rgb</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xF8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xFC00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xF80000</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">19</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb32to15</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %3, %%mm5 \n\t"
"movq %4, %%mm6 \n\t"
"movq %5, %%mm7 \n\t"
"jmp 2f \n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"movd 4(%1), %%mm3 \n\t"
"punpckldq 8(%1), %%mm0 \n\t"
"punpckldq 12(%1), %%mm3 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm3, %%mm4 \n\t"
"pand %%mm6, %%mm0 \n\t"
"pand %%mm6, %%mm3 \n\t"
"pmaddwd %%mm7, %%mm0 \n\t"
"pmaddwd %%mm7, %%mm3 \n\t"
"pand %%mm5, %%mm1 \n\t"
"pand %%mm5, %%mm4 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm4, %%mm3 \n\t"
"psrld $6, %%mm0 \n\t"
"pslld $10, %%mm3 \n\t"
"por %%mm3, %%mm0 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
"add $16, %1 \n\t"
"add $8, %0 \n\t"
"2: \n\t"
"cmp %2, %1 \n\t"
" jb 1b \n\t"
: "+r" (d), "+r"(s)
: "r" (mm_end), "m" (mask3215g), "m" (mask3216br), "m" (mul3215)
);</asm>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>rgb</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xF800</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xF80000</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb32tobgr15</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*src):"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %0, %%mm7 \n\t"
"movq %1, %%mm6 \n\t"
::"m"(red_15mask),"m"(green_15mask));</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"movd 4(%1), %%mm3 \n\t"
"punpckldq 8(%1), %%mm0 \n\t"
"punpckldq 12(%1), %%mm3 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm3, %%mm4 \n\t"
"movq %%mm3, %%mm5 \n\t"
"psllq $7, %%mm0 \n\t"
"psllq $7, %%mm3 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm3 \n\t"
"psrlq $6, %%mm1 \n\t"
"psrlq $6, %%mm4 \n\t"
"pand %%mm6, %%mm1 \n\t"
"pand %%mm6, %%mm4 \n\t"
"psrlq $19, %%mm2 \n\t"
"psrlq $19, %%mm5 \n\t"
"pand %2, %%mm2 \n\t"
"pand %2, %%mm5 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm2, %%mm0 \n\t"
"por %%mm5, %%mm3 \n\t"
"psllq $16, %%mm3 \n\t"
"por %%mm3, %%mm0 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
::"r"(d),"r"(s),"m"(blue_15mask):"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>rgb</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xF8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xF800</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>rgb</name><operator>&amp;</operator><literal type="number">0xF80000</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">19</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb24tobgr16</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*src):"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %0, %%mm7 \n\t"
"movq %1, %%mm6 \n\t"
::"m"(red_16mask),"m"(green_16mask));</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"movd 3(%1), %%mm3 \n\t"
"punpckldq 6(%1), %%mm0 \n\t"
"punpckldq 9(%1), %%mm3 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm3, %%mm4 \n\t"
"movq %%mm3, %%mm5 \n\t"
"psrlq $3, %%mm0 \n\t"
"psrlq $3, %%mm3 \n\t"
"pand %2, %%mm0 \n\t"
"pand %2, %%mm3 \n\t"
"psrlq $5, %%mm1 \n\t"
"psrlq $5, %%mm4 \n\t"
"pand %%mm6, %%mm1 \n\t"
"pand %%mm6, %%mm4 \n\t"
"psrlq $8, %%mm2 \n\t"
"psrlq $8, %%mm5 \n\t"
"pand %%mm7, %%mm2 \n\t"
"pand %%mm7, %%mm5 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm2, %%mm0 \n\t"
"por %%mm5, %%mm3 \n\t"
"psllq $16, %%mm3 \n\t"
"por %%mm3, %%mm0 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
::"r"(d),"r"(s),"m"(blue_16mask):"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>g</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name><operator>&amp;</operator><literal type="number">0xFC</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name><operator>&amp;</operator><literal type="number">0xF8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb24to16</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*src):"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %0, %%mm7 \n\t"
"movq %1, %%mm6 \n\t"
::"m"(red_16mask),"m"(green_16mask));</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"movd 3(%1), %%mm3 \n\t"
"punpckldq 6(%1), %%mm0 \n\t"
"punpckldq 9(%1), %%mm3 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm3, %%mm4 \n\t"
"movq %%mm3, %%mm5 \n\t"
"psllq $8, %%mm0 \n\t"
"psllq $8, %%mm3 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm3 \n\t"
"psrlq $5, %%mm1 \n\t"
"psrlq $5, %%mm4 \n\t"
"pand %%mm6, %%mm1 \n\t"
"pand %%mm6, %%mm4 \n\t"
"psrlq $19, %%mm2 \n\t"
"psrlq $19, %%mm5 \n\t"
"pand %2, %%mm2 \n\t"
"pand %2, %%mm5 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm2, %%mm0 \n\t"
"por %%mm5, %%mm3 \n\t"
"psllq $16, %%mm3 \n\t"
"por %%mm3, %%mm0 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
::"r"(d),"r"(s),"m"(blue_16mask):"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>g</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name><operator>&amp;</operator><literal type="number">0xFC</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name><operator>&amp;</operator><literal type="number">0xF8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb24tobgr15</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*src):"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %0, %%mm7 \n\t"
"movq %1, %%mm6 \n\t"
::"m"(red_15mask),"m"(green_15mask));</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"movd 3(%1), %%mm3 \n\t"
"punpckldq 6(%1), %%mm0 \n\t"
"punpckldq 9(%1), %%mm3 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm3, %%mm4 \n\t"
"movq %%mm3, %%mm5 \n\t"
"psrlq $3, %%mm0 \n\t"
"psrlq $3, %%mm3 \n\t"
"pand %2, %%mm0 \n\t"
"pand %2, %%mm3 \n\t"
"psrlq $6, %%mm1 \n\t"
"psrlq $6, %%mm4 \n\t"
"pand %%mm6, %%mm1 \n\t"
"pand %%mm6, %%mm4 \n\t"
"psrlq $9, %%mm2 \n\t"
"psrlq $9, %%mm5 \n\t"
"pand %%mm7, %%mm2 \n\t"
"pand %%mm7, %%mm5 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm2, %%mm0 \n\t"
"por %%mm5, %%mm3 \n\t"
"psllq $16, %%mm3 \n\t"
"por %%mm3, %%mm0 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
::"r"(d),"r"(s),"m"(blue_15mask):"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>g</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name><operator>&amp;</operator><literal type="number">0xF8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name><operator>&amp;</operator><literal type="number">0xF8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb24to15</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*src):"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(
"movq %0, %%mm7 \n\t"
"movq %1, %%mm6 \n\t"
::"m"(red_15mask),"m"(green_15mask));</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movd (%1), %%mm0 \n\t"
"movd 3(%1), %%mm3 \n\t"
"punpckldq 6(%1), %%mm0 \n\t"
"punpckldq 9(%1), %%mm3 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm3, %%mm4 \n\t"
"movq %%mm3, %%mm5 \n\t"
"psllq $7, %%mm0 \n\t"
"psllq $7, %%mm3 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm3 \n\t"
"psrlq $6, %%mm1 \n\t"
"psrlq $6, %%mm4 \n\t"
"pand %%mm6, %%mm1 \n\t"
"pand %%mm6, %%mm4 \n\t"
"psrlq $19, %%mm2 \n\t"
"psrlq $19, %%mm5 \n\t"
"pand %2, %%mm2 \n\t"
"pand %2, %%mm5 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm2, %%mm0 \n\t"
"por %%mm5, %%mm3 \n\t"
"psllq $16, %%mm3 \n\t"
"por %%mm3, %%mm0 \n\t"
MOVNTQ" %%mm0, (%0) \n\t"
::"r"(d),"r"(s),"m"(blue_15mask):"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>g</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>g</name><operator>&amp;</operator><literal type="number">0xF8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name><operator>&amp;</operator><literal type="number">0xF8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb15tobgr24</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*s):"memory");</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movq (%1), %%mm0 \n\t"
"movq (%1), %%mm1 \n\t"
"movq (%1), %%mm2 \n\t"
"pand %2, %%mm0 \n\t"
"pand %3, %%mm1 \n\t"
"pand %4, %%mm2 \n\t"
"psllq $5, %%mm0 \n\t"
"pmulhw "MANGLE(mul15_mid)", %%mm0 \n\t"
"pmulhw "MANGLE(mul15_mid)", %%mm1 \n\t"
"pmulhw "MANGLE(mul15_hi)", %%mm2 \n\t"
"movq %%mm0, %%mm3 \n\t"
"movq %%mm1, %%mm4 \n\t"
"movq %%mm2, %%mm5 \n\t"
"punpcklwd %5, %%mm0 \n\t"
"punpcklwd %5, %%mm1 \n\t"
"punpcklwd %5, %%mm2 \n\t"
"punpckhwd %5, %%mm3 \n\t"
"punpckhwd %5, %%mm4 \n\t"
"punpckhwd %5, %%mm5 \n\t"
"psllq $8, %%mm1 \n\t"
"psllq $16, %%mm2 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm2, %%mm0 \n\t"
"psllq $8, %%mm4 \n\t"
"psllq $16, %%mm5 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm5, %%mm3 \n\t"

"movq %%mm0, %%mm6 \n\t"
"movq %%mm3, %%mm7 \n\t"

"movq 8(%1), %%mm0 \n\t"
"movq 8(%1), %%mm1 \n\t"
"movq 8(%1), %%mm2 \n\t"
"pand %2, %%mm0 \n\t"
"pand %3, %%mm1 \n\t"
"pand %4, %%mm2 \n\t"
"psllq $5, %%mm0 \n\t"
"pmulhw "MANGLE(mul15_mid)", %%mm0 \n\t"
"pmulhw "MANGLE(mul15_mid)", %%mm1 \n\t"
"pmulhw "MANGLE(mul15_hi)", %%mm2 \n\t"
"movq %%mm0, %%mm3 \n\t"
"movq %%mm1, %%mm4 \n\t"
"movq %%mm2, %%mm5 \n\t"
"punpcklwd %5, %%mm0 \n\t"
"punpcklwd %5, %%mm1 \n\t"
"punpcklwd %5, %%mm2 \n\t"
"punpckhwd %5, %%mm3 \n\t"
"punpckhwd %5, %%mm4 \n\t"
"punpckhwd %5, %%mm5 \n\t"
"psllq $8, %%mm1 \n\t"
"psllq $16, %%mm2 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm2, %%mm0 \n\t"
"psllq $8, %%mm4 \n\t"
"psllq $16, %%mm5 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm5, %%mm3 \n\t"

:"=m"(*d)
:"r"(s),"m"(mask15b),"m"(mask15g),"m"(mask15r), "m"(mmx_null)
NAMED_CONSTRAINTS_ADD(mul15_mid,mul15_hi)
:"memory");</asm>

<asm>__asm__ <specifier>volatile</specifier>(
"movq %%mm0, %%mm4 \n\t"
"movq %%mm3, %%mm5 \n\t"
"movq %%mm6, %%mm0 \n\t"
"movq %%mm7, %%mm1 \n\t"

"movq %%mm4, %%mm6 \n\t"
"movq %%mm5, %%mm7 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm1, %%mm3 \n\t"

STORE_BGR24_MMX

:: "r"(d), "m"(*s)
NAMED_CONSTRAINTS_ADD(mask24l,mask24h)
:"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint16_t</name></type> <name>bgr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bgr</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x3E0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x3E0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x7C00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x7C00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb16tobgr24</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*s):"memory");</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movq (%1), %%mm0 \n\t"
"movq (%1), %%mm1 \n\t"
"movq (%1), %%mm2 \n\t"
"pand %2, %%mm0 \n\t"
"pand %3, %%mm1 \n\t"
"pand %4, %%mm2 \n\t"
"psllq $5, %%mm0 \n\t"
"psrlq $1, %%mm2 \n\t"
"pmulhw "MANGLE(mul15_mid)", %%mm0 \n\t"
"pmulhw "MANGLE(mul16_mid)", %%mm1 \n\t"
"pmulhw "MANGLE(mul15_hi)", %%mm2 \n\t"
"movq %%mm0, %%mm3 \n\t"
"movq %%mm1, %%mm4 \n\t"
"movq %%mm2, %%mm5 \n\t"
"punpcklwd %5, %%mm0 \n\t"
"punpcklwd %5, %%mm1 \n\t"
"punpcklwd %5, %%mm2 \n\t"
"punpckhwd %5, %%mm3 \n\t"
"punpckhwd %5, %%mm4 \n\t"
"punpckhwd %5, %%mm5 \n\t"
"psllq $8, %%mm1 \n\t"
"psllq $16, %%mm2 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm2, %%mm0 \n\t"
"psllq $8, %%mm4 \n\t"
"psllq $16, %%mm5 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm5, %%mm3 \n\t"

"movq %%mm0, %%mm6 \n\t"
"movq %%mm3, %%mm7 \n\t"

"movq 8(%1), %%mm0 \n\t"
"movq 8(%1), %%mm1 \n\t"
"movq 8(%1), %%mm2 \n\t"
"pand %2, %%mm0 \n\t"
"pand %3, %%mm1 \n\t"
"pand %4, %%mm2 \n\t"
"psllq $5, %%mm0 \n\t"
"psrlq $1, %%mm2 \n\t"
"pmulhw "MANGLE(mul15_mid)", %%mm0 \n\t"
"pmulhw "MANGLE(mul16_mid)", %%mm1 \n\t"
"pmulhw "MANGLE(mul15_hi)", %%mm2 \n\t"
"movq %%mm0, %%mm3 \n\t"
"movq %%mm1, %%mm4 \n\t"
"movq %%mm2, %%mm5 \n\t"
"punpcklwd %5, %%mm0 \n\t"
"punpcklwd %5, %%mm1 \n\t"
"punpcklwd %5, %%mm2 \n\t"
"punpckhwd %5, %%mm3 \n\t"
"punpckhwd %5, %%mm4 \n\t"
"punpckhwd %5, %%mm5 \n\t"
"psllq $8, %%mm1 \n\t"
"psllq $16, %%mm2 \n\t"
"por %%mm1, %%mm0 \n\t"
"por %%mm2, %%mm0 \n\t"
"psllq $8, %%mm4 \n\t"
"psllq $16, %%mm5 \n\t"
"por %%mm4, %%mm3 \n\t"
"por %%mm5, %%mm3 \n\t"
:"=m"(*d)
:"r"(s),"m"(mask16b),"m"(mask16g),"m"(mask16r),"m"(mmx_null)
NAMED_CONSTRAINTS_ADD(mul15_mid,mul16_mid,mul15_hi)
:"memory");</asm>

<asm>__asm__ <specifier>volatile</specifier>(
"movq %%mm0, %%mm4 \n\t"
"movq %%mm3, %%mm5 \n\t"
"movq %%mm6, %%mm0 \n\t"
"movq %%mm7, %%mm1 \n\t"

"movq %%mm4, %%mm6 \n\t"
"movq %%mm5, %%mm7 \n\t"
"movq %%mm0, %%mm2 \n\t"
"movq %%mm1, %%mm3 \n\t"

STORE_BGR24_MMX

:: "r"(d), "m"(*s)
NAMED_CONSTRAINTS_ADD(mask24l,mask24h)
:"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint16_t</name></type> <name>bgr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bgr</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x7E0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x7E0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0xF800</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0xF800</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK_RGB32</name></cpp:macro> <cpp:value>"packuswb %%mm7, %%mm0 \n\t" "packuswb %%mm7, %%mm1 \n\t" "packuswb %%mm7, %%mm2 \n\t" "punpcklbw %%mm1, %%mm0 \n\t" "punpcklbw %%mm6, %%mm2 \n\t" "movq %%mm0, %%mm3 \n\t" "punpcklwd %%mm2, %%mm0 \n\t" "punpckhwd %%mm2, %%mm3 \n\t" MOVNTQ" %%mm0, (%0) \n\t" MOVNTQ" %%mm3, 8(%0) \n\t"</cpp:value></cpp:define> 











<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb15to32</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*s):"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>("pxor %%mm7,%%mm7 \n\t":::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>("pcmpeqd %%mm6,%%mm6 \n\t":::"memory");</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movq (%1), %%mm0 \n\t"
"movq (%1), %%mm1 \n\t"
"movq (%1), %%mm2 \n\t"
"pand %2, %%mm0 \n\t"
"pand %3, %%mm1 \n\t"
"pand %4, %%mm2 \n\t"
"psllq $5, %%mm0 \n\t"
"pmulhw %5, %%mm0 \n\t"
"pmulhw %5, %%mm1 \n\t"
"pmulhw "MANGLE(mul15_hi)", %%mm2 \n\t"
PACK_RGB32
::"r"(d),"r"(s),"m"(mask15b),"m"(mask15g),"m"(mask15r) ,"m"(mul15_mid)
NAMED_CONSTRAINTS_ADD(mul15_hi)
:"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint16_t</name></type> <name>bgr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bgr</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x3E0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x3E0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x7C00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x7C00</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb16to32</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>mm_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>src_size</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(PREFETCH" %0"::"m"(*s):"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>("pxor %%mm7,%%mm7 \n\t":::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>("pcmpeqd %%mm6,%%mm6 \n\t":::"memory");</asm>
<expr_stmt><expr><name>mm_end</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>mm_end</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1) \n\t"
"movq (%1), %%mm0 \n\t"
"movq (%1), %%mm1 \n\t"
"movq (%1), %%mm2 \n\t"
"pand %2, %%mm0 \n\t"
"pand %3, %%mm1 \n\t"
"pand %4, %%mm2 \n\t"
"psllq $5, %%mm0 \n\t"
"psrlq $1, %%mm2 \n\t"
"pmulhw %5, %%mm0 \n\t"
"pmulhw "MANGLE(mul16_mid)", %%mm1 \n\t"
"pmulhw "MANGLE(mul15_hi)", %%mm2 \n\t"
PACK_RGB32
::"r"(d),"r"(s),"m"(mask16b),"m"(mask16g),"m"(mask16r),"m"(mul15_mid)
NAMED_CONSTRAINTS_ADD(mul16_mid,mul15_hi)
:"memory");</asm>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint16_t</name></type> <name>bgr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bgr</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x1F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x7E0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0x7E0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0xF800</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bgr</name><operator>&amp;</operator><literal type="number">0xF800</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb24tobgr24</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>mmx_size</name><init>= <expr><literal type="number">23</literal> <operator>-</operator> <name>src_size</name></expr></init></decl>;</decl_stmt>
<asm>__asm__ <specifier>volatile</specifier> (
"test %%"FF_REG_a", %%"FF_REG_a" \n\t"
"jns 2f \n\t"
"movq "MANGLE(mask24r)", %%mm5 \n\t"
"movq "MANGLE(mask24g)", %%mm6 \n\t"
"movq "MANGLE(mask24b)", %%mm7 \n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 32(%1, %%"FF_REG_a") \n\t"
"movq (%1, %%"FF_REG_a"), %%mm0 \n\t" 
"movq (%1, %%"FF_REG_a"), %%mm1 \n\t" 
"movq 2(%1, %%"FF_REG_a"), %%mm2 \n\t" 
"psllq $16, %%mm0 \n\t" 
"pand %%mm5, %%mm0 \n\t"
"pand %%mm6, %%mm1 \n\t"
"pand %%mm7, %%mm2 \n\t"
"por %%mm0, %%mm1 \n\t"
"por %%mm2, %%mm1 \n\t"
"movq 6(%1, %%"FF_REG_a"), %%mm0 \n\t" 
MOVNTQ" %%mm1,(%2, %%"FF_REG_a") \n\t" 
"movq 8(%1, %%"FF_REG_a"), %%mm1 \n\t" 
"movq 10(%1, %%"FF_REG_a"), %%mm2 \n\t" 
"pand %%mm7, %%mm0 \n\t"
"pand %%mm5, %%mm1 \n\t"
"pand %%mm6, %%mm2 \n\t"
"por %%mm0, %%mm1 \n\t"
"por %%mm2, %%mm1 \n\t"
"movq 14(%1, %%"FF_REG_a"), %%mm0 \n\t" 
MOVNTQ" %%mm1, 8(%2, %%"FF_REG_a")\n\t" 
"movq 16(%1, %%"FF_REG_a"), %%mm1 \n\t" 
"movq 18(%1, %%"FF_REG_a"), %%mm2 \n\t" 
"pand %%mm6, %%mm0 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm5, %%mm2 \n\t"
"por %%mm0, %%mm1 \n\t"
"por %%mm2, %%mm1 \n\t"
MOVNTQ" %%mm1, 16(%2, %%"FF_REG_a") \n\t"
"add $24, %%"FF_REG_a" \n\t"
" js 1b \n\t"
"2: \n\t"
: "+a" (mmx_size)
: "r" (src-mmx_size), "r"(dst-mmx_size)
NAMED_CONSTRAINTS_ADD(mask24r,mask24g,mask24b)
);</asm>

<asm>__asm__ <specifier>volatile</specifier>(SFENCE:::"memory");</asm>
<asm>__asm__ <specifier>volatile</specifier>(EMMS:::"memory");</asm>

<if_stmt><if>if <condition>(<expr><name>mmx_size</name><operator>==</operator><literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>src_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>+=</operator> <name>src_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_size</name><operator>=</operator> <literal type="number">23</literal><operator>-</operator><name>mmx_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>-=</operator> <name>src_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>-=</operator> <name>src_size</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>src_size</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>uint8_t</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>yuvPlanartoyuy2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ysrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>usrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertLumPerChroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>chromWidth</name><init>= <expr><name>width</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 32(%1, %%"FF_REG_a", 2) \n\t"
PREFETCH" 32(%2, %%"FF_REG_a") \n\t"
PREFETCH" 32(%3, %%"FF_REG_a") \n\t"
"movq (%2, %%"FF_REG_a"), %%mm0 \n\t" 
"movq %%mm0, %%mm2 \n\t" 
"movq (%3, %%"FF_REG_a"), %%mm1 \n\t" 
"punpcklbw %%mm1, %%mm0 \n\t" 
"punpckhbw %%mm1, %%mm2 \n\t" 

"movq (%1, %%"FF_REG_a",2), %%mm3 \n\t" 
"movq 8(%1, %%"FF_REG_a",2), %%mm5 \n\t" 
"movq %%mm3, %%mm4 \n\t" 
"movq %%mm5, %%mm6 \n\t" 
"punpcklbw %%mm0, %%mm3 \n\t" 
"punpckhbw %%mm0, %%mm4 \n\t" 
"punpcklbw %%mm2, %%mm5 \n\t" 
"punpckhbw %%mm2, %%mm6 \n\t" 

MOVNTQ" %%mm3, (%0, %%"FF_REG_a", 4) \n\t"
MOVNTQ" %%mm4, 8(%0, %%"FF_REG_a", 4) \n\t"
MOVNTQ" %%mm5, 16(%0, %%"FF_REG_a", 4) \n\t"
MOVNTQ" %%mm6, 24(%0, %%"FF_REG_a", 4) \n\t"

"add $8, %%"FF_REG_a" \n\t"
"cmp %4, %%"FF_REG_a" \n\t"
" jb 1b \n\t"
::"r"(dst), "r"(ysrc), "r"(usrc), "r"(vsrc), "g" (chromWidth)
: "%"FF_REG_a
);</asm>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name><operator>&amp;</operator><operator>(</operator><name>vertLumPerChroma</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>vertLumPerChroma</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>usrc</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrc</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ysrc</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__(EMMS" \n\t"
SFENCE" \n\t"
:::"memory");</asm>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>yv12toyuy2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ysrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>usrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>yuvPlanartoyuy2</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ysrc</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>lumStride</name></expr></argument>, <argument><expr><name>chromStride</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>yuvPlanartouyvy</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ysrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>usrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertLumPerChroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>chromWidth</name><init>= <expr><name>width</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 32(%1, %%"FF_REG_a", 2) \n\t"
PREFETCH" 32(%2, %%"FF_REG_a") \n\t"
PREFETCH" 32(%3, %%"FF_REG_a") \n\t"
"movq (%2, %%"FF_REG_a"), %%mm0 \n\t" 
"movq %%mm0, %%mm2 \n\t" 
"movq (%3, %%"FF_REG_a"), %%mm1 \n\t" 
"punpcklbw %%mm1, %%mm0 \n\t" 
"punpckhbw %%mm1, %%mm2 \n\t" 

"movq (%1, %%"FF_REG_a",2), %%mm3 \n\t" 
"movq 8(%1, %%"FF_REG_a",2), %%mm5 \n\t" 
"movq %%mm0, %%mm4 \n\t" 
"movq %%mm2, %%mm6 \n\t" 
"punpcklbw %%mm3, %%mm0 \n\t" 
"punpckhbw %%mm3, %%mm4 \n\t" 
"punpcklbw %%mm5, %%mm2 \n\t" 
"punpckhbw %%mm5, %%mm6 \n\t" 

MOVNTQ" %%mm0, (%0, %%"FF_REG_a", 4) \n\t"
MOVNTQ" %%mm4, 8(%0, %%"FF_REG_a", 4) \n\t"
MOVNTQ" %%mm2, 16(%0, %%"FF_REG_a", 4) \n\t"
MOVNTQ" %%mm6, 24(%0, %%"FF_REG_a", 4) \n\t"

"add $8, %%"FF_REG_a" \n\t"
"cmp %4, %%"FF_REG_a" \n\t"
" jb 1b \n\t"
::"r"(dst), "r"(ysrc), "r"(usrc), "r"(vsrc), "g" (chromWidth)
: "%"FF_REG_a
);</asm>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name><operator>&amp;</operator><operator>(</operator><name>vertLumPerChroma</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>vertLumPerChroma</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>usrc</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrc</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ysrc</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__(EMMS" \n\t"
SFENCE" \n\t"
:::"memory");</asm>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>yv12touyvy</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ysrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>usrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>yuvPlanartouyvy</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ysrc</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>lumStride</name></expr></argument>, <argument><expr><name>chromStride</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>yuv422ptouyvy</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ysrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>usrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>yuvPlanartouyvy</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ysrc</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>lumStride</name></expr></argument>, <argument><expr><name>chromStride</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>yuv422ptoyuy2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ysrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>usrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsrc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>yuvPlanartoyuy2</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ysrc</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>lumStride</name></expr></argument>, <argument><expr><name>chromStride</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>yuy2toyv12</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>chromWidth</name><init>= <expr><name>width</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
"xor %%"FF_REG_a", %%"FF_REG_a"\n\t"
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $8, %%mm7 \n\t" 
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 64(%0, %%"FF_REG_a", 4) \n\t"
"movq (%0, %%"FF_REG_a", 4), %%mm0 \n\t" 
"movq 8(%0, %%"FF_REG_a", 4), %%mm1 \n\t" 
"movq %%mm0, %%mm2 \n\t" 
"movq %%mm1, %%mm3 \n\t" 
"psrlw $8, %%mm0 \n\t" 
"psrlw $8, %%mm1 \n\t" 
"pand %%mm7, %%mm2 \n\t" 
"pand %%mm7, %%mm3 \n\t" 
"packuswb %%mm1, %%mm0 \n\t" 
"packuswb %%mm3, %%mm2 \n\t" 

MOVNTQ" %%mm2, (%1, %%"FF_REG_a", 2) \n\t"

"movq 16(%0, %%"FF_REG_a", 4), %%mm1 \n\t" 
"movq 24(%0, %%"FF_REG_a", 4), %%mm2 \n\t" 
"movq %%mm1, %%mm3 \n\t" 
"movq %%mm2, %%mm4 \n\t" 
"psrlw $8, %%mm1 \n\t" 
"psrlw $8, %%mm2 \n\t" 
"pand %%mm7, %%mm3 \n\t" 
"pand %%mm7, %%mm4 \n\t" 
"packuswb %%mm2, %%mm1 \n\t" 
"packuswb %%mm4, %%mm3 \n\t" 

MOVNTQ" %%mm3, 8(%1, %%"FF_REG_a", 2) \n\t"

"movq %%mm0, %%mm2 \n\t" 
"movq %%mm1, %%mm3 \n\t" 
"psrlw $8, %%mm0 \n\t" 
"psrlw $8, %%mm1 \n\t" 
"pand %%mm7, %%mm2 \n\t" 
"pand %%mm7, %%mm3 \n\t" 
"packuswb %%mm1, %%mm0 \n\t" 
"packuswb %%mm3, %%mm2 \n\t" 

MOVNTQ" %%mm0, (%3, %%"FF_REG_a") \n\t"
MOVNTQ" %%mm2, (%2, %%"FF_REG_a") \n\t"

"add $8, %%"FF_REG_a" \n\t"
"cmp %4, %%"FF_REG_a" \n\t"
" jb 1b \n\t"
::"r"(src), "r"(ydst), "r"(udst), "r"(vdst), "g" (chromWidth)
: "memory", "%"FF_REG_a
);</asm>

<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"xor %%"FF_REG_a", %%"FF_REG_a"\n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 64(%0, %%"FF_REG_a", 4) \n\t"
"movq (%0, %%"FF_REG_a", 4), %%mm0 \n\t" 
"movq 8(%0, %%"FF_REG_a", 4), %%mm1 \n\t" 
"movq 16(%0, %%"FF_REG_a", 4), %%mm2 \n\t" 
"movq 24(%0, %%"FF_REG_a", 4), %%mm3 \n\t" 
"pand %%mm7, %%mm0 \n\t" 
"pand %%mm7, %%mm1 \n\t" 
"pand %%mm7, %%mm2 \n\t" 
"pand %%mm7, %%mm3 \n\t" 
"packuswb %%mm1, %%mm0 \n\t" 
"packuswb %%mm3, %%mm2 \n\t" 

MOVNTQ" %%mm0, (%1, %%"FF_REG_a", 2) \n\t"
MOVNTQ" %%mm2, 8(%1, %%"FF_REG_a", 2) \n\t"

"add $8, %%"FF_REG_a"\n\t"
"cmp %4, %%"FF_REG_a"\n\t"
" jb 1b \n\t"

::"r"(src), "r"(ydst), "r"(udst), "r"(vdst), "g" (chromWidth)
: "memory", "%"FF_REG_a
);</asm>
<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__ <specifier>volatile</specifier>(EMMS" \n\t"
SFENCE" \n\t"
:::"memory");</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_MMXEXT</name> <operator>||</operator> <name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>planar2x</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <operator>(</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>srcHeight</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>mmxSize</name><init>= <expr><name>srcWidth</name><operator>&amp;</operator><operator>~</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mmxSize</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
"mov %4, %%"FF_REG_a" \n\t"
"movq "MANGLE(mmx_ff)", %%mm0 \n\t"
"movq (%0, %%"FF_REG_a"), %%mm4 \n\t"
"movq %%mm4, %%mm2 \n\t"
"psllq $8, %%mm4 \n\t"
"pand %%mm0, %%mm2 \n\t"
"por %%mm2, %%mm4 \n\t"
"movq (%1, %%"FF_REG_a"), %%mm5 \n\t"
"movq %%mm5, %%mm3 \n\t"
"psllq $8, %%mm5 \n\t"
"pand %%mm0, %%mm3 \n\t"
"por %%mm3, %%mm5 \n\t"
"1: \n\t"
"movq (%0, %%"FF_REG_a"), %%mm0 \n\t"
"movq (%1, %%"FF_REG_a"), %%mm1 \n\t"
"movq 1(%0, %%"FF_REG_a"), %%mm2 \n\t"
"movq 1(%1, %%"FF_REG_a"), %%mm3 \n\t"
PAVGB" %%mm0, %%mm5 \n\t"
PAVGB" %%mm0, %%mm3 \n\t"
PAVGB" %%mm0, %%mm5 \n\t"
PAVGB" %%mm0, %%mm3 \n\t"
PAVGB" %%mm1, %%mm4 \n\t"
PAVGB" %%mm1, %%mm2 \n\t"
PAVGB" %%mm1, %%mm4 \n\t"
PAVGB" %%mm1, %%mm2 \n\t"
"movq %%mm5, %%mm7 \n\t"
"movq %%mm4, %%mm6 \n\t"
"punpcklbw %%mm3, %%mm5 \n\t"
"punpckhbw %%mm3, %%mm7 \n\t"
"punpcklbw %%mm2, %%mm4 \n\t"
"punpckhbw %%mm2, %%mm6 \n\t"
MOVNTQ" %%mm5, (%2, %%"FF_REG_a", 2) \n\t"
MOVNTQ" %%mm7, 8(%2, %%"FF_REG_a", 2) \n\t"
MOVNTQ" %%mm4, (%3, %%"FF_REG_a", 2) \n\t"
MOVNTQ" %%mm6, 8(%3, %%"FF_REG_a", 2) \n\t"
"add $8, %%"FF_REG_a" \n\t"
"movq -1(%0, %%"FF_REG_a"), %%mm4 \n\t"
"movq -1(%1, %%"FF_REG_a"), %%mm5 \n\t"
" js 1b \n\t"
:: "r" (src + mmxSize ), "r" (src + srcStride + mmxSize ),
"r" (dst + mmxSize*2), "r" (dst + dstStride + mmxSize*2),
"g" (-mmxSize)
NAMED_CONSTRAINTS_ADD(mmx_ff)
: "%"FF_REG_a
);</asm>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mmxSize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>src</name><index>[<expr><name>srcStride</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>dstStride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>srcStride</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><name>mmxSize</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><name>srcStride</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><name>dstStride</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <operator>(</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><name>srcStride</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><name>dstStride</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><name>srcStride</name></expr> ]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><name>srcStride</name></expr> ]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>srcWidth</name><operator>*</operator><literal type="number">2</literal> <operator>-</operator><literal type="number">1</literal></expr> ]</index></name><operator>=</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>srcWidth</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>srcStride</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>srcWidth</name><operator>*</operator><literal type="number">2</literal> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>dstStride</name></expr>]</index></name><operator>=</operator> <operator>(</operator> <name><name>src</name><index>[<expr><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>srcWidth</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>srcStride</name></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>+=</operator><name>dstStride</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>+=</operator><name>srcStride</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <operator>(</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><name>srcWidth</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(EMMS" \n\t"
SFENCE" \n\t"
:::"memory");</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>uyvytoyv12</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>chromWidth</name><init>= <expr><name>width</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t"
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $8, %%mm7 \n\t" 
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 64(%0, %%"FF_REG_a", 4) \n\t"
"movq (%0, %%"FF_REG_a", 4), %%mm0 \n\t" 
"movq 8(%0, %%"FF_REG_a", 4), %%mm1 \n\t" 
"movq %%mm0, %%mm2 \n\t" 
"movq %%mm1, %%mm3 \n\t" 
"pand %%mm7, %%mm0 \n\t" 
"pand %%mm7, %%mm1 \n\t" 
"psrlw $8, %%mm2 \n\t" 
"psrlw $8, %%mm3 \n\t" 
"packuswb %%mm1, %%mm0 \n\t" 
"packuswb %%mm3, %%mm2 \n\t" 

MOVNTQ" %%mm2, (%1, %%"FF_REG_a", 2) \n\t"

"movq 16(%0, %%"FF_REG_a", 4), %%mm1 \n\t" 
"movq 24(%0, %%"FF_REG_a", 4), %%mm2 \n\t" 
"movq %%mm1, %%mm3 \n\t" 
"movq %%mm2, %%mm4 \n\t" 
"pand %%mm7, %%mm1 \n\t" 
"pand %%mm7, %%mm2 \n\t" 
"psrlw $8, %%mm3 \n\t" 
"psrlw $8, %%mm4 \n\t" 
"packuswb %%mm2, %%mm1 \n\t" 
"packuswb %%mm4, %%mm3 \n\t" 

MOVNTQ" %%mm3, 8(%1, %%"FF_REG_a", 2) \n\t"

"movq %%mm0, %%mm2 \n\t" 
"movq %%mm1, %%mm3 \n\t" 
"psrlw $8, %%mm0 \n\t" 
"psrlw $8, %%mm1 \n\t" 
"pand %%mm7, %%mm2 \n\t" 
"pand %%mm7, %%mm3 \n\t" 
"packuswb %%mm1, %%mm0 \n\t" 
"packuswb %%mm3, %%mm2 \n\t" 

MOVNTQ" %%mm0, (%3, %%"FF_REG_a") \n\t"
MOVNTQ" %%mm2, (%2, %%"FF_REG_a") \n\t"

"add $8, %%"FF_REG_a" \n\t"
"cmp %4, %%"FF_REG_a" \n\t"
" jb 1b \n\t"
::"r"(src), "r"(ydst), "r"(udst), "r"(vdst), "g" (chromWidth)
: "memory", "%"FF_REG_a
);</asm>

<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 64(%0, %%"FF_REG_a", 4) \n\t"
"movq (%0, %%"FF_REG_a", 4), %%mm0 \n\t" 
"movq 8(%0, %%"FF_REG_a", 4), %%mm1 \n\t" 
"movq 16(%0, %%"FF_REG_a", 4), %%mm2 \n\t" 
"movq 24(%0, %%"FF_REG_a", 4), %%mm3 \n\t" 
"psrlw $8, %%mm0 \n\t" 
"psrlw $8, %%mm1 \n\t" 
"psrlw $8, %%mm2 \n\t" 
"psrlw $8, %%mm3 \n\t" 
"packuswb %%mm1, %%mm0 \n\t" 
"packuswb %%mm3, %%mm2 \n\t" 

MOVNTQ" %%mm0, (%1, %%"FF_REG_a", 2) \n\t"
MOVNTQ" %%mm2, 8(%1, %%"FF_REG_a", 2) \n\t"

"add $8, %%"FF_REG_a" \n\t"
"cmp %4, %%"FF_REG_a" \n\t"
" jb 1b \n\t"

::"r"(src), "r"(ydst), "r"(udst), "r"(vdst), "g" (chromWidth)
: "memory", "%"FF_REG_a
);</asm>
<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__ <specifier>volatile</specifier>(EMMS" \n\t"
SFENCE" \n\t"
:::"memory");</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>rgb24toyv12</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGR2Y_IDX</name></cpp:macro> <cpp:value>"16*4+16*32"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGR2U_IDX</name></cpp:macro> <cpp:value>"16*4+16*33"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGR2V_IDX</name></cpp:macro> <cpp:value>"16*4+16*34"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>chromWidth</name><init>= <expr><name>width</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_rgb24toyv12_c</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>udst</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>lumStride</name></expr></argument>, <argument><expr><name>chromStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name><operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
"mov %2, %%"FF_REG_a"\n\t"
"movq "BGR2Y_IDX"(%3), %%mm6 \n\t"
"movq "MANGLE(ff_w1111)", %%mm5 \n\t"
"pxor %%mm7, %%mm7 \n\t"
"lea (%%"FF_REG_a", %%"FF_REG_a", 2), %%"FF_REG_d" \n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 64(%0, %%"FF_REG_d") \n\t"
"movd (%0, %%"FF_REG_d"), %%mm0 \n\t"
"movd 3(%0, %%"FF_REG_d"), %%mm1 \n\t"
"punpcklbw %%mm7, %%mm0 \n\t"
"punpcklbw %%mm7, %%mm1 \n\t"
"movd 6(%0, %%"FF_REG_d"), %%mm2 \n\t"
"movd 9(%0, %%"FF_REG_d"), %%mm3 \n\t"
"punpcklbw %%mm7, %%mm2 \n\t"
"punpcklbw %%mm7, %%mm3 \n\t"
"pmaddwd %%mm6, %%mm0 \n\t"
"pmaddwd %%mm6, %%mm1 \n\t"
"pmaddwd %%mm6, %%mm2 \n\t"
"pmaddwd %%mm6, %%mm3 \n\t"
"psrad $8, %%mm0 \n\t"
"psrad $8, %%mm1 \n\t"
"psrad $8, %%mm2 \n\t"
"psrad $8, %%mm3 \n\t"
"packssdw %%mm1, %%mm0 \n\t"
"packssdw %%mm3, %%mm2 \n\t"
"pmaddwd %%mm5, %%mm0 \n\t"
"pmaddwd %%mm5, %%mm2 \n\t"
"packssdw %%mm2, %%mm0 \n\t"
"psraw $7, %%mm0 \n\t"

"movd 12(%0, %%"FF_REG_d"), %%mm4 \n\t"
"movd 15(%0, %%"FF_REG_d"), %%mm1 \n\t"
"punpcklbw %%mm7, %%mm4 \n\t"
"punpcklbw %%mm7, %%mm1 \n\t"
"movd 18(%0, %%"FF_REG_d"), %%mm2 \n\t"
"movd 21(%0, %%"FF_REG_d"), %%mm3 \n\t"
"punpcklbw %%mm7, %%mm2 \n\t"
"punpcklbw %%mm7, %%mm3 \n\t"
"pmaddwd %%mm6, %%mm4 \n\t"
"pmaddwd %%mm6, %%mm1 \n\t"
"pmaddwd %%mm6, %%mm2 \n\t"
"pmaddwd %%mm6, %%mm3 \n\t"
"psrad $8, %%mm4 \n\t"
"psrad $8, %%mm1 \n\t"
"psrad $8, %%mm2 \n\t"
"psrad $8, %%mm3 \n\t"
"packssdw %%mm1, %%mm4 \n\t"
"packssdw %%mm3, %%mm2 \n\t"
"pmaddwd %%mm5, %%mm4 \n\t"
"pmaddwd %%mm5, %%mm2 \n\t"
"add $24, %%"FF_REG_d"\n\t"
"packssdw %%mm2, %%mm4 \n\t"
"psraw $7, %%mm4 \n\t"

"packuswb %%mm4, %%mm0 \n\t"
"paddusb "MANGLE(ff_bgr2YOffset)", %%mm0 \n\t"

MOVNTQ" %%mm0, (%1, %%"FF_REG_a") \n\t"
"add $8, %%"FF_REG_a" \n\t"
" js 1b \n\t"
: : "r" (src+width*3), "r" (ydst+width), "g" ((x86_reg)-width), "r"(rgb2yuv)
NAMED_CONSTRAINTS_ADD(ff_w1111,ff_bgr2YOffset)
: "%"FF_REG_a, "%"FF_REG_d
);</asm>
<expr_stmt><expr><name>ydst</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>srcStride</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"mov %4, %%"FF_REG_a"\n\t"
"movq "MANGLE(ff_w1111)", %%mm5 \n\t"
"movq "BGR2U_IDX"(%5), %%mm6 \n\t"
"pxor %%mm7, %%mm7 \n\t"
"lea (%%"FF_REG_a", %%"FF_REG_a", 2), %%"FF_REG_d" \n\t"
"add %%"FF_REG_d", %%"FF_REG_d"\n\t"
".p2align 4 \n\t"
"1: \n\t"
PREFETCH" 64(%0, %%"FF_REG_d") \n\t"
PREFETCH" 64(%1, %%"FF_REG_d") \n\t"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_MMXEXT</name> <operator>||</operator> <name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
"movq (%0, %%"FF_REG_d"), %%mm0 \n\t"
"movq (%1, %%"FF_REG_d"), %%mm1 \n\t"
"movq 6(%0, %%"FF_REG_d"), %%mm2 \n\t"
"movq 6(%1, %%"FF_REG_d"), %%mm3 \n\t"
PAVGB" %%mm1, %%mm0 \n\t"
PAVGB" %%mm3, %%mm2 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"psrlq $24, %%mm0 \n\t"
"psrlq $24, %%mm2 \n\t"
PAVGB" %%mm1, %%mm0 \n\t"
PAVGB" %%mm3, %%mm2 \n\t"
"punpcklbw %%mm7, %%mm0 \n\t"
"punpcklbw %%mm7, %%mm2 \n\t"
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
"movd (%0, %%"FF_REG_d"), %%mm0 \n\t"
"movd (%1, %%"FF_REG_d"), %%mm1 \n\t"
"movd 3(%0, %%"FF_REG_d"), %%mm2 \n\t"
"movd 3(%1, %%"FF_REG_d"), %%mm3 \n\t"
"punpcklbw %%mm7, %%mm0 \n\t"
"punpcklbw %%mm7, %%mm1 \n\t"
"punpcklbw %%mm7, %%mm2 \n\t"
"punpcklbw %%mm7, %%mm3 \n\t"
"paddw %%mm1, %%mm0 \n\t"
"paddw %%mm3, %%mm2 \n\t"
"paddw %%mm2, %%mm0 \n\t"
"movd 6(%0, %%"FF_REG_d"), %%mm4 \n\t"
"movd 6(%1, %%"FF_REG_d"), %%mm1 \n\t"
"movd 9(%0, %%"FF_REG_d"), %%mm2 \n\t"
"movd 9(%1, %%"FF_REG_d"), %%mm3 \n\t"
"punpcklbw %%mm7, %%mm4 \n\t"
"punpcklbw %%mm7, %%mm1 \n\t"
"punpcklbw %%mm7, %%mm2 \n\t"
"punpcklbw %%mm7, %%mm3 \n\t"
"paddw %%mm1, %%mm4 \n\t"
"paddw %%mm3, %%mm2 \n\t"
"paddw %%mm4, %%mm2 \n\t"
"psrlw $2, %%mm0 \n\t"
"psrlw $2, %%mm2 \n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"movq "BGR2V_IDX"(%5), %%mm1 \n\t"
"movq "BGR2V_IDX"(%5), %%mm3 \n\t"

"pmaddwd %%mm0, %%mm1 \n\t"
"pmaddwd %%mm2, %%mm3 \n\t"
"pmaddwd %%mm6, %%mm0 \n\t"
"pmaddwd %%mm6, %%mm2 \n\t"
"psrad $8, %%mm0 \n\t"
"psrad $8, %%mm1 \n\t"
"psrad $8, %%mm2 \n\t"
"psrad $8, %%mm3 \n\t"
"packssdw %%mm2, %%mm0 \n\t"
"packssdw %%mm3, %%mm1 \n\t"
"pmaddwd %%mm5, %%mm0 \n\t"
"pmaddwd %%mm5, %%mm1 \n\t"
"packssdw %%mm1, %%mm0 \n\t" 
"psraw $7, %%mm0 \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_MMXEXT</name> <operator>||</operator> <name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
"movq 12(%0, %%"FF_REG_d"), %%mm4 \n\t"
"movq 12(%1, %%"FF_REG_d"), %%mm1 \n\t"
"movq 18(%0, %%"FF_REG_d"), %%mm2 \n\t"
"movq 18(%1, %%"FF_REG_d"), %%mm3 \n\t"
PAVGB" %%mm1, %%mm4 \n\t"
PAVGB" %%mm3, %%mm2 \n\t"
"movq %%mm4, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"psrlq $24, %%mm4 \n\t"
"psrlq $24, %%mm2 \n\t"
PAVGB" %%mm1, %%mm4 \n\t"
PAVGB" %%mm3, %%mm2 \n\t"
"punpcklbw %%mm7, %%mm4 \n\t"
"punpcklbw %%mm7, %%mm2 \n\t"
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
"movd 12(%0, %%"FF_REG_d"), %%mm4 \n\t"
"movd 12(%1, %%"FF_REG_d"), %%mm1 \n\t"
"movd 15(%0, %%"FF_REG_d"), %%mm2 \n\t"
"movd 15(%1, %%"FF_REG_d"), %%mm3 \n\t"
"punpcklbw %%mm7, %%mm4 \n\t"
"punpcklbw %%mm7, %%mm1 \n\t"
"punpcklbw %%mm7, %%mm2 \n\t"
"punpcklbw %%mm7, %%mm3 \n\t"
"paddw %%mm1, %%mm4 \n\t"
"paddw %%mm3, %%mm2 \n\t"
"paddw %%mm2, %%mm4 \n\t"
"movd 18(%0, %%"FF_REG_d"), %%mm5 \n\t"
"movd 18(%1, %%"FF_REG_d"), %%mm1 \n\t"
"movd 21(%0, %%"FF_REG_d"), %%mm2 \n\t"
"movd 21(%1, %%"FF_REG_d"), %%mm3 \n\t"
"punpcklbw %%mm7, %%mm5 \n\t"
"punpcklbw %%mm7, %%mm1 \n\t"
"punpcklbw %%mm7, %%mm2 \n\t"
"punpcklbw %%mm7, %%mm3 \n\t"
"paddw %%mm1, %%mm5 \n\t"
"paddw %%mm3, %%mm2 \n\t"
"paddw %%mm5, %%mm2 \n\t"
"movq "MANGLE(ff_w1111)", %%mm5 \n\t"
"psrlw $2, %%mm4 \n\t"
"psrlw $2, %%mm2 \n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"movq "BGR2V_IDX"(%5), %%mm1 \n\t"
"movq "BGR2V_IDX"(%5), %%mm3 \n\t"

"pmaddwd %%mm4, %%mm1 \n\t"
"pmaddwd %%mm2, %%mm3 \n\t"
"pmaddwd %%mm6, %%mm4 \n\t"
"pmaddwd %%mm6, %%mm2 \n\t"
"psrad $8, %%mm4 \n\t"
"psrad $8, %%mm1 \n\t"
"psrad $8, %%mm2 \n\t"
"psrad $8, %%mm3 \n\t"
"packssdw %%mm2, %%mm4 \n\t"
"packssdw %%mm3, %%mm1 \n\t"
"pmaddwd %%mm5, %%mm4 \n\t"
"pmaddwd %%mm5, %%mm1 \n\t"
"add $24, %%"FF_REG_d"\n\t"
"packssdw %%mm1, %%mm4 \n\t" 
"psraw $7, %%mm4 \n\t"

"movq %%mm0, %%mm1 \n\t"
"punpckldq %%mm4, %%mm0 \n\t"
"punpckhdq %%mm4, %%mm1 \n\t"
"packsswb %%mm1, %%mm0 \n\t"
"paddb "MANGLE(ff_bgr2UVOffset)", %%mm0 \n\t"
"movd %%mm0, (%2, %%"FF_REG_a") \n\t"
"punpckhdq %%mm0, %%mm0 \n\t"
"movd %%mm0, (%3, %%"FF_REG_a") \n\t"
"add $4, %%"FF_REG_a" \n\t"
" js 1b \n\t"
: : "r" (src+chromWidth*6), "r" (src+srcStride+chromWidth*6), "r" (udst+chromWidth), "r" (vdst+chromWidth), "g" (-chromWidth), "r"(rgb2yuv)
NAMED_CONSTRAINTS_ADD(ff_w1111,ff_bgr2UVOffset)
: "%"FF_REG_a, "%"FF_REG_d
);</asm>

<expr_stmt><expr><name>udst</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<asm>__asm__ <specifier>volatile</specifier>(EMMS" \n\t"
SFENCE" \n\t"
:::"memory");</asm>

<expr_stmt><expr><call><name>ff_rgb24toyv12_c</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>udst</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name><operator>-</operator><name>y</name></expr></argument>, <argument><expr><name>lumStride</name></expr></argument>, <argument><expr><name>chromStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>rgb2yuv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>COMPILE_TEMPLATE_AVX</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>interleaveBytes</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src2Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>h</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>src1</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>src2</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>dest</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<asm>__asm__(
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t"
"1: \n\t"
PREFETCH" 64(%1, %%"FF_REG_a") \n\t"
PREFETCH" 64(%2, %%"FF_REG_a") \n\t"
"movdqa (%1, %%"FF_REG_a"), %%xmm0 \n\t"
"movdqa (%1, %%"FF_REG_a"), %%xmm1 \n\t"
"movdqa (%2, %%"FF_REG_a"), %%xmm2 \n\t"
"punpcklbw %%xmm2, %%xmm0 \n\t"
"punpckhbw %%xmm2, %%xmm1 \n\t"
"movntdq %%xmm0, (%0, %%"FF_REG_a", 2) \n\t"
"movntdq %%xmm1, 16(%0, %%"FF_REG_a", 2) \n\t"
"add $16, %%"FF_REG_a" \n\t"
"cmp %3, %%"FF_REG_a" \n\t"
" jb 1b \n\t"
::"r"(dest), "r"(src1), "r"(src2), "r" ((x86_reg)width-15)
: "memory", XMM_CLOBBERS("xmm0", "xmm1", "xmm2",) "%"FF_REG_a
);</asm>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<asm>__asm__(
"xor %%"FF_REG_a", %%"FF_REG_a" \n\t"
"1: \n\t"
PREFETCH" 64(%1, %%"FF_REG_a") \n\t"
PREFETCH" 64(%2, %%"FF_REG_a") \n\t"
"movq (%1, %%"FF_REG_a"), %%mm0 \n\t"
"movq 8(%1, %%"FF_REG_a"), %%mm2 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"movq (%2, %%"FF_REG_a"), %%mm4 \n\t"
"movq 8(%2, %%"FF_REG_a"), %%mm5 \n\t"
"punpcklbw %%mm4, %%mm0 \n\t"
"punpckhbw %%mm4, %%mm1 \n\t"
"punpcklbw %%mm5, %%mm2 \n\t"
"punpckhbw %%mm5, %%mm3 \n\t"
MOVNTQ" %%mm0, (%0, %%"FF_REG_a", 2) \n\t"
MOVNTQ" %%mm1, 8(%0, %%"FF_REG_a", 2) \n\t"
MOVNTQ" %%mm2, 16(%0, %%"FF_REG_a", 2) \n\t"
MOVNTQ" %%mm3, 24(%0, %%"FF_REG_a", 2) \n\t"
"add $16, %%"FF_REG_a" \n\t"
"cmp %3, %%"FF_REG_a" \n\t"
" jb 1b \n\t"
::"r"(dest), "r"(src1), "r"(src2), "r" ((x86_reg)width-15)
: "memory", "%"FF_REG_a
);</asm></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>w</name><operator>=</operator> <operator>(</operator><name>width</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>w</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>w</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src2</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>src1Stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>src2Stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__(
EMMS" \n\t"
SFENCE" \n\t"
::: "memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AVX</name> <operator>||</operator> <name>HAVE_AVX_EXTERNAL</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ARCH_X86_32</name> <operator>||</operator> <name>COMPILE_TEMPLATE_SSE2</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>COMPILE_TEMPLATE_MMXEXT</name> <operator>==</operator> <name>COMPILE_TEMPLATE_SSE2</name> <operator>&amp;&amp;</operator> <name>HAVE_X86ASM</name></expr></cpp:if>
<function_decl><type><name>void</name> <name>RENAME</name></type>(<name>ff_nv12ToUV</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>deinterleaveBytes</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dst1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst2Stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<function_decl><type><name>RENAME</name></type>(<name>ff_nv12ToUV</name>)<parameter_list>(<parameter><decl><type><name>dst1</name></type></decl></parameter>, <parameter><decl><type><name>dst2</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>width</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name>dst1Stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>+=</operator> <name>dst2Stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>
EMMS" \n\t"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
SFENCE" \n\t"
::: "memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>vu9_to_vu12</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcStride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name><operator>=</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>h</name><operator>=</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" %0 \n\t"
PREFETCH" %1 \n\t"
::"m"(*(src1+srcStride1)),"m"(*(src2+srcStride2)):"memory");</asm>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s1</name><init>=<expr><name>src1</name><operator>+</operator><name>srcStride1</name><operator>*</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>d</name><init>=<expr><name>dst1</name><operator>+</operator><name>dstStride1</name><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>w</name><operator>-</operator><literal type="number">31</literal></expr>;</condition><incr><expr><name>x</name><operator>+=</operator><literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1,%2) \n\t"
"movq (%1,%2), %%mm0 \n\t"
"movq 8(%1,%2), %%mm2 \n\t"
"movq 16(%1,%2), %%mm4 \n\t"
"movq 24(%1,%2), %%mm6 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"movq %%mm4, %%mm5 \n\t"
"movq %%mm6, %%mm7 \n\t"
"punpcklbw %%mm0, %%mm0 \n\t"
"punpckhbw %%mm1, %%mm1 \n\t"
"punpcklbw %%mm2, %%mm2 \n\t"
"punpckhbw %%mm3, %%mm3 \n\t"
"punpcklbw %%mm4, %%mm4 \n\t"
"punpckhbw %%mm5, %%mm5 \n\t"
"punpcklbw %%mm6, %%mm6 \n\t"
"punpckhbw %%mm7, %%mm7 \n\t"
MOVNTQ" %%mm0, (%0,%2,2) \n\t"
MOVNTQ" %%mm1, 8(%0,%2,2) \n\t"
MOVNTQ" %%mm2, 16(%0,%2,2) \n\t"
MOVNTQ" %%mm3, 24(%0,%2,2) \n\t"
MOVNTQ" %%mm4, 32(%0,%2,2) \n\t"
MOVNTQ" %%mm5, 40(%0,%2,2) \n\t"
MOVNTQ" %%mm6, 48(%0,%2,2) \n\t"
MOVNTQ" %%mm7, 56(%0,%2,2)"
:: "r"(d), "r"(s1), "r"(x)
:"memory");</asm>
</block_content>}</block></for>
<for>for <control>(<init>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>s2</name><init>=<expr><name>src2</name><operator>+</operator><name>srcStride2</name><operator>*</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>d</name><init>=<expr><name>dst2</name><operator>+</operator><name>dstStride2</name><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>w</name><operator>-</operator><literal type="number">31</literal></expr>;</condition><incr><expr><name>x</name><operator>+=</operator><literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1,%2) \n\t"
"movq (%1,%2), %%mm0 \n\t"
"movq 8(%1,%2), %%mm2 \n\t"
"movq 16(%1,%2), %%mm4 \n\t"
"movq 24(%1,%2), %%mm6 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"movq %%mm4, %%mm5 \n\t"
"movq %%mm6, %%mm7 \n\t"
"punpcklbw %%mm0, %%mm0 \n\t"
"punpckhbw %%mm1, %%mm1 \n\t"
"punpcklbw %%mm2, %%mm2 \n\t"
"punpckhbw %%mm3, %%mm3 \n\t"
"punpcklbw %%mm4, %%mm4 \n\t"
"punpckhbw %%mm5, %%mm5 \n\t"
"punpcklbw %%mm6, %%mm6 \n\t"
"punpckhbw %%mm7, %%mm7 \n\t"
MOVNTQ" %%mm0, (%0,%2,2) \n\t"
MOVNTQ" %%mm1, 8(%0,%2,2) \n\t"
MOVNTQ" %%mm2, 16(%0,%2,2) \n\t"
MOVNTQ" %%mm3, 24(%0,%2,2) \n\t"
MOVNTQ" %%mm4, 32(%0,%2,2) \n\t"
MOVNTQ" %%mm5, 40(%0,%2,2) \n\t"
MOVNTQ" %%mm6, 48(%0,%2,2) \n\t"
MOVNTQ" %%mm7, 56(%0,%2,2)"
:: "r"(d), "r"(s2), "r"(x)
:"memory");</asm>
</block_content>}</block></for>
<for>for <control>(<init>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<asm>__asm__(
EMMS" \n\t"
SFENCE" \n\t"
::: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>RENAME</name></type>(<name>yvu9_to_yuy2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src3</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcStride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcStride3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>x86_reg</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name><operator>=</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>h</name><operator>=</operator><name>height</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>yp</name><init>=<expr><name>src1</name><operator>+</operator><name>srcStride1</name><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>up</name><init>=<expr><name>src2</name><operator>+</operator><name>srcStride2</name><operator>*</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>vp</name><init>=<expr><name>src3</name><operator>+</operator><name>srcStride3</name><operator>*</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>d</name><init>=<expr><name>dst</name><operator>+</operator><name>dstStride</name><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>w</name><operator>-</operator><literal type="number">7</literal></expr>;</condition><incr><expr><name>x</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>(
PREFETCH" 32(%1, %0) \n\t"
PREFETCH" 32(%2, %0) \n\t"
PREFETCH" 32(%3, %0) \n\t"
"movq (%1, %0, 4), %%mm0 \n\t" 
"movq (%2, %0), %%mm1 \n\t" 
"movq (%3, %0), %%mm2 \n\t" 
"movq %%mm0, %%mm3 \n\t" 
"movq %%mm1, %%mm4 \n\t" 
"movq %%mm2, %%mm5 \n\t" 
"punpcklbw %%mm1, %%mm1 \n\t" 
"punpcklbw %%mm2, %%mm2 \n\t" 
"punpckhbw %%mm4, %%mm4 \n\t" 
"punpckhbw %%mm5, %%mm5 \n\t" 

"movq %%mm1, %%mm6 \n\t"
"punpcklbw %%mm2, %%mm1 \n\t" 
"punpcklbw %%mm1, %%mm0 \n\t" 
"punpckhbw %%mm1, %%mm3 \n\t" 
MOVNTQ" %%mm0, (%4, %0, 8) \n\t"
MOVNTQ" %%mm3, 8(%4, %0, 8) \n\t"

"punpckhbw %%mm2, %%mm6 \n\t" 
"movq 8(%1, %0, 4), %%mm0 \n\t"
"movq %%mm0, %%mm3 \n\t"
"punpcklbw %%mm6, %%mm0 \n\t" 
"punpckhbw %%mm6, %%mm3 \n\t" 
MOVNTQ" %%mm0, 16(%4, %0, 8) \n\t"
MOVNTQ" %%mm3, 24(%4, %0, 8) \n\t"

"movq %%mm4, %%mm6 \n\t"
"movq 16(%1, %0, 4), %%mm0 \n\t"
"movq %%mm0, %%mm3 \n\t"
"punpcklbw %%mm5, %%mm4 \n\t"
"punpcklbw %%mm4, %%mm0 \n\t" 
"punpckhbw %%mm4, %%mm3 \n\t" 
MOVNTQ" %%mm0, 32(%4, %0, 8) \n\t"
MOVNTQ" %%mm3, 40(%4, %0, 8) \n\t"

"punpckhbw %%mm5, %%mm6 \n\t"
"movq 24(%1, %0, 4), %%mm0 \n\t"
"movq %%mm0, %%mm3 \n\t"
"punpcklbw %%mm6, %%mm0 \n\t" 
"punpckhbw %%mm6, %%mm3 \n\t" 
MOVNTQ" %%mm0, 48(%4, %0, 8) \n\t"
MOVNTQ" %%mm3, 56(%4, %0, 8) \n\t"

: "+r" (x)
: "r"(yp), "r" (up), "r"(vp), "r"(d)
:"memory");</asm>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x2</name> <init>= <expr><name>x</name><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>yp</name><index>[<expr><name>x2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>up</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>yp</name><index>[<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>vp</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>yp</name><index>[<expr><name>x2</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>up</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>yp</name><index>[<expr><name>x2</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>vp</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<asm>__asm__(
EMMS" \n\t"
SFENCE" \n\t"
::: "memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>extract_even</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>=</operator> <operator>-</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $8, %%mm7 \n\t"
"1: \n\t"
"movq -30(%1, %0, 2), %%mm0 \n\t"
"movq -22(%1, %0, 2), %%mm1 \n\t"
"movq -14(%1, %0, 2), %%mm2 \n\t"
"movq -6(%1, %0, 2), %%mm3 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm7, %%mm2 \n\t"
"pand %%mm7, %%mm3 \n\t"
"packuswb %%mm1, %%mm0 \n\t"
"packuswb %%mm3, %%mm2 \n\t"
MOVNTQ" %%mm0,-15(%2, %0) \n\t"
MOVNTQ" %%mm2,- 7(%2, %0) \n\t"
"add $16, %0 \n\t"
" js 1b \n\t"
: "+r"(count)
: "r"(src), "r"(dst)
);</asm>
<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>count</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>count</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>extract_odd</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>=</operator> <operator>-</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $8, %%mm7 \n\t"
"1: \n\t"
"movq -32(%1, %0, 2), %%mm0 \n\t"
"movq -24(%1, %0, 2), %%mm1 \n\t"
"movq -16(%1, %0, 2), %%mm2 \n\t"
"movq -8(%1, %0, 2), %%mm3 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm7, %%mm2 \n\t"
"pand %%mm7, %%mm3 \n\t"
"packuswb %%mm1, %%mm0 \n\t"
"packuswb %%mm3, %%mm2 \n\t"
MOVNTQ" %%mm0,-16(%2, %0) \n\t"
MOVNTQ" %%mm2,- 8(%2, %0) \n\t"
"add $16, %0 \n\t"
" js 1b \n\t"
: "+r"(count)
: "r"(src), "r"(dst)
);</asm>
<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>count</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>count</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>extract_even2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dst0</name><operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name><operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>=</operator> <operator>-</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $8, %%mm7 \n\t"
"1: \n\t"
"movq -28(%1, %0, 4), %%mm0 \n\t"
"movq -20(%1, %0, 4), %%mm1 \n\t"
"movq -12(%1, %0, 4), %%mm2 \n\t"
"movq -4(%1, %0, 4), %%mm3 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm7, %%mm2 \n\t"
"pand %%mm7, %%mm3 \n\t"
"packuswb %%mm1, %%mm0 \n\t"
"packuswb %%mm3, %%mm2 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"psrlw $8, %%mm0 \n\t"
"psrlw $8, %%mm2 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm7, %%mm3 \n\t"
"packuswb %%mm2, %%mm0 \n\t"
"packuswb %%mm3, %%mm1 \n\t"
MOVNTQ" %%mm0,- 7(%3, %0) \n\t"
MOVNTQ" %%mm1,- 7(%2, %0) \n\t"
"add $8, %0 \n\t"
" js 1b \n\t"
: "+r"(count)
: "r"(src), "r"(dst0), "r"(dst1)
);</asm>
<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><name>count</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>extract_even2avg</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>=</operator> <operator>-</operator> <name>count</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PAVGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $8, %%mm7 \n\t"
"1: \n\t"
"movq -28(%1, %0, 4), %%mm0 \n\t"
"movq -20(%1, %0, 4), %%mm1 \n\t"
"movq -12(%1, %0, 4), %%mm2 \n\t"
"movq -4(%1, %0, 4), %%mm3 \n\t"
PAVGB" -28(%2, %0, 4), %%mm0 \n\t"
PAVGB" -20(%2, %0, 4), %%mm1 \n\t"
PAVGB" -12(%2, %0, 4), %%mm2 \n\t"
PAVGB" - 4(%2, %0, 4), %%mm3 \n\t"
"pand %%mm7, %%mm0 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm7, %%mm2 \n\t"
"pand %%mm7, %%mm3 \n\t"
"packuswb %%mm1, %%mm0 \n\t"
"packuswb %%mm3, %%mm2 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"psrlw $8, %%mm0 \n\t"
"psrlw $8, %%mm2 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm7, %%mm3 \n\t"
"packuswb %%mm2, %%mm0 \n\t"
"packuswb %%mm3, %%mm1 \n\t"
MOVNTQ" %%mm0,- 7(%4, %0) \n\t"
MOVNTQ" %%mm1,- 7(%3, %0) \n\t"
"add $8, %0 \n\t"
" js 1b \n\t"
: "+r"(count)
: "r"(src0), "r"(src1), "r"(dst0), "r"(dst1)
);</asm>
<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while<condition>(<expr><name>count</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>src0</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>src1</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>src0</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>src1</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>extract_odd2</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dst0</name><operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name><operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>=</operator> <operator>-</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $8, %%mm7 \n\t"
"1: \n\t"
"movq -28(%1, %0, 4), %%mm0 \n\t"
"movq -20(%1, %0, 4), %%mm1 \n\t"
"movq -12(%1, %0, 4), %%mm2 \n\t"
"movq -4(%1, %0, 4), %%mm3 \n\t"
"psrlw $8, %%mm0 \n\t"
"psrlw $8, %%mm1 \n\t"
"psrlw $8, %%mm2 \n\t"
"psrlw $8, %%mm3 \n\t"
"packuswb %%mm1, %%mm0 \n\t"
"packuswb %%mm3, %%mm2 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"psrlw $8, %%mm0 \n\t"
"psrlw $8, %%mm2 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm7, %%mm3 \n\t"
"packuswb %%mm2, %%mm0 \n\t"
"packuswb %%mm3, %%mm1 \n\t"
MOVNTQ" %%mm0,- 7(%3, %0) \n\t"
MOVNTQ" %%mm1,- 7(%2, %0) \n\t"
"add $8, %0 \n\t"
" js 1b \n\t"
: "+r"(count)
: "r"(src), "r"(dst0), "r"(dst1)
);</asm>
<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>count</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>extract_odd2avg</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>=</operator> <operator>-</operator> <name>count</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PAVGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier>(
"pcmpeqw %%mm7, %%mm7 \n\t"
"psrlw $8, %%mm7 \n\t"
"1: \n\t"
"movq -28(%1, %0, 4), %%mm0 \n\t"
"movq -20(%1, %0, 4), %%mm1 \n\t"
"movq -12(%1, %0, 4), %%mm2 \n\t"
"movq -4(%1, %0, 4), %%mm3 \n\t"
PAVGB" -28(%2, %0, 4), %%mm0 \n\t"
PAVGB" -20(%2, %0, 4), %%mm1 \n\t"
PAVGB" -12(%2, %0, 4), %%mm2 \n\t"
PAVGB" - 4(%2, %0, 4), %%mm3 \n\t"
"psrlw $8, %%mm0 \n\t"
"psrlw $8, %%mm1 \n\t"
"psrlw $8, %%mm2 \n\t"
"psrlw $8, %%mm3 \n\t"
"packuswb %%mm1, %%mm0 \n\t"
"packuswb %%mm3, %%mm2 \n\t"
"movq %%mm0, %%mm1 \n\t"
"movq %%mm2, %%mm3 \n\t"
"psrlw $8, %%mm0 \n\t"
"psrlw $8, %%mm2 \n\t"
"pand %%mm7, %%mm1 \n\t"
"pand %%mm7, %%mm3 \n\t"
"packuswb %%mm2, %%mm0 \n\t"
"packuswb %%mm3, %%mm1 \n\t"
MOVNTQ" %%mm0,- 7(%4, %0) \n\t"
MOVNTQ" %%mm1,- 7(%3, %0) \n\t"
"add $8, %0 \n\t"
" js 1b \n\t"
: "+r"(count)
: "r"(src0), "r"(src1), "r"(dst0), "r"(dst1)
);</asm>
<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>src0</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name><operator>++</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>count</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>src0</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>src1</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>count</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>src0</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>src1</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>count</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>yuyvtoyuv420</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chromWidth</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<function_decl><type><name>RENAME</name></type>(<name>extract_even</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>ydst</name></type></decl></parameter>, <parameter><decl><type><name>width</name></type></decl></parameter>)</parameter_list>;</function_decl>
<if_stmt><if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>extract_odd2avg</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name><operator>-</operator><name>srcStride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>udst</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>, <argument><expr><name>chromWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>udst</name><operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name><operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ydst</name><operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__(
EMMS" \n\t"
SFENCE" \n\t"
::: "memory"
);</asm>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>yuyvtoyuv422</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chromWidth</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<function_decl><type><name>RENAME</name></type>(<name>extract_even</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>ydst</name></type></decl></parameter>, <parameter><decl><type><name>width</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RENAME</name></type>(<name>extract_odd2</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>udst</name></type></decl></parameter>, <parameter><decl><type><name>vdst</name></type></decl></parameter>, <parameter><decl><type><name>chromWidth</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ydst</name><operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>udst</name><operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name><operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__(
EMMS" \n\t"
SFENCE" \n\t"
::: "memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>uyvytoyuv420</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chromWidth</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<function_decl><type><name>RENAME</name></type>(<name>extract_odd</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>ydst</name></type></decl></parameter>, <parameter><decl><type><name>width</name></type></decl></parameter>)</parameter_list>;</function_decl>
<if_stmt><if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>extract_even2avg</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name><operator>-</operator><name>srcStride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>udst</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>, <argument><expr><name>chromWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>udst</name><operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name><operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ydst</name><operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__(
EMMS" \n\t"
SFENCE" \n\t"
::: "memory"
);</asm>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <name>RENAME</name></type>(<name>uyvytoyuv422</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chromStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chromWidth</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<function_decl><type><name>RENAME</name></type>(<name>extract_odd</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>ydst</name></type></decl></parameter>, <parameter><decl><type><name>width</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RENAME</name></type>(<name>extract_even2</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>udst</name></type></decl></parameter>, <parameter><decl><type><name>vdst</name></type></decl></parameter>, <parameter><decl><type><name>chromWidth</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ydst</name><operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>udst</name><operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vdst</name><operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<asm>__asm__(
EMMS" \n\t"
SFENCE" \n\t"
::: "memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name> <name>RENAME</name></type>(<name>rgb2rgb_init</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_SSE2</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<expr_stmt><expr><name>rgb15to16</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb15to16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb15tobgr24</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb15tobgr24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb15to32</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb15to32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb16tobgr24</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb16tobgr24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb16to32</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb16to32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb16to15</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb16to15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb24tobgr16</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb24tobgr16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb24tobgr15</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb24tobgr15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb24tobgr32</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb24tobgr32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb32to16</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb32to16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb32to15</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb32to15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb32tobgr24</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb32tobgr24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb24to15</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb24to15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb24to16</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb24to16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb24tobgr24</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb24tobgr24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb32tobgr16</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb32tobgr16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rgb32tobgr15</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb32tobgr15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yv12toyuy2</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>yv12toyuy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yv12touyvy</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>yv12touyvy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yuv422ptoyuy2</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>yuv422ptoyuy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yuv422ptouyvy</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>yuv422ptouyvy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yuy2toyv12</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>yuy2toyv12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vu9_to_vu12</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>vu9_to_vu12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yvu9_to_yuy2</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>yvu9_to_yuy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uyvytoyuv422</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>uyvytoyuv422</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yuyvtoyuv422</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>yuyvtoyuv422</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>COMPILE_TEMPLATE_MMXEXT</name> <operator>||</operator> <name>COMPILE_TEMPLATE_AMD3DNOW</name></expr></cpp:if>
<expr_stmt><expr><name>planar2x</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>planar2x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name></expr></cpp:if>
<expr_stmt><expr><name>ff_rgb24toyv12</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>rgb24toyv12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>yuyvtoyuv420</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>yuyvtoyuv420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uyvytoyuv420</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>uyvytoyuv420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>COMPILE_TEMPLATE_AVX</name></expr></cpp:if>
<expr_stmt><expr><name>interleaveBytes</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>interleaveBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AVX</name> <operator>||</operator> <name>HAVE_AVX_EXTERNAL</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>COMPILE_TEMPLATE_AMD3DNOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ARCH_X86_32</name> <operator>||</operator> <name>COMPILE_TEMPLATE_SSE2</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>COMPILE_TEMPLATE_MMXEXT</name> <operator>==</operator> <name>COMPILE_TEMPLATE_SSE2</name> <operator>&amp;&amp;</operator> <name>HAVE_X86ASM</name></expr></cpp:if>
<expr_stmt><expr><name>deinterleaveBytes</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>deinterleaveBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
