<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\yuv2rgb.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>












<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>ff_yuv2rgb_coeffs</name><index>[<expr><literal type="number">11</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">117489</literal></expr>, <expr><literal type="number">138438</literal></expr>, <expr><literal type="number">13975</literal></expr>, <expr><literal type="number">34925</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">117489</literal></expr>, <expr><literal type="number">138438</literal></expr>, <expr><literal type="number">13975</literal></expr>, <expr><literal type="number">34925</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">104597</literal></expr>, <expr><literal type="number">132201</literal></expr>, <expr><literal type="number">25675</literal></expr>, <expr><literal type="number">53279</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">104597</literal></expr>, <expr><literal type="number">132201</literal></expr>, <expr><literal type="number">25675</literal></expr>, <expr><literal type="number">53279</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">104448</literal></expr>, <expr><literal type="number">132798</literal></expr>, <expr><literal type="number">24759</literal></expr>, <expr><literal type="number">53109</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">104597</literal></expr>, <expr><literal type="number">132201</literal></expr>, <expr><literal type="number">25675</literal></expr>, <expr><literal type="number">53279</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">104597</literal></expr>, <expr><literal type="number">132201</literal></expr>, <expr><literal type="number">25675</literal></expr>, <expr><literal type="number">53279</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">117579</literal></expr>, <expr><literal type="number">136230</literal></expr>, <expr><literal type="number">16907</literal></expr>, <expr><literal type="number">35559</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">110013</literal></expr>, <expr><literal type="number">140363</literal></expr>, <expr><literal type="number">12277</literal></expr>, <expr><literal type="number">42626</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">110013</literal></expr>, <expr><literal type="number">140363</literal></expr>, <expr><literal type="number">12277</literal></expr>, <expr><literal type="number">42626</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>sws_getCoefficients</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>colorspace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>colorspace</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>||</operator> <name>colorspace</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>colorspace</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>colorspace</name> <operator>=</operator> <name>SWS_CS_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>ff_yuv2rgb_coeffs</name><index>[<expr><name>colorspace</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOADCHROMA</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>U = pu[i]; V = pv[i]; r = (void *)c-&gt;table_rV[V+YUVRGB_TABLE_HEADROOM]; g = (void *)(c-&gt;table_gU[U+YUVRGB_TABLE_HEADROOM] + c-&gt;table_gV[V+YUVRGB_TABLE_HEADROOM]); b = (void *)c-&gt;table_bU[U+YUVRGB_TABLE_HEADROOM];</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[2 * i] = r[Y] + g[Y] + b[Y]; Y = src[2 * i + 1]; dst[2 * i + 1] = r[Y] + g[Y] + b[Y];</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB24</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[6 * i + 0] = r[Y]; dst[6 * i + 1] = g[Y]; dst[6 * i + 2] = b[Y]; Y = src[2 * i + 1]; dst[6 * i + 3] = r[Y]; dst[6 * i + 4] = g[Y]; dst[6 * i + 5] = b[Y];</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTBGR24</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[6 * i + 0] = b[Y]; dst[6 * i + 1] = g[Y]; dst[6 * i + 2] = r[Y]; Y = src[2 * i + 1]; dst[6 * i + 3] = b[Y]; dst[6 * i + 4] = g[Y]; dst[6 * i + 5] = r[Y];</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGBA</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>ysrc</name></type></parameter>, <parameter><type><name>asrc</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = ysrc[2 * i]; dst[2 * i] = r[Y] + g[Y] + b[Y] + (asrc[2 * i] &lt;&lt; s); Y = ysrc[2 * i + 1]; dst[2 * i + 1] = r[Y] + g[Y] + b[Y] + (asrc[2 * i + 1] &lt;&lt; s);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB48</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[ 2 * i]; dst[12 * i + 0] = dst[12 * i + 1] = r[Y]; dst[12 * i + 2] = dst[12 * i + 3] = g[Y]; dst[12 * i + 4] = dst[12 * i + 5] = b[Y]; Y = src[ 2 * i + 1]; dst[12 * i + 6] = dst[12 * i + 7] = r[Y]; dst[12 * i + 8] = dst[12 * i + 9] = g[Y]; dst[12 * i + 10] = dst[12 * i + 11] = b[Y];</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTBGR48</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[12 * i + 0] = dst[12 * i + 1] = b[Y]; dst[12 * i + 2] = dst[12 * i + 3] = g[Y]; dst[12 * i + 4] = dst[12 * i + 5] = r[Y]; Y = src[2 * i + 1]; dst[12 * i + 6] = dst[12 * i + 7] = b[Y]; dst[12 * i + 8] = dst[12 * i + 9] = g[Y]; dst[12 * i + 10] = dst[12 * i + 11] = r[Y];</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2RGBFUNC</name><parameter_list>(<parameter><type><name>func_name</name></type></parameter>, <parameter><type><name>dst_type</name></type></parameter>, <parameter><type><name>alpha</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int func_name(SwsContext *c, const uint8_t *src[], int srcStride[], int srcSliceY, int srcSliceH, uint8_t *dst[], int dstStride[]) { int y; if (!alpha &amp;&amp; c-&gt;srcFormat == AV_PIX_FMT_YUV422P) { srcStride[1] *= 2; srcStride[2] *= 2; } for (y = 0; y &lt; srcSliceH; y += 2) { dst_type *dst_1 = (dst_type *)(dst[0] + (y + srcSliceY) * dstStride[0]); dst_type *dst_2 = (dst_type *)(dst[0] + (y + srcSliceY + 1) * dstStride[0]); dst_type av_unused *r, *g, *b; const uint8_t *py_1 = src[0] + y * srcStride[0]; const uint8_t *py_2 = py_1 + srcStride[0]; const uint8_t *pu = src[1] + (y &gt;&gt; 1) * srcStride[1]; const uint8_t *pv = src[2] + (y &gt;&gt; 1) * srcStride[2]; const uint8_t av_unused *pa_1, *pa_2; unsigned int h_size = c-&gt;dstW &gt;&gt; 3; if (alpha) { pa_1 = src[3] + y * srcStride[3]; pa_2 = pa_1 + srcStride[3]; } while (h_size--) { int av_unused U, V, Y;</cpp:value></cpp:define> 





























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDYUV2RGBLINE</name><parameter_list>(<parameter><type><name>dst_delta</name></type></parameter>, <parameter><type><name>ss</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pu += 4 &gt;&gt; ss; pv += 4 &gt;&gt; ss; py_1 += 8 &gt;&gt; ss; py_2 += 8 &gt;&gt; ss; dst_1 += dst_delta &gt;&gt; ss; dst_2 += dst_delta &gt;&gt; ss; } if (c-&gt;dstW &amp; (4 &gt;&gt; ss)) { int av_unused Y, U, V;</cpp:value></cpp:define> 










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDYUV2RGBFUNC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>} } return srcSliceH; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOSEYUV2RGBFUNC</name><parameter_list>(<parameter><type><name>dst_delta</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ENDYUV2RGBLINE(dst_delta, 0) ENDYUV2RGBFUNC()</cpp:value></cpp:define>



<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_48</argument>, <argument>uint8_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">48</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">48</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>

<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_bgr48</argument>, <argument>uint8_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">48</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">48</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR48</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>

<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_32</argument>, <argument>uint32_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuva2argb_c</argument>, <argument>uint32_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuva2rgba_c</argument>, <argument>uint32_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_1</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_2</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuva2rgba_c</argument>, <argument>uint32_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuva2argb_c</argument>, <argument>uint32_t</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_1</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_2</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><name>pa_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGBA</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><name>pa_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>

<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_24_rgb</argument>, <argument>uint8_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">24</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">24</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>


<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_24_bgr</argument>, <argument>uint8_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">24</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">24</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTBGR24</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>

<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_16_ordered_dither</argument>, <argument>uint16_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d16</name> <init>= <expr><name><name>ff_dither_2x2_8</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>e16</name> <init>= <expr><name><name>ff_dither_2x2_4</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>f16</name> <init>= <expr><name><name>ff_dither_2x2_8</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB16</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[2 * i] = r[Y + d16[0 + o]] + g[Y + e16[0 + o]] + b[Y + f16[0 + o]]; Y = src[2 * i + 1]; dst[2 * i + 1] = r[Y + d16[1 + o]] + g[Y + e16[1 + o]] + b[Y + f16[1 + o]];</cpp:value></cpp:define>








<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB16</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB16</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB16</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB16</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB16</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB16</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB16</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB16</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>CLOSEYUV2RGBFUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_15_ordered_dither</argument>, <argument>uint16_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d16</name> <init>= <expr><name><name>ff_dither_2x2_8</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>e16</name> <init>= <expr><name><name>ff_dither_2x2_8</name><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB15</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[2 * i] = r[Y + d16[0 + o]] + g[Y + d16[1 + o]] + b[Y + e16[0 + o]]; Y = src[2 * i + 1]; dst[2 * i + 1] = r[Y + d16[1 + o]] + g[Y + d16[0 + o]] + b[Y + e16[1 + o]];</cpp:value></cpp:define>








<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB15</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB15</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB15</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB15</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB15</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB15</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB15</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB15</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>CLOSEYUV2RGBFUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>


<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_12_ordered_dither</argument>, <argument>uint16_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d16</name> <init>= <expr><name><name>ff_dither_4x4_16</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB12</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[2 * i] = r[Y + d16[0 + o]] + g[Y + d16[0 + o]] + b[Y + d16[0 + o]]; Y = src[2 * i + 1]; dst[2 * i + 1] = r[Y + d16[1 + o]] + g[Y + d16[1 + o]] + b[Y + d16[1 + o]];</cpp:value></cpp:define>









<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB12</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB12</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB12</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB12</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB12</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB12</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB12</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB12</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>CLOSEYUV2RGBFUNC</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>


<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_8_ordered_dither</argument>, <argument>uint8_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d32</name> <init>= <expr><name><name>ff_dither_8x8_32</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB8</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[2 * i] = r[Y + d32[0 + o]] + g[Y + d32[0 + o]] + b[Y + d64[0 + o]]; Y = src[2 * i + 1]; dst[2 * i + 1] = r[Y + d32[1 + o]] + g[Y + d32[1 + o]] + b[Y + d64[1 + o]];</cpp:value></cpp:define>









<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d32</name> <init>= <expr><name><name>ff_dither_8x8_32</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d32</name> <init>= <expr><name><name>ff_dither_8x8_32</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB8</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>


<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_4_ordered_dither</argument>, <argument>uint8_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acc</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB4D</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; acc = r[Y + d128[0 + o]] + g[Y + d64[0 + o]] + b[Y + d128[0 + o]]; Y = src[2 * i + 1]; acc |= (r[Y + d128[1 + o]] + g[Y + d64[1 + o]] + b[Y + d128[1 + o]]) &lt;&lt; 4; dst[i] = acc;</cpp:value></cpp:define>










<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>acc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4D</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>

<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_4b_ordered_dither</argument>, <argument>uint8_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB4DB</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; dst[2 * i] = r[Y + d128[0 + o]] + g[Y + d64[0 + o]] + b[Y + d128[0 + o]]; Y = src[2 * i + 1]; dst[2 * i + 1] = r[Y + d128[1 + o]] + g[Y + d64[1 + o]] + b[Y + d128[1 + o]];</cpp:value></cpp:define>









<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBLINE</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d64</name> <init>= <expr><name><name>ff_dither_8x8_73</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOADCHROMA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB4DB</name><argument_list>(<argument><expr><name>dst_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ENDYUV2RGBFUNC</name><argument_list>()</argument_list></macro>

<macro><name>YUV2RGBFUNC</name><argument_list>(<argument>yuv2rgb_c_1_ordered_dither</argument>, <argument>uint8_t</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d128</name> <init>= <expr><name><name>ff_dither_8x8_220</name><index>[<expr><name>y</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>out_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>out_2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>table_gU</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>table_gV</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTRGB1</name><parameter_list>(<parameter><type><name>out</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Y = src[2 * i]; out += out + g[Y + d128[0 + o]]; Y = src[2 * i + 1]; out += out + g[Y + d128[1 + o]];</cpp:value></cpp:define>





<expr_stmt><expr><call><name>PUTRGB1</name><argument_list>(<argument><expr><name>out_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB1</name><argument_list>(<argument><expr><name>out_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTRGB1</name><argument_list>(<argument><expr><name>out_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB1</name><argument_list>(<argument><expr><name>out_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTRGB1</name><argument_list>(<argument><expr><name>out_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB1</name><argument_list>(<argument><expr><name>out_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTRGB1</name><argument_list>(<argument><expr><name>out_2</name></expr></argument>, <argument><expr><name>py_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUTRGB1</name><argument_list>(<argument><expr><name>out_1</name></expr></argument>, <argument><expr><name>py_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>out_1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>out_2</name></expr>;</expr_stmt>
<macro><name>CLOSEYUV2RGBFUNC</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>

<function><type><name>SwsFunc</name></type> <name>ff_yuv2rgb_get_func_ptr</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SwsFunc</name></type> <name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ff_yuv2rgb_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ff_yuv2rgb_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>t</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"No accelerated colorspace conversion found from %s to %s.\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_bgr48</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_48</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>CONFIG_SWSCALE_ALPHA</name> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>yuva2argb_c</name></expr>;</return></block_content></block></if></if_stmt>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>CONFIG_SWSCALE_ALPHA</name> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>yuva2rgba_c</name></expr> </then><else>: <expr><name>yuv2rgb_c_32</name></expr></else></ternary></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_24_rgb</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_24_bgr</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGB565</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR565</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_16_ordered_dither</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGB555</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR555</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_15_ordered_dither</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGB444</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR444</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_12_ordered_dither</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_8_ordered_dither</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGB4</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR4</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_4_ordered_dither</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_4b_ordered_dither</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_MONOBLACK</name></expr>:</case>
<return>return <expr><name>yuv2rgb_c_1_ordered_dither</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_table</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>table</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>elemsize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>inc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y_tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y_table</name> <init>= <expr><name>y_tab</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y_table</name> <operator>-=</operator> <name>elemsize</name> <operator>*</operator> <operator>(</operator><name>inc</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_HEADROOM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cb</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><name>YUVRGB_TABLE_HEADROOM</name></expr></argument>)</argument_list></call><operator>*</operator><name>inc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>y_table</name> <operator>+</operator> <name>elemsize</name> <operator>*</operator> <operator>(</operator><name>cb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_gv_table</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>table</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_HEADROOM</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>elemsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>inc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>-</operator><operator>(</operator><name>inc</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_HEADROOM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cb</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><name>YUVRGB_TABLE_HEADROOM</name></expr></argument>)</argument_list></call><operator>*</operator><name>inc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>elemsize</name> <operator>*</operator> <operator>(</operator><name>off</name> <operator>+</operator> <operator>(</operator><name>cb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>roundToInt16</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0x7FFF</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0x8000</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0x7FFF</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0x7FFF</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_yuv2rgb_c_init_tables</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>inv_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>fullRange</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>brightness</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>contrast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>saturation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>isRgb</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB32</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB565BE</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB565LE</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB555BE</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB555LE</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB444BE</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB444LE</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB8</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB4</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB4_BYTE</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>isNotNe</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <call><name>AV_PIX_FMT_NE</name><argument_list>(<argument><expr><name>RGB565LE</name></expr></argument>, <argument><expr><name>RGB565BE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <call><name>AV_PIX_FMT_NE</name><argument_list>(<argument><expr><name>RGB555LE</name></expr></argument>, <argument><expr><name>RGB555BE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <call><name>AV_PIX_FMT_NE</name><argument_list>(<argument><expr><name>RGB444LE</name></expr></argument>, <argument><expr><name>RGB444BE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <call><name>AV_PIX_FMT_NE</name><argument_list>(<argument><expr><name>BGR565LE</name></expr></argument>, <argument><expr><name>BGR565BE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <call><name>AV_PIX_FMT_NE</name><argument_list>(<argument><expr><name>BGR555LE</name></expr></argument>, <argument><expr><name>BGR555BE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <call><name>AV_PIX_FMT_NE</name><argument_list>(<argument><expr><name>BGR444LE</name></expr></argument>, <argument><expr><name>BGR444BE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bpp</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>y_table16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>y_table32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>base</name></decl>, <decl><type ref="prev"/><name>rbase</name></decl>, <decl><type ref="prev"/><name>gbase</name></decl>, <decl><type ref="prev"/><name>bbase</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>abase</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>needAlpha</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yoffs</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>fullRange</name></expr> ?</condition><then> <expr><literal type="number">384</literal></expr> </then><else>: <expr><literal type="number">326</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>YUVRGB_TABLE_LUMA_HEADROOM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>table_plane_size</name> <init>= <expr><literal type="number">1024</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>YUVRGB_TABLE_LUMA_HEADROOM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>crv</name> <init>= <expr><name><name>inv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cbu</name> <init>= <expr><name><name>inv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cgu</name> <init>= <expr><operator>-</operator><name><name>inv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cgv</name> <init>= <expr><operator>-</operator><name><name>inv_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>cy</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>oy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>yb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fullRange</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cy</name> <operator>=</operator> <operator>(</operator><name>cy</name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator> <operator>/</operator> <literal type="number">219</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oy</name> <operator>=</operator> <literal type="number">16</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>crv</name> <operator>=</operator> <operator>(</operator><name>crv</name> <operator>*</operator> <literal type="number">224</literal><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbu</name> <operator>=</operator> <operator>(</operator><name>cbu</name> <operator>*</operator> <literal type="number">224</literal><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cgu</name> <operator>=</operator> <operator>(</operator><name>cgu</name> <operator>*</operator> <literal type="number">224</literal><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cgv</name> <operator>=</operator> <operator>(</operator><name>cgv</name> <operator>*</operator> <literal type="number">224</literal><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cy</name> <operator>=</operator> <operator>(</operator><name>cy</name> <operator>*</operator> <name>contrast</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>crv</name> <operator>=</operator> <operator>(</operator><name>crv</name> <operator>*</operator> <name>contrast</name> <operator>*</operator> <name>saturation</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbu</name> <operator>=</operator> <operator>(</operator><name>cbu</name> <operator>*</operator> <name>contrast</name> <operator>*</operator> <name>saturation</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cgu</name> <operator>=</operator> <operator>(</operator><name>cgu</name> <operator>*</operator> <name>contrast</name> <operator>*</operator> <name>saturation</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cgv</name> <operator>=</operator> <operator>(</operator><name>cgv</name> <operator>*</operator> <name>contrast</name> <operator>*</operator> <name>saturation</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>oy</name> <operator>-=</operator> <literal type="number">256</literal> <operator>*</operator> <name>brightness</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uOffset</name></name> <operator>=</operator> <literal type="number">0x0400040004000400LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vOffset</name></name> <operator>=</operator> <literal type="number">0x0400040004000400LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yCoeff</name></name> <operator>=</operator> <call><name>roundToInt16</name><argument_list>(<argument><expr><name>cy</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vrCoeff</name></name> <operator>=</operator> <call><name>roundToInt16</name><argument_list>(<argument><expr><name>crv</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ubCoeff</name></name> <operator>=</operator> <call><name>roundToInt16</name><argument_list>(<argument><expr><name>cbu</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vgCoeff</name></name> <operator>=</operator> <call><name>roundToInt16</name><argument_list>(<argument><expr><name>cgv</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ugCoeff</name></name> <operator>=</operator> <call><name>roundToInt16</name><argument_list>(<argument><expr><name>cgu</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yOffset</name></name> <operator>=</operator> <call><name>roundToInt16</name><argument_list>(<argument><expr><name>oy</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0001000100010001ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_coeff</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>roundToInt16</name><argument_list>(<argument><expr><name>cy</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_y_offset</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>roundToInt16</name><argument_list>(<argument><expr><name>oy</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2r_coeff</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>roundToInt16</name><argument_list>(<argument><expr><name>crv</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_v2g_coeff</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>roundToInt16</name><argument_list>(<argument><expr><name>cgv</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2g_coeff</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>roundToInt16</name><argument_list>(<argument><expr><name>cgu</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>yuv2rgb_u2b_coeff</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>roundToInt16</name><argument_list>(<argument><expr><name>cbu</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>crv</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>crv</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>cy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cbu</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cbu</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>cy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cgu</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cgu</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>cy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cgv</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cgv</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>cy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_YUV_TABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;yuvTable = av_malloc(x); if (!c-&gt;yuvTable) return AVERROR(ENOMEM);</cpp:value></cpp:define>



<switch>switch <condition>(<expr><name>bpp</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>ALLOC_YUV_TABLE</name><argument_list>(<argument><expr><name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y_table</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">384</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>YUVRGB_TABLE_LUMA_HEADROOM</name><operator>*</operator><name>cy</name> <operator>-</operator> <name>oy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name> <operator>-</operator> <literal type="number">110</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>y_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">110</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>yb</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>+=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gU</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cgu</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_gv_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gV</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal> <operator>|</operator> <literal type="number">128</literal></expr>:</case>
<expr_stmt><expr><name>rbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>gbase</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_YUV_TABLE</name><argument_list>(<argument><expr><name>table_plane_size</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y_table</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">384</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>YUVRGB_TABLE_LUMA_HEADROOM</name><operator>*</operator><name>cy</name> <operator>-</operator> <name>oy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name> <operator>-</operator> <literal type="number">110</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yval</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>yb</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>y_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">110</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>rbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">37</literal> <operator>+</operator> <name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>yval</name> <operator>+</operator> <literal type="number">43</literal><operator>)</operator> <operator>/</operator> <literal type="number">85</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>gbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">110</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>+=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>crv</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gU</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cgu</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cbu</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_gv_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gV</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>rbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>gbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>bbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_YUV_TABLE</name><argument_list>(<argument><expr><name>table_plane_size</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y_table</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">384</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>YUVRGB_TABLE_LUMA_HEADROOM</name><operator>*</operator><name>cy</name> <operator>-</operator> <name>oy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name> <operator>-</operator> <literal type="number">38</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>yval</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>yb</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>y_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>yval</name> <operator>+</operator> <literal type="number">18</literal><operator>)</operator> <operator>/</operator> <literal type="number">36</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>rbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>yval</name> <operator>+</operator> <literal type="number">18</literal><operator>)</operator> <operator>/</operator> <literal type="number">36</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>gbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">37</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>yval</name> <operator>+</operator> <literal type="number">43</literal><operator>)</operator> <operator>/</operator> <literal type="number">85</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>+=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>crv</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gU</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cgu</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cbu</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_gv_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gV</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><name>rbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>gbase</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_YUV_TABLE</name><argument_list>(<argument><expr><name>table_plane_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y_table16</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">384</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>YUVRGB_TABLE_LUMA_HEADROOM</name><operator>*</operator><name>cy</name> <operator>-</operator> <name>oy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>yval</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>yb</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>y_table16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>rbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table16</name><index>[<expr><name>i</name> <operator>+</operator> <name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>gbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>+=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>isNotNe</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>y_table16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>y_table16</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>crv</name></expr></argument>, <argument><expr><name>y_table16</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gU</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cgu</name></expr></argument>, <argument><expr><name>y_table16</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cbu</name></expr></argument>, <argument><expr><name>y_table16</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_gv_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gV</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<expr_stmt><expr><name>rbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><name>bpp</name> <operator>-</operator> <literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>gbase</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bbase</name> <operator>=</operator> <ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>bpp</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOC_YUV_TABLE</name><argument_list>(<argument><expr><name>table_plane_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y_table16</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">384</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>YUVRGB_TABLE_LUMA_HEADROOM</name><operator>*</operator><name>cy</name> <operator>-</operator> <name>oy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>yval</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>yb</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>y_table16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>rbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table16</name><index>[<expr><name>i</name> <operator>+</operator> <name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">18</literal> <operator>-</operator> <name>bpp</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>gbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table16</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>+=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>isNotNe</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>y_table16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>y_table16</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>crv</name></expr></argument>, <argument><expr><name>y_table16</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gU</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cgu</name></expr></argument>, <argument><expr><name>y_table16</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cbu</name></expr></argument>, <argument><expr><name>y_table16</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_gv_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gV</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<case>case <expr><literal type="number">48</literal></expr>:</case>
<expr_stmt><expr><call><name>ALLOC_YUV_TABLE</name><argument_list>(<argument><expr><name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y_table</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">384</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>YUVRGB_TABLE_LUMA_HEADROOM</name><operator>*</operator><name>cy</name> <operator>-</operator> <name>oy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>y_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>yb</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>+=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>crv</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gU</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cgu</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cbu</name></expr></argument>, <argument><expr><name>y_table</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_gv_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gV</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<case>case <expr><literal type="number">64</literal></expr>:</case>
<expr_stmt><expr><name>base</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>rbase</name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>gbase</name> <operator>=</operator> <name>base</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bbase</name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isRgb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>needAlpha</name> <operator>=</operator> <name>CONFIG_SWSCALE_ALPHA</name> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>needAlpha</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>abase</name> <operator>=</operator> <operator>(</operator><name>base</name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ALLOC_YUV_TABLE</name><argument_list>(<argument><expr><name>table_plane_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y_table32</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>yuvTable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">384</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>YUVRGB_TABLE_LUMA_HEADROOM</name><operator>*</operator><name>cy</name> <operator>-</operator> <name>oy</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_plane_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>yval</name> <init>= <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>yb</name> <operator>+</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>y_table32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>yval</name> <operator>&lt;&lt;</operator> <name>rbase</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><ternary><condition><expr><name>needAlpha</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">255u</literal> <operator>&lt;&lt;</operator> <name>abase</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table32</name><index>[<expr><name>i</name> <operator>+</operator> <name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <name>yval</name> <operator>&lt;&lt;</operator> <name>gbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y_table32</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr>]</index></name> <operator>=</operator> <name>yval</name> <operator>&lt;&lt;</operator> <name>bbase</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yb</name> <operator>+=</operator> <name>cy</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_rV</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>crv</name></expr></argument>, <argument><expr><name>y_table32</name> <operator>+</operator> <name>yoffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gU</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cgu</name></expr></argument>, <argument><expr><name>y_table32</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_bU</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cbu</name></expr></argument>, <argument><expr><name>y_table32</name> <operator>+</operator> <name>yoffs</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>table_plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_gv_table</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>table_gV</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>isPlanar</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>bpp</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%ibpp not supported by yuv2rgb\n"</literal></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
