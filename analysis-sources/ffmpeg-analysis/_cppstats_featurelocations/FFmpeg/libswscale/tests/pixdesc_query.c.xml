<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\tests\pixdesc_query.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cond</name>)<parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>query_tab</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"is16BPS"</literal></expr>, <expr><name>is16BPS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isNBPS"</literal></expr>, <expr><name>isNBPS</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isBE"</literal></expr>, <expr><name>isBE</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isYUV"</literal></expr>, <expr><name>isYUV</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isPlanarYUV"</literal></expr>, <expr><name>isPlanarYUV</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isSemiPlanarYUV"</literal></expr>, <expr><name>isSemiPlanarYUV</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"isRGB"</literal></expr>, <expr><name>isRGB</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Gray"</literal></expr>, <expr><name>isGray</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"RGBinInt"</literal></expr>, <expr><name>isRGBinInt</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"BGRinInt"</literal></expr>, <expr><name>isBGRinInt</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Bayer"</literal></expr>, <expr><name>isBayer</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"AnyRGB"</literal></expr>, <expr><name>isAnyRGB</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"ALPHA"</literal></expr>, <expr><name>isALPHA</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Packed"</literal></expr>, <expr><name>isPacked</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"Planar"</literal></expr>, <expr><name>isPlanar</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PackedRGB"</literal></expr>, <expr><name>isPackedRGB</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"PlanarRGB"</literal></expr>, <expr><name>isPlanarRGB</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"usePal"</literal></expr>, <expr><name>usePal</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>query_tab</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pix_fmts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_pix_fmts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pix_desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_next</name><argument_list>(<argument><expr><name>pix_desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name> <init>= <expr><call><name>av_pix_fmt_desc_get_id</name><argument_list>(<argument><expr><name>pix_desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>query_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>cond</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pix_name</name> <init>= <expr><name><name>pix_desc</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pix_name</name> <operator>=</operator> <literal type="string">"rgb32"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pix_name</name> <operator>=</operator> <literal type="string">"rgb32_1"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pix_name</name> <operator>=</operator> <literal type="string">"bgr32"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pix_name</name> <operator>=</operator> <literal type="string">"bgr32_1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pix_fmts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_pix_fmts</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pix_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>pix_fmts</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>, <argument><expr><name>nb_pix_fmts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pix_fmts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name><name>query_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_pix_fmts</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>pix_fmts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
