<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\tests\colorspace.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/rgb2rgb.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>srcByte</name></cpp:macro> <cpp:value>0x55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dstByte</name></cpp:macro> <cpp:value>0xBB</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ s, d, #n, n }</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>funcNum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>srcBuffer</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstBuffer</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failedNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>passedNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>srcBuffer</name> <operator>||</operator> <operator>!</operator><name>dstBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"memory corruption test ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_sws_rgb2rgb_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>funcNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>funcNum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<struct>struct <name>func_info_s</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>src_bpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_bpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>func_info</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb12to15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb15to16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>rgb15to24</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>rgb15to32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>rgb16to24</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>rgb16to32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb24to15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb24to16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>rgb24to32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb32to15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb32to16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>rgb32to24</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb16to15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb12tobgr12</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb15tobgr15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb15tobgr16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>rgb15tobgr24</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>rgb15tobgr32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb16tobgr15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb16tobgr16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>rgb16tobgr24</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>rgb16tobgr32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb24tobgr15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb24tobgr16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>rgb24tobgr24</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>rgb24tobgr32</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb32tobgr15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rgb32tobgr16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>rgb32tobgr24</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>shuffle_bytes_2103</name></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>rgb48tobgr48_nobswap</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>rgb48tobgr48_bswap</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>rgb64to48_nobswap</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>rgb64to48_bswap</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>rgb64tobgr48_nobswap</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>FUNC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>rgb64tobgr48_bswap</name></expr></argument>)</argument_list></call></expr>,
<macro><name>FUNC</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>NULL</argument>)</argument_list></macro>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcBpp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dstBpp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>func_info</name><index>[<expr><name>funcNum</name></expr>]</index></name><operator>.</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>srcBuffer</name></expr></argument>, <argument><expr><name>srcByte</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>width</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init> <condition><expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>width</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dstOffset</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>dstOffset</name> <operator>=</operator> <literal type="number">128</literal></expr>;</init> <condition><expr><name>dstOffset</name> <operator>&lt;</operator> <literal type="number">196</literal></expr>;</condition> <incr><expr><name>dstOffset</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>srcOffset</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dstBuffer</name></expr></argument>, <argument><expr><name>dstByte</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>srcOffset</name> <operator>=</operator> <literal type="number">128</literal></expr>;</init> <condition><expr><name>srcOffset</name> <operator>&lt;</operator> <literal type="number">196</literal></expr>;</condition> <incr><expr><name>srcOffset</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>srcBuffer</name> <operator>+</operator> <name>srcOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dstBuffer</name> <operator>+</operator> <name>dstOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>srcBpp</name> <operator>=</operator> <name><name>func_info</name><index>[<expr><name>funcNum</name></expr>]</index></name><operator>.</operator><name>src_bpp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstBpp</name> <operator>=</operator> <name><name>func_info</name><index>[<expr><name>funcNum</name></expr>]</index></name><operator>.</operator><name>dst_bpp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>func_info</name><index>[<expr><name>funcNum</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>func_info</name><index>[<expr><name>funcNum</name></expr>]</index></name><operator>.</operator><call><name>func</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>srcBpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>srcBpp</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>srcBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>srcByte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"src damaged at %d w:%d src:%d dst:%d %s\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>srcOffset</name></expr></argument>, <argument><expr><name>dstOffset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstOffset</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dstBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>dstByte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"dst damaged at %d w:%d src:%d dst:%d %s\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>srcOffset</name></expr></argument>, <argument><expr><name>dstOffset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dstOffset</name> <operator>+</operator> <name>width</name> <operator>*</operator> <name>dstBpp</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dstBuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>dstByte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"dst damaged at %d w:%d src:%d dst:%d %s\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>srcOffset</name></expr></argument>, <argument><expr><name>dstOffset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>failedNum</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>srcBpp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>passedNum</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,
<argument><expr><literal type="string">"\n%d converters passed, %d converters randomly overwrote memory\n"</literal></expr></argument>,
<argument><expr><name>passedNum</name></expr></argument>, <argument><expr><name>failedNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>failedNum</name></expr>;</return>
</block_content>}</block></function>
</unit>
