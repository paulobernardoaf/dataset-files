<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\swscale_unscaled.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avconfig.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>dithers</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><operator>=</operator><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
}</block></expr>,<expr><block>{
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
}</block></expr>,<expr><block>{
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
}</block></expr>,<expr><block>{
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>,}</block></expr>,
}</block></expr>,<expr><block>{
<expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">22</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">6</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">18</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">2</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">23</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">7</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">19</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">3</literal></expr>,}</block></expr>,
}</block></expr>,<expr><block>{
<expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">45</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">13</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">37</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">5</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">47</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">15</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">39</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">56</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">7</literal></expr>,}</block></expr>,
}</block></expr>,<expr><block>{
<expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">45</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">13</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">37</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">5</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">47</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">15</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">39</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">56</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">7</literal></expr>,}</block></expr>,
}</block></expr>,<expr><block>{
<expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">90</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">100</literal></expr>, <expr><literal type="number">4</literal></expr>,<expr><literal type="number">124</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">122</literal></expr>, <expr><literal type="number">26</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">74</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">116</literal></expr>, <expr><literal type="number">20</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">114</literal></expr>, <expr><literal type="number">18</literal></expr>,<expr><literal type="number">106</literal></expr>, <expr><literal type="number">10</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">94</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">96</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">120</literal></expr>, <expr><literal type="number">24</literal></expr>,<expr><literal type="number">102</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">126</literal></expr>, <expr><literal type="number">30</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">78</literal></expr>,}</block></expr>,
<expr><block>{ <expr><literal type="number">112</literal></expr>, <expr><literal type="number">16</literal></expr>,<expr><literal type="number">104</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">118</literal></expr>, <expr><literal type="number">22</literal></expr>,<expr><literal type="number">110</literal></expr>, <expr><literal type="number">14</literal></expr>,}</block></expr>,
}</block></expr>}</block></expr>;</expr_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>fillPlane</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>plane</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copyPlane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name> <operator>*</operator> <name>srcSliceY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dstStride</name> <operator>==</operator> <name>srcStride</name> <operator>&amp;&amp;</operator> <name>srcStride</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSliceH</name> <operator>*</operator> <name>dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarToNv12Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copyPlane</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,
<argument><expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_NV12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>interleaveBytes</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><operator>(</operator><name>srcSliceH</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>interleaveBytes</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><operator>(</operator><name>srcSliceH</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nv12ToPlanarWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copyPlane</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,
<argument><expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_NV12</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinterleaveBytes</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><operator>(</operator><name>srcSliceH</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinterleaveBytes</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><operator>(</operator><name>srcSliceH</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarToNv24Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copyPlane</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,
<argument><expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_NV24</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>interleaveBytes</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>interleaveBytes</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nv24ToPlanarWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copyPlane</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,
<argument><expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_NV24</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinterleaveBytes</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinterleaveBytes</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarToP01xWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src8</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam8</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>src_format</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>dst_format</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>src8</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstY</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>dstParam8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstUV</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>dstParam8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>shift</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>dst_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>+</operator> <name><name>dst_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shift</name> <operator>-</operator>
<name><name>src_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <name><name>src_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shift</name></expr>,
<expr><name><name>dst_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>+</operator> <name><name>dst_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>shift</name> <operator>-</operator>
<name><name>src_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <name><name>src_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>shift</name></expr>,
<expr><name><name>dst_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>+</operator> <name><name>dst_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>shift</name> <operator>-</operator>
<name><name>src_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <name><name>src_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>shift</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>||</operator>
<name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tdstY</name> <init>= <expr><name>dstY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>tsrc0</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tdstY</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>tsrc0</name><operator>++</operator> <operator>&lt;&lt;</operator> <name><name>shift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tdstUV</name> <init>= <expr><name>dstUV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>tsrc1</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>tsrc2</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tdstUV</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>tsrc1</name><operator>++</operator> <operator>&lt;&lt;</operator> <name><name>shift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tdstUV</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>tsrc2</name><operator>++</operator> <operator>&lt;&lt;</operator> <name><name>shift</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dstUV</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AV_HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint16_t *pp = (p); AV_WL16(pp, (v)); } while(0)</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_pixel</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*p) = (v)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planar8ToP01xleWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam8</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstY</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>dstParam8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstUV</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>dstParam8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tdstY</name> <init>= <expr><name>dstY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsrc0</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>tsrc0</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><name>tdstY</name><operator>++</operator></expr></argument>, <argument><expr><name>t</name> <operator>|</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tdstUV</name> <init>= <expr><name>dstUV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsrc1</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsrc2</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>tsrc1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><name>tdstUV</name><operator>++</operator></expr></argument>, <argument><expr><name>t</name> <operator>|</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>tsrc2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>output_pixel</name><argument_list>(<argument><expr><name>tdstUV</name><operator>++</operator></expr></argument>, <argument><expr><name>t</name> <operator>|</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstUV</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>output_pixel</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarToYuy2Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yv12toyuy2</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarToUyvyWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yv12touyvy</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yuv422pToYuy2Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuv422ptoyuy2</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yuv422pToUyvyWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuv422ptouyvy</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yuyvToYuv420Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuyvtoyuv420</name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>udst</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dstParam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fillPlane</name><argument_list>(<argument><expr><name><name>dstParam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yuyvToYuv422Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuyvtoyuv422</name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>udst</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>uyvyToYuv420Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uyvytoyuv420</name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>udst</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dstParam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fillPlane</name><argument_list>(<argument><expr><name><name>dstParam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>uyvyToYuv422Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ydst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>udst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vdst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uyvytoyuv422</name><argument_list>(<argument><expr><name>ydst</name></expr></argument>, <argument><expr><name>udst</name></expr></argument>, <argument><expr><name>vdst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gray8aToPacked32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_pixels</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>dst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>palette</name><operator>)</operator><index>[<expr><name><name>src</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index> <operator>|</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gray8aToPacked32_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_pixels</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>dst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>palette</name><operator>)</operator><index>[<expr><name><name>src</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index> <operator>|</operator> <name><name>src</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gray8aToPacked24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_pixels</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bswap_16bpc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>srcstr</name> <init>= <expr><name><name>srcStride</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dststr</name> <init>= <expr><name><name>dstStride</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstPtr</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>dst</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcPtr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>src</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_stride</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>srcstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>dststr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dstPtr</name> <operator>||</operator> <operator>!</operator><name>srcPtr</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <operator>(</operator><name>srcSliceY</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name><operator>)</operator> <operator>*</operator> <name>dststr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>srcSliceH</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>min_stride</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dstPtr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>srcPtr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name>srcstr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name>dststr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>palToRgbWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>conv</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_pixels</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstPtr</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcPtr</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YA8</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>dstFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr> :</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>gray8aToPacked32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr> :</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>gray8aToPacked32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32_1</name></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>gray8aToPacked32_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32_1</name></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>gray8aToPacked32_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr> :</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>gray8aToPacked24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr> :</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>gray8aToPacked24</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>usePal</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>dstFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr> :</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>sws_convertPalette8ToPacked32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr> :</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>sws_convertPalette8ToPacked32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32_1</name></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>sws_convertPalette8ToPacked32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32_1</name></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>sws_convertPalette8ToPacked32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr> :</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>sws_convertPalette8ToPacked24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr> :</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>sws_convertPalette8ToPacked24</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error %s -&gt; %s converter\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>conv</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_rgb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packed16togbra16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>swap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_alpha</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src_line</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name>srcStride</name> <operator>*</operator> <name>h</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>src_alpha</name> <operator>&amp;&amp;</operator> <name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>src_alpha</name> <operator>&amp;&amp;</operator> <name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>src_alpha</name> <operator>&amp;&amp;</operator> <name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>*</operator><name>src_line</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>src_alpha</name> <operator>&amp;&amp;</operator> <name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dst_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src_line</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Rgb16ToPlanarRgb16Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>dst2013</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>dst1023</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride2013</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride1023</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>src_format</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>dst_format</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bpc</name> <init>= <expr><name><name>dst_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alpha</name> <init>= <expr><name><name>src_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_ALPHA</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>swap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>src_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <name><name>src_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>swap</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>dst_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <name><name>dst_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>swap</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dst_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_PIX_FMT_FLAG_PLANAR</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator><operator>)</operator> <operator>!=</operator>
<operator>(</operator><name>AV_PIX_FMT_FLAG_PLANAR</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>||</operator> <name>bpc</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported conversion to planar RGB %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><name><name>src_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dst_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst2013</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>stride2013</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst1023</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>stride1023</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>
<expr_stmt><expr><call><name>packed16togbra16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>dst2013</name></expr></argument>, <argument><expr><name>stride2013</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>-</operator> <name>bpc</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>
<expr_stmt><expr><call><name>packed16togbra16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>dst1023</name></expr></argument>, <argument><expr><name>stride1023</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>swap</name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>-</operator> <name>bpc</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unsupported conversion to planar RGB %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><name><name>src_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dst_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gbr16ptopacked16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>swap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_alpha</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale_high</name> <init>= <expr><literal type="number">16</literal> <operator>-</operator> <name>bpp</name></expr></init></decl>, <decl><type ref="prev"/><name>scale_low</name> <init>= <expr><operator>(</operator><name>bpp</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>dstStride</name> <operator>*</operator> <name>h</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>component</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>swap</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alpha</name> <operator>&amp;&amp;</operator> <name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>component</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>component</name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name>component</name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alpha</name> <operator>&amp;&amp;</operator> <name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alpha</name> <operator>&amp;&amp;</operator> <name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alpha</name> <operator>&amp;&amp;</operator> <name>src_alpha</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>scale_high</name> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>scale_low</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>+</operator> <name>src_alpha</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarRgb16ToRgb16Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name><name>src102</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name><name>src201</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride102</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride201</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>src_format</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>dst_format</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_per_sample</name> <init>= <expr><name><name>src_format</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>swap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>src_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <name><name>src_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>swap</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>dst_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name><operator>)</operator> <operator>||</operator>
<operator>!</operator><name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator> <name><name>dst_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>swap</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>src_format</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_PIX_FMT_FLAG_PLANAR</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator><operator>)</operator> <operator>!=</operator>
<operator>(</operator><name>AV_PIX_FMT_FLAG_PLANAR</name> <operator>|</operator> <name>AV_PIX_FMT_FLAG_RGB</name><operator>)</operator> <operator>||</operator>
<name>bits_per_sample</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported planar RGB conversion %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><name><name>src_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dst_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>
<expr_stmt><expr><call><name>gbr16ptopacked16</name><argument_list>(<argument><expr><name>src102</name></expr></argument>, <argument><expr><name>stride102</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>swap</name></expr></argument>, <argument><expr><name>bits_per_sample</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>
<expr_stmt><expr><call><name>gbr16ptopacked16</name><argument_list>(<argument><expr><name>src201</name></expr></argument>, <argument><expr><name>stride201</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>swap</name></expr></argument>, <argument><expr><name>bits_per_sample</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>
<expr_stmt><expr><call><name>gbr16ptopacked16</name><argument_list>(<argument><expr><name>src201</name></expr></argument>, <argument><expr><name>stride201</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>swap</name></expr></argument>, <argument><expr><name>bits_per_sample</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>
<expr_stmt><expr><call><name>gbr16ptopacked16</name><argument_list>(<argument><expr><name>src102</name></expr></argument>, <argument><expr><name>stride102</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>swap</name></expr></argument>, <argument><expr><name>bits_per_sample</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unsupported planar RGB conversion %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><name><name>src_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dst_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gbr24ptopacked24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dstStride</name> <operator>*</operator> <name>h</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gbr24ptopacked32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha_first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dstStride</name> <operator>*</operator> <name>h</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_first</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gbraptopacked32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha_first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dstStride</name> <operator>*</operator> <name>h</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_first</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarRgbaToRgbWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src102</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src201</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride102</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride201</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>!=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported planar RGB conversion %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><call><name>gbr24ptopacked24</name><argument_list>(<argument><expr><name>src102</name></expr></argument>, <argument><expr><name>stride102</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><call><name>gbr24ptopacked24</name><argument_list>(<argument><expr><name>src201</name></expr></argument>, <argument><expr><name>stride201</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>
<expr_stmt><expr><name>alpha_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<expr_stmt><expr><call><name>gbraptopacked32</name><argument_list>(<argument><expr><name>src201</name></expr></argument>, <argument><expr><name>stride201</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha_first</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<expr_stmt><expr><name>alpha_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<expr_stmt><expr><call><name>gbraptopacked32</name><argument_list>(<argument><expr><name>src102</name></expr></argument>, <argument><expr><name>stride102</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha_first</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unsupported planar RGB conversion %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarRgbToRgbWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src102</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src201</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride102</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride201</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>!=</operator> <name>AV_PIX_FMT_GBRP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported planar RGB conversion %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><call><name>gbr24ptopacked24</name><argument_list>(<argument><expr><name>src102</name></expr></argument>, <argument><expr><name>stride102</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><call><name>gbr24ptopacked24</name><argument_list>(<argument><expr><name>src201</name></expr></argument>, <argument><expr><name>stride201</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>
<expr_stmt><expr><name>alpha_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<expr_stmt><expr><call><name>gbr24ptopacked32</name><argument_list>(<argument><expr><name>src201</name></expr></argument>, <argument><expr><name>stride201</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha_first</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<expr_stmt><expr><name>alpha_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<expr_stmt><expr><call><name>gbr24ptopacked32</name><argument_list>(<argument><expr><name>src102</name></expr></argument>, <argument><expr><name>stride102</name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha_first</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unsupported planar RGB conversion %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>planarRgbToplanarRgbWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>copyPlane</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copyPlane</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copyPlane</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fillPlane</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>packedtogbr24p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha_first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>inc_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name> <operator>-</operator> <name>width</name> <operator>*</operator> <name>inc_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rgbToPlanarRgbWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alpha_first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride102</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stride201</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst102</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst201</name><index>[]</index></name> <init>= <expr><block>{ <expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,
<expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><call><name>packedtogbr24p</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst201</name></expr></argument>,
<argument><expr><name>stride201</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha_first</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><call><name>packedtogbr24p</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst102</name></expr></argument>,
<argument><expr><name>stride102</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha_first</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>
<expr_stmt><expr><name>alpha_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<expr_stmt><expr><call><name>packedtogbr24p</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst201</name></expr></argument>,
<argument><expr><name>stride201</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha_first</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<expr_stmt><expr><name>alpha_first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<expr_stmt><expr><call><name>packedtogbr24p</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dst102</name></expr></argument>,
<argument><expr><name>stride102</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>alpha_first</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"unsupported planar RGB conversion %s -&gt; %s\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_GBRG</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_8</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_gbrg8_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_GBRG</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_16LE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_gbrg16le_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_GBRG</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_16BE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_gbrg16be_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_GRBG</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_8</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_grbg8_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_GRBG</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_16LE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_grbg16le_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_GRBG</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_16BE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_grbg16be_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_BGGR</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_8</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_bggr8_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_BGGR</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_16LE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_bggr16le_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_BGGR</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_16BE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_bggr16be_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RGGB</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_8</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_rggb8_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RGGB</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_16LE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_rggb16le_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RGGB</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_16BE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAYER_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bayer_rggb16be_to_##x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bayer_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bayer_to_rgb24_wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstPtr</name><init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcPtr</name><init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>copy</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>interpolate</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>

<switch>switch<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>pixfmt</name></type></parameter>, <parameter><type><name>prefix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case pixfmt: copy = bayer_##prefix##_to_rgb24_copy; interpolate = bayer_##prefix##_to_rgb24_interpolate; break;</cpp:value></cpp:define>



<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_BGGR8</argument>, <argument>bggr8</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_BGGR16LE</argument>, <argument>bggr16le</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_BGGR16BE</argument>, <argument>bggr16be</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_RGGB8</argument>, <argument>rggb8</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_RGGB16LE</argument>, <argument>rggb16le</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_RGGB16BE</argument>, <argument>rggb16be</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GBRG8</argument>, <argument>gbrg8</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GBRG16LE</argument>, <argument>gbrg16le</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GBRG16BE</argument>, <argument>gbrg16be</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GRBG8</argument>, <argument>grbg8</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GRBG16LE</argument>, <argument>grbg16le</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GRBG16BE</argument>, <argument>grbg16be</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE</name></cpp:undef>
<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>srcSliceH</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>interpolate</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>srcSliceH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><operator>-</operator><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><operator>-</operator><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bayer_to_yv12_wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcPtr</name><init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstY</name><init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name><init>= <expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name><init>= <expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>copy</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstY</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>interpolate</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstY</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>;</function_decl>

<switch>switch<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>pixfmt</name></type></parameter>, <parameter><type><name>prefix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case pixfmt: copy = bayer_##prefix##_to_yv12_copy; interpolate = bayer_##prefix##_to_yv12_interpolate; break;</cpp:value></cpp:define>



<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_BGGR8</argument>, <argument>bggr8</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_BGGR16LE</argument>, <argument>bggr16le</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_BGGR16BE</argument>, <argument>bggr16be</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_RGGB8</argument>, <argument>rggb8</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_RGGB16LE</argument>, <argument>rggb16le</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_RGGB16BE</argument>, <argument>rggb16be</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GBRG8</argument>, <argument>gbrg8</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GBRG16LE</argument>, <argument>gbrg16le</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GBRG16BE</argument>, <argument>gbrg16be</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GRBG8</argument>, <argument>grbg8</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GRBG16LE</argument>, <argument>grbg16le</argument>)</argument_list></macro>
<macro><name>CASE</name><argument_list>(<argument>AV_PIX_FMT_BAYER_GRBG16BE</argument>, <argument>grbg16be</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE</name></cpp:undef>
<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>srcSliceH</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstU</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstV</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>interpolate</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstY</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstU</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstV</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>srcSliceH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><operator>-</operator><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><operator>-</operator><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dstY</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isRGBA32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (x) == AV_PIX_FMT_ARGB || (x) == AV_PIX_FMT_RGBA || (x) == AV_PIX_FMT_BGRA || (x) == AV_PIX_FMT_ABGR )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isRGBA64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (x) == AV_PIX_FMT_RGBA64LE || (x) == AV_PIX_FMT_RGBA64BE || (x) == AV_PIX_FMT_BGRA64LE || (x) == AV_PIX_FMT_BGRA64BE )</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isRGB48</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (x) == AV_PIX_FMT_RGB48LE || (x) == AV_PIX_FMT_RGB48BE || (x) == AV_PIX_FMT_BGR48LE || (x) == AV_PIX_FMT_BGR48BE )</cpp:value></cpp:define>







<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>rgbConvFn</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>rgbConvFn</name></type> <name>findRgbConvFn</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srcId</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcFormatBpp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstId</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rgbConvFn</name></type> <name>conv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NOT_NE</name><parameter_list>(<parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>desc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((bpp + 7) &gt;&gt; 3) == 2 &amp;&amp; (!(desc-&gt;flags &amp; AV_PIX_FMT_FLAG_BE) != !HAVE_BIGENDIAN))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONV_IS</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(srcFormat == AV_PIX_FMT_##src &amp;&amp; dstFormat == AV_PIX_FMT_##dst)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><call><name>isRGBA32</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isRGBA32</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>ABGR</name></expr></argument>, <argument><expr><name>RGBA</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>ARGB</name></expr></argument>, <argument><expr><name>BGRA</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA</name></expr></argument>, <argument><expr><name>ARGB</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA</name></expr></argument>, <argument><expr><name>ABGR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>shuffle_bytes_3210</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>ABGR</name></expr></argument>, <argument><expr><name>ARGB</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>ARGB</name></expr></argument>, <argument><expr><name>ABGR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>shuffle_bytes_0321</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>ABGR</name></expr></argument>, <argument><expr><name>BGRA</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>ARGB</name></expr></argument>, <argument><expr><name>RGBA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>shuffle_bytes_1230</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA</name></expr></argument>, <argument><expr><name>RGBA</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA</name></expr></argument>, <argument><expr><name>BGRA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>shuffle_bytes_2103</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA</name></expr></argument>, <argument><expr><name>ABGR</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA</name></expr></argument>, <argument><expr><name>ARGB</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>shuffle_bytes_3012</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isRGB48</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isRGB48</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48LE</name></expr></argument>, <argument><expr><name>BGR48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48LE</name></expr></argument>, <argument><expr><name>RGB48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48BE</name></expr></argument>, <argument><expr><name>BGR48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48BE</name></expr></argument>, <argument><expr><name>RGB48BE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb48tobgr48_nobswap</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48LE</name></expr></argument>, <argument><expr><name>BGR48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48LE</name></expr></argument>, <argument><expr><name>RGB48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48BE</name></expr></argument>, <argument><expr><name>BGR48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48BE</name></expr></argument>, <argument><expr><name>RGB48LE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb48tobgr48_bswap</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isRGB48</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isRGBA64</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48LE</name></expr></argument>, <argument><expr><name>BGRA64LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48LE</name></expr></argument>, <argument><expr><name>RGBA64LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48BE</name></expr></argument>, <argument><expr><name>BGRA64BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48BE</name></expr></argument>, <argument><expr><name>RGBA64BE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb48tobgr64_nobswap</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48LE</name></expr></argument>, <argument><expr><name>BGRA64BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48LE</name></expr></argument>, <argument><expr><name>RGBA64BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48BE</name></expr></argument>, <argument><expr><name>BGRA64LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48BE</name></expr></argument>, <argument><expr><name>RGBA64LE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb48tobgr64_bswap</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48LE</name></expr></argument>, <argument><expr><name>RGBA64LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48LE</name></expr></argument>, <argument><expr><name>BGRA64LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48BE</name></expr></argument>, <argument><expr><name>RGBA64BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48BE</name></expr></argument>, <argument><expr><name>BGRA64BE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb48to64_nobswap</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48LE</name></expr></argument>, <argument><expr><name>RGBA64BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48LE</name></expr></argument>, <argument><expr><name>BGRA64BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGB48BE</name></expr></argument>, <argument><expr><name>RGBA64LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGR48BE</name></expr></argument>, <argument><expr><name>BGRA64LE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb48to64_bswap</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isRGBA64</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isRGB48</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA64LE</name></expr></argument>, <argument><expr><name>BGR48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA64LE</name></expr></argument>, <argument><expr><name>RGB48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA64BE</name></expr></argument>, <argument><expr><name>BGR48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA64BE</name></expr></argument>, <argument><expr><name>RGB48BE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb64tobgr48_nobswap</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA64LE</name></expr></argument>, <argument><expr><name>BGR48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA64LE</name></expr></argument>, <argument><expr><name>RGB48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA64BE</name></expr></argument>, <argument><expr><name>BGR48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA64BE</name></expr></argument>, <argument><expr><name>RGB48LE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb64tobgr48_bswap</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA64LE</name></expr></argument>, <argument><expr><name>RGB48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA64LE</name></expr></argument>, <argument><expr><name>BGR48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA64BE</name></expr></argument>, <argument><expr><name>RGB48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA64BE</name></expr></argument>, <argument><expr><name>BGR48BE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb64to48_nobswap</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA64LE</name></expr></argument>, <argument><expr><name>RGB48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA64LE</name></expr></argument>, <argument><expr><name>BGR48BE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>RGBA64BE</name></expr></argument>, <argument><expr><name>RGB48LE</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CONV_IS</name><argument_list>(<argument><expr><name>BGRA64BE</name></expr></argument>, <argument><expr><name>BGR48LE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb64to48_bswap</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else

if <condition>(<expr><operator>(</operator><call><name>isBGRinInt</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isBGRinInt</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>isRGBinInt</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isRGBinInt</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>srcId</name> <operator>|</operator> <operator>(</operator><name>dstId</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x000F000C</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb12to15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x000F0010</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb16to15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x000F0018</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb24to15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x000F0020</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb32to15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0010000F</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb15to16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00100018</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb24to16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00100020</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb32to16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0018000F</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb15to24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00180010</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb16to24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00180020</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb32to24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0020000F</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb15to32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00200010</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb16to32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00200018</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb24to32</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>isBGRinInt</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isRGBinInt</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>isRGBinInt</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isBGRinInt</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>srcId</name> <operator>|</operator> <operator>(</operator><name>dstId</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x000C000C</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb12tobgr12</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x000F000F</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb15tobgr15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x000F0010</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb16tobgr15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x000F0018</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb24tobgr15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x000F0020</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb32tobgr15</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0010000F</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb15tobgr16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00100010</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb16tobgr16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00100018</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb24tobgr16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00100020</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb32tobgr16</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0018000F</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb15tobgr24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00180010</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb16tobgr24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00180018</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb24tobgr24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00180020</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb32tobgr24</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x0020000F</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb15tobgr32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00200010</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb16tobgr32</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0x00200018</literal></expr>:</case> <expr_stmt><expr><name>conv</name> <operator>=</operator> <name>rgb24tobgr32</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isRGBA32</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ALT32_CORR</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_BITEXACT</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isRGBA32</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ALT32_CORR</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>conv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>rgbToRgbWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc_src</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc_dst</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>srcBpp</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>srcFormatBpp</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstBpp</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rgbConvFn</name></type> <name>conv</name> <init>= <expr><call><name>findRgbConvFn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error %s -&gt; %s converter\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcPtr</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstPtr</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_bswap</name> <init>= <expr><call><name>IS_NOT_NE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormatBpp</name></name></expr></argument>, <argument><expr><name>desc_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_bswap</name> <init>= <expr><call><name>IS_NOT_NE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name></expr></argument>, <argument><expr><name>desc_dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>isRGBA32</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name>ALT32_CORR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB32_1</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR32_1</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>isRGBA32</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ALT32_CORR</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dstPtr</name><index>[<expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>srcSliceY</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name>ALT32_CORR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcBpp</name> <operator>==</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>dstBpp</name> <operator>&amp;&amp;</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <name>srcBpp</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>dst_bswap</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src_bswap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>conv</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name>dstPtr</name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></argument>,
<argument><expr><operator>(</operator><name>srcSliceH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>*</operator> <name>srcBpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>src_bswap</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>formatConvBuffer</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>srcPtr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>conv</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>formatConvBuffer</name></name></expr></argument>, <argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>*</operator> <name>srcBpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>conv</name><argument_list>(<argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>*</operator> <name>srcBpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>dst_bswap</name></expr>)</condition><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dstPtr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dstPtr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bgr24ToYv12Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_rgb24toyv12</name><argument_list>(
<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>srcSliceY</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>srcSliceY</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>,
<argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fillPlane</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yvu9ToYv12Wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>copyPlane</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>,
<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>planar2x</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>srcSliceY</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>,
<argument><expr><name>srcSliceH</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>planar2x</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>srcSliceY</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcW</name></name></expr></argument>,
<argument><expr><name>srcSliceH</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fillPlane</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>uint_y_to_float_y_wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>dstStrideFloat</name> <init>= <expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcPtr</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstPtr</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>dstPtr</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>uint2float_lut</name><index>[<expr><name><name>srcPtr</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name>dstStrideFloat</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>float_y_to_uint_y_wrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>srcStrideFloat</name> <init>= <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>srcPtr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstPtr</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control><block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>dstPtr</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><literal type="number">255.0f</literal> <operator>*</operator> <name><name>srcPtr</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name>srcStrideFloat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>packedCopyWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcSliceH</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcPtr</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstPtr</name> <init>= <expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>length</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>&lt;=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>length</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>&lt;=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>length</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>srcSliceH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHER_COPY</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>dstStride</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcStride</name></type></parameter>, <parameter><type><name>bswap</name></type></parameter>, <parameter><type><name>dbswap</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>unsigned shift= src_depth-dst_depth, tmp;if (c-&gt;dither == SWS_DITHER_NONE) {for (i = 0; i &lt; height; i++) {for (j = 0; j &lt; length-7; j+=8) {dst[j+0] = dbswap(bswap(src[j+0])&gt;&gt;shift);dst[j+1] = dbswap(bswap(src[j+1])&gt;&gt;shift);dst[j+2] = dbswap(bswap(src[j+2])&gt;&gt;shift);dst[j+3] = dbswap(bswap(src[j+3])&gt;&gt;shift);dst[j+4] = dbswap(bswap(src[j+4])&gt;&gt;shift);dst[j+5] = dbswap(bswap(src[j+5])&gt;&gt;shift);dst[j+6] = dbswap(bswap(src[j+6])&gt;&gt;shift);dst[j+7] = dbswap(bswap(src[j+7])&gt;&gt;shift);}for (; j &lt; length; j++) {dst[j] = dbswap(bswap(src[j])&gt;&gt;shift);}dst += dstStride;src += srcStride;}} else if (shiftonly) {for (i = 0; i &lt; height; i++) {const uint8_t *dither= dithers[shift-1][i&amp;7];for (j = 0; j &lt; length-7; j+=8) {tmp = (bswap(src[j+0]) + dither[0])&gt;&gt;shift; dst[j+0] = dbswap(tmp - (tmp&gt;&gt;dst_depth));tmp = (bswap(src[j+1]) + dither[1])&gt;&gt;shift; dst[j+1] = dbswap(tmp - (tmp&gt;&gt;dst_depth));tmp = (bswap(src[j+2]) + dither[2])&gt;&gt;shift; dst[j+2] = dbswap(tmp - (tmp&gt;&gt;dst_depth));tmp = (bswap(src[j+3]) + dither[3])&gt;&gt;shift; dst[j+3] = dbswap(tmp - (tmp&gt;&gt;dst_depth));tmp = (bswap(src[j+4]) + dither[4])&gt;&gt;shift; dst[j+4] = dbswap(tmp - (tmp&gt;&gt;dst_depth));tmp = (bswap(src[j+5]) + dither[5])&gt;&gt;shift; dst[j+5] = dbswap(tmp - (tmp&gt;&gt;dst_depth));tmp = (bswap(src[j+6]) + dither[6])&gt;&gt;shift; dst[j+6] = dbswap(tmp - (tmp&gt;&gt;dst_depth));tmp = (bswap(src[j+7]) + dither[7])&gt;&gt;shift; dst[j+7] = dbswap(tmp - (tmp&gt;&gt;dst_depth));}for (; j &lt; length; j++) {tmp = (bswap(src[j]) + dither[j&amp;7])&gt;&gt;shift; dst[j] = dbswap(tmp - (tmp&gt;&gt;dst_depth));}dst += dstStride;src += srcStride;}} else {for (i = 0; i &lt; height; i++) {const uint8_t *dither= dithers[shift-1][i&amp;7];for (j = 0; j &lt; length-7; j+=8) {tmp = bswap(src[j+0]); dst[j+0] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[0])&gt;&gt;shift);tmp = bswap(src[j+1]); dst[j+1] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[1])&gt;&gt;shift);tmp = bswap(src[j+2]); dst[j+2] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[2])&gt;&gt;shift);tmp = bswap(src[j+3]); dst[j+3] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[3])&gt;&gt;shift);tmp = bswap(src[j+4]); dst[j+4] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[4])&gt;&gt;shift);tmp = bswap(src[j+5]); dst[j+5] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[5])&gt;&gt;shift);tmp = bswap(src[j+6]); dst[j+6] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[6])&gt;&gt;shift);tmp = bswap(src[j+7]); dst[j+7] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[7])&gt;&gt;shift);}for (; j &lt; length; j++) {tmp = bswap(src[j]); dst[j] = dbswap((tmp - (tmp&gt;&gt;dst_depth) + dither[j&amp;7])&gt;&gt;shift);}dst += dstStride;src += srcStride;}}</cpp:value></cpp:define>



























































<function><type><specifier>static</specifier> <name>int</name></type> <name>planarCopyWrapper</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dstStride</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc_src</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc_dst</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr> </then><else>: <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstHSubSample</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>srcSliceY</name></expr></then><else>: <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>srcSliceY</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>srcSliceH</name></expr></then><else>: <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>srcSliceH</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcPtr</name> <init>= <expr><name><name>src</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstPtr</name> <init>= <expr><name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shiftonly</name> <init>= <expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>plane</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>srcRange</name></name> <operator>&amp;&amp;</operator> <name>plane</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isNBPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fillPlane16</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,
<argument><expr><name>plane</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>desc_dst</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>depth</name></expr></argument>,
<argument><expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fillPlane</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>plane</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>isNBPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isNBPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_depth</name> <init>= <expr><name><name>desc_src</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dst_depth</name> <init>= <expr><name><name>desc_dst</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>plane</name></expr>]</index></name><operator>.</operator><name>depth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcPtr2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>srcPtr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstPtr2</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dstPtr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAVE_BIGENDIAN</name></expr>)</condition><block>{<block_content>
<macro><name>DITHER_COPY</name><argument_list>(<argument>dstPtr</argument>, <argument>dstStride[plane]</argument>, <argument>srcPtr2</argument>, <argument>srcStride[plane]/<literal type="number">2</literal></argument>, <argument/>, )</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>DITHER_COPY</name><argument_list>(<argument>dstPtr</argument>, <argument>dstStride[plane]</argument>, <argument>srcPtr2</argument>, <argument>srcStride[plane]/<literal type="number">2</literal></argument>, <argument>av_bswap16</argument>, )</argument_list></macro>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY816</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (shiftonly) {for (j = 0; j &lt; length; j++)w(&amp;dstPtr2[j], srcPtr[j]&lt;&lt;(dst_depth-8));} else {for (j = 0; j &lt; length; j++)w(&amp;dstPtr2[j], (srcPtr[j]&lt;&lt;(dst_depth-8)) |(srcPtr[j]&gt;&gt;(2*8-dst_depth)));}</cpp:value></cpp:define>








<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<macro><name>COPY816</name><argument_list>(<argument>AV_WB16</argument>)</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>COPY816</name><argument_list>(<argument>AV_WL16</argument>)</argument_list></macro>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dstPtr2</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_depth</name> <operator>&lt;=</operator> <name>dst_depth</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator>
<call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAVE_BIGENDIAN</name> <operator>&amp;&amp;</operator>
<name>shiftonly</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name> <init>= <expr><name>dst_depth</name> <operator>-</operator> <name>src_depth</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_64BIT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_COPY_UP</name><parameter_list>(<parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (; j &lt; length - 3; j += 4) { uint64_t v = AV_RN64A(srcPtr2 + j); AV_WN64A(dstPtr2 + j, v &lt;&lt; shift); }</cpp:value></cpp:define>




<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_COPY_UP</name><parameter_list>(<parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (; j &lt; length - 1; j += 2) { uint32_t v = AV_RN32A(srcPtr2 + j); AV_WN32A(dstPtr2 + j, v &lt;&lt; shift); }</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>shift</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><name>FAST_COPY_UP</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><call><name>FAST_COPY_UP</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_UP</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(shiftonly){for (; j &lt; length; j++){ unsigned int v= r(&amp;srcPtr2[j]);w(&amp;dstPtr2[j], v&lt;&lt;(dst_depth-src_depth));}}else{for (; j &lt; length; j++){ unsigned int v= r(&amp;srcPtr2[j]);w(&amp;dstPtr2[j], (v&lt;&lt;(dst_depth-src_depth)) | (v&gt;&gt;(2*src_depth-dst_depth)));}}</cpp:value></cpp:define>












<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<macro><name>COPY_UP</name><argument_list>(<argument>AV_RB16</argument>, <argument>AV_WB16</argument>)</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>COPY_UP</name><argument_list>(<argument>AV_RB16</argument>, <argument>AV_WL16</argument>)</argument_list></macro>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<macro><name>COPY_UP</name><argument_list>(<argument>AV_RL16</argument>, <argument>AV_WB16</argument>)</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>COPY_UP</name><argument_list>(<argument>AV_RL16</argument>, <argument>AV_WL16</argument>)</argument_list></macro>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dstPtr2</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr2</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAVE_BIGENDIAN</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAVE_BIGENDIAN</name></expr>)</condition><block>{<block_content>
<macro><name>DITHER_COPY</name><argument_list>(<argument>dstPtr2</argument>, <argument>dstStride[plane]/<literal type="number">2</literal></argument>, <argument>srcPtr2</argument>, <argument>srcStride[plane]/<literal type="number">2</literal></argument>, <argument/>, )</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>DITHER_COPY</name><argument_list>(<argument>dstPtr2</argument>, <argument>dstStride[plane]/<literal type="number">2</literal></argument>, <argument>srcPtr2</argument>, <argument>srcStride[plane]/<literal type="number">2</literal></argument>, <argument/>, <argument>av_bswap16</argument>)</argument_list></macro>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HAVE_BIGENDIAN</name></expr>)</condition><block>{<block_content>
<macro><name>DITHER_COPY</name><argument_list>(<argument>dstPtr2</argument>, <argument>dstStride[plane]/<literal type="number">2</literal></argument>, <argument>srcPtr2</argument>, <argument>srcStride[plane]/<literal type="number">2</literal></argument>, <argument>av_bswap16</argument>, )</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>DITHER_COPY</name><argument_list>(<argument>dstPtr2</argument>, <argument>dstStride[plane]/<literal type="number">2</literal></argument>, <argument>srcPtr2</argument>, <argument>srcStride[plane]/<literal type="number">2</literal></argument>, <argument>av_bswap16</argument>, <argument>av_bswap16</argument>)</argument_list></macro>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>dstPtr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>srcPtr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isFloat</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isFloat</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>isBE</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>dstPtr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <call><name>av_bswap32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>srcPtr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>==</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>==</operator> <name>length</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,
<argument><expr><name>height</name> <operator>*</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is16BPS</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>desc_src</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dstPtr</name></expr></argument>, <argument><expr><name>srcPtr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>srcPtr</name> <operator>+=</operator> <name><name>srcStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstPtr</name> <operator>+=</operator> <name><name>dstStride</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIFFERENT_ENDIANESS</name><parameter_list>(<parameter><type><name>src_fmt</name></type></parameter>, <parameter><type><name>dst_fmt</name></type></parameter>, <parameter><type><name>pix_fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((src_fmt == pix_fmt ##BE &amp;&amp; dst_fmt == pix_fmt ##LE) || (src_fmt == pix_fmt ##LE &amp;&amp; dst_fmt == pix_fmt ##BE))</cpp:value></cpp:define>




<function><type><name>void</name></type> <name>ff_get_unscaled_swscale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstH</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstH</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>needsDither</name></decl>;</decl_stmt>

<expr_stmt><expr><name>needsDither</name> <operator>=</operator> <call><name>isAnyRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name> <operator>&lt;</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dstFormatBpp</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>srcFormatBpp</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>isAnyRGB</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV12</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV21</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarToNv12Wrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA444P</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV24</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV42</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarToNv24Wrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV12</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV21</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>nv12ToPlanarWrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV24</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_NV42</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>nv24ToPlanarWrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isAnyRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_ACCURATE_RND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_BAYER</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>dither</name></name> <operator>==</operator> <name>SWS_DITHER_AUTO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dstH</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <call><name>ff_yuv2rgb_get_func_ptr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P10</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P10</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P12</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P14</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P16</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P16</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_P010</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_P016</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarToP01xWrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_P010LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_P016LE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planar8ToP01xleWrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV410P</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dstH</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_BITEXACT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>yvu9ToYv12Wrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR24</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SWS_ACCURATE_RND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>bgr24ToYv12Wrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>isAnyRGB</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isAnyRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>findRgbConvFn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>needsDither</name> <operator>||</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><operator>(</operator><name>SWS_FAST_BILINEAR</name><operator>|</operator><name>SWS_POINT</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>rgbToRgbWrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarRgbToplanarRgbWrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isByteRGB</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( f == AV_PIX_FMT_RGB32 || f == AV_PIX_FMT_RGB32_1 || f == AV_PIX_FMT_RGB24 || f == AV_PIX_FMT_BGR32 || f == AV_PIX_FMT_BGR32_1 || f == AV_PIX_FMT_BGR24)</cpp:value></cpp:define>







<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP</name> <operator>&amp;&amp;</operator> <call><name>isPlanar</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isByteRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarRgbToRgbWrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP</name> <operator>&amp;&amp;</operator> <call><name>isByteRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarRgbaToRgbWrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB48LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB48BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR48LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR48BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA64LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA64BE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP9LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP9BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP10LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP10BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP12LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP12BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP14LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP14BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP16LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP16BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP10LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP10BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP12LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP12BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP16LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP16BE</name> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>Rgb16ToPlanarRgb16Wrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP9LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP9BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP16LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP16BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP10LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP10BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP12LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP12BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP14LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP14BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP10LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP10BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP12LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP12BE</name> <operator>||</operator>
<name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP16LE</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP16BE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB48LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB48BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR48LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGR48BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64BE</name> <operator>||</operator>
<name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA64LE</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_BGRA64BE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarRgb16ToRgb16Wrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator>
<call><name>isPackedRGB</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GBRP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>rgbToPlanarRgbWrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isBayer</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_RGB24</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>bayer_to_rgb24_wrapper</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>bayer_to_yv12_wrapper</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isBayer</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported bayer conversion\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BAYER_BGGR16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BAYER_RGGB16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BAYER_GBRG16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BAYER_GRBG16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BGR444</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BGR48</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BGR555</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BGR565</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BGRA64</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY9</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY10</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY12</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY14</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GRAY16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YA16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_AYUV64</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GBRP9</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GBRP10</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GBRP12</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GBRP14</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GBRP16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GBRAP10</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GBRAP12</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_GBRAP16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_RGB444</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_RGB48</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_RGB555</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_RGB565</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_RGBA64</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_XYZ12</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV420P9</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV420P10</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV420P12</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV420P14</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV420P16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV422P9</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV422P10</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV422P12</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV422P14</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV422P16</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV440P10</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV440P12</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV444P9</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV444P10</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV444P12</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV444P14</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>IS_DIFFERENT_ENDIANESS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>, <argument><expr><name>dstFormat</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_YUV444P16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>bswap_16bpc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>usePal</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isByteRGB</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>palToRgbWrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>yuv422pToYuy2Wrapper</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_UYVY422</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>yuv422pToUyvyWrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>uint_y_to_float_y_wrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAYF32</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>float_y_to_uint_y_wrapper</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><operator>(</operator><name>SWS_FAST_BILINEAR</name><operator>|</operator><name>SWS_POINT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarToYuy2Wrapper</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_UYVY422</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarToUyvyWrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>yuyvToYuv420Wrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_UYVY422</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>uyvyToYuv420Wrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>yuyvToYuv422Wrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_UYVY422</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>uyvyToYuv422Wrapper</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isPlanarGray</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isGray(x) &amp;&amp; (x) != AV_PIX_FMT_YA8 &amp;&amp; (x) != AV_PIX_FMT_YA16LE &amp;&amp; (x) != AV_PIX_FMT_YA16BE)</cpp:value></cpp:define>

<if_stmt><if>if <condition>( <expr><name>srcFormat</name> <operator>==</operator> <name>dstFormat</name> <operator>||</operator>
<operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>srcFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>&amp;&amp;</operator> <name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>isFloat</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>isFloat</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>isPlanarYUV</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isPlanarGray</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>isPlanarYUV</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isPlanarGray</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>isPlanarGray</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isPlanarGray</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>isPlanarYUV</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isPlanarYUV</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>chrDstHSubSample</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcHSubSample</name></name> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>chrDstVSubSample</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>chrSrcVSubSample</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>isSemiPlanarYUV</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isSemiPlanarYUV</name><argument_list>(<argument><expr><name>dstFormat</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isPacked</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>packedCopyWrapper</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>planarCopyWrapper</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_get_unscaled_swscale_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_get_unscaled_swscale_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_get_unscaled_swscale_aarch64</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sws_convertPalette8ToPacked32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_pixels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>dst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>palette</name><operator>)</operator><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sws_convertPalette8ToPacked24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_pixels</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>palette</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pixels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>palette</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
