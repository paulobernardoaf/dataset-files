<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\hscale.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>FilterContext</name>
<block>{
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>filter_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xInc</name></decl>;</decl_stmt>
}</block></struct></type> <name>FilterContext</name>;</typedef>


<typedef>typedef <type><struct>struct <name>ColorContext</name>
<block>{
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl>;</decl_stmt>
}</block></struct></type> <name>ColorContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lum_h_scale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FilterContext</name> <modifier>*</modifier></type><name>instance</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcW</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dstW</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xInc</name> <init>= <expr><name><name>instance</name><operator>-&gt;</operator><name>xInc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sliceH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>src</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>dst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_pos</name> <init>= <expr><name>sliceY</name><operator>+</operator><name>i</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pos</name> <init>= <expr><name>sliceY</name><operator>+</operator><name>i</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>hyscale_fast</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>hyscale_fast</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>xInc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,
<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter_pos</name></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lumConvertRange</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>lumConvertRange</name></name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_pos</name> <operator>=</operator> <name>sliceY</name><operator>+</operator><name>i</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_pos</name> <operator>=</operator> <name>sliceY</name><operator>+</operator><name>i</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>hyscale_fast</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>hyscale_fast</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>xInc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>hyScale</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>dst</name><index>[<expr><name>dst_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>src</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>,
<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter_pos</name></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>sliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lum_convert</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>srcW</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ColorContext</name> <modifier>*</modifier></type> <name>instance</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pal</name> <init>= <expr><name><name>instance</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>sliceY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <name>sliceH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>sliceY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <name>sliceH</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sliceH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sp0</name> <init>= <expr><name>sliceY</name><operator>+</operator><name>i</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>sliceY</name><operator>+</operator><name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>v_chr_sub_sample</name></name><operator>)</operator> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>sp0</name></expr>]</index></name></expr>,
<expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>sp1</name></expr>]</index></name></expr>,
<expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>sp1</name></expr>]</index></name></expr>,
<expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>sp0</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>sliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_init_desc_fmt_convert</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ColorContext</name> <modifier>*</modifier></type> <name>li</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ColorContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>li</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>pal</name></name> <operator>=</operator> <name>pal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator><name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <operator>&amp;</operator><name>lum_convert</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_init_desc_hscale</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>filter_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FilterContext</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FilterContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>li</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>filter_pos</name></name> <operator>=</operator> <name>filter_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>=</operator> <name>filter_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>xInc</name></name> <operator>=</operator> <name>xInc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <operator>&amp;</operator><name>lum_h_scale</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chr_h_scale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FilterContext</name> <modifier>*</modifier></type><name>instance</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>srcW</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>h_chr_sub_sample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dstW</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>h_chr_sub_sample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xInc</name> <init>= <expr><name><name>instance</name><operator>-&gt;</operator><name>xInc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>src1</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>dst1</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>src2</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>dst2</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_pos1</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pos1</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_pos2</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pos2</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sliceH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>hcscale_fast</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>hcscale_fast</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>dst1</name><index>[<expr><name>dst_pos1</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>dst2</name><index>[<expr><name>dst_pos2</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>src_pos1</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src2</name><index>[<expr><name>src_pos2</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>xInc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>dst1</name><index>[<expr><name>dst_pos1</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>src_pos1</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter_pos</name></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>hcScale</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>dst2</name><index>[<expr><name>dst_pos2</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name><name>src2</name><index>[<expr><name>src_pos2</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter_pos</name></name></expr></argument>, <argument><expr><name><name>instance</name><operator>-&gt;</operator><name>filter_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>chrConvertRange</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>chrConvertRange</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>dst1</name><index>[<expr><name>dst_pos1</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>dst2</name><index>[<expr><name>dst_pos2</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>sliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chr_convert</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>srcW</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>h_chr_sub_sample</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ColorContext</name> <modifier>*</modifier></type> <name>instance</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type> <name>pal</name> <init>= <expr><name><name>instance</name><operator>-&gt;</operator><name>pal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp0</name> <init>= <expr><operator>(</operator><name>sliceY</name> <operator>-</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>&gt;&gt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>v_chr_sub_sample</name></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>v_chr_sub_sample</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp1</name> <init>= <expr><name>sliceY</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>sliceY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <name>sliceH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>sliceY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <name>sliceH</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sliceH</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>sp0</name><operator>+</operator><name>i</name></expr>]</index></name></expr>,
<expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>sp1</name><operator>+</operator><name>i</name></expr>]</index></name></expr>,
<expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>sp1</name><operator>+</operator><name>i</name></expr>]</index></name></expr>,
<expr><name><name>desc</name><operator>-&gt;</operator><name>src</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>sp0</name><operator>+</operator><name>i</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst1</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst2</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcW</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>input_rgb2yuv_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>sliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_init_desc_cfmt_convert</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ColorContext</name> <modifier>*</modifier></type> <name>li</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ColorContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>li</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>pal</name></name> <operator>=</operator> <name>pal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator><name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <operator>&amp;</operator><name>chr_convert</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_init_desc_chscale</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>filter_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xInc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FilterContext</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FilterContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>li</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>filter_pos</name></name> <operator>=</operator> <name>filter_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>=</operator> <name>filter_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>xInc</name></name> <operator>=</operator> <name>xInc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isALPHA</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <operator>&amp;</operator><name>chr_h_scale</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>no_chr_scale</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliceH</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>sliceY</name> <operator>+</operator> <name>sliceH</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>available_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>available_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceY</name> <operator>=</operator> <name>sliceY</name> <operator>+</operator> <name>sliceH</name> <operator>-</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>available_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>sliceH</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>dst</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>available_lines</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_init_desc_no_chr</name><parameter_list>(<parameter><decl><type><name>SwsFilterDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>SwsSlice</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>instance</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <operator>&amp;</operator><name>no_chr_scale</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
