<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\input.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rgb2rgb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swscale_internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isBE(origin) ? AV_RB16(pos) : AV_RL16(pos))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r</name></cpp:macro> <cpp:value>((origin == AV_PIX_FMT_BGR48BE || origin == AV_PIX_FMT_BGR48LE || origin == AV_PIX_FMT_BGRA64BE || origin == AV_PIX_FMT_BGRA64LE) ? b_r : r_b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b</name></cpp:macro> <cpp:value>((origin == AV_PIX_FMT_BGR48BE || origin == AV_PIX_FMT_BGR48LE || origin == AV_PIX_FMT_BGRA64BE || origin == AV_PIX_FMT_BGRA64LE) ? r_b : b_r)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>
<name>rgb64ToY_c_template</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ry</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gy</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BY_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r_b</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>g</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b_r</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ry</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gy</name><operator>*</operator><name>g</name> <operator>+</operator> <name>by</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x2001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>
<name>rgb64ToUV_c_template</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name><operator>==</operator><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r_b</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_r</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x10001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x10001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type>
<name>rgb64ToUV_half_c_template</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name><operator>==</operator><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r_b</name> <init>= <expr><operator>(</operator><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_r</name> <init>= <expr><operator>(</operator><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x10001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x10001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgb64funcs</name><parameter_list>(<parameter><type><name>pattern</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>, <parameter><type><name>origin</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void pattern ##64 ##BE_LE ##ToY_c(uint8_t *_dst, const uint8_t *_src, const uint8_t *unused0, const uint8_t *unused1,int width, uint32_t *rgb2yuv) { const uint16_t *src = (const uint16_t *) _src; uint16_t *dst = (uint16_t *) _dst; rgb64ToY_c_template(dst, src, width, origin, rgb2yuv); } static void pattern ##64 ##BE_LE ##ToUV_c(uint8_t *_dstU, uint8_t *_dstV, const uint8_t *unused0, const uint8_t *_src1, const uint8_t *_src2, int width, uint32_t *rgb2yuv) { const uint16_t *src1 = (const uint16_t *) _src1, *src2 = (const uint16_t *) _src2; uint16_t *dstU = (uint16_t *) _dstU, *dstV = (uint16_t *) _dstV; rgb64ToUV_c_template(dstU, dstV, src1, src2, width, origin, rgb2yuv); } static void pattern ##64 ##BE_LE ##ToUV_half_c(uint8_t *_dstU, uint8_t *_dstV, const uint8_t *unused0, const uint8_t *_src1, const uint8_t *_src2, int width, uint32_t *rgb2yuv) { const uint16_t *src1 = (const uint16_t *) _src1, *src2 = (const uint16_t *) _src2; uint16_t *dstU = (uint16_t *) _dstU, *dstV = (uint16_t *) _dstV; rgb64ToUV_half_c_template(dstU, dstV, src1, src2, width, origin, rgb2yuv); }</cpp:value></cpp:define>




























<macro><name>rgb64funcs</name><argument_list>(<argument>rgb</argument>, <argument>LE</argument>, <argument>AV_PIX_FMT_RGBA64LE</argument>)</argument_list></macro>
<macro><name>rgb64funcs</name><argument_list>(<argument>rgb</argument>, <argument>BE</argument>, <argument>AV_PIX_FMT_RGBA64BE</argument>)</argument_list></macro>
<macro><name>rgb64funcs</name><argument_list>(<argument>bgr</argument>, <argument>LE</argument>, <argument>AV_PIX_FMT_BGRA64LE</argument>)</argument_list></macro>
<macro><name>rgb64funcs</name><argument_list>(<argument>bgr</argument>, <argument>BE</argument>, <argument>AV_PIX_FMT_BGRA64BE</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rgb48ToY_c_template</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ry</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gy</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BY_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r_b</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>g</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b_r</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ry</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gy</name><operator>*</operator><name>g</name> <operator>+</operator> <name>by</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x2001</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rgb48ToUV_c_template</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r_b</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_r</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x10001</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x10001</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rgb48ToUV_half_c_template</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r_b</name> <init>= <expr><operator>(</operator><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_r</name> <init>= <expr><operator>(</operator><call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>input_pixel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x10001</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x10001</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>RGB2YUV_SHIFT</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>r</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>b</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>input_pixel</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgb48funcs</name><parameter_list>(<parameter><type><name>pattern</name></type></parameter>, <parameter><type><name>BE_LE</name></type></parameter>, <parameter><type><name>origin</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void pattern ##48 ##BE_LE ##ToY_c(uint8_t *_dst, const uint8_t *_src, const uint8_t *unused0, const uint8_t *unused1,int width, uint32_t *rgb2yuv) { const uint16_t *src = (const uint16_t *)_src; uint16_t *dst = (uint16_t *)_dst; rgb48ToY_c_template(dst, src, width, origin, rgb2yuv); } static void pattern ##48 ##BE_LE ##ToUV_c(uint8_t *_dstU, uint8_t *_dstV, const uint8_t *unused0, const uint8_t *_src1, const uint8_t *_src2, int width, uint32_t *rgb2yuv) { const uint16_t *src1 = (const uint16_t *)_src1, *src2 = (const uint16_t *)_src2; uint16_t *dstU = (uint16_t *)_dstU, *dstV = (uint16_t *)_dstV; rgb48ToUV_c_template(dstU, dstV, src1, src2, width, origin, rgb2yuv); } static void pattern ##48 ##BE_LE ##ToUV_half_c(uint8_t *_dstU, uint8_t *_dstV, const uint8_t *unused0, const uint8_t *_src1, const uint8_t *_src2, int width, uint32_t *rgb2yuv) { const uint16_t *src1 = (const uint16_t *)_src1, *src2 = (const uint16_t *)_src2; uint16_t *dstU = (uint16_t *)_dstU, *dstV = (uint16_t *)_dstV; rgb48ToUV_half_c_template(dstU, dstV, src1, src2, width, origin, rgb2yuv); }</cpp:value></cpp:define>









































<macro><name>rgb48funcs</name><argument_list>(<argument>rgb</argument>, <argument>LE</argument>, <argument>AV_PIX_FMT_RGB48LE</argument>)</argument_list></macro>
<macro><name>rgb48funcs</name><argument_list>(<argument>rgb</argument>, <argument>BE</argument>, <argument>AV_PIX_FMT_RGB48BE</argument>)</argument_list></macro>
<macro><name>rgb48funcs</name><argument_list>(<argument>bgr</argument>, <argument>LE</argument>, <argument>AV_PIX_FMT_BGR48LE</argument>)</argument_list></macro>
<macro><name>rgb48funcs</name><argument_list>(<argument>bgr</argument>, <argument>BE</argument>, <argument>AV_PIX_FMT_BGR48BE</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_pixel</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((origin == AV_PIX_FMT_RGBA || origin == AV_PIX_FMT_BGRA || origin == AV_PIX_FMT_ARGB || origin == AV_PIX_FMT_ABGR) ? AV_RN32A(&amp;src[(i) * 4]) : (isBE(origin) ? AV_RB16(&amp;src[(i) * 2]) : AV_RL16(&amp;src[(i) * 2])))</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rgb16_32ToY_c_template</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maskr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maskg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maskb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rsh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>gsh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>S</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ry</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RY_IDX</name></expr>]</index></name><operator>&lt;&lt;</operator><name>rsh</name></expr></init></decl>, <decl><type ref="prev"/><name>gy</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GY_IDX</name></expr>]</index></name><operator>&lt;&lt;</operator><name>gsh</name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BY_IDX</name></expr>]</index></name><operator>&lt;&lt;</operator><name>bsh</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>rnd</name> <init>= <expr><operator>(</operator><literal type="number">32</literal><operator>&lt;&lt;</operator><operator>(</operator><operator>(</operator><name>S</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>S</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>px</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>px</name> <operator>&amp;</operator> <name>maskb</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>px</name> <operator>&amp;</operator> <name>maskg</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>px</name> <operator>&amp;</operator> <name>maskr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ry</name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>gy</name> <operator>*</operator> <name>g</name> <operator>+</operator> <name>by</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>S</name><operator>)</operator><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rgb16_32ToUV_c_template</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maskr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maskg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maskb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rsh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>gsh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>S</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rsh</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>gsh</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bsh</name><operator>)</operator></expr></init></decl>,
<decl><type ref="prev"/><name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rsh</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>gsh</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bsh</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>rnd</name> <init>= <expr><operator>(</operator><literal type="number">256u</literal><operator>&lt;&lt;</operator><operator>(</operator><operator>(</operator><name>S</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>S</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>px</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>px</name> <operator>&amp;</operator> <name>maskb</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>px</name> <operator>&amp;</operator> <name>maskg</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>px</name> <operator>&amp;</operator> <name>maskr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>gu</name> <operator>*</operator> <name>g</name> <operator>+</operator> <name>bu</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>S</name><operator>)</operator><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>gv</name> <operator>*</operator> <name>g</name> <operator>+</operator> <name>bv</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>S</name><operator>)</operator><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>rgb16_32ToUV_half_c_template</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>origin</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>shb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maskr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maskg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maskb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rsh</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>gsh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>S</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rsh</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>gsh</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bsh</name><operator>)</operator></expr></init></decl>,
<decl><type ref="prev"/><name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>rsh</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>gsh</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bsh</name><operator>)</operator></expr></init></decl>,
<decl><type ref="prev"/><name>maskgx</name> <init>= <expr><operator>~</operator><operator>(</operator><name>maskr</name> <operator>|</operator> <name>maskb</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>rnd</name> <init>= <expr><operator>(</operator><literal type="number">256U</literal><operator>&lt;&lt;</operator><operator>(</operator><name>S</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>S</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>maskr</name> <operator>|=</operator> <name>maskr</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maskb</name> <operator>|=</operator> <name>maskb</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maskg</name> <operator>|=</operator> <name>maskg</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>px0</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>px1</name> <init>= <expr><call><name>input_pixel</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>shp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><operator>(</operator><name>px0</name> <operator>&amp;</operator> <name>maskgx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>px1</name> <operator>&amp;</operator> <name>maskgx</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rb</name> <init>= <expr><name>px0</name> <operator>+</operator> <name>px1</name> <operator>-</operator> <name>g</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>rb</name> <operator>&amp;</operator> <name>maskb</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>shp</name> <operator>||</operator>
<name>origin</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565LE</name> <operator>||</operator> <name>origin</name> <operator>==</operator> <name>AV_PIX_FMT_BGR565BE</name> <operator>||</operator>
<name>origin</name> <operator>==</operator> <name>AV_PIX_FMT_RGB565LE</name> <operator>||</operator> <name>origin</name> <operator>==</operator> <name>AV_PIX_FMT_RGB565BE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>&gt;&gt;=</operator> <name>shg</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>g</name> <operator>&amp;</operator> <name>maskg</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>rb</name> <operator>&amp;</operator> <name>maskr</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>gu</name> <operator>*</operator> <name>g</name> <operator>+</operator> <name>bu</name> <operator>*</operator> <name>b</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>S</name><operator>)</operator><operator>-</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name> <operator>*</operator> <name>r</name> <operator>+</operator> <name>gv</name> <operator>*</operator> <name>g</name> <operator>+</operator> <name>bv</name> <operator>*</operator> <name>b</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>S</name><operator>)</operator><operator>-</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>input_pixel</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgb16_32_wrapper</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>shr</name></type></parameter>, <parameter><type><name>shg</name></type></parameter>, <parameter><type><name>shb</name></type></parameter>, <parameter><type><name>shp</name></type></parameter>, <parameter><type><name>maskr</name></type></parameter>, <parameter><type><name>maskg</name></type></parameter>, <parameter><type><name>maskb</name></type></parameter>, <parameter><type><name>rsh</name></type></parameter>, <parameter><type><name>gsh</name></type></parameter>, <parameter><type><name>bsh</name></type></parameter>, <parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void name ##ToY_c(uint8_t *dst, const uint8_t *src, const uint8_t *unused1, const uint8_t *unused2, int width, uint32_t *tab) { rgb16_32ToY_c_template((int16_t*)dst, src, width, fmt, shr, shg, shb, shp, maskr, maskg, maskb, rsh, gsh, bsh, S, tab); } static void name ##ToUV_c(uint8_t *dstU, uint8_t *dstV, const uint8_t *unused0, const uint8_t *src, const uint8_t *dummy, int width, uint32_t *tab) { rgb16_32ToUV_c_template((int16_t*)dstU, (int16_t*)dstV, src, width, fmt, shr, shg, shb, shp, maskr, maskg, maskb, rsh, gsh, bsh, S, tab);} static void name ##ToUV_half_c(uint8_t *dstU, uint8_t *dstV, const uint8_t *unused0, const uint8_t *src, const uint8_t *dummy, int width, uint32_t *tab) { rgb16_32ToUV_half_c_template((int16_t*)dstU, (int16_t*)dstV, src, width, fmt, shr, shg, shb, shp, maskr, maskg, maskb, rsh, gsh, bsh, S, tab); }</cpp:value></cpp:define>




























<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_BGR32</argument>, <argument>bgr32</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xFF0000</literal></argument>, <argument><literal type="number">0xFF00</literal></argument>, <argument><literal type="number">0x00FF</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_BGR32_1</argument>, <argument>bgr321</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0xFF0000</literal></argument>, <argument><literal type="number">0xFF00</literal></argument>, <argument><literal type="number">0x00FF</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_RGB32</argument>, <argument>rgb32</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x00FF</literal></argument>, <argument><literal type="number">0xFF00</literal></argument>, <argument><literal type="number">0xFF0000</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_RGB32_1</argument>, <argument>rgb321</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0x00FF</literal></argument>, <argument><literal type="number">0xFF00</literal></argument>, <argument><literal type="number">0xFF0000</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_BGR565LE</argument>, <argument>bgr16le</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x001F</literal></argument>, <argument><literal type="number">0x07E0</literal></argument>, <argument><literal type="number">0xF800</literal></argument>, <argument><literal type="number">11</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_BGR555LE</argument>, <argument>bgr15le</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x001F</literal></argument>, <argument><literal type="number">0x03E0</literal></argument>, <argument><literal type="number">0x7C00</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_BGR444LE</argument>, <argument>bgr12le</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x000F</literal></argument>, <argument><literal type="number">0x00F0</literal></argument>, <argument><literal type="number">0x0F00</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_RGB565LE</argument>, <argument>rgb16le</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xF800</literal></argument>, <argument><literal type="number">0x07E0</literal></argument>, <argument><literal type="number">0x001F</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">11</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_RGB555LE</argument>, <argument>rgb15le</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x7C00</literal></argument>, <argument><literal type="number">0x03E0</literal></argument>, <argument><literal type="number">0x001F</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_RGB444LE</argument>, <argument>rgb12le</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x0F00</literal></argument>, <argument><literal type="number">0x00F0</literal></argument>, <argument><literal type="number">0x000F</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_BGR565BE</argument>, <argument>bgr16be</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x001F</literal></argument>, <argument><literal type="number">0x07E0</literal></argument>, <argument><literal type="number">0xF800</literal></argument>, <argument><literal type="number">11</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_BGR555BE</argument>, <argument>bgr15be</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x001F</literal></argument>, <argument><literal type="number">0x03E0</literal></argument>, <argument><literal type="number">0x7C00</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_BGR444BE</argument>, <argument>bgr12be</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x000F</literal></argument>, <argument><literal type="number">0x00F0</literal></argument>, <argument><literal type="number">0x0F00</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_RGB565BE</argument>, <argument>rgb16be</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0xF800</literal></argument>, <argument><literal type="number">0x07E0</literal></argument>, <argument><literal type="number">0x001F</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">11</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_RGB555BE</argument>, <argument>rgb15be</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x7C00</literal></argument>, <argument><literal type="number">0x03E0</literal></argument>, <argument><literal type="number">0x001F</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>rgb16_32_wrapper</name><argument_list>(<argument>AV_PIX_FMT_RGB444BE</argument>, <argument>rgb12be</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x0F00</literal></argument>, <argument><literal type="number">0x00F0</literal></argument>, <argument><literal type="number">0x000F</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>RGB2YUV_SHIFT + <literal type="number">4</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gbr24pToUV_half_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>gsrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bsrc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rsrc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>g</name> <init>= <expr><name><name>gsrc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>gsrc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name> <init>= <expr><name><name>bsrc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>bsrc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name> <init>= <expr><name><name>rsrc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>rsrc</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x4001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x4001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba64leToA_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba64beToA_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>abgrToA_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">6</literal> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgbaToA_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">6</literal> <operator>|</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>palToA_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>pal</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">6</literal> <operator>|</operator> <name><name>pal</name><index>[<expr><name>d</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">26</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>palToY_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pal</name><index>[<expr><name>d</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>palToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>pal</name><index>[<expr><name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>p</name><operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>p</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monowhite2Y_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>~</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">7</literal><operator>-</operator><name>j</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16383</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>width</name><operator>&amp;</operator><literal type="number">7</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>= <expr><operator>~</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>width</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">7</literal><operator>-</operator><name>j</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16383</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>monoblack2Y_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">7</literal><operator>-</operator><name>j</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16383</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>width</name><operator>&amp;</operator><literal type="number">7</literal></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>width</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">7</literal><operator>-</operator><name>j</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16383</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuy2ToY_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yuy2ToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yvy2ToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>y210le_UV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstU</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstV</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>y210le_Y_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bswap16Y_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bswap16UV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_src1</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>src2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_src2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name><name>src2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_ya16le_gray_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_ya16le_alpha_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_ya16be_gray_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_ya16be_alpha_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_ayuv64le_Y_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>read_ayuv64le_UV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstU</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstV</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_ayuv64le_A_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>uyvyToY_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uyvyToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src1</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>nvXXtoUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nv12ToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>nvXXtoUV_c</name><argument_list>(<argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nv21ToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>nvXXtoUV_c</name><argument_list>(<argument><expr><name>dstV</name></expr></argument>, <argument><expr><name>dstU</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>p010LEToY_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>p010BEToY_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>p010LEToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstU</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstV</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>p010BEToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstU</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstV</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>p016LEToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstU</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstV</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>p016BEToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstU</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN16</name><argument_list>(<argument><expr><name>dstV</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>src1</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input_pixel</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isBE(origin) ? AV_RB16(pos) : AV_RL16(pos))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr24ToY_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ry</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gy</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BY_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ry</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gy</name><operator>*</operator><name>g</name> <operator>+</operator> <name>by</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">32</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr24ToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bgr24ToUV_half_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal><operator>&lt;&lt;</operator><name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal><operator>&lt;&lt;</operator><name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb24ToY_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ry</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gy</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BY_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ry</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gy</name><operator>*</operator><name>g</name> <operator>+</operator> <name>by</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">32</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb24ToUV_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb24ToUV_half_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal><operator>&lt;&lt;</operator><name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal><operator>&lt;&lt;</operator><name>RGB2YUV_SHIFT</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>planar_rgb_to_y</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ry</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gy</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BY_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ry</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gy</name><operator>*</operator><name>g</name> <operator>+</operator> <name>by</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x801</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>planar_rgb_to_a</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>planar_rgb_to_uv</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x4001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">0x4001</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name><operator>-</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rdpx</name><parameter_list>(<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>is_be ? AV_RB16(src) : AV_RL16(src)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>planar_rgb16_to_y</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_be</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ry</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gy</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GY_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BY_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name>bpc</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><name>bpc</name></expr> </then><else>: <expr><literal type="number">14</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>rdpx</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>rdpx</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>rdpx</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ry</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gy</name><operator>*</operator><name>g</name> <operator>+</operator> <name>by</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">33</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>+</operator> <name>bpc</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>planar_rgb16_to_a</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_be</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name>bpc</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><name>bpc</name></expr> </then><else>: <expr><literal type="number">14</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rdpx</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>planar_rgb16_to_uv</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstU</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dstV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>_src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_be</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rgb2yuv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstU</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstU</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstV</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dstV</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ru</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GU_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bu</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BU_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>RV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>gv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>GV_IDX</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>bv</name> <init>= <expr><name><name>rgb2yuv</name><index>[<expr><name>BV_IDX</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name>bpc</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><name>bpc</name></expr> </then><else>: <expr><literal type="number">14</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>rdpx</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>rdpx</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>rdpx</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dstU</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ru</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gu</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bu</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">257</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>+</operator> <name>bpc</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dstV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rv</name><operator>*</operator><name>r</name> <operator>+</operator> <name>gv</name><operator>*</operator><name>g</name> <operator>+</operator> <name>bv</name><operator>*</operator><name>b</name> <operator>+</operator> <operator>(</operator><literal type="number">257</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>+</operator> <name>bpc</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>RGB2YUV_SHIFT</name> <operator>+</operator> <name>shift</name> <operator>-</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rdpx</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>grayf32ToY16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><literal type="number">65535.0f</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>grayf32ToY16_bswap_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>unused2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><literal type="number">65535.0f</literal> <operator>*</operator> <call><name>av_int2float</name><argument_list>(<argument><expr><call><name>av_bswap32</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgb9plus_planar_funcs_endian</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>, <parameter><type><name>endian_name</name></type></parameter>, <parameter><type><name>endian</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void planar_rgb##nbits##endian_name##_to_y(uint8_t *dst, const uint8_t *src[4], int w, int32_t *rgb2yuv) { planar_rgb16_to_y(dst, src, w, nbits, endian, rgb2yuv); } static void planar_rgb##nbits##endian_name##_to_uv(uint8_t *dstU, uint8_t *dstV, const uint8_t *src[4], int w, int32_t *rgb2yuv) { planar_rgb16_to_uv(dstU, dstV, src, w, nbits, endian, rgb2yuv); }</cpp:value></cpp:define> 











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgb9plus_planar_transparency_funcs</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void planar_rgb##nbits##le_to_a(uint8_t *dst, const uint8_t *src[4], int w, int32_t *rgb2yuv) { planar_rgb16_to_a(dst, src, w, nbits, 0, rgb2yuv); } static void planar_rgb##nbits##be_to_a(uint8_t *dst, const uint8_t *src[4], int w, int32_t *rgb2yuv) { planar_rgb16_to_a(dst, src, w, nbits, 1, rgb2yuv); }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgb9plus_planar_funcs</name><parameter_list>(<parameter><type><name>nbits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rgb9plus_planar_funcs_endian(nbits, le, 0) rgb9plus_planar_funcs_endian(nbits, be, 1)</cpp:value></cpp:define>



<macro><name>rgb9plus_planar_funcs</name><argument_list>(<argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>rgb9plus_planar_funcs</name><argument_list>(<argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>rgb9plus_planar_funcs</name><argument_list>(<argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>rgb9plus_planar_funcs</name><argument_list>(<argument><literal type="number">14</literal></argument>)</argument_list></macro>
<macro><name>rgb9plus_planar_funcs</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>rgb9plus_planar_transparency_funcs</name><argument_list>(<argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>rgb9plus_planar_transparency_funcs</name><argument_list>(<argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>rgb9plus_planar_transparency_funcs</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sws_init_input_funcs</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>srcFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>srcFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>yuy2ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YVYU422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>yvy2ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>uyvyToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_NV24</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>nv12ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_NV21</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_NV42</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>nv21ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>palToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP9LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb9le_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb10le_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb12le_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP14LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb14le_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP16LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb16le_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP9BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb9be_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb10be_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP12BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb12be_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP14BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb14be_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP16BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb16be_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readChrPlanar</name></name> <operator>=</operator> <name>planar_rgb_to_uv</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_YUV420P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVA420P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bswap16UV_c</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>AV_PIX_FMT_YUV420P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVA420P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bswap16UV_c</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>AV_PIX_FMT_AYUV64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>read_ayuv64le_UV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_P010LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>p010LEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_P010BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>p010BEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_P016LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>p016LEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_P016BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>p016BEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_Y210LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>y210le_UV_c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>chrSrcHSubSample</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>srcFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb64BEToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb64LEToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr64BEToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr64LEToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb48BEToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb48LEToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr48BEToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr48LEToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr32ToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32_1</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr321ToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr24ToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR565LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr16leToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR565BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr16beToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR555LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr15leToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR555BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr15beToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>gbr24pToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR444LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr12leToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR444BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr12beToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb32ToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32_1</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb321ToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb24ToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB565LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb16leToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB565BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb16beToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB555LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb15leToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB555BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb15beToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB444LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb12leToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB444BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb12beToUV_half_c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>srcFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb64BEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb64LEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr64BEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr64LEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb48BEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb48LEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr48BEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr48LEToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr32ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32_1</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr321ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr24ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR565LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr16leToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR565BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr16beToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR555LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr15leToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR555BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr15beToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR444LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr12leToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR444BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>bgr12beToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb32ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32_1</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb321ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb24ToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB565LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb16leToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB565BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb16beToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB555LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb15leToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB555BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb15beToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB444LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb12leToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB444BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>chrToYV12</name></name> <operator>=</operator> <name>rgb12beToUV_c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>srcFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_GBRP9LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb9le_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP10LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name> <operator>=</operator> <name>planar_rgb10le_to_a</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_GBRP10LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb10le_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP12LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name> <operator>=</operator> <name>planar_rgb12le_to_a</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_GBRP12LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb12le_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP14LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb14le_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP16LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name> <operator>=</operator> <name>planar_rgb16le_to_a</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_GBRP16LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb16le_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP9BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb9be_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP10BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name> <operator>=</operator> <name>planar_rgb10be_to_a</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_GBRP10BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb10be_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP12BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name> <operator>=</operator> <name>planar_rgb12be_to_a</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_GBRP12BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb12be_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRP14BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb14be_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP16BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name> <operator>=</operator> <name>planar_rgb16be_to_a</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_GBRP16BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb16be_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name> <operator>=</operator> <name>planar_rgb_to_a</name></expr>;</expr_stmt>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>readLumPlanar</name></name> <operator>=</operator> <name>planar_rgb_to_y</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_YUV420P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY14LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_P016LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bswap16Y_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUVA420P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P12LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bswap16Y_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>bswap16Y_c</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>AV_PIX_FMT_YUV420P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV440P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV422P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV444P16BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY14BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_P016BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bswap16Y_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUVA420P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P9BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P10BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P12BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA420P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA422P16BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUVA444P16BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bswap16Y_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>bswap16Y_c</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>AV_PIX_FMT_YA16LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>read_ya16le_gray_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>read_ya16be_gray_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_AYUV64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>read_ayuv64le_Y_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUYV422</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YVYU422</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>yuy2ToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>uyvyToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr24ToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR565LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr16leToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR565BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr16beToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR555LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr15leToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR555BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr15beToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR444LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr12leToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR444BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr12beToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb24ToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB565LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb16leToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB565BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb16beToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB555LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb15leToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB555BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb15beToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB444LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb12leToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB444BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb12beToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_BGR4_BYTE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGB4_BYTE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>palToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_MONOBLACK</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>monoblack2Y_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_MONOWHITE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>monowhite2Y_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr32ToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB32_1</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr321ToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb32ToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR32_1</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb321ToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb48BEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb48LEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR48BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr48BEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR48LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr48LEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb64BEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>rgb64LEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr64BEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>bgr64LEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_P010LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>p010LEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_P010BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>p010BEToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GRAYF32LE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>grayf32ToY16_bswap_c</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>grayf32ToY16_c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GRAYF32BE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>grayf32ToY16_c</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>grayf32ToY16_bswap_c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_Y210LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lumToYV12</name></name> <operator>=</operator> <name>y210le_Y_c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>needAlpha</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is16BPS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isNBPS</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>HAVE_BIGENDIAN</name> <operator>==</operator> <operator>!</operator><call><name>isBE</name><argument_list>(<argument><expr><name>srcFormat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>readAlpPlanar</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>bswap16Y_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>srcFormat</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_BGRA64LE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>rgba64leToA_c</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA64BE</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>rgba64beToA_c</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>rgbaToA_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>abgrToA_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YA8</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>uyvyToY_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YA16LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>read_ya16le_alpha_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>read_ya16be_alpha_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_AYUV64LE</name></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>read_ayuv64le_A_c</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr> :</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>alpToYV12</name></name> <operator>=</operator> <name>palToA_c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
