<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\ppc\yuv2rgb_altivec.c">






















































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/rgb2rgb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yuv2rgb_altivec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROFILE_THE_BEAST</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INC_SCALING</name></cpp:undef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>ubyte</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>sbyte</name>;</typedef>




































<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type>
<name>perm_rgb_0</name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x0a</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>perm_rgb_1</name> <init>= <expr><block>{ <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>perm_rgb_2</name> <init>= <expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>perm_rgb_3</name> <init>= <expr><block>{ <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,
<expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_merge3</name><parameter_list>(<parameter><type><name>x2</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x0</name></type></parameter>, <parameter><type><name>y0</name></type></parameter>, <parameter><type><name>y1</name></type></parameter>, <parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof__(x0) o0, o2, o3; o0 = vec_mergeh(x0, x1); y0 = vec_perm(o0, x2, perm_rgb_0); o2 = vec_perm(o0, x2, perm_rgb_1); o3 = vec_mergel(x0, x1); y1 = vec_perm(o3, o2, perm_rgb_2); y2 = vec_perm(o3, o2, perm_rgb_3); } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_mstbgr24</name><parameter_list>(<parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof__(x0) _0, _1, _2; vec_merge3(x0, x1, x2, _0, _1, _2); vec_st(_0, 0, ptr++); vec_st(_1, 0, ptr++); vec_st(_2, 0, ptr++); } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_mstrgb24</name><parameter_list>(<parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __typeof__(x0) _0, _1, _2; vec_merge3(x2, x1, x0, _0, _1, _2); vec_st(_0, 0, ptr++); vec_st(_1, 0, ptr++); vec_st(_2, 0, ptr++); } while (0)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_mstrgb32</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>x3</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { T _0, _1, _2, _3; _0 = vec_mergeh(x0, x1); _1 = vec_mergeh(x2, x3); _2 = (T) vec_mergeh((vector unsigned short) _0, (vector unsigned short) _1); _3 = (T) vec_mergel((vector unsigned short) _0, (vector unsigned short) _1); vec_st(_2, 0 * 16, (T *) ptr); vec_st(_3, 1 * 16, (T *) ptr); _0 = vec_mergel(x0, x1); _1 = vec_mergel(x2, x3); _2 = (T) vec_mergeh((vector unsigned short) _0, (vector unsigned short) _1); _3 = (T) vec_mergel((vector unsigned short) _0, (vector unsigned short) _1); vec_st(_2, 2 * 16, (T *) ptr); vec_st(_3, 3 * 16, (T *) ptr); ptr += 4; } while (0)</cpp:value></cpp:define>


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_unh</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vector signed short) vec_perm(x, (__typeof__(x)) { 0 }, ((vector unsigned char) { 0x10, 0x00, 0x10, 0x01, 0x10, 0x02, 0x10, 0x03, 0x10, 0x04, 0x10, 0x05, 0x10, 0x06, 0x10, 0x07 }))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_unl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vector signed short) vec_perm(x, (__typeof__(x)) { 0 }, ((vector unsigned char) { 0x10, 0x08, 0x10, 0x09, 0x10, 0x0A, 0x10, 0x0B, 0x10, 0x0C, 0x10, 0x0D, 0x10, 0x0E, 0x10, 0x0F }))</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_unh</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(vector signed short) vec_mergeh(x,(__typeof__(x)) { 0 })</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_unl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(vector signed short) vec_mergel(x,(__typeof__(x)) { 0 })</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_clip_s16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_max(vec_min(x, ((vector signed short) { 235, 235, 235, 235, 235, 235, 235, 235 })), ((vector signed short) { 16, 16, 16, 16, 16, 16, 16, 16 }))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_packclp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vector unsigned char) vec_packs((vector unsigned short) vec_max(x, ((vector signed short) { 0 })), (vector unsigned short) vec_max(y, ((vector signed short) { 0 })))</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cvtyuvtoRGB</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>Y</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>V</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>vx</name></decl>, <decl><type ref="prev"/><name>ux</name></decl>, <decl><type ref="prev"/><name>uvx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>CY</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>OY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <macro><name>vec_sub</name><argument_list>(<argument>U</argument>, <argument>(vector signed short)
vec_splat((vector signed short) { <literal type="number">128</literal> }, <literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <macro><name>vec_sub</name><argument_list>(<argument>V</argument>, <argument>(vector signed short)
vec_splat((vector signed short) { <literal type="number">128</literal> }, <literal type="number">0</literal>)</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>ux</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>CSHIFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>B</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>ux</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>CBU</name></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>CSHIFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>R</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>vx</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>CRV</name></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>uvx</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>CGU</name></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>G</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>CGV</name></name></expr></argument>, <argument><expr><name>uvx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFCSP420_CVT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>out_pixels</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int altivec_ ##name(SwsContext *c, const unsigned char **in, int *instrides, int srcSliceY, int srcSliceH, unsigned char **oplanes, int *outstrides) { int w = c-&gt;srcW; int h = srcSliceH; int i, j; int instrides_scl[3]; vector unsigned char y0, y1; vector signed char u, v; vector signed short Y0, Y1, Y2, Y3; vector signed short U, V; vector signed short vx, ux, uvx; vector signed short vx0, ux0, uvx0; vector signed short vx1, ux1, uvx1; vector signed short R0, G0, B0; vector signed short R1, G1, B1; vector unsigned char R, G, B; vector signed short lCY = c-&gt;CY; vector signed short lOY = c-&gt;OY; vector signed short lCRV = c-&gt;CRV; vector signed short lCBU = c-&gt;CBU; vector signed short lCGU = c-&gt;CGU; vector signed short lCGV = c-&gt;CGV; vector unsigned short lCSHIFT = c-&gt;CSHIFT; const ubyte *y1i = in[0]; const ubyte *y2i = in[0] + instrides[0]; const ubyte *ui = in[1]; const ubyte *vi = in[2]; vector unsigned char *oute, *outo; instrides_scl[0] = instrides[0] * 2 - w; instrides_scl[1] = instrides[1] - w / 2; instrides_scl[2] = instrides[2] - w / 2; for (i = 0; i &lt; h / 2; i++) { oute = (vector unsigned char *)(oplanes[0] + outstrides[0] * (srcSliceY + i * 2)); outo = oute + (outstrides[0] &gt;&gt; 4); vec_dstst(outo, (0x02000002 | (((w * 3 + 32) / 32) &lt;&lt; 16)), 0); vec_dstst(oute, (0x02000002 | (((w * 3 + 32) / 32) &lt;&lt; 16)), 1); for (j = 0; j &lt; w / 16; j++) { y0 = vec_xl(0, y1i); y1 = vec_xl(0, y2i); u = (vector signed char) vec_xl(0, ui); v = (vector signed char) vec_xl(0, vi); u = (vector signed char) vec_sub(u, (vector signed char) vec_splat((vector signed char) { 128 }, 0)); v = (vector signed char) vec_sub(v, (vector signed char) vec_splat((vector signed char) { 128 }, 0)); U = vec_unpackh(u); V = vec_unpackh(v); Y0 = vec_unh(y0); Y1 = vec_unl(y0); Y2 = vec_unh(y1); Y3 = vec_unl(y1); Y0 = vec_mradds(Y0, lCY, lOY); Y1 = vec_mradds(Y1, lCY, lOY); Y2 = vec_mradds(Y2, lCY, lOY); Y3 = vec_mradds(Y3, lCY, lOY); ux = vec_sl(U, lCSHIFT); ux = vec_mradds(ux, lCBU, (vector signed short) { 0 }); ux0 = vec_mergeh(ux, ux); ux1 = vec_mergel(ux, ux); vx = vec_sl(V, lCSHIFT); vx = vec_mradds(vx, lCRV, (vector signed short) { 0 }); vx0 = vec_mergeh(vx, vx); vx1 = vec_mergel(vx, vx); uvx = vec_mradds(U, lCGU, (vector signed short) { 0 }); uvx = vec_mradds(V, lCGV, uvx); uvx0 = vec_mergeh(uvx, uvx); uvx1 = vec_mergel(uvx, uvx); R0 = vec_add(Y0, vx0); G0 = vec_add(Y0, uvx0); B0 = vec_add(Y0, ux0); R1 = vec_add(Y1, vx1); G1 = vec_add(Y1, uvx1); B1 = vec_add(Y1, ux1); R = vec_packclp(R0, R1); G = vec_packclp(G0, G1); B = vec_packclp(B0, B1); out_pixels(R, G, B, oute); R0 = vec_add(Y2, vx0); G0 = vec_add(Y2, uvx0); B0 = vec_add(Y2, ux0); R1 = vec_add(Y3, vx1); G1 = vec_add(Y3, uvx1); B1 = vec_add(Y3, ux1); R = vec_packclp(R0, R1); G = vec_packclp(G0, G1); B = vec_packclp(B0, B1); out_pixels(R, G, B, outo); y1i += 16; y2i += 16; ui += 8; vi += 8; } ui += instrides_scl[1]; vi += instrides_scl[2]; y1i += instrides_scl[0]; y2i += instrides_scl[0]; } return srcSliceH; }</cpp:value></cpp:define>











































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out_abgr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_mstrgb32(__typeof__(a), ((__typeof__(a)) { 255 }), c, b, a, ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out_bgra</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_mstrgb32(__typeof__(a), c, b, a, ((__typeof__(a)) { 255 }), ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out_rgba</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_mstrgb32(__typeof__(a), a, b, c, ((__typeof__(a)) { 255 }), ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out_argb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_mstrgb32(__typeof__(a), ((__typeof__(a)) { 255 }), a, b, c, ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out_rgb24</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_mstrgb24(a, b, c, ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out_bgr24</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_mstbgr24(a, b, c, ptr)</cpp:value></cpp:define>

<macro><name>DEFCSP420_CVT</name><argument_list>(<argument>yuv2_abgr</argument>, <argument>out_abgr</argument>)</argument_list></macro>
<macro><name>DEFCSP420_CVT</name><argument_list>(<argument>yuv2_bgra</argument>, <argument>out_bgra</argument>)</argument_list></macro>
<macro><name>DEFCSP420_CVT</name><argument_list>(<argument>yuv2_rgba</argument>, <argument>out_rgba</argument>)</argument_list></macro>
<macro><name>DEFCSP420_CVT</name><argument_list>(<argument>yuv2_argb</argument>, <argument>out_argb</argument>)</argument_list></macro>
<macro><name>DEFCSP420_CVT</name><argument_list>(<argument>yuv2_rgb24</argument>, <argument>out_rgb24</argument>)</argument_list></macro>
<macro><name>DEFCSP420_CVT</name><argument_list>(<argument>yuv2_bgr24</argument>, <argument>out_bgr24</argument>)</argument_list></macro>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type>
<name>demux_u</name> <init>= <expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0c</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>demux_v</name> <init>= <expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0E</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>demux_y</name> <init>= <expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0F</literal></expr> }</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type> <name>altivec_uyvy_rgb32</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>instrides</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>oplanes</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>outstrides</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>srcSliceH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>uyvy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>Y</name></decl>, <decl><type ref="prev"/><name>U</name></decl>, <decl><type ref="prev"/><name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>R0</name></decl>, <decl><type ref="prev"/><name>G0</name></decl>, <decl><type ref="prev"/><name>B0</name></decl>, <decl><type ref="prev"/><name>R1</name></decl>, <decl><type ref="prev"/><name>G1</name></decl>, <decl><type ref="prev"/><name>B1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ubyte</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>oplanes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>srcSliceY</name> <operator>*</operator> <name><name>outstrides</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name> <operator>/</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>uyvy</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator>
<macro><name>vec_perm</name><argument_list>(<argument>uyvy</argument>, <argument>(vector unsigned char) { <literal type="number">0</literal> }</argument>, <argument>demux_u</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator>
<macro><name>vec_perm</name><argument_list>(<argument>uyvy</argument>, <argument>(vector unsigned char) { <literal type="number">0</literal> }</argument>, <argument>demux_v</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator>
<macro><name>vec_perm</name><argument_list>(<argument>uyvy</argument>, <argument>(vector unsigned char) { <literal type="number">0</literal> }</argument>, <argument>demux_y</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cvtyuvtoRGB</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uyvy</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator>
<macro><name>vec_perm</name><argument_list>(<argument>uyvy</argument>, <argument>(vector unsigned char) { <literal type="number">0</literal> }</argument>, <argument>demux_u</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator>
<macro><name>vec_perm</name><argument_list>(<argument>uyvy</argument>, <argument>(vector unsigned char) { <literal type="number">0</literal> }</argument>, <argument>demux_v</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator>
<macro><name>vec_perm</name><argument_list>(<argument>uyvy</argument>, <argument>(vector unsigned char) { <literal type="number">0</literal> }</argument>, <argument>demux_y</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cvtyuvtoRGB</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>G0</name></expr></argument>, <argument><expr><name>G1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>B0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>out_rgba</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>img</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<function><type><name>av_cold</name> <name>SwsFunc</name></type> <name>ff_yuv2rgb_init_ppc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>AV_CPU_FLAG_ALTIVEC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_NV21</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>srcH</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALTIVEC: Color Space RGB24\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>altivec_yuv2_rgb24</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALTIVEC: Color Space BGR24\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>altivec_yuv2_bgr24</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALTIVEC: Color Space ARGB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>altivec_yuv2_argb</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALTIVEC: Color Space ABGR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>altivec_yuv2_abgr</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALTIVEC: Color Space RGBA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>altivec_yuv2_rgba</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALTIVEC: Color Space BGRA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>altivec_yuv2_bgra</name></expr>;</return>
<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_UYVY422</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_BGR32</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ALTIVEC: Color Space UYVY -&gt; RGB32\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>altivec_uyvy_rgb32</name></expr>;</return>
<default>default:</default> <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_yuv2rgb_init_tables_ppc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>inv_table</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>brightness</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>contrast</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>saturation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<union>union <block>{
<macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>signed short</argument>, <argument>tmp</argument>)</argument_list></macro><expr_stmt><expr><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>vec</name></decl>;</decl_stmt>
}</block> <decl><name>buf</name></decl>;</union>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>AV_CPU_FLAG_ALTIVEC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">0xffffLL</literal><operator>)</operator> <operator>*</operator> <name>contrast</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">256</literal> <operator>*</operator> <name>brightness</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>contrast</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>saturation</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>contrast</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>saturation</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name><name>inv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>contrast</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>saturation</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>tmp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name><name>inv_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>contrast</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>saturation</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>CSHIFT</name></name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>CY</name></name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <name><name>buf</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>OY</name></name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <name><name>buf</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>CRV</name></name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <name><name>buf</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>CBU</name></name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <name><name>buf</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>CGU</name></name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <name><name>buf</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>CGV</name></name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <name><name>buf</name><operator>.</operator><name>vec</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>yuv2packedX_altivec</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lumFilter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>lumSrc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lumFilterSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>chrFilter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrUSrc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>chrVSrc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>chrFilterSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>alpSrc</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstY</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>X0</name></decl>, <decl><type ref="prev"/><name>X1</name></decl>, <decl><type ref="prev"/><name>Y0</name></decl>, <decl><type ref="prev"/><name>U0</name></decl>, <decl><type ref="prev"/><name>V0</name></decl>, <decl><type ref="prev"/><name>Y1</name></decl>, <decl><type ref="prev"/><name>U1</name></decl>, <decl><type ref="prev"/><name>V1</name></decl>, <decl><type ref="prev"/><name>U</name></decl>, <decl><type ref="prev"/><name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>R0</name></decl>, <decl><type ref="prev"/><name>G0</name></decl>, <decl><type ref="prev"/><name>B0</name></decl>, <decl><type ref="prev"/><name>R1</name></decl>, <decl><type ref="prev"/><name>G1</name></decl>, <decl><type ref="prev"/><name>B1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>RND</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>SCL</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>DECLARE_ALIGNED</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>unsigned int</argument>, <argument>scratch</argument>)</argument_list></macro><expr_stmt><expr><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>YCoeffs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>CCoeffs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>YCoeffs</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vYCoeffsBank</name></name> <operator>+</operator> <name>dstY</name> <operator>*</operator> <name>lumFilterSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>CCoeffs</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vCCoeffsBank</name></name> <operator>+</operator> <name>dstY</name> <operator>*</operator> <name>chrFilterSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>Y0</name> <operator>=</operator> <name>RND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Y1</name> <operator>=</operator> <name>RND</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>X0</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>X1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Y0</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>X0</name></expr></argument>, <argument><expr><name><name>YCoeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>Y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>X1</name></expr></argument>, <argument><expr><name><name>YCoeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>=</operator> <name>RND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <name>RND</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>CCoeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>CCoeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>Y0</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>SCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>SCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>SCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>SCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y0</name> <operator>=</operator> <call><name>vec_clip_s16</name><argument_list>(<argument><expr><name>Y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>vec_clip_s16</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>vec_clip_s16</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>vec_clip_s16</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>U0</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V0</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U1</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V1</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cvtyuvtoRGB</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>U0</name></expr></argument>, <argument><expr><name>V0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvtyuvtoRGB</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>U1</name></expr></argument>, <argument><expr><name>V1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>G0</name></expr></argument>, <argument><expr><name>G1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>B0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<expr_stmt><expr><call><name>out_abgr</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<expr_stmt><expr><call><name>out_bgra</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<expr_stmt><expr><call><name>out_rgba</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>
<expr_stmt><expr><call><name>out_argb</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><call><name>out_rgb24</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><call><name>out_bgr24</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<block>{<block_content>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>printed_error_message</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>printed_error_message</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"altivec_yuv2packedX doesn't support %s output\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>printed_error_message</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y0</name> <operator>=</operator> <name>RND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Y1</name> <operator>=</operator> <name>RND</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>lumFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>X0</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>X1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lumSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Y0</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>X0</name></expr></argument>, <argument><expr><name><name>YCoeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>Y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>X1</name></expr></argument>, <argument><expr><name><name>YCoeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>=</operator> <name>RND</name></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <name>RND</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>chrFilterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chrUSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>CCoeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chrVSrc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>vec_mradds</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>CCoeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>Y0</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>SCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>SCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>SCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>SCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Y0</name> <operator>=</operator> <call><name>vec_clip_s16</name><argument_list>(<argument><expr><name>Y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Y1</name> <operator>=</operator> <call><name>vec_clip_s16</name><argument_list>(<argument><expr><name>Y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>vec_clip_s16</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>vec_clip_s16</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>U0</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V0</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>U1</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V1</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cvtyuvtoRGB</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>U0</name></expr></argument>, <argument><expr><name>V0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvtyuvtoRGB</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>U1</name></expr></argument>, <argument><expr><name>V1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>R0</name></expr></argument>, <argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>G0</name></expr></argument>, <argument><expr><name>G1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>vec_packclp</name><argument_list>(<argument><expr><name>B0</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nout</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>scratch</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>target</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>
<expr_stmt><expr><call><name>out_abgr</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>nout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGRA</name></expr>:</case>
<expr_stmt><expr><call><name>out_bgra</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>nout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>
<expr_stmt><expr><call><name>out_rgba</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>nout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>
<expr_stmt><expr><call><name>out_argb</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>nout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>
<expr_stmt><expr><call><name>out_rgb24</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>nout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>
<expr_stmt><expr><call><name>out_bgr24</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>nout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"altivec_yuv2packedX doesn't support %s output\n"</literal></expr></argument>,
<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>dest</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><operator>(</operator><name>dstW</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV2PACKEDX_WRAPPER</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>pixfmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_yuv2 ##suffix ##_X_altivec(SwsContext *c, const int16_t *lumFilter, const int16_t **lumSrc, int lumFilterSize, const int16_t *chrFilter, const int16_t **chrUSrc, const int16_t **chrVSrc, int chrFilterSize, const int16_t **alpSrc, uint8_t *dest, int dstW, int dstY) { yuv2packedX_altivec(c, lumFilter, lumSrc, lumFilterSize, chrFilter, chrUSrc, chrVSrc, chrFilterSize, alpSrc, dest, dstW, dstY, pixfmt); }</cpp:value></cpp:define>

















<expr_stmt><expr><call><name>YUV2PACKEDX_WRAPPER</name><argument_list>(<argument><expr><name>abgr</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_ABGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV2PACKEDX_WRAPPER</name><argument_list>(<argument><expr><name>bgra</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BGRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV2PACKEDX_WRAPPER</name><argument_list>(<argument><expr><name>argb</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_ARGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV2PACKEDX_WRAPPER</name><argument_list>(<argument><expr><name>rgba</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_RGBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV2PACKEDX_WRAPPER</name><argument_list>(<argument><expr><name>rgb24</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_RGB24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>YUV2PACKEDX_WRAPPER</name><argument_list>(<argument><expr><name>bgr24</name></expr></argument>, <argument><expr><name>AV_PIX_FMT_BGR24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
