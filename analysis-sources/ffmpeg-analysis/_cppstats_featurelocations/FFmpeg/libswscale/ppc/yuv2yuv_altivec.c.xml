<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\ppc\yuv2yuv_altivec.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libswscale/swscale_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yv12toyuy2_unscaled_altivec</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride_a</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ysrc</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>usrc</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsrc</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name>srcSliceH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lumStride</name> <init>= <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chromStride</name> <init>= <expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstStride</name> <init>= <expr><name><name>dstStride_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>yperm</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vertLumPerChroma</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>int</name></type> <name>y</name></decl>;</decl_stmt>









<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yA</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yB</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yC</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_y1</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_yA</name></expr></argument>, <argument><expr><name>v_yB</name></expr></argument>, <argument><expr><name>yperm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_y2</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_yB</name></expr></argument>, <argument><expr><name>v_yC</name></expr></argument>, <argument><expr><name>yperm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uA</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uB</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>usrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_u</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_uA</name></expr></argument>, <argument><expr><name>v_uB</name></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_vA</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_vB</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_v</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_vA</name></expr></argument>, <argument><expr><name>v_vB</name></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uv_a</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_u</name></expr></argument>, <argument><expr><name>v_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uv_b</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>v_u</name></expr></argument>, <argument><expr><name>v_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yuy2_0</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_y1</name></expr></argument>, <argument><expr><name>v_uv_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yuy2_1</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>v_y1</name></expr></argument>, <argument><expr><name>v_uv_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yuy2_2</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_y2</name></expr></argument>, <argument><expr><name>v_uv_b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yuy2_3</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>v_y2</name></expr></argument>, <argument><expr><name>v_uv_b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_yuy2_0</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_yuy2_1</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_yuy2_2</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_yuy2_3</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_y1</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_u</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_v</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uv_a</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_u</name></expr></argument>, <argument><expr><name>v_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yuy2_0</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_y1</name></expr></argument>, <argument><expr><name>v_uv_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yuy2_1</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>v_y1</name></expr></argument>, <argument><expr><name>v_uv_a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_yuy2_0</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_yuy2_1</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>(</operator><name>vertLumPerChroma</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>vertLumPerChroma</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>usrc</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrc</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ysrc</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yv12touyvy_unscaled_altivec</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>srcStride</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcSliceY</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>srcSliceH</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dstParam</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>dstStride_a</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>dstParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dstStride_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>srcSliceY</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ysrc</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>usrc</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>vsrc</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name>srcSliceH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lumStride</name> <init>= <expr><name><name>srcStride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chromStride</name> <init>= <expr><name><name>srcStride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dstStride</name> <init>= <expr><name><name>dstStride_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vertLumPerChroma</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>yperm</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>int</name></type> <name>y</name></decl>;</decl_stmt>









<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yA</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yB</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_yC</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_y1</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_yA</name></expr></argument>, <argument><expr><name>v_yB</name></expr></argument>, <argument><expr><name>yperm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_y2</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_yB</name></expr></argument>, <argument><expr><name>v_yC</name></expr></argument>, <argument><expr><name>yperm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uA</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uB</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>usrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_u</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_uA</name></expr></argument>, <argument><expr><name>v_uB</name></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_vA</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_vB</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_v</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>v_vA</name></expr></argument>, <argument><expr><name>v_vB</name></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uv_a</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_u</name></expr></argument>, <argument><expr><name>v_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uv_b</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>v_u</name></expr></argument>, <argument><expr><name>v_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uyvy_0</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_uv_a</name></expr></argument>, <argument><expr><name>v_y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uyvy_1</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>v_uv_a</name></expr></argument>, <argument><expr><name>v_y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uyvy_2</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_uv_b</name></expr></argument>, <argument><expr><name>v_y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uyvy_3</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>v_uv_b</name></expr></argument>, <argument><expr><name>v_y2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_uyvy_0</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_uyvy_1</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_uyvy_2</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_uyvy_3</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_y1</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ysrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_u</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>usrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_v</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>vsrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uv_a</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_u</name></expr></argument>, <argument><expr><name>v_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uyvy_0</name> <init>= <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>v_uv_a</name></expr></argument>, <argument><expr><name>v_y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>v_uyvy_1</name> <init>= <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>v_uv_a</name></expr></argument>, <argument><expr><name>v_y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_uyvy_0</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v_uyvy_1</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <operator>(</operator><name>vertLumPerChroma</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name>vertLumPerChroma</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>usrc</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vsrc</name> <operator>+=</operator> <name>chromStride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ysrc</name> <operator>+=</operator> <name>lumStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>srcSliceH</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_get_unscaled_swscale_ppc</name><parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>AV_CPU_FLAG_ALTIVEC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>srcW</name></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SWS_BITEXACT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>c</name><operator>-&gt;</operator><name>srcFormat</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dstFormat</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dstFormat</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_YUYV422</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>yv12toyuy2_unscaled_altivec</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dstFormat</name> <operator>==</operator> <name>AV_PIX_FMT_UYVY422</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swscale</name></name> <operator>=</operator> <name>yv12touyvy_unscaled_altivec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
