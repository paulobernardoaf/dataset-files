<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libswscale\ppc\swscale_ppc_template.c">






















<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>yuv2planeX_8_16</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>vo1</name></decl>, <decl><type ref="prev"/><name>vo2</name></decl>, <decl><type ref="prev"/><name>vo3</name></decl>, <decl><type ref="prev"/><name>vo4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vs1</name></decl>, <decl><type ref="prev"/><name>vs2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>altivec_vectorShiftInt19</name> <init>=
<expr><call><name>vec_add</name><argument_list>(<argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dither</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>vo1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vo2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vo3</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vo4</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>joffset</name><init>=<expr><name>j</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>xoffset</name><init>=<expr><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <name>av_unused</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>l1</name></decl>,<decl><type ref="prev"/><name>vLumFilter</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOAD_FILTER</name><argument_list>(<argument><expr><name>vLumFilter</name></expr></argument>,<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vLumFilter</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vLumFilter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_L1</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv2planeX_8</name><argument_list>(<argument><expr><name>vo1</name></expr></argument>, <argument><expr><name>vo2</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>vLumFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yuv2planeX_8</name><argument_list>(<argument><expr><name>vo3</name></expr></argument>, <argument><expr><name>vo4</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>vLumFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>vo1</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vo1</name></expr></argument>, <argument><expr><name>altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vo2</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vo2</name></expr></argument>, <argument><expr><name>altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vo3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vo3</name></expr></argument>, <argument><expr><name>altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vo4</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>vo4</name></expr></argument>, <argument><expr><name>altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vs1</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>vo1</name></expr></argument>, <argument><expr><name>vo2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vs2</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>vo3</name></expr></argument>, <argument><expr><name>vo4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vf</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>vs1</name></expr></argument>, <argument><expr><name>vs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>vf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>yuv2planeX_u</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>x</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>dither</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>yuv2planeX</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst_u</name> <init>= <expr><operator>-</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dest</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yuv2planeX_u</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dst_u</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name> <operator>-</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>yuv2planeX_8_16</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>yuv2planeX_u</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filterSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dstW</name></expr></argument>, <argument><expr><name>dither</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>hScale_real</name>)<parameter_list>(<parameter><decl><type><name>SwsContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstW</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>filterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>tempo</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filterSize</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>src</name><index>[<expr><name>srcPos</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>filter</name><index>[<expr><name>filterSize</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>filterSize</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>src_vF</name> <init>= <expr><call><name>unaligned_load</name><argument_list>(<argument><expr><name>srcPos</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>src_v</name></decl>, <decl><type ref="prev"/><name>filter_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>val_vEven</name></decl>, <decl><type ref="prev"/><name>val_s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>src_v</name> <operator>=</operator> 
<operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>vzero</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_v</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>src_v</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_VF4</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>filter_v</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_vEven</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>src_v</name></expr></argument>, <argument><expr><name>filter_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_s</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>val_vEven</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>val_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>tempo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>src_vF</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>src_v0</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>src_v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <name>av_unused</name></type> <name>permS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>src_v</name></decl>, <decl><type ref="prev"/><name>filter_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>val_v</name></decl>, <decl><type ref="prev"/><name>val_s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FIRST_LOAD</name><argument_list>(<argument><expr><name>src_v0</name></expr></argument>, <argument><expr><name>srcPos</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>permS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD_SRCV8</name><argument_list>(<argument><expr><name>srcPos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>permS</name></expr></argument>, <argument><expr><name>src_v0</name></expr></argument>, <argument><expr><name>src_v1</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_v</name> <operator>=</operator> 
<operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>vzero</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>filter_v</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_v</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>src_v</name></expr></argument>, <argument><expr><name>filter_v</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_s</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>val_v</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>val_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>tempo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>src_vF</name> <init>= <expr><call><name>unaligned_load</name><argument_list>(<argument><expr><name>srcPos</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>src_vA</name> <init>= 
<expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>vzero</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>src_vB</name> <init>= 
<expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><call><name>VEC_MERGEL</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>vzero</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>filter_v0</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>filter_v1</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>val_acc</name> <init>= <expr><call><name>vec_msums</name><argument_list>(<argument><expr><name>src_vA</name></expr></argument>, <argument><expr><name>filter_v0</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>vzero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>val_v</name> <init>= <expr><call><name>vec_msums</name><argument_list>(<argument><expr><name>src_vB</name></expr></argument>, <argument><expr><name>filter_v1</name></expr></argument>, <argument><expr><name>val_acc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>val_s</name> <init>= <expr><call><name>vec_sums</name><argument_list>(<argument><expr><name>val_v</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>val_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>tempo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<default>default:</default>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dstW</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>offset</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>filterSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>srcPos</name> <init>= <expr><name><name>filterPos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>val_s</name></decl>, <decl><type ref="prev"/><name>val_v</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>vzero</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name> <name>av_unused</name></type> <name>filter_v0R</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <name>av_unused</name></type> <name>permF</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>src_v0</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>permS</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FIRST_LOAD</name><argument_list>(<argument><expr><name>filter_v0R</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>permF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FIRST_LOAD</name><argument_list>(<argument><expr><name>src_v0</name></expr></argument>, <argument><expr><name>srcPos</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>permS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name> <operator>-</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <name>av_unused</name></type> <name>src_v1</name></decl>, <decl><type ref="prev"/><name>src_vF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name> <name>av_unused</name></type> <name>filter_v1R</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>filter_v2R</name></decl>,
<decl><type ref="prev"/><name>filter_v0</name></decl>, <decl><type ref="prev"/><name>filter_v1</name></decl>, <decl><type ref="prev"/><name>src_vA</name></decl>, <decl><type ref="prev"/><name>src_vB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>val_acc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOAD_SRCV</name><argument_list>(<argument><expr><name>srcPos</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>permS</name></expr></argument>, <argument><expr><name>src_v0</name></expr></argument>, <argument><expr><name>src_v1</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_vA</name> <operator>=</operator> 
<operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>vzero</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_vB</name> <operator>=</operator> 
<operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><call><name>VEC_MERGEL</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>vzero</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_VFD</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter_v0R</name></expr></argument>, <argument><expr><name>filter_v1R</name></expr></argument>, <argument><expr><name>permF</name></expr></argument>, <argument><expr><name>filter_v0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_VFD</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter_v1R</name></expr></argument>, <argument><expr><name>filter_v2R</name></expr></argument>, <argument><expr><name>permF</name></expr></argument>, <argument><expr><name>filter_v1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val_acc</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>src_vA</name></expr></argument>, <argument><expr><name>filter_v0</name></expr></argument>, <argument><expr><name>val_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_v</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>src_vB</name></expr></argument>, <argument><expr><name>filter_v1</name></expr></argument>, <argument><expr><name>val_acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UPDATE_PTR</name><argument_list>(<argument><expr><name>filter_v2R</name></expr></argument>, <argument><expr><name>filter_v0R</name></expr></argument>, <argument><expr><name>src_v1</name></expr></argument>, <argument><expr><name>src_v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>filterSize</name> <operator>-</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <name>av_unused</name></type> <name>src_v1</name></decl>, <decl><type ref="prev"/><name>src_vF</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>src_v</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>filter_v1R</name></decl>, <decl><type ref="prev"/><name>filter_v</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOAD_SRCV8</name><argument_list>(<argument><expr><name>srcPos</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>permS</name></expr></argument>, <argument><expr><name>src_v0</name></expr></argument>, <argument><expr><name>src_v1</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_v</name> <operator>=</operator> 
<operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><call><name>VEC_MERGEH</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>vzero</name></expr></argument>, <argument><expr><name>src_vF</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_VFD</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter_v0R</name></expr></argument>, <argument><expr><name>filter_v1R</name></expr></argument>, <argument><expr><name>permF</name></expr></argument>, <argument><expr><name>filter_v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val_v</name> <operator>=</operator> <call><name>vec_msums</name><argument_list>(<argument><expr><name>src_v</name></expr></argument>, <argument><expr><name>filter_v</name></expr></argument>, <argument><expr><name>val_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val_s</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>val_v</name></expr></argument>, <argument><expr><name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>val_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>tempo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></switch></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
