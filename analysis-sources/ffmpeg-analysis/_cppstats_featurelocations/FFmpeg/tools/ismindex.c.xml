<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tools\ismindex.c">













































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/isom.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/os_support.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s [-split] [-ismf] [-n basename] [-path-prefix prefix] "</literal>
<literal type="string">"[-ismc-prefix prefix] [-output dir] file1 [file2] ...\n"</literal></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>MoofOffset</name> <block>{
<decl_stmt><decl><type><name>int64_t</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Track</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>track_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_audio</name></decl>, <decl><type ref="prev"/><name>is_video</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chunks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>codec_private</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codec_private_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>MoofOffset</name></name> <modifier>*</modifier></type><name>offsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timescale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fourcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Tracks</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nb_tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tracks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>video_track</name></decl>, <decl><type ref="prev"/><name>audio_track</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_video_tracks</name></decl>, <decl><type ref="prev"/><name>nb_audio_tracks</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>expect_tag</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>got_tag</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>expected_tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_tag</name> <operator>!=</operator> <name>expected_tag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>got_tag_str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>expected_tag_str</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>got_tag_str</name></expr></argument>, <argument><expr><name>got_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>expected_tag_str</name></expr></argument>, <argument><expr><name>expected_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wanted tag %.4s, got %.4s\n"</literal></expr></argument>, <argument><expr><name>expected_tag_str</name></expr></argument>,
<argument><expr><name>got_tag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tag_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>expect_tag</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>got</name> <operator>=</operator> <call><name>avio_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"short read, wanted %d, got %d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>got</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_tag</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tag_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>expect_tag</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_fragment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>AVIO_FLAG_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to open %s: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_tag</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>copy_tag</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avio_flush</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_fragment</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>skip_tag</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>skip_tag</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_fragments</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Tracks</name></name> <modifier>*</modifier></type><name>tracks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_index</name></decl></parameter>,
<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>split</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ismf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>output_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>dirname</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>filename</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>idxname</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fragment_ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ismf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>idxname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idxname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s.ismf"</literal></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>idxname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>idxname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_index</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>is_video</name></name></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%sQualityLevels(%d)"</literal></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>split</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mkdir</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/Fragments(%s=%"</literal><name>PRId64</name><literal type="string">")"</literal></expr></argument>,
<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ismf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>split</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment_ret</name> <operator>=</operator> <call><name>write_fragment</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fragment_ret</name> <operator>=</operator> <call><name>skip_fragment</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ismf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fragment_ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed fragment %d in track %d (%s)\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>fragment_ret</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>read_trun_duration</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_duration</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>dts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>first_pts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max_pts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>avio_rb24</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>default_duration</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_DURATION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No sample duration in trun flags\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_DATA_OFFSET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_FIRST_SAMPLE_FLAGS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sample_duration</name> <init>= <expr><name>default_duration</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><name>dts</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_DURATION</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sample_duration</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_FLAGS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TRUN_SAMPLE_CTS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pts</name> <operator>+=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_duration</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Negative sample duration %d\n"</literal></expr></argument>, <argument><expr><name>sample_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_pts</name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>max_pts</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_pts</name></expr></argument>, <argument><expr><name>pts</name> <operator>+</operator> <name>sample_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dts</name> <operator>+=</operator> <name>sample_duration</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>max_pts</name> <operator>-</operator> <name>first_pts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>read_moof_duration</name><parameter_list>(<parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>moof_size</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>default_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>moof_size</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>expect_tag</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>moof_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>traf_pos</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>traf_size</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>traf_pos</name> <operator>+</operator> <name>traf_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avio_tell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>avio_rb24</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TFHD_BASE_DATA_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_rb64</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TFHD_STSD_ID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOV_TFHD_DEFAULT_DURATION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>default_duration</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>read_trun_duration</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>default_duration</name></expr></argument>,
<argument><expr><name>pos</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find trun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find traf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_tfra</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Tracks</name></name> <modifier>*</modifier></type><name>tracks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_index</name></decl></parameter>, <parameter><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>AVERROR_EOF</name></expr></init></decl>, <decl><type ref="prev"/><name>track_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>fieldlength</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><call><name>avio_tell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>avio_r8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_rb24</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>track_id</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_index</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>track</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>track_id</name> <operator>==</operator> <name>track_id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>track</name> <operator>=</operator> <name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>track</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fieldlength</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>track</name><operator>-&gt;</operator><name>offsets</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>offsets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <call><name>avio_rb64</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>avio_rb64</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>fieldlength</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>fieldlength</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>fieldlength</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_r8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>-</operator>
<name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name> <operator>+</operator>
<name><name>track</name><operator>-&gt;</operator><name>duration</name></name> <operator>-</operator>
<name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><call><name>read_moof_duration</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>duration</name> <operator>-</operator> <name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Calculated last chunk duration for track %d "</literal>
<literal type="string">"was non-positive (%"</literal><name>PRId64</name><literal type="string">"), probably due to missing "</literal>
<literal type="string">"fragments "</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator>
<name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>duration</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"corrected to %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name> <operator>+</operator>
<name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name> <operator>-</operator>
<name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Track duration corrected to %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_mfra</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Tracks</name></name> <modifier>*</modifier></type><name>tracks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_index</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>split</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ismf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>output_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>err_str</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>mfra_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>avio_open2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>AVIO_FLAG_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>avio_size</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mfra_size</name> <operator>=</operator> <call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_seek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>-</operator><name>mfra_size</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>mfra_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err_str</name> <operator>=</operator> <literal type="string">"mfra size mismatch"</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>avio_rb32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err_str</name> <operator>=</operator> <literal type="string">"mfra tag mismatch"</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>read_tfra</name><argument_list>(<argument><expr><name>tracks</name></expr></argument>, <argument><expr><name>start_index</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>split</name> <operator>||</operator> <name>ismf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>write_fragments</name><argument_list>(<argument><expr><name>tracks</name></expr></argument>, <argument><expr><name>start_index</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>split</name></expr></argument>, <argument><expr><name>ismf</name></expr></argument>,
<argument><expr><name>output_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err_str</name> <operator>=</operator> <literal type="string">"error in write_fragments"</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avio_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to read the MFRA atom in %s (%s)\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_private_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>codec_private_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>codec_private</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>codec_private</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>codec_private_size</name></name> <operator>=</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>codec_private</name></name></expr></argument>, <argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_video_private_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>codecpar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVIOContext</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sps_size</name></decl>, <decl><type ref="prev"/><name>pps_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>get_private_data</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name>codecpar</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>avio_open_dyn_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">11</literal> <operator>||</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sps_size</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">11</literal> <operator>+</operator> <name>sps_size</name> <operator>&gt;</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="number">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pps_size</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>sps_size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">11</literal> <operator>+</operator> <name>sps_size</name> <operator>+</operator> <name>pps_size</name> <operator>&gt;</operator> <name><name>codecpar</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avio_wb32</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><literal type="number">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avio_write</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>codecpar</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">11</literal> <operator>+</operator> <name>sps_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>codec_private_size</name></name> <operator>=</operator> <call><name>avio_close_dyn_buf</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>codec_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Tracks</name></name> <modifier>*</modifier></type><name>tracks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>split</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ismf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>output_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>orig_tracks</name> <init>= <expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to open %s: %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to identify %s: %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No streams found in %s\n"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVStream</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Skipping track %d in %s as it has zero bitrate\n"</literal></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>track</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>track</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>track</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>,
<argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>]</index></name> <operator>=</operator> <name>track</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>is_audio</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>is_video</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>is_audio</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>is_video</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Track %d in %s is neither video nor audio, skipping\n"</literal></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>,
<argument><expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name><name>track</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE</name></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>, <argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>is_audio</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tracks</name><operator>-&gt;</operator><name>audio_track</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>audio_track</name></name> <operator>=</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_audio_tracks</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>=</operator> <literal type="string">"AACL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMAPRO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>=</operator> <literal type="string">"WMAP"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>get_private_data</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>is_video</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tracks</name><operator>-&gt;</operator><name>video_track</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>video_track</name></name> <operator>=</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_video_tracks</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>=</operator> <literal type="string">"H264"</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>fourcc</name></name> <operator>=</operator> <literal type="string">"WVC1"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_video_private_data</name><argument_list>(<argument><expr><name>track</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>read_mfra</name><argument_list>(<argument><expr><name>tracks</name></expr></argument>, <argument><expr><name>orig_tracks</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>split</name></expr></argument>, <argument><expr><name>ismf</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>,
<argument><expr><name>output_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_server_manifest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Tracks</name></name> <modifier>*</modifier></type><name>tracks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_prefix</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ismc_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s.ism"</literal></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\"&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;head&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;meta name=\"clientManifestRelativePath\" "</literal>
<literal type="string">"content=\"%s%s.ismc\" /&gt;\n"</literal></expr></argument>, <argument><expr><name>ismc_prefix</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;/head&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;body&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;switch&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><ternary><condition><expr><name><name>track</name><operator>-&gt;</operator><name>is_video</name></name></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr> </then><else>: <expr><literal type="string">"audio"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;%s src=\"%s%s\" systemBitrate=\"%d\"&gt;\n"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>path_prefix</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t\t&lt;param name=\"trackID\" value=\"%d\" "</literal>
<literal type="string">"valueType=\"data\" /&gt;\n"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\t\t&lt;/%s&gt;\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;/switch&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;/body&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;/smil&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>print_track_chunks</name><argument_list>(<argument><expr><name>FILE</name> <operator>*</operator><name>out</name></expr></argument>, <argument><expr>struct <name>Tracks</name> <operator>*</operator><name>tracks</name></expr></argument>, <argument><expr><name>int</name> main</expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr/></index></name>main]</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>should_print_time_mismatch</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>chunks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> main <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>is_audio</name> <operator>==</operator> <name><name>track</name><operator>-&gt;</operator><name>is_audio</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name> <operator>!=</operator> <name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Mismatched duration of %s chunk %d in %s (%d) and %s (%d)\n"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr>main</expr></argument>, <argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>should_print_time_mismatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>!=</operator> <name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>should_print_time_mismatch</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Mismatched (start) time of %s chunk %d in %s (%d) and %s (%d)\n"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr>main</expr></argument>, <argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>should_print_time_mismatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\t&lt;c n=\"%d\" d=\"%"</literal><name>PRId64</name><literal type="string">"\" "</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"t=\"%"</literal><name>PRId64</name><literal type="string">"\" "</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>track</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"/&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output_client_manifest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Tracks</name></name> <modifier>*</modifier></type><name>tracks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>split</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>split</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%sManifest"</literal></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s.ismc"</literal></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;SmoothStreamingMedia MajorVersion=\"2\" MinorVersion=\"0\" "</literal>
<literal type="string">"Duration=\"%"</literal><name>PRId64</name> <literal type="string">"\"&gt;\n"</literal></expr></argument>, <argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>duration</name></name> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tracks</name><operator>-&gt;</operator><name>video_track</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>tracks</name><operator>-&gt;</operator><name>video_track</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>first_track</name> <init>= <expr><name>track</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"\t&lt;StreamIndex Type=\"video\" QualityLevels=\"%d\" "</literal>
<literal type="string">"Chunks=\"%d\" "</literal>
<literal type="string">"Url=\"QualityLevels({bitrate})/Fragments(video={start time})\"&gt;\n"</literal></expr></argument>,
<argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_video_tracks</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>track</name> <operator>=</operator> <name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>is_video</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"\t\t&lt;QualityLevel Index=\"%d\" Bitrate=\"%d\" "</literal>
<literal type="string">"FourCC=\"%s\" MaxWidth=\"%d\" MaxHeight=\"%d\" "</literal>
<literal type="string">"CodecPrivateData=\""</literal></expr></argument>,
<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>codec_private_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>codec_private</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\" /&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>!=</operator> <name><name>first_track</name><operator>-&gt;</operator><name>chunks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Mismatched number of video chunks in %s (id: %d, chunks %d) and %s (id: %d, chunks %d)\n"</literal></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name><name>first_track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>first_track</name><operator>-&gt;</operator><name>track_id</name></name></expr></argument>, <argument><expr><name><name>first_track</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>print_track_chunks</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>, <argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>video_track</name></name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;/StreamIndex&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tracks</name><operator>-&gt;</operator><name>audio_track</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>track</name> <init>= <expr><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name><name>tracks</name><operator>-&gt;</operator><name>audio_track</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Track</name></name> <modifier>*</modifier></type><name>first_track</name> <init>= <expr><name>track</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"\t&lt;StreamIndex Type=\"audio\" QualityLevels=\"%d\" "</literal>
<literal type="string">"Chunks=\"%d\" "</literal>
<literal type="string">"Url=\"QualityLevels({bitrate})/Fragments(audio={start time})\"&gt;\n"</literal></expr></argument>,
<argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_audio_tracks</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>track</name> <operator>=</operator> <name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>track</name><operator>-&gt;</operator><name>is_audio</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"\t\t&lt;QualityLevel Index=\"%d\" Bitrate=\"%d\" "</literal>
<literal type="string">"FourCC=\"%s\" SamplingRate=\"%d\" Channels=\"%d\" "</literal>
<literal type="string">"BitsPerSample=\"16\" PacketSize=\"%d\" "</literal>
<literal type="string">"AudioTag=\"%d\" CodecPrivateData=\""</literal></expr></argument>,
<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>fourcc</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>track</name><operator>-&gt;</operator><name>codec_private_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>codec_private</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\" /&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>chunks</name></name> <operator>!=</operator> <name><name>first_track</name><operator>-&gt;</operator><name>chunks</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Mismatched number of audio chunks in %s and %s\n"</literal></expr></argument>,
<argument><expr><name><name>track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>first_track</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>print_track_chunks</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>, <argument><expr><name><name>tracks</name><operator>-&gt;</operator><name>audio_track</name></name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t&lt;/StreamIndex&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;/SmoothStreamingMedia&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_tracks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Tracks</name></name> <modifier>*</modifier></type><name>tracks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>codec_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tracks</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tracks</name><operator>-&gt;</operator><name>nb_tracks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ismc_prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>output_prefix_buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>split</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ismf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>Tracks</name></name></type> <name>tracks</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>video_track</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>audio_track</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>basename</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-path-prefix"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path_prefix</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-ismc-prefix"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ismc_prefix</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-output"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>output_prefix</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>output_prefix</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>output_prefix</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>output_prefix_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_prefix_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output_prefix</name> <operator>=</operator> <name>output_prefix_buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-split"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>split</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-ismf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ismf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>basename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ismf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>handle_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>split</name></expr></argument>, <argument><expr><name>ismf</name></expr></argument>,
<argument><expr><name>basename</name></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tracks</name><operator>.</operator><name>nb_tracks</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>basename</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>split</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>split</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>output_server_manifest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>,
<argument><expr><name>path_prefix</name></expr></argument>, <argument><expr><name>ismc_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>output_client_manifest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><name>output_prefix</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clean_tracks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tracks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
