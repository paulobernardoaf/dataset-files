<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\dnn\dnn-layer-pad-test.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/dnn/dnn_backend_native_layer_pad.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSON</name></cpp:macro> <cpp:value>0.00001</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_with_mode_symmetric</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
















<decl_stmt><decl><type><name>LayerPadParams</name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DnnOperand</name></type> <name><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>input_indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>input</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>expected_output</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">9</literal><operator>*</operator><literal type="number">9</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">12.0</literal></expr>, <expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">12.0</literal></expr>, <expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>,
<expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">9.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">11.0</literal></expr>, <expr><literal type="number">9.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">11.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>,
<expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">9.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">11.0</literal></expr>, <expr><literal type="number">9.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">11.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">12.0</literal></expr>, <expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">12.0</literal></expr>, <expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>,
<expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><literal type="number">31.0</literal></expr>, <expr><literal type="number">32.0</literal></expr>, <expr><literal type="number">27.0</literal></expr>, <expr><literal type="number">28.0</literal></expr>, <expr><literal type="number">29.0</literal></expr>, <expr><literal type="number">24.0</literal></expr>, <expr><literal type="number">25.0</literal></expr>, <expr><literal type="number">26.0</literal></expr>, <expr><literal type="number">24.0</literal></expr>, <expr><literal type="number">25.0</literal></expr>, <expr><literal type="number">26.0</literal></expr>, <expr><literal type="number">27.0</literal></expr>, <expr><literal type="number">28.0</literal></expr>, <expr><literal type="number">29.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><literal type="number">31.0</literal></expr>, <expr><literal type="number">32.0</literal></expr>, <expr><literal type="number">33.0</literal></expr>, <expr><literal type="number">34.0</literal></expr>, <expr><literal type="number">35.0</literal></expr>, <expr><literal type="number">33.0</literal></expr>,
<expr><literal type="number">34.0</literal></expr>, <expr><literal type="number">35.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><literal type="number">31.0</literal></expr>, <expr><literal type="number">32.0</literal></expr>, <expr><literal type="number">42.0</literal></expr>, <expr><literal type="number">43.0</literal></expr>, <expr><literal type="number">44.0</literal></expr>, <expr><literal type="number">39.0</literal></expr>, <expr><literal type="number">40.0</literal></expr>, <expr><literal type="number">41.0</literal></expr>, <expr><literal type="number">36.0</literal></expr>, <expr><literal type="number">37.0</literal></expr>, <expr><literal type="number">38.0</literal></expr>, <expr><literal type="number">36.0</literal></expr>, <expr><literal type="number">37.0</literal></expr>, <expr><literal type="number">38.0</literal></expr>, <expr><literal type="number">39.0</literal></expr>, <expr><literal type="number">40.0</literal></expr>, <expr><literal type="number">41.0</literal></expr>, <expr><literal type="number">42.0</literal></expr>, <expr><literal type="number">43.0</literal></expr>, <expr><literal type="number">44.0</literal></expr>, <expr><literal type="number">45.0</literal></expr>, <expr><literal type="number">46.0</literal></expr>, <expr><literal type="number">47.0</literal></expr>, <expr><literal type="number">45.0</literal></expr>, <expr><literal type="number">46.0</literal></expr>, <expr><literal type="number">47.0</literal></expr>, <expr><literal type="number">42.0</literal></expr>, <expr><literal type="number">43.0</literal></expr>,
<expr><literal type="number">44.0</literal></expr>, <expr><literal type="number">42.0</literal></expr>, <expr><literal type="number">43.0</literal></expr>, <expr><literal type="number">44.0</literal></expr>, <expr><literal type="number">39.0</literal></expr>, <expr><literal type="number">40.0</literal></expr>, <expr><literal type="number">41.0</literal></expr>, <expr><literal type="number">36.0</literal></expr>, <expr><literal type="number">37.0</literal></expr>, <expr><literal type="number">38.0</literal></expr>, <expr><literal type="number">36.0</literal></expr>, <expr><literal type="number">37.0</literal></expr>, <expr><literal type="number">38.0</literal></expr>, <expr><literal type="number">39.0</literal></expr>, <expr><literal type="number">40.0</literal></expr>, <expr><literal type="number">41.0</literal></expr>, <expr><literal type="number">42.0</literal></expr>, <expr><literal type="number">43.0</literal></expr>, <expr><literal type="number">44.0</literal></expr>, <expr><literal type="number">45.0</literal></expr>, <expr><literal type="number">46.0</literal></expr>, <expr><literal type="number">47.0</literal></expr>, <expr><literal type="number">45.0</literal></expr>, <expr><literal type="number">46.0</literal></expr>, <expr><literal type="number">47.0</literal></expr>, <expr><literal type="number">42.0</literal></expr>, <expr><literal type="number">43.0</literal></expr>, <expr><literal type="number">44.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><literal type="number">31.0</literal></expr>, <expr><literal type="number">32.0</literal></expr>,
<expr><literal type="number">27.0</literal></expr>, <expr><literal type="number">28.0</literal></expr>, <expr><literal type="number">29.0</literal></expr>, <expr><literal type="number">24.0</literal></expr>, <expr><literal type="number">25.0</literal></expr>, <expr><literal type="number">26.0</literal></expr>, <expr><literal type="number">24.0</literal></expr>, <expr><literal type="number">25.0</literal></expr>, <expr><literal type="number">26.0</literal></expr>, <expr><literal type="number">27.0</literal></expr>, <expr><literal type="number">28.0</literal></expr>, <expr><literal type="number">29.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><literal type="number">31.0</literal></expr>, <expr><literal type="number">32.0</literal></expr>, <expr><literal type="number">33.0</literal></expr>, <expr><literal type="number">34.0</literal></expr>, <expr><literal type="number">35.0</literal></expr>, <expr><literal type="number">33.0</literal></expr>, <expr><literal type="number">34.0</literal></expr>, <expr><literal type="number">35.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><literal type="number">31.0</literal></expr>, <expr><literal type="number">32.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">12.0</literal></expr>,
<expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">12.0</literal></expr>, <expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>LPMP_SYMMETRIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dnn_execute_layer_pad</name><argument_list>(<argument><expr><name>operands</name></expr></argument>, <argument><expr><name>input_indexes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expected_output</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EPSON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"at index %d, output: %f, expected_output: %f\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_with_mode_reflect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
















<decl_stmt><decl><type><name>LayerPadParams</name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DnnOperand</name></type> <name><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>input_indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>input</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>expected_output</name><index>[<expr><literal type="number">6</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">12.0</literal></expr>, <expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">9.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">11.0</literal></expr>,
<expr><literal type="number">12.0</literal></expr>, <expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">24.0</literal></expr>, <expr><literal type="number">25.0</literal></expr>, <expr><literal type="number">26.0</literal></expr>, <expr><literal type="number">27.0</literal></expr>, <expr><literal type="number">28.0</literal></expr>, <expr><literal type="number">29.0</literal></expr>, <expr><literal type="number">30.0</literal></expr>, <expr><literal type="number">31.0</literal></expr>, <expr><literal type="number">32.0</literal></expr>, <expr><literal type="number">33.0</literal></expr>, <expr><literal type="number">34.0</literal></expr>,
<expr><literal type="number">35.0</literal></expr>, <expr><literal type="number">12.0</literal></expr>, <expr><literal type="number">13.0</literal></expr>, <expr><literal type="number">14.0</literal></expr>, <expr><literal type="number">15.0</literal></expr>, <expr><literal type="number">16.0</literal></expr>, <expr><literal type="number">17.0</literal></expr>, <expr><literal type="number">18.0</literal></expr>, <expr><literal type="number">19.0</literal></expr>, <expr><literal type="number">20.0</literal></expr>, <expr><literal type="number">21.0</literal></expr>, <expr><literal type="number">22.0</literal></expr>, <expr><literal type="number">23.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">9.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">11.0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>LPMP_REFLECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dnn_execute_layer_pad</name><argument_list>(<argument><expr><name>operands</name></expr></argument>, <argument><expr><name>input_indexes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expected_output</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EPSON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"at index %d, output: %f, expected_output: %f\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_with_mode_constant</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
















<decl_stmt><decl><type><name>LayerPadParams</name></type> <name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DnnOperand</name></type> <name><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>input_indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>input</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>expected_output</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>,
<expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">3.0</literal></expr>, <expr><literal type="number">4.0</literal></expr>, <expr><literal type="number">5.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>,
<expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">6.0</literal></expr>, <expr><literal type="number">7.0</literal></expr>, <expr><literal type="number">8.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">9.0</literal></expr>, <expr><literal type="number">10.0</literal></expr>, <expr><literal type="number">11.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>, <expr><literal type="number">728.0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>LPMP_CONSTANT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>constant_values</name></name> <operator>=</operator> <literal type="number">728</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name><operator>.</operator><name>paddings</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dnn_execute_layer_pad</name><argument_list>(<argument><expr><name>operands</name></expr></argument>, <argument><expr><name>input_indexes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expected_output</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EPSON</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"at index %d, output: %f, expected_output: %f\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>test_with_mode_symmetric</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_with_mode_reflect</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_with_mode_constant</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
