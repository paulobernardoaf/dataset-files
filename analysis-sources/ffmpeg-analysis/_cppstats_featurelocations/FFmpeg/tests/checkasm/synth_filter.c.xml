<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\synth_filter.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dcadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/synth_filter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_input</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; BUF_SIZE; i++) { float f = (float)rnd() / (UINT_MAX &gt;&gt; 5) - 16.0f; in[i] = f; } } while (0)</cpp:value></cpp:define>








<function><type><name>void</name></type> <name>checkasm_check_synth_filter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFTContext</name></type> <name>imdct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SynthFilterContext</name></type> <name>synth</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imdct</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_synth_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>synth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>synth</name><operator>.</operator><name>synth_filter_float</name></name></expr></argument>, <argument><expr><literal type="string">"synth_filter_float"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>out_b</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>buf2_0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>buf2_1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>buf2_b</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>buf0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">512</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">512</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>buf_b</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">512</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>offset0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset_b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>declare_func</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>FFTContext</name> <operator>*</operator></expr></argument>, <argument><expr><name>float</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>float</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>float</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>float</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>float</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2_0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf2_0</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf2_1</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf2_b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf2_b</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf2_0</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf2_1</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf_b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf2_b</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type> <name>window</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ff_dca_fir_32bands_perfect</name></expr> </then><else>: <expr><name>ff_dca_fir_32bands_nonperfect</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out0</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out1</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out_b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out_b</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imdct</name></expr></argument>, <argument><expr><name>buf0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset0</name></expr></argument>, <argument><expr><name>buf2_0</name></expr></argument>, <argument><expr><name>window</name></expr></argument>,
<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imdct</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset1</name></expr></argument>, <argument><expr><name>buf2_1</name></expr></argument>, <argument><expr><name>window</name></expr></argument>,
<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset0</name> <operator>!=</operator> <name>offset1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"offsets do not match: %d, %d"</literal></expr></argument>, <argument><expr><name>offset0</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>BUF_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_ulp</name><argument_list>(<argument><expr><name><name>out0</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7.0e-7</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>float_near_abs_eps_ulp</name><argument_list>(<argument><expr><name><name>buf2_0</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf2_1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7.0e-7</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>o0</name></decl>, <decl><type ref="prev"/><name>o1</name></decl>, <decl><type ref="prev"/><name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o0</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>out0</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>o1</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>out1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b0</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>buf2_0</name><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>b1</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>buf2_1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"out: %11g (0x%08x); %11g (0x%08x); abs diff %11g\n"</literal></expr></argument>,
<argument><expr><name><name>o0</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>o0</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>o1</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>o1</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>o0</name><operator>.</operator><name>f</name></name> <operator>-</operator> <name><name>o1</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"buf2: %11g (0x%08x); %11g (0x%08x); abs diff %11g\n"</literal></expr></argument>,
<argument><expr><name><name>b0</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>b0</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>f</name></name> <operator>-</operator> <name><name>b1</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imdct</name></expr></argument>, <argument><expr><name>buf_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset_b</name></expr></argument>, <argument><expr><name>buf2_b</name></expr></argument>, <argument><expr><name>window</name></expr></argument>,
<argument><expr><name>out_b</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imdct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"synth_filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
