<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\videodsp.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/videodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; w * h * sizeof(*src0); i += 4) AV_WN32A(((uint8_t *) src0) + i, rnd()); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iter_1d</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>fix</name></type></parameter>, <parameter><type><name>fix_val</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>var_start</name></type></parameter>, <parameter><type><name>var_end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (fix = fix_val, var = var_start; var &lt;= var_end; var++) { call_ref((type *) dst0, (const type *) (src0 + y * pw + x), bw * sizeof(type), pw * sizeof(type), bw, bh, x, y, pw, ph); call_new((type *) dst1, (const type *) (src1 + y * pw + x), bw * sizeof(type), pw * sizeof(type), bw, bh, x, y, pw, ph); if (memcmp(dst0, dst1, bw * bh * sizeof(type))) fail(); bench_new((type *) dst1, (const type *) (src1 + y * pw + x),bw * sizeof(type), pw * sizeof(type), bw, bh, x, y, pw, ph); }</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_emu_edge_size</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>src_w</name></type></parameter>, <parameter><type><name>src_h</name></type></parameter>, <parameter><type><name>dst_w</name></type></parameter>, <parameter><type><name>dst_h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LOCAL_ALIGNED_16(type, src0, [src_w * src_h]); LOCAL_ALIGNED_16(type, src1, [src_w * src_h]); int bw = dst_w, bh = dst_h; int pw = src_w, ph = src_h; int y, x; randomize_buffers(src_w, src_h); memcpy(src1, src0, pw * ph * sizeof(type)); iter_1d(type, y, 0 - src_h, x, 0 - src_w, src_w - 0); iter_1d(type, x, src_w - 0, y, 0 - src_h, src_h - 0); iter_1d(type, y, src_h - 0, x, 0 - src_w, src_w - 0); iter_1d(type, x, 0 - src_w, y, 0 - src_h, src_h - 0); } while (0)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_emu_edge</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LOCAL_ALIGNED_16(type, dst0, [64 * 64]); LOCAL_ALIGNED_16(type, dst1, [64 * 64]); declare_func_emms(AV_CPU_FLAG_MMX | AV_CPU_FLAG_MMXEXT, void, type *dst, const type *src, ptrdiff_t dst_linesize, ptrdiff_t src_linesize, int block_w, int block_h, int src_x, int src_y, int src_w, int src_h); check_emu_edge_size(type, 16, 1, 64, 64); check_emu_edge_size(type, 16, 16, 64, 64); check_emu_edge_size(type, 64, 64, 64, 64); } while (0)</cpp:value></cpp:define>















<function><type><name>void</name></type> <name>checkasm_check_videodsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VideoDSPContext</name></type> <name>vdsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vdsp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name></expr></argument>, <argument><expr><literal type="string">"emulated_edge_mc_8"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_emu_edge</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"emulated_edge_mc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
