<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\vf_nlmeans.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/vf_nlmeans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffer</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; size / 4; i++) ((uint32_t *)buf)[i] = rnd(); } while (0)</cpp:value></cpp:define>





<function><type><name>void</name></type> <name>checkasm_check_nlmeans</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NLMeansDSPContext</name></type> <name>dsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>ff_nlmeans_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>dsp</name><operator>.</operator><name>compute_safe_ssd_integral_image</name></name></expr></argument>, <argument><expr><literal type="string">"ssd_integral_image"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offx</name></decl>, <decl><type ref="prev"/><name>offy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>e</name> <init>= <expr><name>p</name> <operator>+</operator> <name>r</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ii_w</name> <init>= <expr><name>w</name> <operator>+</operator> <name>e</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ii_h</name> <init>= <expr><name>h</name> <operator>+</operator> <name>e</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ii_lz_32</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>ii_w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii_orig_ref</name> <init>= <expr><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>ii_h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ii_lz_32</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii_orig_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii_ref</name> <init>= <expr><name>ii_orig_ref</name> <operator>+</operator> <name>ii_lz_32</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii_orig_new</name> <init>= <expr><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>ii_h</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ii_lz_32</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii_orig_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ii_new</name> <init>= <expr><name>ii_orig_new</name> <operator>+</operator> <name>ii_lz_32</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_lz</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>src_lz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>uint32_t *dst</argument>, <argument>ptrdiff_t dst_linesize_32</argument>,
<argument>const uint8_t *s1</argument>, <argument>ptrdiff_t linesize1</argument>,
<argument>const uint8_t *s2</argument>, <argument>ptrdiff_t linesize2</argument>,
<argument>int w</argument>, <argument>int h</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <name>src_lz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>offy</name> <operator>=</operator> <operator>-</operator><name>r</name></expr>;</init> <condition><expr><name>offy</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>offy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>offx</name> <operator>=</operator> <operator>-</operator><name>r</name></expr>;</init> <condition><expr><name>offx</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>offx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offx</name> <operator>||</operator> <name>offy</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s1x</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s1y</name> <init>= <expr><name>e</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s2x</name> <init>= <expr><name>e</name> <operator>+</operator> <name>offx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s2y</name> <init>= <expr><name>e</name> <operator>+</operator> <name>offy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>startx_safe</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>s1x</name></expr></argument>, <argument><expr><name>s2x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>starty_safe</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>s1y</name></expr></argument>, <argument><expr><name>s2y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>u_endx_safe</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>s1x</name> <operator>+</operator> <name>w</name></expr></argument>, <argument><expr><name>s2x</name> <operator>+</operator> <name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>endy_safe</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>s1y</name> <operator>+</operator> <name>h</name></expr></argument>, <argument><expr><name>s2y</name> <operator>+</operator> <name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>safe_pw</name> <init>= <expr><operator>(</operator><name>u_endx_safe</name> <operator>-</operator> <name>startx_safe</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>safe_ph</name> <init>= <expr><name>endy_safe</name> <operator>-</operator> <name>starty_safe</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>safe_pw</name> <operator>&amp;&amp;</operator> <name>safe_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>startx_safe</name> <operator>-</operator> <name>s1x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>startx_safe</name> <operator>-</operator> <name>s1x</name> <operator>&lt;</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>starty_safe</name> <operator>-</operator> <name>s1y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>starty_safe</name> <operator>-</operator> <name>s1y</name> <operator>&lt;</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>startx_safe</name> <operator>-</operator> <name>s2x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>startx_safe</name> <operator>-</operator> <name>s2x</name> <operator>&lt;</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>starty_safe</name> <operator>-</operator> <name>s2y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>starty_safe</name> <operator>-</operator> <name>s2y</name> <operator>&lt;</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ii_ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii_lz_32</name> <operator>*</operator> <name>ii_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ii_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii_lz_32</name> <operator>*</operator> <name>ii_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>ii_ref</name> <operator>+</operator> <name>starty_safe</name><operator>*</operator><name>ii_lz_32</name> <operator>+</operator> <name>startx_safe</name></expr></argument>, <argument><expr><name>ii_lz_32</name></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>starty_safe</name> <operator>-</operator> <name>s1y</name><operator>)</operator> <operator>*</operator> <name>src_lz</name> <operator>+</operator> <operator>(</operator><name>startx_safe</name> <operator>-</operator> <name>s1x</name><operator>)</operator></expr></argument>, <argument><expr><name>src_lz</name></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>starty_safe</name> <operator>-</operator> <name>s2y</name><operator>)</operator> <operator>*</operator> <name>src_lz</name> <operator>+</operator> <operator>(</operator><name>startx_safe</name> <operator>-</operator> <name>s2x</name><operator>)</operator></expr></argument>, <argument><expr><name>src_lz</name></expr></argument>,
<argument><expr><name>safe_pw</name></expr></argument>, <argument><expr><name>safe_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>ii_new</name> <operator>+</operator> <name>starty_safe</name><operator>*</operator><name>ii_lz_32</name> <operator>+</operator> <name>startx_safe</name></expr></argument>, <argument><expr><name>ii_lz_32</name></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>starty_safe</name> <operator>-</operator> <name>s1y</name><operator>)</operator> <operator>*</operator> <name>src_lz</name> <operator>+</operator> <operator>(</operator><name>startx_safe</name> <operator>-</operator> <name>s1x</name><operator>)</operator></expr></argument>, <argument><expr><name>src_lz</name></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>starty_safe</name> <operator>-</operator> <name>s2y</name><operator>)</operator> <operator>*</operator> <name>src_lz</name> <operator>+</operator> <operator>(</operator><name>startx_safe</name> <operator>-</operator> <name>s2x</name><operator>)</operator></expr></argument>, <argument><expr><name>src_lz</name></expr></argument>,
<argument><expr><name>safe_pw</name></expr></argument>, <argument><expr><name>safe_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>ii_ref</name></expr></argument>, <argument><expr><name>ii_new</name></expr></argument>, <argument><expr><operator>(</operator><name>ii_lz_32</name> <operator>*</operator> <name>ii_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ii_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ii_lz_32</name> <operator>*</operator> <name>ii_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ii_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>ii_new</name> <operator>+</operator> <name>starty_safe</name><operator>*</operator><name>ii_lz_32</name> <operator>+</operator> <name>startx_safe</name></expr></argument>, <argument><expr><name>ii_lz_32</name></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>starty_safe</name> <operator>-</operator> <name>s1y</name><operator>)</operator> <operator>*</operator> <name>src_lz</name> <operator>+</operator> <operator>(</operator><name>startx_safe</name> <operator>-</operator> <name>s1x</name><operator>)</operator></expr></argument>, <argument><expr><name>src_lz</name></expr></argument>,
<argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><name>starty_safe</name> <operator>-</operator> <name>s2y</name><operator>)</operator> <operator>*</operator> <name>src_lz</name> <operator>+</operator> <operator>(</operator><name>startx_safe</name> <operator>-</operator> <name>s2x</name><operator>)</operator></expr></argument>, <argument><expr><name>src_lz</name></expr></argument>,
<argument><expr><name>safe_pw</name></expr></argument>, <argument><expr><name>safe_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ii_orig_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ii_orig_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"dsp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
