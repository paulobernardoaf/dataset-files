<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\opusdsp.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/opusdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_float</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (int i = 0; i &lt; len; i++) { float f = (float)rnd() / (UINT_MAX &gt;&gt; 5) - 16.0f; buf[i] = f; } } while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>0.005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SIZE</name></cpp:macro> <cpp:value>(960)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>test_postfilter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name> <operator>+</operator> <literal type="number">1024</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name> <operator>+</operator> <literal type="number">1024</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>float</name></type> <name><name>gains</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.3066406250f</literal></expr>, <expr><literal type="number">0.2170410156f</literal></expr>, <expr><literal type="number">0.1296386719f</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>period</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *data</argument>, <argument>int period</argument>, <argument>float *gains</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize_float</name><argument_list>(<argument><expr><name>data0</name></expr></argument>, <argument><expr><name>MAX_SIZE</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data1</name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><operator>(</operator><name>MAX_SIZE</name> <operator>+</operator> <literal type="number">1024</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>data0</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>gains</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>data1</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>gains</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>data0</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>data1</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>data1</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>gains</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_deemphasis</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>MAX_SIZE</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>MAX_SIZE</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>MAX_SIZE</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>coeff0</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>UINT_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <literal type="number">16.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>coeff1</name> <init>= <expr><name>coeff0</name></expr></init></decl>;</decl_stmt>

<macro><name>declare_func_float</name><argument_list>(<argument>float</argument>, <argument>float *out</argument>, <argument>float *in</argument>, <argument>float coeff</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize_float</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeff0</name> <operator>=</operator> <call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>coeff1</name> <operator>=</operator> <call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_opusdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OpusDSP</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_opus_dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>postfilter</name></name></expr></argument>, <argument><expr><literal type="string">"postfilter_15"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_postfilter</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"postfilter_15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>postfilter</name></name></expr></argument>, <argument><expr><literal type="string">"postfilter_512"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_postfilter</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"postfilter_512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>postfilter</name></name></expr></argument>, <argument><expr><literal type="string">"postfilter_1022"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_postfilter</name><argument_list>(<argument><expr><literal type="number">1022</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"postfilter_1022"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>deemphasis</name></name></expr></argument>, <argument><expr><literal type="string">"deemphasis"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>test_deemphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"deemphasis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
