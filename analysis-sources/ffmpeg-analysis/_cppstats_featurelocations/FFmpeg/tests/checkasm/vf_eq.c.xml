<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\vf_eq.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/avfilter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/vf_eq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_STRIDE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXELS</name></cpp:macro> <cpp:value>(WIDTH * HEIGHT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDOM_RANGE</name></cpp:macro> <cpp:value>80000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int j; uint8_t *tmp_buf = (uint8_t *)buf;for (j = 0; j&lt; size; j++) tmp_buf[j] = rnd() &amp; 0xFF; } while (0)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>void</name></type> <name>check_eq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><name>PIXELS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><index>[<expr><name>PIXELS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><index>[<expr><name>PIXELS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>WIDTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>HEIGHT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_stride</name> <init>= <expr><name>SRC_STRIDE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_stride</name> <init>= <expr><name>SRC_STRIDE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EQParameters</name></type> <name>pa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EQContext</name></type> <name>eq</name></decl>;</decl_stmt>
<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>EQParameters *param</argument>, <argument>uint8_t *dst</argument>, <argument>int dst_stride</argument>,
<argument>const uint8_t *src</argument>, <argument>int src_stride</argument>, <argument>int w</argument>, <argument>int h</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rand_contrast</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>RANDOM_RANGE</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>RANDOM_RANGE</name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name>SCALE</name> <operator>*</operator> <literal type="number">1.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>rand_brightness</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>SCALE</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>SCALE</name><operator>)</operator> <operator>/</operator>
<operator>(</operator><name>SCALE</name> <operator>*</operator> <literal type="number">1.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>contrast</name></name> <operator>=</operator> <name>rand_contrast</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pa</name><operator>.</operator><name>brightness</name></name> <operator>=</operator> <name>rand_brightness</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PIXELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PIXELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>PIXELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_eq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>eq</name><operator>.</operator><name>process</name></name></expr></argument>, <argument><expr><literal type="string">"process"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>, <argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>PIXELS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_vf_eq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>check_eq</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"eq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
