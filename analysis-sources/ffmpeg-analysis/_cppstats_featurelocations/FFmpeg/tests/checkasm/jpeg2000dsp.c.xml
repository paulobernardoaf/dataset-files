<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\jpeg2000dsp.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/jpeg2000dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; BUF_SIZE*3; i++) src[i] = rnd(); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers_float</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; BUF_SIZE*3; i++) src[i] = (float)rnd() / (UINT_MAX &gt;&gt; 5); } while (0)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type> <name>check_rct_int</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ref0</name> <init>= <expr><operator>&amp;</operator><name><name>ref</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new0</name> <init>= <expr><operator>&amp;</operator><name><name>new</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ref1</name> <init>= <expr><operator>&amp;</operator><name><name>ref</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new1</name> <init>= <expr><operator>&amp;</operator><name><name>new</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ref2</name> <init>= <expr><operator>&amp;</operator><name><name>ref</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new2</name> <init>= <expr><operator>&amp;</operator><name><name>new</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>void *src0</argument>, <argument>void *src1</argument>, <argument>void *src2</argument>, <argument>int csize</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>new0</name></expr></argument>, <argument><expr><name>new1</name></expr></argument>, <argument><expr><name>new2</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>new0</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>new1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>new2</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>new0</name></expr></argument>, <argument><expr><name>new1</name></expr></argument>, <argument><expr><name>new2</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_ict_float</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ref0</name> <init>= <expr><operator>&amp;</operator><name><name>ref</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new0</name> <init>= <expr><operator>&amp;</operator><name><name>new</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ref1</name> <init>= <expr><operator>&amp;</operator><name><name>ref</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new1</name> <init>= <expr><operator>&amp;</operator><name><name>new</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ref2</name> <init>= <expr><operator>&amp;</operator><name><name>ref</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new2</name> <init>= <expr><operator>&amp;</operator><name><name>new</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>void *src0</argument>, <argument>void *src1</argument>, <argument>void *src2</argument>, <argument>int csize</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize_buffers_float</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>new0</name></expr></argument>, <argument><expr><name>new1</name></expr></argument>, <argument><expr><name>new2</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>ref0</name></expr></argument>, <argument><expr><name>new0</name></expr></argument>, <argument><expr><literal type="number">1.0e-5</literal></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>ref1</name></expr></argument>, <argument><expr><name>new1</name></expr></argument>, <argument><expr><literal type="number">1.0e-5</literal></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>ref2</name></expr></argument>, <argument><expr><name>new2</name></expr></argument>, <argument><expr><literal type="number">1.0e-5</literal></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>new0</name></expr></argument>, <argument><expr><name>new1</name></expr></argument>, <argument><expr><name>new2</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_jpeg2000dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Jpeg2000DSPContext</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_jpeg2000dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>mct_decode</name><index>[<expr><name>FF_DWT53</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"jpeg2000_rct_int"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_rct_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>mct_decode</name><index>[<expr><name>FF_DWT97</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"jpeg2000_ict_float"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_ict_float</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"mct_decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
