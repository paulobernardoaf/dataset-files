<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\h264pred.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264pred.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>codec_ids</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AV_CODEC_ID_H264</name></expr>, <expr><name>AV_CODEC_ID_VP8</name></expr>, <expr><name>AV_CODEC_ID_RV40</name></expr>, <expr><name>AV_CODEC_ID_SVQ3</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>pred4x4_modes</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ 
<expr><index>[<expr><name>VERT_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"vertical"</literal></expr>,
<expr><index>[<expr><name>HOR_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"horizontal"</literal></expr>,
<expr><index>[<expr><name>DC_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc"</literal></expr>,
<expr><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"down_left"</literal></expr>,
<expr><index>[<expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>]</index> <operator>=</operator> <literal type="string">"down_right"</literal></expr>,
<expr><index>[<expr><name>VERT_RIGHT_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"vertical_right"</literal></expr>,
<expr><index>[<expr><name>HOR_DOWN_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"horizontal_right"</literal></expr>,
<expr><index>[<expr><name>VERT_LEFT_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"vertical_left"</literal></expr>,
<expr><index>[<expr><name>HOR_UP_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"horizontal_up"</literal></expr>,
<expr><index>[<expr><name>LEFT_DC_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"left_dc"</literal></expr>,
<expr><index>[<expr><name>TOP_DC_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"top_dc"</literal></expr>,
<expr><index>[<expr><name>DC_128_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc_128"</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><index>[<expr><name>VERT_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"vertical_vp8"</literal></expr>,
<expr><index>[<expr><name>HOR_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"horizontal_vp8"</literal></expr>,
<expr><index>[<expr><name>VERT_LEFT_PRED</name></expr>]</index> <operator>=</operator> <literal type="string">"vertical_left_vp8"</literal></expr>,
<expr><index>[<expr><name>TM_VP8_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"tm_vp8"</literal></expr>,
<expr><index>[<expr><name>DC_127_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc_127_vp8"</literal></expr>,
<expr><index>[<expr><name>DC_129_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc_129_vp8"</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"down_left_rv40"</literal></expr>,
<expr><index>[<expr><name>VERT_LEFT_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"vertical_left_rv40"</literal></expr>,
<expr><index>[<expr><name>HOR_UP_PRED</name></expr> ]</index> <operator>=</operator> <literal type="string">"horizontal_up_rv40"</literal></expr>,
<expr><index>[<expr><name>DIAG_DOWN_LEFT_PRED_RV40_NODOWN</name></expr>]</index> <operator>=</operator> <literal type="string">"down_left_nodown_rv40"</literal></expr>,
<expr><index>[<expr><name>HOR_UP_PRED_RV40_NODOWN</name></expr> ]</index> <operator>=</operator> <literal type="string">"horizontal_up_nodown_rv40"</literal></expr>,
<expr><index>[<expr><name>VERT_LEFT_PRED_RV40_NODOWN</name></expr> ]</index> <operator>=</operator> <literal type="string">"vertical_left_nodown_rv40"</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr>]</index> <operator>=</operator> <literal type="string">"down_left_svq3"</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>pred8x8_modes</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ 
<expr><index>[<expr><name>DC_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc"</literal></expr>,
<expr><index>[<expr><name>HOR_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"horizontal"</literal></expr>,
<expr><index>[<expr><name>VERT_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"vertical"</literal></expr>,
<expr><index>[<expr><name>PLANE_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"plane"</literal></expr>,
<expr><index>[<expr><name>LEFT_DC_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"left_dc"</literal></expr>,
<expr><index>[<expr><name>TOP_DC_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"top_dc"</literal></expr>,
<expr><index>[<expr><name>DC_128_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc_128"</literal></expr>,
<expr><index>[<expr><name>ALZHEIMER_DC_L0T_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"mad_cow_dc_l0t"</literal></expr>,
<expr><index>[<expr><name>ALZHEIMER_DC_0LT_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"mad_cow_dc_0lt"</literal></expr>,
<expr><index>[<expr><name>ALZHEIMER_DC_L00_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"mad_cow_dc_l00"</literal></expr>,
<expr><index>[<expr><name>ALZHEIMER_DC_0L0_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"mad_cow_dc_0l0"</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><index>[<expr><name>PLANE_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"tm_vp8"</literal></expr>,
<expr><index>[<expr><name>DC_127_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"dc_127_vp8"</literal></expr>,
<expr><index>[<expr><name>DC_129_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"dc_129_vp8"</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><index>[<expr><name>DC_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc_rv40"</literal></expr>,
<expr><index>[<expr><name>LEFT_DC_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"left_dc_rv40"</literal></expr>,
<expr><index>[<expr><name>TOP_DC_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"top_dc_rv40"</literal></expr>,
}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>pred16x16_modes</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ 
<expr><index>[<expr><name>DC_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc"</literal></expr>,
<expr><index>[<expr><name>HOR_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"horizontal"</literal></expr>,
<expr><index>[<expr><name>VERT_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"vertical"</literal></expr>,
<expr><index>[<expr><name>PLANE_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"plane"</literal></expr>,
<expr><index>[<expr><name>LEFT_DC_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"left_dc"</literal></expr>,
<expr><index>[<expr><name>TOP_DC_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"top_dc"</literal></expr>,
<expr><index>[<expr><name>DC_128_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"dc_128"</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><index>[<expr><name>PLANE_PRED8x8</name></expr> ]</index> <operator>=</operator> <literal type="string">"tm_vp8"</literal></expr>,
<expr><index>[<expr><name>DC_127_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"dc_127_vp8"</literal></expr>,
<expr><index>[<expr><name>DC_129_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"dc_129_vp8"</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><index>[<expr><name>PLANE_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"plane_rv40"</literal></expr>,
}</block></expr>,
<expr><block>{ 
<expr><index>[<expr><name>PLANE_PRED8x8</name></expr>]</index> <operator>=</operator> <literal type="string">"plane_svq3"</literal></expr>,
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pixel_mask</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0x01ff01ff</literal></expr>, <expr><literal type="number">0x03ff03ff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_PIXEL</name></cpp:macro> <cpp:value>((bit_depth + 7) / 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>(3 * 16 * 17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_pred_func</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>mode_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mode_name &amp;&amp; ((codec_ids[codec] == AV_CODEC_ID_H264) ? check_func(func, "pred%s_%s_%d", name, mode_name, bit_depth) : check_func(func, "pred%s_%s", name, mode_name)))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { uint32_t mask = pixel_mask[bit_depth - 8]; int i; for (i = 0; i &lt; BUF_SIZE; i += 4) { uint32_t r = rnd() &amp; mask; AV_WN32A(buf0 + i, r); AV_WN32A(buf1 + i, r); } } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>src0</name></cpp:macro> <cpp:value>(buf0 + 4 * 16)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>src1</name></cpp:macro> <cpp:value>(buf1 + 4 * 16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_pred4x4</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_format</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>topright</name> <init>= <expr><name>buf0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pred_mode</name></decl>;</decl_stmt>
<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX | AV_CPU_FLAG_MMXEXT</argument>, <argument>void</argument>, <argument>uint8_t *src</argument>, <argument>const uint8_t *topright</argument>, <argument>ptrdiff_t stride</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><expr><name>pred_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pred_mode</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>pred_mode</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_pred_func</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>pred4x4</name><index>[<expr><name>pred_mode</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"4x4"</literal></expr></argument>, <argument><expr><name><name>pred4x4_modes</name><index>[<expr><name>codec</name></expr>]</index><index>[<expr><name>pred_mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>topright</name></expr></argument>, <argument><expr><literal type="number">12</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>topright</name></expr></argument>, <argument><expr><literal type="number">12</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>topright</name></expr></argument>, <argument><expr><literal type="number">12</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_pred8x8</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pred_mode</name></decl>;</decl_stmt>
<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX | AV_CPU_FLAG_MMXEXT</argument>, <argument>void</argument>, <argument>uint8_t *src</argument>, <argument>ptrdiff_t stride</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><expr><name>pred_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pred_mode</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>pred_mode</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_pred_func</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>pred_mode</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>chroma_format</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"8x16"</literal></expr> </then><else>: <expr><literal type="string">"8x8"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>pred8x8_modes</name><index>[<expr><name>codec</name></expr>]</index><index>[<expr><name>pred_mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_pred16x16</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_format</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pred_mode</name></decl>;</decl_stmt>
<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX | AV_CPU_FLAG_MMXEXT</argument>, <argument>void</argument>, <argument>uint8_t *src</argument>, <argument>ptrdiff_t stride</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><expr><name>pred_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pred_mode</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>pred_mode</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_pred_func</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>pred_mode</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"16x16"</literal></expr></argument>, <argument><expr><name><name>pred16x16_modes</name><index>[<expr><name>codec</name></expr>]</index><index>[<expr><name>pred_mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_pred8x8l</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_format</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>codec_ids</name><index>[<expr><name>codec</name></expr>]</index></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pred_mode</name></decl>;</decl_stmt>
<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMXEXT</argument>, <argument>void</argument>, <argument>uint8_t *src</argument>, <argument>int topleft</argument>, <argument>int topright</argument>, <argument>ptrdiff_t stride</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><expr><name>pred_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pred_mode</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>pred_mode</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_pred_func</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8l</name><index>[<expr><name>pred_mode</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"8x8l"</literal></expr></argument>, <argument><expr><name><name>pred4x4_modes</name><index>[<expr><name>codec</name></expr>]</index><index>[<expr><name>pred_mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>neighbors</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>neighbors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>neighbors</name> <operator>&lt;=</operator> <literal type="number">0xc000</literal></expr>;</condition> <incr><expr><name>neighbors</name> <operator>+=</operator> <literal type="number">0x4000</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>has_topleft</name> <init>= <expr><name>neighbors</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_topright</name> <init>= <expr><name>neighbors</name> <operator>&amp;</operator> <literal type="number">0x4000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pred_mode</name> <operator>==</operator> <name>DIAG_DOWN_RIGHT_PRED</name> <operator>||</operator> <name>pred_mode</name> <operator>==</operator> <name>VERT_RIGHT_PRED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_topleft</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>has_topleft</name></expr></argument>, <argument><expr><name>has_topright</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>has_topleft</name></expr></argument>, <argument><expr><name>has_topright</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>has_topleft</name></expr></argument>, <argument><expr><name>has_topright</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><name>SIZEOF_PIXEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>checkasm_check_h264pred</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>H264PredContext</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>check_pred4x4</name></expr>, <expr><literal type="string">"pred4x4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>check_pred8x8</name></expr>, <expr><literal type="string">"pred8x8"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>check_pred16x16</name></expr>, <expr><literal type="string">"pred16x16"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>check_pred8x8l</name></expr>, <expr><literal type="string">"pred8x8l"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>buf0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>H264PredContext</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test</name></decl>, <decl><type ref="prev"/><name>codec</name></decl>, <decl><type ref="prev"/><name>chroma_format</name></decl>, <decl><type ref="prev"/><name>bit_depth</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>test</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>test</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>test</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>codec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>codec</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>codec</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>codec_id</name> <init>= <expr><name><name>codec_ids</name><index>[<expr><name>codec</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>bit_depth</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>bit_depth</name> <operator>&lt;=</operator> <operator>(</operator><ternary><condition><expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>bit_depth</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>chroma_format</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>chroma_format</name> <operator>&lt;=</operator> <operator>(</operator><ternary><condition><expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>chroma_format</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_h264_pred_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tests</name><index>[<expr><name>test</name></expr>]</index></name><operator>.</operator><call><name>func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>buf0</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>chroma_format</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>test</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
