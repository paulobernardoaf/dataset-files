<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\checkasm.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TESTS_CHECKASM_CHECKASM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTS_CHECKASM_CHECKASM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LINUX_PERF</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;asm/unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/perf_event.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timer.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>checkasm_check_aacpsdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_afir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_alacdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_audiodsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_blend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_blockdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_bswapdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_colorspace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_exrdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_fixed_dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_flacdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_float_dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_fmtconvert</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_g722dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_h264dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_h264pred</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_h264qpel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_hevc_add_res</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_hevc_idct</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_hevc_sao</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_huffyuvdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_jpeg2000dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_llviddsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_llviddspenc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_nlmeans</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_opusdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_pixblockdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_sbrdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_synth_filter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_sw_rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_utvideodsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_v210dec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_v210enc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_vf_eq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_vf_gblur</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_vf_hflip</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_vf_threshold</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_vp8dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_vp9dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_check_videodsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>CheckasmPerf</name>;</struct_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>checkasm_check_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> av_printf_format<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>int</name></type> <name>checkasm_bench_func</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_fail_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> av_printf_format<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><name><name>struct</name> <name>CheckasmPerf</name></name> <modifier>*</modifier></type><name>checkasm_get_perf_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> av_printf_format<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>


<function_decl><type><name>int</name></type> <name>float_near_ulp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_ulp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>float_near_abs_eps</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>float_near_abs_eps_ulp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_ulp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>float_near_ulp_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_ulp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>float_near_abs_eps_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>float_near_abs_eps_array_ulp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>max_ulp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>double_near_abs_eps</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>eps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>double_near_abs_eps_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>eps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVLFG</name></type> <name>checkasm_lfg</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnd</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>av_lfg_get(&amp;checkasm_lfg)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_unused</name> <name>void</name> <modifier>*</modifier></type><name>func_ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>func_new</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BENCH_RUNS</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_func</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(func_ref = checkasm_check_func((func_new = func), __VA_ARGS__))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_func</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>declare_new(ret, __VA_ARGS__) typedef ret func_type(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_func_float</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>declare_new_float(ret, __VA_ARGS__) typedef ret func_type(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_func_emms</name><parameter_list>(<parameter><type><name>cpu_flags</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>declare_new_emms(cpu_flags, ret, __VA_ARGS__) typedef ret func_type(__VA_ARGS__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fail</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>checkasm_fail_func("%s:%d", av_basename(__FILE__), __LINE__)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>report</name></cpp:macro> <cpp:value>checkasm_report</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_ref</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((func_type *)func_ref)(__VA_ARGS__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name> <operator>&amp;&amp;</operator> <name>HAVE_X86ASM</name></expr></cpp:if>


<function_decl><type><name>void</name></type> <name>checkasm_checked_call</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>checkasm_checked_call_emms</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>checkasm_checked_call_float</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>









<function_decl><type><name>void</name></type> <name>checkasm_stack_clobber</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>clobber</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret (*checked_call)(void *, int, int, int, int, int, __VA_ARGS__)= (void *)checkasm_checked_call;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new_float</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret (*checked_call)(void *, int, int, int, int, int, __VA_ARGS__)= (void *)checkasm_checked_call_float;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new_emms</name><parameter_list>(<parameter><type><name>cpu_flags</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret (*checked_call)(void *, int, int, int, int, int, __VA_ARGS__) = ((cpu_flags) &amp; av_get_cpu_flags()) ? (void *)checkasm_checked_call_emms : (void *)checkasm_checked_call;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOB</name></cpp:macro> <cpp:value>(UINT64_C(0xdeadbeefdeadbeef))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_new</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(checkasm_stack_clobber(CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB),checked_call(func_new, 0, 0, 0, 0, 0, __VA_ARGS__))</cpp:value></cpp:define>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret (*checked_call)(void *, __VA_ARGS__) = (void *)checkasm_checked_call;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new_float</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret (*checked_call)(void *, __VA_ARGS__) = (void *)checkasm_checked_call_float;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new_emms</name><parameter_list>(<parameter><type><name>cpu_flags</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret (*checked_call)(void *, __VA_ARGS__) = ((cpu_flags) &amp; av_get_cpu_flags()) ? (void *)checkasm_checked_call_emms : (void *)checkasm_checked_call;</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_new</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>checked_call(func_new, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_ARM</name> <operator>&amp;&amp;</operator> <name>HAVE_ARMV5TE_EXTERNAL</name></expr></cpp:elif>



<function_decl><type><name>void</name></type> <name>checkasm_checked_call_vfp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_checked_call_novfp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> (<modifier>*</modifier><name>checkasm_checked_call</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret (*checked_call)(void *, int dummy, __VA_ARGS__) = (void *)checkasm_checked_call;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_new</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>checked_call(func_new, 0, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_AARCH64</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function_decl><type><name>void</name></type> <name>checkasm_stack_clobber</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>clobber</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>checkasm_checked_call</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ret (*checked_call)(void *, int, int, int, int, int, int, int, __VA_ARGS__)= (void *)checkasm_checked_call;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOB</name></cpp:macro> <cpp:value>(UINT64_C(0xdeadbeefdeadbeef))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_new</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(checkasm_stack_clobber(CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB,CLOB),checked_call(func_new, 0, 0, 0, 0, 0, 0, 0, __VA_ARGS__))</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new_float</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new_emms</name><parameter_list>(<parameter><type><name>cpu_flags</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>call_new</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((func_type *)func_new)(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>declare_new_emms</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new_emms</name><parameter_list>(<parameter><type><name>cpu_flags</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>declare_new(ret, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>declare_new_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_new_float</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>declare_new(ret, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>CheckasmPerf</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sysfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>cycles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iterations</name></decl>;</decl_stmt>
}</block></struct></type> <name>CheckasmPerf</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_READ_TIME</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>CONFIG_LINUX_PERF</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LINUX_PERF</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERF_START</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ioctl(sysfd, PERF_EVENT_IOC_RESET, 0); ioctl(sysfd, PERF_EVENT_IOC_ENABLE, 0); } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERF_STOP</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ioctl(sysfd, PERF_EVENT_IOC_DISABLE, 0); read(sysfd, &amp;t, sizeof(t)); } while (0)</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERF_START</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t = AV_READ_TIME()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERF_STOP</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t = AV_READ_TIME() - t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bench_new</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {if (checkasm_bench_func()) {struct CheckasmPerf *perf = checkasm_get_perf_context();av_unused const int sysfd = perf-&gt;sysfd;func_type *tfunc = func_new;uint64_t tsum = 0;int ti, tcount = 0;uint64_t t = 0; for (ti = 0; ti &lt; BENCH_RUNS; ti++) {PERF_START(t);tfunc(__VA_ARGS__);tfunc(__VA_ARGS__);tfunc(__VA_ARGS__);tfunc(__VA_ARGS__);PERF_STOP(t);if (t*tcount &lt;= tsum*4 &amp;&amp; ti &gt; 0) {tsum += t;tcount++;}}emms_c();perf-&gt;cycles += t;perf-&gt;iterations++;}} while (0)</cpp:value></cpp:define>

























<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bench_new</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERF_START</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERF_STOP</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
