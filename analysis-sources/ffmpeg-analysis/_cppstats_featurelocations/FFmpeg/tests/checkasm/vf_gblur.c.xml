<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\vf_gblur.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/gblur.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXELS</name></cpp:macro> <cpp:value>(WIDTH * HEIGHT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>(PIXELS * 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int j; float *tmp_buf = (float *)buf; for (j = 0; j &lt; size; j++) tmp_buf[j] = (float)(rnd() &amp; 0xFF); } while (0)</cpp:value></cpp:define>







<function><type><name>void</name></type> <name>checkasm_check_vf_gblur</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst_ref</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst_new</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>WIDTH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>HEIGHT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>steps</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>nu</name> <init>= <expr><literal type="number">0.101f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bscale</name> <init>= <expr><literal type="number">1.112f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GBlurContext</name></type> <name>s</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *dst</argument>, <argument>int w</argument>, <argument>int h</argument>, <argument>int steps</argument>, <argument>float nu</argument>, <argument>float bscale</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>PIXELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_gblur_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>horiz_slice</name></name></expr></argument>, <argument><expr><literal type="string">"horiz_slice"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>steps</name></expr></argument>, <argument><expr><name>nu</name></expr></argument>, <argument><expr><name>bscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>steps</name></expr></argument>, <argument><expr><name>nu</name></expr></argument>, <argument><expr><name>bscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><literal type="number">0.01f</literal></expr></argument>, <argument><expr><name>PIXELS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nu</name></expr></argument>, <argument><expr><name>bscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"horiz_slice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
