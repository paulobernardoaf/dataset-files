<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\checkasm\checkasm.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LINUX_PERF</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/random_seed.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_IO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETCONSOLETEXTATTRIBUTE</name> <operator>&amp;&amp;</operator> <name>HAVE_GETSTDHANDLE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_RED</name></cpp:macro> <cpp:value>FOREGROUND_RED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_GREEN</name></cpp:macro> <cpp:value>FOREGROUND_GREEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_YELLOW</name></cpp:macro> <cpp:value>(FOREGROUND_RED|FOREGROUND_GREEN)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_RED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_GREEN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_YELLOW</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_ISATTY</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isatty</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name> <operator>&amp;&amp;</operator> <name>HAVE_ARMV5TE_EXTERNAL</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/arm/cpu.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>checkasm_checked_call</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>checkasm_checked_call_novfp</name></expr></init>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVCODEC</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AAC_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"aacpsdsp"</literal></expr>, <expr><name>checkasm_check_aacpsdsp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"sbrdsp"</literal></expr>, <expr><name>checkasm_check_sbrdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ALAC_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"alacdsp"</literal></expr>, <expr><name>checkasm_check_alacdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AUDIODSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"audiodsp"</literal></expr>, <expr><name>checkasm_check_audiodsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_BLOCKDSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"blockdsp"</literal></expr>, <expr><name>checkasm_check_blockdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_BSWAPDSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"bswapdsp"</literal></expr>, <expr><name>checkasm_check_bswapdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DCA_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"synth_filter"</literal></expr>, <expr><name>checkasm_check_synth_filter</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_EXR_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"exrdsp"</literal></expr>, <expr><name>checkasm_check_exrdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_FLACDSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"flacdsp"</literal></expr>, <expr><name>checkasm_check_flacdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_FMTCONVERT</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"fmtconvert"</literal></expr>, <expr><name>checkasm_check_fmtconvert</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_G722DSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"g722dsp"</literal></expr>, <expr><name>checkasm_check_g722dsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264DSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"h264dsp"</literal></expr>, <expr><name>checkasm_check_h264dsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264PRED</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"h264pred"</literal></expr>, <expr><name>checkasm_check_h264pred</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264QPEL</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"h264qpel"</literal></expr>, <expr><name>checkasm_check_h264qpel</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HEVC_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"hevc_add_res"</literal></expr>, <expr><name>checkasm_check_hevc_add_res</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hevc_idct"</literal></expr>, <expr><name>checkasm_check_hevc_idct</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hevc_sao"</literal></expr>, <expr><name>checkasm_check_hevc_sao</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HUFFYUV_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"huffyuvdsp"</literal></expr>, <expr><name>checkasm_check_huffyuvdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_JPEG2000_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"jpeg2000dsp"</literal></expr>, <expr><name>checkasm_check_jpeg2000dsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HUFFYUVDSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"llviddsp"</literal></expr>, <expr><name>checkasm_check_llviddsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LLVIDENCDSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"llviddspenc"</literal></expr>, <expr><name>checkasm_check_llviddspenc</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_OPUS_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"opusdsp"</literal></expr>, <expr><name>checkasm_check_opusdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PIXBLOCKDSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"pixblockdsp"</literal></expr>, <expr><name>checkasm_check_pixblockdsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_UTVIDEO_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"utvideodsp"</literal></expr>, <expr><name>checkasm_check_utvideodsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_V210_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"v210dec"</literal></expr>, <expr><name>checkasm_check_v210dec</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_V210_ENCODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"v210enc"</literal></expr>, <expr><name>checkasm_check_v210enc</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP8DSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vp8dsp"</literal></expr>, <expr><name>checkasm_check_vp8dsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_DECODER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vp9dsp"</literal></expr>, <expr><name>checkasm_check_vp9dsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VIDEODSP</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"videodsp"</literal></expr>, <expr><name>checkasm_check_videodsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVFILTER</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AFIR_FILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"af_afir"</literal></expr>, <expr><name>checkasm_check_afir</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_BLEND_FILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vf_blend"</literal></expr>, <expr><name>checkasm_check_blend</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_COLORSPACE_FILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vf_colorspace"</literal></expr>, <expr><name>checkasm_check_colorspace</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_EQ_FILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vf_eq"</literal></expr>, <expr><name>checkasm_check_vf_eq</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_GBLUR_FILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vf_gblur"</literal></expr>, <expr><name>checkasm_check_vf_gblur</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HFLIP_FILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vf_hflip"</literal></expr>, <expr><name>checkasm_check_vf_hflip</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_NLMEANS_FILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vf_nlmeans"</literal></expr>, <expr><name>checkasm_check_nlmeans</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_THRESHOLD_FILTER</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"vf_threshold"</literal></expr>, <expr><name>checkasm_check_vf_threshold</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SWSCALE</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"sw_rgb"</literal></expr>, <expr><name>checkasm_check_sw_rgb</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AVUTIL</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"fixed_dsp"</literal></expr>, <expr><name>checkasm_check_fixed_dsp</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"float_dsp"</literal></expr>, <expr><name>checkasm_check_float_dsp</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>


<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
}</block> <decl><name><name>cpus</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_AARCH64</name></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"ARMV8"</literal></expr>, <expr><literal type="string">"armv8"</literal></expr>, <expr><name>AV_CPU_FLAG_ARMV8</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NEON"</literal></expr>, <expr><literal type="string">"neon"</literal></expr>, <expr><name>AV_CPU_FLAG_NEON</name></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"ARMV5TE"</literal></expr>, <expr><literal type="string">"armv5te"</literal></expr>, <expr><name>AV_CPU_FLAG_ARMV5TE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ARMV6"</literal></expr>, <expr><literal type="string">"armv6"</literal></expr>, <expr><name>AV_CPU_FLAG_ARMV6</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ARMV6T2"</literal></expr>, <expr><literal type="string">"armv6t2"</literal></expr>, <expr><name>AV_CPU_FLAG_ARMV6T2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"VFP"</literal></expr>, <expr><literal type="string">"vfp"</literal></expr>, <expr><name>AV_CPU_FLAG_VFP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"VFP_VM"</literal></expr>, <expr><literal type="string">"vfp_vm"</literal></expr>, <expr><name>AV_CPU_FLAG_VFP_VM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"VFPV3"</literal></expr>, <expr><literal type="string">"vfp3"</literal></expr>, <expr><name>AV_CPU_FLAG_VFPV3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NEON"</literal></expr>, <expr><literal type="string">"neon"</literal></expr>, <expr><name>AV_CPU_FLAG_NEON</name></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_PPC</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"ALTIVEC"</literal></expr>, <expr><literal type="string">"altivec"</literal></expr>, <expr><name>AV_CPU_FLAG_ALTIVEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"VSX"</literal></expr>, <expr><literal type="string">"vsx"</literal></expr>, <expr><name>AV_CPU_FLAG_VSX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"POWER8"</literal></expr>, <expr><literal type="string">"power8"</literal></expr>, <expr><name>AV_CPU_FLAG_POWER8</name></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:elif>
<expr><block>{ <expr><literal type="string">"MMX"</literal></expr>, <expr><literal type="string">"mmx"</literal></expr>, <expr><name>AV_CPU_FLAG_MMX</name><operator>|</operator><name>AV_CPU_FLAG_CMOV</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"MMXEXT"</literal></expr>, <expr><literal type="string">"mmxext"</literal></expr>, <expr><name>AV_CPU_FLAG_MMXEXT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3DNOW"</literal></expr>, <expr><literal type="string">"3dnow"</literal></expr>, <expr><name>AV_CPU_FLAG_3DNOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"3DNOWEXT"</literal></expr>, <expr><literal type="string">"3dnowext"</literal></expr>, <expr><name>AV_CPU_FLAG_3DNOWEXT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SSE"</literal></expr>, <expr><literal type="string">"sse"</literal></expr>, <expr><name>AV_CPU_FLAG_SSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SSE2"</literal></expr>, <expr><literal type="string">"sse2"</literal></expr>, <expr><name>AV_CPU_FLAG_SSE2</name><operator>|</operator><name>AV_CPU_FLAG_SSE2SLOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SSE3"</literal></expr>, <expr><literal type="string">"sse3"</literal></expr>, <expr><name>AV_CPU_FLAG_SSE3</name><operator>|</operator><name>AV_CPU_FLAG_SSE3SLOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SSSE3"</literal></expr>, <expr><literal type="string">"ssse3"</literal></expr>, <expr><name>AV_CPU_FLAG_SSSE3</name><operator>|</operator><name>AV_CPU_FLAG_ATOM</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SSE4.1"</literal></expr>, <expr><literal type="string">"sse4"</literal></expr>, <expr><name>AV_CPU_FLAG_SSE4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"SSE4.2"</literal></expr>, <expr><literal type="string">"sse42"</literal></expr>, <expr><name>AV_CPU_FLAG_SSE42</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AES-NI"</literal></expr>, <expr><literal type="string">"aesni"</literal></expr>, <expr><name>AV_CPU_FLAG_AESNI</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AVX"</literal></expr>, <expr><literal type="string">"avx"</literal></expr>, <expr><name>AV_CPU_FLAG_AVX</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"XOP"</literal></expr>, <expr><literal type="string">"xop"</literal></expr>, <expr><name>AV_CPU_FLAG_XOP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"FMA3"</literal></expr>, <expr><literal type="string">"fma3"</literal></expr>, <expr><name>AV_CPU_FLAG_FMA3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"FMA4"</literal></expr>, <expr><literal type="string">"fma4"</literal></expr>, <expr><name>AV_CPU_FLAG_FMA4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AVX2"</literal></expr>, <expr><literal type="string">"avx2"</literal></expr>, <expr><name>AV_CPU_FLAG_AVX2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"AVX-512"</literal></expr>, <expr><literal type="string">"avx512"</literal></expr>, <expr><name>AV_CPU_FLAG_AVX512</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<typedef>typedef <type><struct>struct <name>CheckasmFuncVersion</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>CheckasmFuncVersion</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CheckasmPerf</name></type> <name>perf</name></decl>;</decl_stmt>
}</block></struct></type> <name>CheckasmFuncVersion</name>;</typedef>


<typedef>typedef <type><struct>struct <name>CheckasmFunc</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>CheckasmFunc</name></name> <modifier>*</modifier></type><name><name>child</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CheckasmFuncVersion</name></type> <name>versions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>color</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CheckasmFunc</name>;</typedef>


<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>CheckasmFunc</name> <modifier>*</modifier></type><name>funcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CheckasmFunc</name> <modifier>*</modifier></type><name>current_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CheckasmFuncVersion</name> <modifier>*</modifier></type><name>current_func_ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_test_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bench_pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bench_pattern_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_checked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_failed</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>nop_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sysfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpu_flag_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_name</name></decl>;</decl_stmt>
}</block> <decl><name>state</name></decl>;</struct>


<decl_stmt><decl><type><name>AVLFG</name></type> <name>checkasm_lfg</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type> <name>is_negative</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>float_near_ulp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_ulp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_negative</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>is_negative</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>a</name> <operator>==</operator> <name>b</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>llabs</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>x</name><operator>.</operator><name>i</name></name> <operator>-</operator> <name><name>y</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>max_ulp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>float_near_ulp_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_ulp</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_ulp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>max_ulp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>float_near_abs_eps</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>abs_diff</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>abs_diff</name> <operator>&lt;</operator> <name>eps</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"test failed comparing %g with %g (abs diff=%g with EPS=%g)\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>abs_diff</name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>float_near_abs_eps_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>float_near_abs_eps_ulp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_ulp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>float_near_ulp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>max_ulp</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>float_near_abs_eps_array_ulp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>max_ulp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_ulp</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>eps</name></expr></argument>, <argument><expr><name>max_ulp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>double_near_abs_eps</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>eps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>abs_diff</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>abs_diff</name> <operator>&lt;</operator> <name>eps</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>double_near_abs_eps_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>eps</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>double_near_abs_eps</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>color_printf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_color</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETCONSOLETEXTATTRIBUTE</name> <operator>&amp;&amp;</operator> <name>HAVE_GETSTDHANDLE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>con</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>org_attributes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use_color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>con_info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>con</name> <operator>&amp;&amp;</operator> <name>con</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name> <operator>&amp;&amp;</operator> <call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>con_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>org_attributes</name> <operator>=</operator> <name><name>con_info</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>use_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>org_attributes</name> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>use_color</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>use_color</name> <operator>=</operator> <name>term</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><literal type="string">"dumb"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\x1b[%d;3%dm"</literal></expr></argument>, <argument><expr><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>color</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_color</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SETCONSOLETEXTATTRIBUTE</name> <operator>&amp;&amp;</operator> <name>HAVE_GETSTDHANDLE</name></expr></cpp:if>
<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>org_attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\x1b[0m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_func_tree</name><parameter_list>(<parameter><decl><type><name>CheckasmFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CheckasmFuncVersion</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>versions</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CheckasmFuncVersion</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>destroy_func_tree</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_func_tree</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>checkasm_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"checkasm: malloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_func_tree</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cpu_suffix</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cpu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>cpus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>cpu</name> <operator>&amp;</operator> <name><name>cpus</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>cpus</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>suffix</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><literal type="string">"c"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_nop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>a</name> <operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>b</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>measure_nop_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>nops</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nop_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>av_unused</name> <specifier>const</specifier> <name>int</name></type> <name>sysfd</name> <init>= <expr><name><name>state</name><operator>.</operator><name>sysfd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>PERF_START</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PERF_STOP</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nops</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>nops</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_nop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2500</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7500</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>nop_sum</name> <operator>+=</operator> <name><name>nops</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>nop_sum</name> <operator>/</operator> <literal type="number">500</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print_benchs</name><parameter_list>(<parameter><decl><type><name>CheckasmFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_benchs</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>versions</name><operator>.</operator><name>cpu</name></name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>versions</name><operator>.</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CheckasmFuncVersion</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>versions</name></name></expr></init></decl>;</decl_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>CheckasmPerf</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>perf</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>iterations</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>decicycles</name> <init>= <expr><operator>(</operator><literal type="number">10</literal><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>cycles</name></name><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>iterations</name></name> <operator>-</operator> <name><name>state</name><operator>.</operator><name>nop_time</name></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s_%s: %d.%d\n"</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>cpu_suffix</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decicycles</name><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><name>decicycles</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>print_benchs</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_func_names</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ascii_diff</name></decl>, <decl><type ref="prev"/><name>digit_diff</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><operator>(</operator><name>ascii_diff</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>a</name> <operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>a</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>start</name> <operator>&amp;&amp;</operator> <call><name>av_isdigit</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>digit_diff</name> <operator>=</operator> <call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>digit_diff</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ascii_diff</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CheckasmFunc</name> <modifier>*</modifier></type><name>rotate_tree</name><parameter_list>(<parameter><decl><type><name>CheckasmFunc</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CheckasmFunc</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name><operator>^</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>dir</name></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_red</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f) &amp;&amp; !(f)-&gt;color)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>balance_tree</name><parameter_list>(<parameter><decl><type><name>CheckasmFunc</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CheckasmFunc</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>*</operator><name>root</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_red</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_red</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>color</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>color</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_red</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_red</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <call><name>rotate_tree</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><call><name>is_red</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_red</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <call><name>rotate_tree</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CheckasmFunc</name> <modifier>*</modifier></type><name>get_func</name><parameter_list>(<parameter><decl><type><name>CheckasmFunc</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CheckasmFunc</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>*</operator><name>root</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>cmp_func_names</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>get_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>versions</name><operator>.</operator><name>func</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>balance_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>name_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>*</operator><name>root</name> <operator>=</operator> <call><name>checkasm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckasmFunc</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>name_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>check_cpu_flag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_cpu_flag</name> <init>= <expr><name><name>state</name><operator>.</operator><name>cpu_flag</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>old_cpu_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_force_cpu_flags</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>cpu_flag</name></name> <operator>=</operator> <name>flag</name> <operator>&amp;</operator> <call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_force_cpu_flags</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>cpu_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>cpu_flag</name></name> <operator>!=</operator> <name>old_cpu_flag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>cpu_flag_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>func</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>test_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>test_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>current_test_name</name></name> <operator>=</operator> <name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>print_cpu_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>cpu_flag_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>color_printf</name><argument_list>(<argument><expr><name>COLOR_YELLOW</name></expr></argument>, <argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>cpu_flag_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>cpu_flag_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LINUX_PERF</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bench_init_linux</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>perf_event_attr</name></name></type> <name>attr</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>PERF_TYPE_HARDWARE</name></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>perf_event_attr</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>config</name> <operator>=</operator> <name>PERF_COUNT_HW_CPU_CYCLES</name></expr>,
<expr><operator>.</operator><name>disabled</name> <operator>=</operator> <literal type="number">1</literal></expr>, 
<expr><operator>.</operator><name>exclude_kernel</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>exclude_hv</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"benchmarking with Linux Perf Monitoring API\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>sysfd</name></name> <operator>=</operator> <call><name>syscall</name><argument_list>(<argument><expr><name>__NR_perf_event_open</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>sysfd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"syscall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_LINUX_PERF</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bench_init_ffmpeg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AV_READ_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"benchmarking with native FFmpeg timers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"checkasm: --bench is not supported on your system\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bench_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LINUX_PERF</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>bench_init_linux</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>bench_init_ffmpeg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>nop_time</name></name> <operator>=</operator> <call><name>measure_nop_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"nop: %d.%d\n"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>nop_time</name></name><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>nop_time</name></name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bench_uninit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LINUX_PERF</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>sysfd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>sysfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name> <init>= <expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name> <operator>&amp;&amp;</operator> <name>HAVE_ARMV5TE_EXTERNAL</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>have_vfp</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>have_neon</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>checkasm_checked_call</name> <operator>=</operator> <name>checkasm_checked_call_vfp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>func</name> <operator>||</operator> <operator>!</operator><name><name>cpus</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"checkasm: no tests to perform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--bench"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bench_init</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>bench_pattern</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>bench_pattern_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>bench_pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>bench_pattern</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--test="</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>test_name</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"checkasm: using random seed %u\n"</literal></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>checkasm_lfg</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cpu_flag</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cpus</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>check_cpu_flag</name><argument_list>(<argument><expr><name><name>cpus</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>cpus</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>num_failed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"checkasm: %d of %d tests have failed\n"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>num_failed</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>num_checked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"checkasm: all %d tests passed\n"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>num_checked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>bench_pattern</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_benchs</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>destroy_func_tree</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bench_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name> <modifier>*</modifier></type><name>checkasm_check_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name_buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>func</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CheckasmFuncVersion</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_length</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name> <operator>||</operator> <name>name_length</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>name_length</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>current_func</name></name> <operator>=</operator> <call><name>get_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>funcs</name></name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>funcs</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><operator>.</operator><name>current_func</name><operator>-&gt;</operator><name>versions</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CheckasmFuncVersion</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>func</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>func</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>checkasm_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckasmFuncVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>cpu</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>cpu_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>current_func_ver</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>cpu_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>num_checked</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ref</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>checkasm_bench_func</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name><name>state</name><operator>.</operator><name>num_failed</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>.</operator><name>bench_pattern</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>current_func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>bench_pattern</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>bench_pattern_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>checkasm_fail_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>current_func_ver</name><operator>-&gt;</operator><name>cpu</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>.</operator><name>current_func_ver</name><operator>-&gt;</operator><name>ok</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_cpu_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s_%s ("</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>current_func</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>cpu_suffix</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>current_func_ver</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>current_func_ver</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>.</operator><name>num_failed</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>CheckasmPerf</name> <modifier>*</modifier></type><name>checkasm_get_perf_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CheckasmPerf</name> <modifier>*</modifier></type><name>perf</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>current_func_ver</name><operator>-&gt;</operator><name>perf</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>perf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>perf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>perf</name><operator>-&gt;</operator><name>sysfd</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>sysfd</name></name></expr>;</expr_stmt>
<return>return <expr><name>perf</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>checkasm_report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_checked</name></decl>, <decl><type ref="prev"/><name>prev_failed</name></decl>, <decl><type ref="prev"/><name>max_length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>num_checked</name></name> <operator>&gt;</operator> <name>prev_checked</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pad_length</name> <init>= <expr><name>max_length</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_cpu_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad_length</name> <operator>-=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" - %s."</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>current_test_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad_length</name> <operator>-=</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%*c"</literal></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>pad_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>num_failed</name></name> <operator>==</operator> <name>prev_failed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>color_printf</name><argument_list>(<argument><expr><name>COLOR_GREEN</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>color_printf</name><argument_list>(<argument><expr><name>COLOR_RED</name></expr></argument>, <argument><expr><literal type="string">"FAILED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_checked</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>num_checked</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_failed</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>num_failed</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>cpu_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>current_test_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>max_length</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_length</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
