<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\tiny_psnr.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (b) : (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>exp16_table</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">65537</literal></expr>,
<expr><literal type="number">65538</literal></expr>,
<expr><literal type="number">65540</literal></expr>,
<expr><literal type="number">65544</literal></expr>,
<expr><literal type="number">65552</literal></expr>,
<expr><literal type="number">65568</literal></expr>,
<expr><literal type="number">65600</literal></expr>,
<expr><literal type="number">65664</literal></expr>,
<expr><literal type="number">65793</literal></expr>,
<expr><literal type="number">66050</literal></expr>,
<expr><literal type="number">66568</literal></expr>,
<expr><literal type="number">67616</literal></expr>,
<expr><literal type="number">69763</literal></expr>,
<expr><literal type="number">74262</literal></expr>,
<expr><literal type="number">84150</literal></expr>,
<expr><literal type="number">108051</literal></expr>,
<expr><literal type="number">178145</literal></expr>,
<expr><literal type="number">484249</literal></expr>,
<expr><literal type="number">3578144</literal></expr>,
<expr><literal type="number">195360063</literal></expr>,
<expr><literal type="number">582360139072LL</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static unsigned int exp16(unsigned int a){
int i;
int out= 1&lt;&lt;16;

for(i=19;i&gt;=0;i--){
if(a&amp;(1&lt;&lt;i))
out= (out*exp16_table[i] + (1&lt;&lt;15))&gt;&gt;16;
}

return out;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>log16</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><call><name>log16</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>/</operator> <name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">20</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><name><name>exp16_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>%</operator> <name>b</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>b</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>int_sqrt</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ret_sq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><name>s</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>s</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>b</name> <init>= <expr><name>ret_sq</name> <operator>+</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>s</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;=</operator> <name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret_sq</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>get_s16l</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>s</name></decl>;</decl_stmt>
}</block> <decl><name>v</name></decl>;</union>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name><name>v</name><operator>.</operator><name>s</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>get_f32l</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>v</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name><name>v</name><operator>.</operator><name>f</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_f64l</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_int2double</name><argument_list>(<argument><expr><call><name>AV_RL64</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_psnr</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sse_d</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>max</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>len</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>size1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxdist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>maxdist_d</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noseek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>noseek</name> <operator>=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>noseek</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"WAVE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>skip_bytes</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>skip_bytes</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s0</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>len</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>get_s16l</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>get_s16l</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>sse</name> <operator>+=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <name>maxdist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxdist</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">8</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>get_f64l</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>get_f64l</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>get_f32l</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>get_f32l</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sse_d</name> <operator>+=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <name>maxdist_d</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxdist_d</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name>size0</name> <operator>+=</operator> <name>s0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size1</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s0</name> <operator>+</operator> <name>s1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>size0</name></expr></argument>, <argument><expr><name>size1</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>psnr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>dev</name> <init>= <expr><call><name>int_sqrt</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>sse</name> <operator>/</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>F</name> <operator>*</operator> <name>F</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>sse</name> <operator>%</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>F</name> <operator>*</operator> <name>F</name><operator>)</operator> <operator>+</operator> <name>i</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sse</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>psnr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <call><name>log16</name><argument_list>(<argument><expr><name>max</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>log16</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>log16</name><argument_list>(<argument><expr><name>sse</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator>
<literal type="number">284619LL</literal> <operator>*</operator> <name>F</name> <operator>+</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>psnr</name> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <name>F</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"stddev:%5d.%02d PSNR:%3d.%02d MAXDIFF:%5"</literal><name>PRIu64</name><literal type="string">" bytes:%9"</literal><name>PRIu64</name><literal type="string">"/%9"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dev</name> <operator>/</operator> <name>F</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dev</name> <operator>%</operator> <name>F</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>psnr</name> <operator>/</operator> <name>F</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>psnr</name> <operator>%</operator> <name>F</name><operator>)</operator></expr></argument>,
<argument><expr><name>maxdist</name></expr></argument>, <argument><expr><name>size0</name></expr></argument>, <argument><expr><name>size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psnr</name></expr>;</return>
</block_content>}</block>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">8</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>psnr_str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>psnr</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dev</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>sse_d</name> <operator>/</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sse_d</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>psnr</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>DBL_MAX</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>log</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <name>sse_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psnr_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psnr_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%5.02f"</literal></expr></argument>, <argument><expr><name>psnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psnr_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psnr_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"inf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>maxdist</name> <operator>=</operator> <name>maxdist_d</name> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"stddev:%10.2f PSNR:%s MAXDIFF:%10"</literal><name>PRIu64</name><literal type="string">" bytes:%9"</literal><name>PRIu64</name><literal type="string">"/%9"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>dev</name> <operator>*</operator> <name>scale</name></expr></argument>, <argument><expr><name>psnr_str</name></expr></argument>, <argument><expr><name>maxdist</name></expr></argument>, <argument><expr><name>size0</name></expr></argument>, <argument><expr><name>size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>psnr</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift_first</name><init>= <expr><ternary><condition><expr><name>argc</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_bytes</name> <init>= <expr><ternary><condition><expr><name>argc</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift_last</name> <init>= <expr><name>shift_first</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>argc</name> <operator>&lt;</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_psnr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_psnr_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shift_last</name> <operator>&gt;</operator> <name>shift_first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift_first</name> <operator>-=</operator> <name>shift_last</name> <operator>-</operator> <name>shift_first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"u8"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"s16"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"f32"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"f64"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>||</operator> <name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unsupported sample format: %s\nSupported: u8, s16, f32, f64\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tiny_psnr &lt;file1&gt; &lt;file2&gt; [&lt;elem size&gt;|u8|s16|f32|f64 [&lt;shift&gt; [&lt;skip bytes&gt; [&lt;shift search range&gt;]]]]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WAV headers are skipped automatically.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not open input files.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>shift</name> <operator>=</operator> <name>shift_first</name></expr>;</init> <condition><expr><name>shift</name> <operator>&lt;=</operator> <name>shift_last</name></expr>;</condition> <incr><expr><name>shift</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>psnr</name> <init>= <expr><call><name>run_psnr</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>skip_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>psnr</name> <operator>&gt;</operator> <name>max_psnr</name> <operator>||</operator> <operator>(</operator><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>psnr</name> <operator>==</operator> <name>max_psnr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_psnr</name> <operator>=</operator> <name>psnr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_psnr_shift</name> <operator>=</operator> <name>shift</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>max_psnr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift_last</name> <operator>&gt;</operator> <name>shift_first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Best PSNR is %3d.%02d for shift %i\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>max_psnr</name> <operator>/</operator> <name>F</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>max_psnr</name> <operator>%</operator> <name>F</name><operator>)</operator></expr></argument>, <argument><expr><name>max_psnr_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
