<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\rotozoom.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_PI</name></cpp:macro> <cpp:value>205887</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>int_pow</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><name>FIXP</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>/=</operator> <name>FIXP</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>int_sin</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>MY_PI</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>a</name> <operator>%=</operator> <literal type="number">2</literal> <operator>*</operator> <name>MY_PI</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>MY_PI</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>MY_PI</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>MY_PI</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>MY_PI</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>a</name> <operator>-</operator> <call><name>int_pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6</literal> <operator>+</operator> <call><name>int_pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">120</literal> <operator>-</operator> <call><name>int_pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">5040</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tab_r</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tab_g</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tab_b</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>h_cos</name><index>[<expr><literal type="number">360</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>h_sin</name><index>[<expr><literal type="number">360</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ipol</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>int_x</name> <init>= <expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>int_y</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frac_x</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frac_y</name> <init>= <expr><name>y</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s00</name> <init>= <expr><name><name>src</name><index>[<expr><operator>(</operator> <name>int_x</name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <operator>(</operator> <name>int_y</name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s01</name> <init>= <expr><name><name>src</name><index>[<expr><operator>(</operator><operator>(</operator><name>int_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <operator>(</operator> <name>int_y</name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s10</name> <init>= <expr><name><name>src</name><index>[<expr><operator>(</operator> <name>int_x</name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s11</name> <init>= <expr><name><name>src</name><index>[<expr><operator>(</operator><operator>(</operator><name>int_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s0</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_x</name><operator>)</operator> <operator>*</operator> <name>s00</name> <operator>+</operator> <name>frac_x</name> <operator>*</operator> <name>s01</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_x</name><operator>)</operator> <operator>*</operator> <name>s10</name> <operator>+</operator> <name>frac_x</name> <operator>*</operator> <name>s11</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>frac_y</name><operator>)</operator> <operator>*</operator> <name>s0</name> <operator>+</operator> <name>frac_y</name> <operator>*</operator> <name>s1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_image</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><name><name>h_cos</name><index>[<expr><name>num</name> <operator>%</operator> <literal type="number">360</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name> <init>= <expr><name><name>h_sin</name><index>[<expr><name>num</name> <operator>%</operator> <literal type="number">360</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xi</name> <init>= <expr><operator>-</operator><operator>(</operator><name>w</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yi</name> <init>= <expr><operator>(</operator><name>w</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xj</name> <init>= <expr><operator>-</operator><operator>(</operator><name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yj</name> <init>= <expr><operator>-</operator><operator>(</operator><name>h</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xprime</name> <init>= <expr><name>xj</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yprime</name> <init>= <expr><name>yj</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xprime</name> <operator>+</operator> <name>xi</name> <operator>+</operator> <name>FIXP</name> <operator>*</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xprime</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>yprime</name> <operator>+</operator> <name>yi</name> <operator>+</operator> <name>FIXP</name> <operator>*</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yprime</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_pixel</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><call><name>ipol</name><argument_list>(<argument><expr><name>tab_r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ipol</name><argument_list>(<argument><expr><name>tab_g</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ipol</name><argument_list>(<argument><expr><name>tab_b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_demo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>radian</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>W</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input_file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>input_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_file</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>input_file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>W</name></expr></argument>, <argument><expr><name>input_file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal> <operator>*</operator> <name>W</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>W</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tab_r</name><index>[<expr><name>W</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>line</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>j</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab_g</name><index>[<expr><name>W</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>line</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab_b</name><index>[<expr><name>W</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>line</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>input_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>radian</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name>MY_PI</name> <operator>/</operator> <literal type="number">360</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>FIXP</name> <operator>+</operator> <call><name>int_sin</name><argument_list>(<argument><expr><name>radian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h_cos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>h</name> <operator>*</operator> <call><name>int_sin</name><argument_list>(<argument><expr><name>radian</name> <operator>+</operator> <name>MY_PI</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <name>FIXP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h_sin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>h</name> <operator>*</operator> <call><name>int_sin</name><argument_list>(<argument><expr><name>radian</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <name>FIXP</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s image.pnm file|dir\n"</literal>
<literal type="string">"generate a test video stream\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>freopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>isdir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>DEFAULT_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>DEFAULT_HEIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb_tab</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_demo</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DEFAULT_NB_PICT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>gen_image</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isdir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%02d.pgm"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pgmyuv_save</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>rgb_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pgmyuv_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>rgb_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rgb_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
