<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\tiny_ssim.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFSWAP</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{type SWAP_tmp= b; b= a; a= SWAP_tmp;}while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (b) : (a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_MAX</name></cpp:macro> <cpp:value>((1 &lt;&lt; BIT_DEPTH)-1)</cpp:value></cpp:define>
<typedef>typedef <type><name>uint8_t</name></type> <name>pixel</name>;</typedef>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ssim_4x4x2_core</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>stride1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>stride2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>sums</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s12</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>pix1</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>stride1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>pix2</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>stride2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> <operator>+=</operator> <name>a</name><operator>*</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> <operator>+=</operator> <name>b</name><operator>*</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s12</name> <operator>+=</operator> <name>a</name><operator>*</operator><name>b</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>
<expr_stmt><expr><name><name>sums</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sums</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>s12</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>ssim_end1</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s12</name></decl></parameter> )</parameter_list>
<block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&gt;</operator> <literal type="number">9</literal></expr></cpp:if>
<typedef>typedef <type><name>float</name></type> <name>type</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>ssim_c1</name> <init>= <expr><literal type="number">.01</literal><operator>*</operator><literal type="number">.01</literal><operator>*</operator><name>PIXEL_MAX</name><operator>*</operator><name>PIXEL_MAX</name><operator>*</operator><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name>ssim_c2</name> <init>= <expr><literal type="number">.03</literal><operator>*</operator><literal type="number">.03</literal><operator>*</operator><name>PIXEL_MAX</name><operator>*</operator><name>PIXEL_MAX</name><operator>*</operator><literal type="number">64</literal><operator>*</operator><literal type="number">63</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>type</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>ssim_c1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">.01</literal><operator>*</operator><literal type="number">.01</literal><operator>*</operator><name>PIXEL_MAX</name><operator>*</operator><name>PIXEL_MAX</name><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>ssim_c2</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">.03</literal><operator>*</operator><literal type="number">.03</literal><operator>*</operator><name>PIXEL_MAX</name><operator>*</operator><name>PIXEL_MAX</name><operator>*</operator><literal type="number">64</literal><operator>*</operator><literal type="number">63</literal> <operator>+</operator> <literal type="number">.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>type</name></type> <name>fs1</name> <init>= <expr><name>s1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type</name></type> <name>fs2</name> <init>= <expr><name>s2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type</name></type> <name>fss</name> <init>= <expr><name>ss</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type</name></type> <name>fs12</name> <init>= <expr><name>s12</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type</name></type> <name>vars</name> <init>= <expr><name>fss</name><operator>*</operator><literal type="number">64</literal> <operator>-</operator> <name>fs1</name><operator>*</operator><name>fs1</name> <operator>-</operator> <name>fs2</name><operator>*</operator><name>fs2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>type</name></type> <name>covar</name> <init>= <expr><name>fs12</name><operator>*</operator><literal type="number">64</literal> <operator>-</operator> <name>fs1</name><operator>*</operator><name>fs2</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>fs1</name><operator>*</operator><name>fs2</name> <operator>+</operator> <name>ssim_c1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>covar</name> <operator>+</operator> <name>ssim_c2</name><operator>)</operator>
<operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>fs1</name><operator>*</operator><name>fs1</name> <operator>+</operator> <name>fs2</name><operator>*</operator><name>fs2</name> <operator>+</operator> <name>ssim_c1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>vars</name> <operator>+</operator> <name>ssim_c2</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>ssim_end4</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name><name>sum0</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>sum1</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>ssim</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ssim</name> <operator>+=</operator> <call><name>ssim_end1</name><argument_list>( <argument><expr><name><name>sum0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sum0</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sum1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sum1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sum0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sum0</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sum1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sum1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sum0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>sum0</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>sum1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>sum1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sum0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>sum0</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>sum1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>sum1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>ssim</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>ssim_plane</name><parameter_list>(
<parameter><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>stride1</name></decl></parameter>,
<parameter><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type> <name>stride2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cnt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ssim</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>sum0</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>sum1</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <name>sum0</name> <operator>+</operator> <operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<for>for<control>( <init>;</init> <condition><expr><name>z</name> <operator>&lt;=</operator> <name>y</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>( <argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ssim_4x4x2_core</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pix1</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>x</name><operator>+</operator><name>z</name><operator>*</operator><name>stride1</name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>stride1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pix2</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>x</name><operator>+</operator><name>z</name><operator>*</operator><name>stride2</name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>stride2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sum0</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr> )</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>ssim</name> <operator>+=</operator> <call><name>ssim_end4</name><argument_list>( <argument><expr><name>sum0</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><name>sum1</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><name>width</name><operator>-</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<return>return <expr><name>ssim</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>width</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>ssd_plane</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ssd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>pix1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ssd</name> <operator>+=</operator> <name>d</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>ssd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>ssd_to_psnr</name><parameter_list>( <parameter><decl><type><name>uint64_t</name></type> <name>ssd</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>denom</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">10</literal><operator>*</operator><call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>ssd</name><operator>/</operator><operator>(</operator><name>denom</name><operator>*</operator><literal type="number">255</literal><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>/</operator><call><name>log</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>ssim_db</name><parameter_list>( <parameter><decl><type><name>double</name></type> <name>ssim</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>weight</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">10</literal><operator>*</operator><operator>(</operator><call><name>log</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>log</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>-</operator><call><name>log</name><argument_list>(<argument><expr><name>weight</name><operator>-</operator><name>ssim</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>log</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_results</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name><name>ssd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>ssim</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frames</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"PSNR Y:%.3f U:%.3f V:%.3f All:%.3f | "</literal></expr></argument>,
<argument><expr><call><name>ssd_to_psnr</name><argument_list>( <argument><expr><name><name>ssd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>frames</name><operator>*</operator><name>w</name><operator>*</operator><name>h</name></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>ssd_to_psnr</name><argument_list>( <argument><expr><name><name>ssd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>frames</name><operator>*</operator><name>w</name><operator>*</operator><name>h</name><operator>/</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>ssd_to_psnr</name><argument_list>( <argument><expr><name><name>ssd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>frames</name><operator>*</operator><name>w</name><operator>*</operator><name>h</name><operator>/</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument>,
<argument><expr><call><name>ssd_to_psnr</name><argument_list>( <argument><expr><name><name>ssd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ssd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ssd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>frames</name><operator>*</operator><name>w</name><operator>*</operator><name>h</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"SSIM Y:%.5f U:%.5f V:%.5f All:%.5f (%.5f)"</literal></expr></argument>,
<argument><expr><name><name>ssim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>frames</name></expr></argument>,
<argument><expr><name><name>ssim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name>frames</name></expr></argument>,
<argument><expr><name><name>ssim</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <name>frames</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>ssim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name><name>ssim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ssim</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>frames</name><operator>*</operator><literal type="number">6</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>ssim_db</name><argument_list>(<argument><expr><name><name>ssim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>ssim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ssim</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frames</name><operator>*</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>ssd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ssim</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frames</name></decl>, <decl><type ref="prev"/><name>seek</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>argc</name><operator>&lt;</operator><literal type="number">4</literal> <operator>||</operator> <literal type="number">2</literal> <operator>!=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr> )</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tiny_ssim &lt;file1.yuv&gt; &lt;file2.yuv&gt; &lt;width&gt;x&lt;height&gt; [&lt;seek&gt;]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>h</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>w</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>h</name> <operator>&gt;=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">3</literal> <operator>||</operator> <literal type="number">2LL</literal><operator>*</operator><name>w</name><operator>+</operator><literal type="number">12</literal> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Dimensions are too large, or invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name>w</name><operator>*</operator><name>h</name><operator>*</operator><literal type="number">3LL</literal><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>w</name><operator>*</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plane</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>w</name><operator>*</operator><name>h</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>w</name><operator>+</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seek</name> <operator>=</operator> <ternary><condition><expr><name>argc</name><operator>&lt;</operator><literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>seek</name><operator>&lt;</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>seek</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>seek</name></expr> </then><else>: <expr><name>seek</name></expr></else></ternary></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>frames</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>frames</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>ssd_one</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ssim_one</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>( <expr><call><name>fread</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>( <expr><call><name>fread</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{<block_content>
<expr_stmt><expr><name><name>ssd_one</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ssd_plane</name> <argument_list>( <argument><expr><name><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>*</operator><name>h</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>*</operator><operator>!</operator><operator>!</operator><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ssim_one</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ssim_plane</name><argument_list>( <argument><expr><name><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>&gt;&gt;</operator><operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>&gt;&gt;</operator><operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name>w</name><operator>&gt;&gt;</operator><operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ssd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>ssd_one</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ssim</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>ssim_one</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Frame %d | "</literal></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_results</name><argument_list>(<argument><expr><name>ssd_one</name></expr></argument>, <argument><expr><name>ssim_one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" \r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>frames</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total %d frames | "</literal></expr></argument>, <argument><expr><name>frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_results</name><argument_list>(<argument><expr><name>ssd</name></expr></argument>, <argument><expr><name>ssim</name></expr></argument>, <argument><expr><name>frames</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
