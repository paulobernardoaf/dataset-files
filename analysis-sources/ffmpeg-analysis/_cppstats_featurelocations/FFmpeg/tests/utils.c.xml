<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\utils.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALEBITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_HALF</name></cpp:macro> <cpp:value>(1 &lt;&lt; (SCALEBITS - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) ((x) * (1 &lt;&lt; SCALEBITS) + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>err_if</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (expr) { fprintf(stderr, "%s\n", strerror(errno)); exit(1); } } while (0)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type> <name>rgb24_to_yuv420p</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lum</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wrap</name></decl>, <decl><type ref="prev"/><name>wrap3</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>g1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrap3</name> <operator>=</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.29900</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name> <operator>+</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.58700</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>g</name> <operator>+</operator>
<call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.11400</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name> <operator>+</operator> <name>ONE_HALF</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.29900</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name> <operator>+</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.58700</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>g</name> <operator>+</operator>
<call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.11400</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name> <operator>+</operator> <name>ONE_HALF</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>wrap3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lum</name> <operator>+=</operator> <name>wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.29900</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name> <operator>+</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.58700</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>g</name> <operator>+</operator>
<call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.11400</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name> <operator>+</operator> <name>ONE_HALF</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.29900</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name> <operator>+</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.58700</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>g</name> <operator>+</operator>
<call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.11400</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name> <operator>+</operator> <name>ONE_HALF</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>-</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.16874</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r1</name> <operator>-</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.33126</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>g1</name> <operator>+</operator>
<call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.50000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>b1</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>ONE_HALF</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>SCALEBITS</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.50000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>r1</name> <operator>-</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.41869</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>g1</name> <operator>-</operator>
<call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.08131</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>b1</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>ONE_HALF</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>SCALEBITS</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>-</operator><name>wrap3</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lum</name> <operator>+=</operator> <operator>-</operator><name>wrap</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>wrap3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lum</name> <operator>+=</operator> <name>wrap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_WIDTH</name></cpp:macro> <cpp:value>352</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_HEIGHT</name></cpp:macro> <cpp:value>288</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NB_PICT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pgmyuv_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rgb_tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lum_tab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cb_tab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cr_tab</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lum_tab</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb_tab</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cr_tab</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rgb24_to_yuv420p</name><argument_list>(<argument><expr><name>lum_tab</name></expr></argument>, <argument><expr><name>cb_tab</name></expr></argument>, <argument><expr><name>cr_tab</name></expr></argument>, <argument><expr><name>rgb_tab</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"P5\n%d %d\n%d\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>err_if</name><argument_list>(<argument><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>lum_tab</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>w</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <name>h</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> <operator>=</operator> <name>w</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>cb_tab</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>=</operator> <name>cr_tab</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>err_if</name><argument_list>(<argument><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>err_if</name><argument_list>(<argument><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>+=</operator> <name>w2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>+=</operator> <name>w2</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>err_if</name><argument_list>(<argument><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cb</name> <operator>+=</operator> <name>w2</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>err_if</name><argument_list>(<argument><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> <operator>+=</operator> <name>w2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lum_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cb_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cr_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rgb_tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>wrap</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pixel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name>width</name> <operator>||</operator>
<name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>rgb_tab</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>wrap</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
