<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\audiogen.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>myrnd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>seed_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <operator>*</operator><name>seed_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <operator>(</operator><name>seed</name> <operator>*</operator> <literal type="number">314159</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>seed</name> <operator>%</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>seed_ptr</name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAC_BITS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAC_ONE</name></cpp:macro> <cpp:value>(1 &lt;&lt; FRAC_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COS_TABLE_BITS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>cos_table</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>COS_TABLE_BITS</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x8000</literal></expr>, <expr><literal type="number">0x7ffe</literal></expr>, <expr><literal type="number">0x7ff6</literal></expr>, <expr><literal type="number">0x7fea</literal></expr>, <expr><literal type="number">0x7fd9</literal></expr>, <expr><literal type="number">0x7fc2</literal></expr>, <expr><literal type="number">0x7fa7</literal></expr>, <expr><literal type="number">0x7f87</literal></expr>,
<expr><literal type="number">0x7f62</literal></expr>, <expr><literal type="number">0x7f38</literal></expr>, <expr><literal type="number">0x7f0a</literal></expr>, <expr><literal type="number">0x7ed6</literal></expr>, <expr><literal type="number">0x7e9d</literal></expr>, <expr><literal type="number">0x7e60</literal></expr>, <expr><literal type="number">0x7e1e</literal></expr>, <expr><literal type="number">0x7dd6</literal></expr>,
<expr><literal type="number">0x7d8a</literal></expr>, <expr><literal type="number">0x7d3a</literal></expr>, <expr><literal type="number">0x7ce4</literal></expr>, <expr><literal type="number">0x7c89</literal></expr>, <expr><literal type="number">0x7c2a</literal></expr>, <expr><literal type="number">0x7bc6</literal></expr>, <expr><literal type="number">0x7b5d</literal></expr>, <expr><literal type="number">0x7aef</literal></expr>,
<expr><literal type="number">0x7a7d</literal></expr>, <expr><literal type="number">0x7a06</literal></expr>, <expr><literal type="number">0x798a</literal></expr>, <expr><literal type="number">0x790a</literal></expr>, <expr><literal type="number">0x7885</literal></expr>, <expr><literal type="number">0x77fb</literal></expr>, <expr><literal type="number">0x776c</literal></expr>, <expr><literal type="number">0x76d9</literal></expr>,
<expr><literal type="number">0x7642</literal></expr>, <expr><literal type="number">0x75a6</literal></expr>, <expr><literal type="number">0x7505</literal></expr>, <expr><literal type="number">0x7460</literal></expr>, <expr><literal type="number">0x73b6</literal></expr>, <expr><literal type="number">0x7308</literal></expr>, <expr><literal type="number">0x7255</literal></expr>, <expr><literal type="number">0x719e</literal></expr>,
<expr><literal type="number">0x70e3</literal></expr>, <expr><literal type="number">0x7023</literal></expr>, <expr><literal type="number">0x6f5f</literal></expr>, <expr><literal type="number">0x6e97</literal></expr>, <expr><literal type="number">0x6dca</literal></expr>, <expr><literal type="number">0x6cf9</literal></expr>, <expr><literal type="number">0x6c24</literal></expr>, <expr><literal type="number">0x6b4b</literal></expr>,
<expr><literal type="number">0x6a6e</literal></expr>, <expr><literal type="number">0x698c</literal></expr>, <expr><literal type="number">0x68a7</literal></expr>, <expr><literal type="number">0x67bd</literal></expr>, <expr><literal type="number">0x66d0</literal></expr>, <expr><literal type="number">0x65de</literal></expr>, <expr><literal type="number">0x64e9</literal></expr>, <expr><literal type="number">0x63ef</literal></expr>,
<expr><literal type="number">0x62f2</literal></expr>, <expr><literal type="number">0x61f1</literal></expr>, <expr><literal type="number">0x60ec</literal></expr>, <expr><literal type="number">0x5fe4</literal></expr>, <expr><literal type="number">0x5ed7</literal></expr>, <expr><literal type="number">0x5dc8</literal></expr>, <expr><literal type="number">0x5cb4</literal></expr>, <expr><literal type="number">0x5b9d</literal></expr>,
<expr><literal type="number">0x5a82</literal></expr>, <expr><literal type="number">0x5964</literal></expr>, <expr><literal type="number">0x5843</literal></expr>, <expr><literal type="number">0x571e</literal></expr>, <expr><literal type="number">0x55f6</literal></expr>, <expr><literal type="number">0x54ca</literal></expr>, <expr><literal type="number">0x539b</literal></expr>, <expr><literal type="number">0x5269</literal></expr>,
<expr><literal type="number">0x5134</literal></expr>, <expr><literal type="number">0x4ffb</literal></expr>, <expr><literal type="number">0x4ec0</literal></expr>, <expr><literal type="number">0x4d81</literal></expr>, <expr><literal type="number">0x4c40</literal></expr>, <expr><literal type="number">0x4afb</literal></expr>, <expr><literal type="number">0x49b4</literal></expr>, <expr><literal type="number">0x486a</literal></expr>,
<expr><literal type="number">0x471d</literal></expr>, <expr><literal type="number">0x45cd</literal></expr>, <expr><literal type="number">0x447b</literal></expr>, <expr><literal type="number">0x4326</literal></expr>, <expr><literal type="number">0x41ce</literal></expr>, <expr><literal type="number">0x4074</literal></expr>, <expr><literal type="number">0x3f17</literal></expr>, <expr><literal type="number">0x3db8</literal></expr>,
<expr><literal type="number">0x3c57</literal></expr>, <expr><literal type="number">0x3af3</literal></expr>, <expr><literal type="number">0x398d</literal></expr>, <expr><literal type="number">0x3825</literal></expr>, <expr><literal type="number">0x36ba</literal></expr>, <expr><literal type="number">0x354e</literal></expr>, <expr><literal type="number">0x33df</literal></expr>, <expr><literal type="number">0x326e</literal></expr>,
<expr><literal type="number">0x30fc</literal></expr>, <expr><literal type="number">0x2f87</literal></expr>, <expr><literal type="number">0x2e11</literal></expr>, <expr><literal type="number">0x2c99</literal></expr>, <expr><literal type="number">0x2b1f</literal></expr>, <expr><literal type="number">0x29a4</literal></expr>, <expr><literal type="number">0x2827</literal></expr>, <expr><literal type="number">0x26a8</literal></expr>,
<expr><literal type="number">0x2528</literal></expr>, <expr><literal type="number">0x23a7</literal></expr>, <expr><literal type="number">0x2224</literal></expr>, <expr><literal type="number">0x209f</literal></expr>, <expr><literal type="number">0x1f1a</literal></expr>, <expr><literal type="number">0x1d93</literal></expr>, <expr><literal type="number">0x1c0c</literal></expr>, <expr><literal type="number">0x1a83</literal></expr>,
<expr><literal type="number">0x18f9</literal></expr>, <expr><literal type="number">0x176e</literal></expr>, <expr><literal type="number">0x15e2</literal></expr>, <expr><literal type="number">0x1455</literal></expr>, <expr><literal type="number">0x12c8</literal></expr>, <expr><literal type="number">0x113a</literal></expr>, <expr><literal type="number">0x0fab</literal></expr>, <expr><literal type="number">0x0e1c</literal></expr>,
<expr><literal type="number">0x0c8c</literal></expr>, <expr><literal type="number">0x0afb</literal></expr>, <expr><literal type="number">0x096b</literal></expr>, <expr><literal type="number">0x07d9</literal></expr>, <expr><literal type="number">0x0648</literal></expr>, <expr><literal type="number">0x04b6</literal></expr>, <expr><literal type="number">0x0324</literal></expr>, <expr><literal type="number">0x0192</literal></expr>,
<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSHIFT</name></cpp:macro> <cpp:value>(FRAC_BITS - COS_TABLE_BITS - 2)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>int_cos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <operator>(</operator><name>FRAC_ONE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <operator>(</operator><name>FRAC_ONE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>FRAC_ONE</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <operator>(</operator><name>FRAC_ONE</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>FRAC_ONE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cos_table</name> <operator>+</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <name>CSHIFT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CSHIFT</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>f</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>CSHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>CSHIFT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>^</operator> <name>neg</name><operator>)</operator> <operator>-</operator> <name>neg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>FRAC_BITS</name> <operator>-</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfile</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put16</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>( <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fputc</name><argument_list>( <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SIZE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WFORMAT_PCM</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_wav_header</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>block_align</name> <init>= <expr><name>SAMPLE_SIZE</name> <operator>*</operator> <name>channels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name>block_align</name> <operator>*</operator> <name>nb_samples</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put32</name><argument_list>(<argument><expr><name>HEADER_SIZE</name> <operator>+</operator> <name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"WAVEfmt "</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put32</name><argument_list>(<argument><expr><name>FMT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>WFORMAT_PCM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put32</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put32</name><argument_list>(<argument><expr><name>block_align</name> <operator>*</operator> <name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>block_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>SAMPLE_SIZE</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put32</name><argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>amp</name></decl>, <decl><type ref="prev"/><name>ampa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tabf1</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tabf2</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>taba</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name> <init>= <expr><literal type="number">44100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>argc</name></expr></argument> &gt;</argument_list></name> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s file [&lt;sample rate&gt; [&lt;channels&gt;] [&lt;random seed&gt;]]\n"</literal>
<literal type="string">"generate a test raw 16 bit audio stream\n"</literal>
<literal type="string">"If the file extension is .wav a WAVE header will be added.\n"</literal>
<literal type="string">"default: 44100 Hz stereo\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_rate</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid sample rate: %d\n"</literal></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nb_channels</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nb_channels</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nb_channels</name></expr></argument> &gt;</argument_list></name> <name>MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid number of channels: %d\n"</literal></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ext</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="string">".wav"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_wav_header</name><argument_list>(<argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <name>sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><call><name>int_cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <name>FRAC_ONE</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><call><name>int_cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">10000</literal> <operator>-</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name>f</name> <operator>*</operator> <name>FRAC_ONE</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>myrnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>, <argument><expr><literal type="number">20000</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>myrnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>taba</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tabf1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <call><name>myrnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tabf2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <call><name>myrnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><call><name>int_cos</name><argument_list>(<argument><expr><name><name>taba</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>tabf1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>tabf2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>tabf1</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>taba</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>f</name> <operator>*</operator> <name>FRAC_ONE</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ampa</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>sample_rate</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>amp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>FRAC_ONE</name> <operator>+</operator> <call><name>int_cos</name><argument_list>(<argument><expr><name>ampa</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">5000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>amp</name> <operator>=</operator> <literal type="number">10000</literal> <operator>-</operator> <name>amp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><call><name>int_cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>amp</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put16</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><literal type="number">500</literal> <operator>*</operator> <name>FRAC_ONE</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ampa</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>FRAC_ONE</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
