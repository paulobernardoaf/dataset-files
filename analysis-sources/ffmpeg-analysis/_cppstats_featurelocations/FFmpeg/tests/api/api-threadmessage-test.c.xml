<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\tests\api\api-threadmessage-test.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/threadmessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include> 

<struct>struct <name>sender_data</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>workload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>receiver_data</name> <block>{
<decl_stmt><decl><type><name>pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>workload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>message</name> <block>{
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC</name></cpp:macro> <cpp:value>0xdeadc0de</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_frame</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>message</name></name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>magic</name></name> <operator>==</operator> <name>MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sender_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sender_data</name></name> <modifier>*</modifier></type><name>wd</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"sender #%d: workload=%d\n"</literal></expr></argument>, <argument><expr><name><name>wd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>wd</name><operator>-&gt;</operator><name>workload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wd</name><operator>-&gt;</operator><name>workload</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>wd</name><operator>-&gt;</operator><name>workload</name></name> <operator>&lt;</operator> <name><name>wd</name><operator>-&gt;</operator><name>workload</name></name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"sender #%d: flushing the queue\n"</literal></expr></argument>, <argument><expr><name><name>wd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_thread_message_flush</name><argument_list>(<argument><expr><name><name>wd</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>message</name></name></type> <name>msg</name> <init>= <expr><block>{
<expr><operator>.</operator><name>magic</name> <operator>=</operator> <name>MAGIC</name></expr>,
<expr><operator>.</operator><name>frame</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>msg</name><operator>.</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"frame %d/%d from sender %d"</literal></expr></argument>,
<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>wd</name><operator>-&gt;</operator><name>workload</name></name></expr></argument>, <argument><expr><name><name>wd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><literal type="string">"sig"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>metadata</name></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGBA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">320</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">240</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"sender #%d: sending my work (%d/%d frame:%p)\n"</literal></expr></argument>,
<argument><expr><name><name>wd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>wd</name><operator>-&gt;</operator><name>workload</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_thread_message_queue_send</name><argument_list>(<argument><expr><name><name>wd</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"sender #%d: my work is done here (%s)\n"</literal></expr></argument>,
<argument><expr><name><name>wd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_thread_message_queue_set_err_recv</name><argument_list>(<argument><expr><name><name>wd</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>receiver_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>receiver_data</name></name> <modifier>*</modifier></type><name>rd</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rd</name><operator>-&gt;</operator><name>workload</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>rd</name><operator>-&gt;</operator><name>workload</name></name> <operator>&lt;</operator> <name><name>rd</name><operator>-&gt;</operator><name>workload</name></name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"receiver #%d: flushing the queue, "</literal>
<literal type="string">"discarding %d message(s)\n"</literal></expr></argument>, <argument><expr><name><name>rd</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><call><name>av_thread_message_queue_nb_elems</name><argument_list>(<argument><expr><name><name>rd</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_thread_message_flush</name><argument_list>(<argument><expr><name><name>rd</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>message</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_thread_message_queue_recv</name><argument_list>(<argument><expr><name><name>rd</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>magic</name></name> <operator>==</operator> <name>MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>meta</name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>frame</name><operator>-&gt;</operator><name>metadata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="string">"sig"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"got \"%s\" (%p)\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msg</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"consumed enough (%d), stop\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_thread_message_queue_set_err_send</name><argument_list>(<argument><expr><name><name>rd</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>AVERROR_EOF</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_workload</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>minv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>maxv</name> <operator>==</operator> <name>minv</name></expr> ?</condition><then> <expr><name>maxv</name></expr> </then><else>: <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>maxv</name> <operator>-</operator> <name>minv</name><operator>)</operator> <operator>+</operator> <name>minv</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ac</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_queue_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_senders</name></decl>, <decl><type ref="prev"/><name>sender_min_load</name></decl>, <decl><type ref="prev"/><name>sender_max_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_receivers</name></decl>, <decl><type ref="prev"/><name>receiver_min_load</name></decl>, <decl><type ref="prev"/><name>receiver_max_load</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sender_data</name></name> <modifier>*</modifier></type><name>senders</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>receiver_data</name></name> <modifier>*</modifier></type><name>receivers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVThreadMessageQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s &lt;max_queue_size&gt; "</literal>
<literal type="string">"&lt;nb_senders&gt; &lt;sender_min_send&gt; &lt;sender_max_send&gt; "</literal>
<literal type="string">"&lt;nb_receivers&gt; &lt;receiver_min_recv&gt; &lt;receiver_max_recv&gt;\n"</literal></expr></argument>, <argument><expr><name><name>av</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_queue_size</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_senders</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sender_min_load</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sender_max_load</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_receivers</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>receiver_min_load</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>receiver_max_load</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_queue_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name>nb_senders</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>sender_min_load</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>sender_max_load</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<name>nb_receivers</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>receiver_min_load</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>receiver_max_load</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"negative values not allowed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"qsize:%d / %d senders sending [%d-%d] / "</literal>
<literal type="string">"%d receivers receiving [%d-%d]\n"</literal></expr></argument>, <argument><expr><name>max_queue_size</name></expr></argument>,
<argument><expr><name>nb_senders</name></expr></argument>, <argument><expr><name>sender_min_load</name></expr></argument>, <argument><expr><name>sender_max_load</name></expr></argument>,
<argument><expr><name>nb_receivers</name></expr></argument>, <argument><expr><name>receiver_min_load</name></expr></argument>, <argument><expr><name>receiver_max_load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>senders</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_senders</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>senders</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>receivers</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_receivers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>receivers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>senders</name> <operator>||</operator> <operator>!</operator><name>receivers</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_thread_message_queue_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><name>max_queue_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_thread_message_queue_set_free_func</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>free_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPAWN_THREADS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (i = 0; i &lt; nb_##type##s; i++) { struct type##_data *td = &amp;type##s[i]; td-&gt;id = i; td-&gt;queue = queue; td-&gt;workload = get_workload(type##_min_load, type##_max_load); ret = pthread_create(&amp;td-&gt;tid, NULL, type##_thread, td); if (ret) { const int err = AVERROR(ret); av_log(NULL, AV_LOG_ERROR, "Unable to start " AV_STRINGIFY(type) " thread: %s\n", av_err2str(err)); goto end; } } } while (0)</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAIT_THREADS</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (i = 0; i &lt; nb_##type##s; i++) { struct type##_data *td = &amp;type##s[i]; ret = pthread_join(td-&gt;tid, NULL); if (ret) { const int err = AVERROR(ret); av_log(NULL, AV_LOG_ERROR, "Unable to join " AV_STRINGIFY(type) " thread: %s\n", av_err2str(err)); goto end; } } } while (0)</cpp:value></cpp:define>













<expr_stmt><expr><call><name>SPAWN_THREADS</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPAWN_THREADS</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WAIT_THREADS</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WAIT_THREADS</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>av_thread_message_queue_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>senders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>receivers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
