<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\wavpack.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unary.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wavpack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dsd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSD_BYTE_READY</name><parameter_list>(<parameter><type><name>low</name></type></parameter>,<parameter><type><name>high</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(((low) ^ (high)) &amp; 0xff000000))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTABLE_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTABLE_BINS</name></cpp:macro> <cpp:value>(1&lt;&lt;PTABLE_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTABLE_MASK</name></cpp:macro> <cpp:value>(PTABLE_BINS-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UP</name></cpp:macro> <cpp:value>0x010000fe</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWN</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECAY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRECISION</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_ONE</name></cpp:macro> <cpp:value>(1 &lt;&lt; PRECISION)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRECISION_USE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATE_S</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HISTORY_BITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HISTORY_BINS</name></cpp:macro> <cpp:value>(1 &lt;&lt; MAX_HISTORY_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BIN_BYTES</name></cpp:macro> <cpp:value>1280</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <block>{

<decl><name>MODULATION_PCM</name></decl>, 

<decl><name>MODULATION_DSD</name></decl> 

}</block></enum></type> <name>Modulation</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WavpackFrameContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stereo</name></decl>, <name>stereo_in</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>joint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>CRC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_extra_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc_extra_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb_extra_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>terms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Decorr</name></type> <name><name>decorr</name><index>[<expr><name>MAX_TERMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zero</name></decl>, <name>one</name>, <name>zeroes</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>and</name></decl>, <name>or</name>, <name>shift</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>post_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hybrid</name></decl>, <name>hybrid_bitrate</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hybrid_maxclip</name></decl>, <name>hybrid_minclip</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>float_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>float_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>float_max_exp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WvChannel</name></type> <name><name>ch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbyte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ptable</name> <index>[<expr><name>PTABLE_BINS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>value_lookup_buffer</name><index>[<expr><name>MAX_HISTORY_BINS</name><operator>*</operator><name>MAX_BIN_BYTES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>summed_probabilities</name><index>[<expr><name>MAX_HISTORY_BINS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>probabilities</name><index>[<expr><name>MAX_HISTORY_BINS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>value_lookup</name><index>[<expr><name>MAX_HISTORY_BINS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>WavpackFrameContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WV_MAX_FRAME_DECODERS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>WavpackContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name><name>fdec</name><index>[<expr><name>WV_MAX_FRAME_DECODERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fdec_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>curr_frame</name></decl>, <name>prev_frame</name>;</decl_stmt>

<decl_stmt><decl><type><name>Modulation</name></type> <name>modulation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DSDContext</name> <modifier>*</modifier></type><name>dsdctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>WavpackContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_DECAY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + 0x80) &gt;&gt; 8)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name></type> <name>get_tail</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>e</name> <operator>+</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_error_limit</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name><name>br</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate_acc</name> <operator>&gt;</operator> <name>UINT_MAX</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate_delta</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate_acc</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>br</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate_acc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>LEVEL_DECAY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>slow_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>stereo_in</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hybrid_bitrate</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>balance</name> <init>= <expr><operator>(</operator><name><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>br</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>balance</name> <operator>&gt;</operator> <name><name>br</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>br</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>br</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>br</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>-</operator><name>balance</name> <operator>&gt;</operator> <name><name>br</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>br</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>br</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>br</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>br</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>balance</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>br</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>br</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>balance</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hybrid_bitrate</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>br</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>error_limit</name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><name><name>sl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>br</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>error_limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>error_limit</name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><name><name>br</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_get_value</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>base</name></decl>, <decl><type ref="prev"/><name>add</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WvChannel</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>median</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">2U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>median</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">2U</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>zero</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>one</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zeroes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zeroes</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zeroes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slow_level</name></name> <operator>-=</operator> <call><name>LEVEL_DECAY</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slow_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_unary_0_33</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>||</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zeroes</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zeroes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>median</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>median</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>median</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>median</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slow_level</name></name> <operator>-=</operator> <call><name>LEVEL_DECAY</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slow_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zero</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_unary_0_33</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>get_unary_0_33</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>t2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>||</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>t2</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>t2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>t2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>one</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>one</name></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>one</name></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zero</name></name> <operator>=</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>one</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hybrid</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>channel</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>update_error_limit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">2U</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>error_limit</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>add</name> <operator>&gt;=</operator> <literal type="number">0x2000000U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"k %d is too large\n"</literal></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>base</name> <operator>+</operator> <call><name>get_tail</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>base</name> <operator>*</operator> <literal type="number">2U</literal> <operator>+</operator> <name>add</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>add</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>error_limit</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>-=</operator> <operator>(</operator><name>mid</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>base</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>add</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>base</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>base</name> <operator>*</operator> <literal type="number">2U</literal> <operator>+</operator> <name>add</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hybrid_bitrate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slow_level</name></name> <operator>+=</operator> <call><name>wp_log2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>LEVEL_DECAY</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slow_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>~</operator><name>ret</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too few bits (%d) left\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>wv_get_value_integer</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>crc</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>S</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>extra_bits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>&amp;&amp;</operator>

<call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>extra_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>|=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>extra_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>crc</name> <operator>=</operator> <operator>*</operator><name>crc</name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name>S</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>S</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><name>S</name> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>and</name></name><operator>)</operator> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>or</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>S</name> <operator>+</operator> <name>bit</name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>shift</name></name><operator>)</operator> <operator>-</operator> <name>bit</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hybrid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>bit</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_minclip</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_maxclip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bit</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>post_shift</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>wv_get_value_float</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>crc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>S</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{

<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>;</decl_stmt>

}</block> <decl><name>value</name></decl>;</union>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>float_max_exp</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_bits</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">23</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left_bits</name> <init>= <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left_bits</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name> <operator>&lt;</operator> <name>max_bits</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>S</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>*=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>S</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>S</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>S</name> <operator>&gt;=</operator> <literal type="number">0x1000000U</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">23</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>float_max_exp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&lt;=</operator> <name>shift</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>--</operator><name>exp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exp</name> <operator>-=</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>float_flag</name></name> <operator>&amp;</operator> <name>WV_FLT_SHIFT_ONES</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>float_flag</name></name> <operator>&amp;</operator> <name>WV_FLT_SHIFT_SAME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>float_flag</name></name> <operator>&amp;</operator> <name>WV_FLT_SHIFT_SENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>float_max_exp</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>S</name> <operator>&amp;=</operator> <literal type="number">0x7fffff</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>float_flag</name></name> <operator>&amp;</operator> <name>WV_FLT_ZERO_SENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>float_max_exp</name></name> <operator>&gt;=</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>float_flag</name></name> <operator>&amp;</operator> <name>WV_FLT_ZERO_SIGN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>crc</name> <operator>=</operator> <operator>*</operator><name>crc</name> <operator>*</operator> <literal type="number">27</literal> <operator>+</operator> <name>S</name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <name>exp</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>.</operator><name>u</name></name> <operator>=</operator> <operator>(</operator><name>sign</name> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>exp</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>|</operator> <name>S</name></expr>;</expr_stmt>

<return>return <expr><name><name>value</name><operator>.</operator><name>f</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>wv_check_crc</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>crc</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>crc_extra_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>crc</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>CRC</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CRC error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>&amp;&amp;</operator> <name>crc_extra_bits</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>crc_extra_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extra bits CRC error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_ptable</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rate_i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rate_s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0x808000</literal></expr></init></decl>, <decl><type ref="prev"/><name>rate</name> <init>= <expr><name>rate_i</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>rate</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</init> <condition><expr><name>c</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <operator>(</operator><name>DOWN</name> <operator>-</operator> <name>value</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DECAY</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PTABLE_BINS</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>PTABLE_BINS</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x100ffff</literal> <operator>-</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0x010000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rate</name> <operator>+=</operator> <operator>(</operator><name>rate</name> <operator>*</operator> <name>rate_s</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>rate</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</init> <condition><expr><name>c</name><operator>--</operator></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <operator>(</operator><name>DOWN</name> <operator>-</operator> <name>value</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DECAY</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>, <name>fltr0</name>, <name>fltr1</name>, <name>fltr2</name>, <name>fltr3</name>, <name>fltr4</name>, <name>fltr5</name>, <name>fltr6</name>, <name>factor</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>byte</name></decl>;</decl_stmt>

}</block></struct></type> <name>DSDfilters</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_unpack_dsd_high</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_left</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>checksum</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_l</name> <init>= <expr><name>dst_left</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_r</name> <init>= <expr><name>dst_right</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></init></decl>, <decl><type ref="prev"/><name>stereo</name> <init>= <expr><ternary><condition><expr><name>dst_r</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DSDfilters</name></type> <name><name>filters</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name> <init>= <expr><name>filters</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate_i</name></decl>, <decl><type ref="prev"/><name>rate_s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>stereo</name></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">13</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rate_i</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate_s</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rate_s</name> <operator>!=</operator> <name>RATE_S</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_ptable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ptable</name></name></expr></argument>, <argument><expr><name>rate_i</name></expr></argument>, <argument><expr><name>rate_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>channel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>channel</name> <operator>&lt;</operator> <name>stereo</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>channel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DSDfilters</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>filters</name> <operator>+</operator> <name>channel</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>fltr1</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>PRECISION</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>fltr2</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>PRECISION</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>fltr3</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>PRECISION</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>fltr4</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>PRECISION</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>fltr5</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>PRECISION</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>fltr6</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>factor</name></name> <operator>|=</operator> <operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>sp</name><operator>-&gt;</operator><name>factor</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>total_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitcount</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr1</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr5</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>*</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>factor</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr1</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr5</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>*</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>factor</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>bitcount</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ptable</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>PRECISION</name> <operator>-</operator> <name>PRECISION_USE</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>PTABLE_MASK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>split</name> <init>= <expr><name>low</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>*</operator><name>pp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <name>split</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>split</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <operator>(</operator><name>UP</name> <operator>-</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DECAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>split</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <operator>(</operator><name>DOWN</name> <operator>-</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DECAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><call><name>DSD_BYTE_READY</name><argument_list>(<argument><expr><name>high</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><name>high</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>+=</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte</name> <operator>=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>factor</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>^</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>^</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>-</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>&amp;</operator> <name>VALUE_ONE</name><operator>)</operator> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>&amp;</operator> <name>VALUE_ONE</name><operator>)</operator> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr3</name> <operator>+=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr2</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr4</name> <operator>+=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr3</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr4</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr5</name> <operator>+=</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>+=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr6</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr1</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr5</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>*</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>factor</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stereo</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ptable</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>PRECISION</name> <operator>-</operator> <name>PRECISION_USE</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>PTABLE_MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>split</name> <operator>=</operator> <name>low</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>*</operator><name>pp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <name>split</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>split</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <operator>(</operator><name>UP</name> <operator>-</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DECAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>split</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <operator>(</operator><name>DOWN</name> <operator>-</operator> <operator>*</operator><name>pp</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>DECAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><call><name>DSD_BYTE_READY</name><argument_list>(<argument><expr><name>high</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><name>high</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>+=</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte</name> <operator>=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>factor</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>^</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr0</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>^</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>-</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>&amp;</operator> <name>VALUE_ONE</name><operator>)</operator> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr0</name> <operator>&amp;</operator> <name>VALUE_ONE</name><operator>)</operator> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr3</name> <operator>+=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr2</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr4</name> <operator>+=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr3</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr4</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr5</name> <operator>+=</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>+=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr6</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr1</name> <operator>-</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr5</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fltr6</name> <operator>*</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>factor</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>checksum</name> <operator>+=</operator> <operator>(</operator><name>checksum</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>dst_l</name> <operator>=</operator> <name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>factor</name> <operator>-=</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>factor</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>checksum</name> <operator>+=</operator> <operator>(</operator><name>checksum</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>dst_r</name> <operator>=</operator> <name><name>filters</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filters</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>factor</name> <operator>-=</operator> <operator>(</operator><name><name>filters</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>factor</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>wv_check_crc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_CRCCHECK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_left</name></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_right</name></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_unpack_dsd_fast</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_left</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_l</name> <init>= <expr><name>dst_left</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_r</name> <init>= <expr><name>dst_right</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>history_bits</name></decl>, <decl><type ref="prev"/><name>max_probability</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_summed_probabilities</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vlb</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>value_lookup_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>history_bins</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>chan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>checksum</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>history_bits</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>history_bits</name> <operator>&gt;</operator> <name>MAX_HISTORY_BITS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>history_bins</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>history_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_probability</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_probability</name> <operator>&lt;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>probabilities</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outend</name> <init>= <expr><name>outptr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>probabilities</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>history_bins</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>outptr</name> <operator>&lt;</operator> <name>outend</name> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;</operator> <name>max_probability</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>zcount</name> <init>= <expr><name>code</name> <operator>-</operator> <name>max_probability</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>outptr</name> <operator>&lt;</operator> <name>outend</name> <operator>&amp;&amp;</operator> <name>zcount</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>outptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outptr</name><operator>++</operator> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>outptr</name> <operator>&lt;</operator> <name>outend</name> <operator>||</operator>

<operator>(</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>probabilities</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>history_bins</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>probabilities</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>probabilities</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>history_bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>p0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p0</name> <operator>&lt;</operator> <name>history_bins</name></expr>;</condition> <incr><expr><name>p0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sum_values</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>summed_probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum_values</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>sum_values</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total_summed_probabilities</name> <operator>+=</operator> <name>sum_values</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_summed_probabilities</name> <operator>&gt;</operator> <name>history_bins</name> <operator>*</operator> <name>MAX_BIN_BYTES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>value_lookup</name><index>[<expr><name>p0</name></expr>]</index></name> <operator>=</operator> <name>vlb</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>c</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>vlb</name><operator>++</operator> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chan</name> <operator>=</operator> <name>p0</name> <operator>=</operator> <name>p1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>high</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total_samples</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>total_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mult</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>summed_probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mult</name> <operator>=</operator> <operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>summed_probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mult</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mult</name> <operator>=</operator> <name>high</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>summed_probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mult</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <name>mult</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>summed_probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_r</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>dst_l</name> <operator>=</operator> <name>code</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>value_lookup</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>summed_probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>code</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>mult</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst_l</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>value_lookup</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>summed_probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>code</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>mult</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chan</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst_r</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst_l</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>chan</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>low</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>probabilities</name><index>[<expr><name>p0</name></expr>]</index><index>[<expr><name>code</name></expr>]</index></name> <operator>*</operator> <name>mult</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>checksum</name> <operator>+=</operator> <operator>(</operator><name>checksum</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <operator>(</operator><name>history_bins</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <operator>(</operator><name>history_bins</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><call><name>DSD_BYTE_READY</name><argument_list>(<argument><expr><name>high</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><name>high</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>wv_check_crc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_CRCCHECK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_left</name></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_right</name></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_unpack_dsd_copy</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_left</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_l</name> <init>= <expr><name>dst_left</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_r</name> <init>= <expr><name>dst_right</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>checksum</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>total_samples</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>dst_r</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>total_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>checksum</name> <operator>+=</operator> <operator>(</operator><name>checksum</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>dst_l</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_l</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>checksum</name> <operator>+=</operator> <operator>(</operator><name>checksum</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>dst_r</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>wv_check_crc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_CRCCHECK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_left</name></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_right</name></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>wv_unpack_stereo</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst_l</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst_r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>L</name></decl>, <decl><type ref="prev"/><name>L2</name></decl>, <decl><type ref="prev"/><name>R</name></decl>, <decl><type ref="prev"/><name>R2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc_extra_bits</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst16_l</name> <init>= <expr><name>dst_l</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst16_r</name> <init>= <expr><name>dst_r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst32_l</name> <init>= <expr><name>dst_l</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst32_r</name> <init>= <expr><name>dst_r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstfl_l</name> <init>= <expr><name>dst_l</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstfl_r</name> <init>= <expr><name>dst_r</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>one</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>zero</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>zeroes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>wv_get_value</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>wv_get_value</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>terms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">2U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <literal type="number">2U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">3U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">3U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <name>t</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>L2</name> <operator>=</operator> <name>L</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>A</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>R2</name> <operator>=</operator> <name>R</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>B</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>L2</name> <operator>=</operator> <name>L</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>A</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>R2</name> <operator>=</operator> <name>R</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>B</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;&amp;</operator> <name>L</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>L</name> <operator>^</operator> <name>A</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>B</name> <operator>&amp;&amp;</operator> <name>R</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>R</name> <operator>^</operator> <name>B</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>L</name> <operator>=</operator> <name>L2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>R</name> <operator>=</operator> <name>R2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>L2</name> <operator>=</operator> <name>L</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>L2</name> <operator>=</operator> <name>L</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>L</name> <operator>=</operator> <name>L2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>R2</name> <operator>=</operator> <name>R</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>L2</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>R2</name> <operator>=</operator> <name>R</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>L2</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name></expr></argument>, <argument><expr><name>L2</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>R2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>R2</name> <operator>=</operator> <name>R</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>R2</name> <operator>=</operator> <name>R</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightB</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>R2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>R2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>L2</name> <operator>=</operator> <name>L</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>R2</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>L2</name> <operator>=</operator> <name>L</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>R2</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name></expr></argument>, <argument><expr><name>R2</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>L</name> <operator>=</operator> <name>L2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>L</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>R</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">19</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sample %d %d too large\n"</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>joint</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>L</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>R</name> <operator>-=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>crc</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>L</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>R</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dstfl_l</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dstfl_r</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst32_l</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_integer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst32_r</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_integer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst16_l</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_integer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst16_r</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_integer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>last</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>dst_l</name> <operator>+</operator> <name>count</name><operator>*</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name></name><operator>-</operator><name>count</name><operator>)</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>dst_r</name> <operator>+</operator> <name>count</name><operator>*</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name></name><operator>-</operator><name>count</name><operator>)</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_CRCCHECK</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>wv_check_crc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>crc_extra_bits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>wv_unpack_mono</name><parameter_list>(<parameter><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc_extra_bits</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst16</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst32</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dstfl</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>one</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>zero</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>zeroes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>wv_get_value</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>terms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">2U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">3U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <name>t</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <name>T</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>A</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>S</name> <operator>=</operator> <name>T</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>A</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>A</name> <operator>&amp;&amp;</operator> <name>T</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>T</name> <operator>^</operator> <name>A</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>T</name> <operator>=</operator> <name>S</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>S</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dstfl</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst32</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_integer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst16</name><operator>++</operator> <operator>=</operator> <call><name>wv_get_value_integer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_extra_bits</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>last</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name>count</name><operator>*</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name></name><operator>-</operator><name>count</name><operator>)</operator><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_CRCCHECK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>wv_check_crc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>crc_extra_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wv_alloc_frame_context</name><parameter_list>(<parameter><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>fdec_num</name></name> <operator>==</operator> <name>WV_MAX_FRAME_DECODERS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fdec</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>fdec_num</name></name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>fdec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>fdec</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>fdec_num</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fdec_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fdec</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>fdec_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>avctx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curr_frame</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>curr_frame</name><operator>.</operator><name>f</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>fsrc</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>fdst</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fdst</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fsrc</name><operator>-&gt;</operator><name>curr_frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdst</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fsrc</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wavpack_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdec_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allocate_progress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curr_frame</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsdctx</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DSDContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>curr_frame</name><operator>.</operator><name>f</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>.</operator><name>f</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dsdctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dsdctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dsdctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_init_dsd_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wavpack_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fdec_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdec_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>curr_frame</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsdctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wavpack_decode_block</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_no</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WavpackFrameContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>samples_l</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>samples_r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_terms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_weights</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>got_entropy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_pcm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_float</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_hybrid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_dsd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>id</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>ssize</name></decl>, <decl><type ref="prev"/><name>weights</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name></decl>, <decl><type ref="prev"/><name>chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>orig_bpp</name></decl>, <decl><type ref="prev"/><name>sample_rate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rate_x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dsd_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>multiblock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>chmask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block_no</name> <operator>&gt;=</operator> <name><name>wc</name><operator>-&gt;</operator><name>fdec_num</name></name> <operator>&amp;&amp;</operator> <call><name>wv_alloc_frame_context</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating frame decode context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>fdec</name><index>[<expr><name>block_no</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Context for block %d is not present\n"</literal></expr></argument>,

<argument><expr><name>block_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_TERMS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Decorr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>and</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>or</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>!=</operator> <name><name>wc</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mismatching number of samples in "</literal>

<literal type="string">"a sequence: %d and %d\n"</literal></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bpp</name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_bpp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>multiblock</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>WV_SINGLE_BLOCK</name><operator>)</operator> <operator>!=</operator> <name>WV_SINGLE_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stereo</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>WV_MONO</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>WV_FALSE_STEREO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>stereo</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>joint</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>WV_JOINT_STEREO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>WV_HYBRID_MODE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_bitrate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <name>WV_HYBRID_BITRATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>post_shift</name></name> <operator>=</operator> <name>bpp</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>orig_bpp</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>post_shift</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>post_shift</name></name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_maxclip</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>orig_bpp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_minclip</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>orig_bpp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>CRC</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&amp;</operator> <name>WP_IDF_LONG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>|=</operator> <operator>(</operator><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ssize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&amp;</operator> <name>WP_IDF_ODD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Got incorrect block %02X with size %i\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ssize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Block size %i is out of bounds\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>id</name> <operator>&amp;</operator> <name>WP_IDF_MASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WP_ID_DECTERMS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>MAX_TERMS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many decorrelation terms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>terms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name> <init>= <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>got_terms</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_DECWEIGHTS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_terms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No decorrelation terms met\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>weights</name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>weights</name> <operator>&gt;</operator> <name>MAX_TERMS</name> <operator>||</operator> <name>weights</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>terms</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many decorrelation weights\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>weights</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>=</operator> <name>t</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>+=</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>weightA</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>=</operator> <name>t</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>+=</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>weightB</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>got_weights</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_DECSAMPLES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_terms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No decorrelation terms met\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>terms</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>&lt;</operator> <name>size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplesB</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>got_samples</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_ENTROPY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Entropy vars size should be %i, got %i.\n"</literal></expr></argument>,

<argument><expr><literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>median</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><name>got_entropy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_HYBRID</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_bitrate</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>slow_level</name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate_acc</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate_delta</name> <operator>=</operator>

<call><name>wp_exp2</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate_delta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>got_hybrid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_INT32INFO</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid INT32INFO, size = %i\n"</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ssize</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid INT32INFO, extra_bits = %d (&gt; 30)\n"</literal></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_bits</name></name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>and</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>or</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>and</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid INT32INFO, shift = %d (&gt; 31)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>and</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>or</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hybrid</name></name> <operator>&amp;&amp;</operator> <name>bpp</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>post_shift</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>post_shift</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_maxclip</name></name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hybrid_minclip</name></name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>WP_ID_FLOATINFO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid FLOATINFO, size = %i\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_flag</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_max_exp</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid FLOATINFO, shift = %d (&gt; 31)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_float</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_DATA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_pcm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_DSD_DATA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid DSD_DATA, size = %i\n"</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rate_x</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dsd_mode</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dsd_mode</name> <operator>&amp;&amp;</operator> <name>dsd_mode</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dsd_mode</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid DSD encoding mode: %d\n"</literal></expr></argument>,

<argument><expr><name>dsd_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbyte</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_dsd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_EXTRABITS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid EXTRABITS, size = %i\n"</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>crc_extra_bits</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WP_ID_CHANINFO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Insufficient channel information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chan</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>|=</operator> <operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <name>chan</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%i channels signalled"</literal>

<literal type="string">" instead of %i.\n"</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>|=</operator> <operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <name>chan</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%i channels signalled"</literal>

<literal type="string">" instead of %i.\n"</literal></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel info size %d\n"</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chan</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chmask</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>WP_ID_SAMPLE_RATE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid custom sample rate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sample_rate</name> <operator>=</operator> <call><name>bytestream2_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&amp;</operator> <name>WP_IDF_ODD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>got_pcm</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_terms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No block with decorrelation terms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_weights</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No block with decorrelation weights\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No block with decorrelation samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_entropy</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No block with entropy info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>hybrid</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_hybrid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Hybrid config not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_float</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Float information not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name> <init>= <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb_extra_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wanted</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>extra_bits</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>wanted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too small EXTRABITS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>got_extra_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_pcm</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_dsd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packed samples not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>got_pcm</name> <operator>&amp;&amp;</operator> <name><name>wc</name><operator>-&gt;</operator><name>modulation</name></name> <operator>!=</operator> <name>MODULATION_PCM</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>got_dsd</name> <operator>&amp;&amp;</operator> <name><name>wc</name><operator>-&gt;</operator><name>modulation</name></name> <operator>!=</operator> <name>MODULATION_DSD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid PCM/DSD mix encountered\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>ch_offset</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sr</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sr</name> <operator>==</operator> <literal type="number">0xf</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample_rate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Custom sample rate missing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name>sample_rate</name> <operator>*</operator> <name>rate_x</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>wv_rates</name><index>[<expr><name>sr</name></expr>]</index></name> <operator>*</operator> <name>rate_x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>multiblock</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chan</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>chan</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chmask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>chmask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>stereo</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>stereo</name></name></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_STEREO</name></expr> </then><else>:

<expr><name>AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>ThreadFrame</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>curr_frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wc</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>curr_frame</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>stereo</name></name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Too many channels coded in a packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>wc</name><operator>-&gt;</operator><name>ch_offset</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>AVERROR_INVALIDDATA</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samples_l</name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>wc</name><operator>-&gt;</operator><name>ch_offset</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stereo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>samples_r</name> <operator>=</operator> <name><name>wc</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>wc</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>stereo</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stereo_in</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_dsd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsd_mode</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_unpack_dsd_high</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dsd_mode</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_unpack_dsd_fast</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_unpack_dsd_copy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_unpack_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>got_dsd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsd_mode</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_unpack_dsd_high</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dsd_mode</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_unpack_dsd_fast</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_unpack_dsd_copy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_unpack_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stereo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>bpp</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wavpack_decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dsdctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dsdctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dsd_channel</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>frmptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>frmptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dsd2pcm_translate</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsdctx</name> <index>[<expr><name>jobnr</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wavpack_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavpackContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>frame_flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>WV_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_flags</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>&gt;</operator> <name>WV_MAX_SAMPLES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of samples: %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>modulation</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>frame_flags</name> <operator>&amp;</operator> <name>WV_DSD_DATA</name><operator>)</operator></expr> ?</condition><then> <expr><name>MODULATION_DSD</name></expr> </then><else>: <expr><name>MODULATION_PCM</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_flags</name> <operator>&amp;</operator> <operator>(</operator><name>WV_FLOAT_DATA</name> <operator>|</operator> <name>WV_DSD_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>frame_flags</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>frame_flags</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <name>WV_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>frame_size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Block %d has invalid size (size %d vs. %d bytes left)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>wavpack_decode_block</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>frame_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>frame_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough channels coded in a packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>modulation</name></name> <operator>==</operator> <name>MODULATION_DSD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dsd_channel</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>curr_frame</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wavpack_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wavpack"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"WavPack"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WAVPACK</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WavpackContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>wavpack_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>wavpack_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>wavpack_decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>wavpack_decode_flush</name></expr>,

<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>init_thread_copy</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>update_thread_context</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>update_thread_context</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_SLICE_THREADS</name></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
