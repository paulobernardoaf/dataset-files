<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vc1_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNESCAPED_THRESHOLD</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNESCAPED_LIMIT</name></cpp:macro> <cpp:value>144</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>NO_MATCH</name></decl>,

<decl><name>ONE_ZERO</name></decl>,

<decl><name>TWO_ZEROS</name></decl>,

<decl><name>ONE</name></decl>

}</block></enum></type> <name>VC1ParseSearchState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VC1ParseContext</name> <block>{

<decl_stmt><decl><type><name>ParseContext</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VC1Context</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>prev_start_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>unesc_buffer</name><index>[<expr><name>UNESCAPED_LIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>unesc_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VC1ParseSearchState</name></type> <name>search_state</name></decl>;</decl_stmt>

}</block></struct></type> <name>VC1ParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_extract_header</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VC1ParseContext</name> <modifier>*</modifier></type><name>vpc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>s</name><operator>.</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>parse_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>vpc</name><operator>-&gt;</operator><name>prev_start_code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VC1_CODE_SEQHDR</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>:</case>

<expr_stmt><expr><call><name>ff_vc1_decode_sequence_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vpc</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VC1_CODE_ENTRYPOINT</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>:</case>

<expr_stmt><expr><call><name>ff_vc1_decode_entry_point</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vpc</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VC1_CODE_FRAME</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>profile</name></name> <operator>&lt;</operator> <name>PROFILE_ADVANCED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vc1_parse_frame_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpc</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vc1_parse_frame_header_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpc</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_BI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>s</name><operator>.</operator><name>pict_type</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>rff</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>rptfrm</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>rptfrm</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>broadcast</name></name> <operator>&amp;&amp;</operator> <name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>interlace</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>psf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <ternary><condition><expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>tff</name></name></expr> ?</condition><then> <expr><name>AV_FIELD_TT</name></expr> </then><else>: <expr><name>AV_FIELD_BB</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name>AV_FIELD_PROGRESSIVE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_inv_q</name><argument_list>(<argument>av_mul_q(avctx-&gt;framerate, (AVRational){avctx-&gt;ticks_per_frame, <literal type="number">1</literal>})</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <ternary><condition><expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>chromaformat</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_PIX_FMT_YUV420P</name></expr>

</then><else>: <expr><name>AV_PIX_FMT_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vc1_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VC1ParseContext</name> <modifier>*</modifier></type><name>vpc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_found</name> <init>= <expr><name><name>vpc</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>frame_start_found</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>unesc_buffer</name> <init>= <expr><name><name>vpc</name><operator>-&gt;</operator><name>unesc_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>unesc_index</name> <init>= <expr><name><name>vpc</name><operator>-&gt;</operator><name>unesc_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VC1ParseSearchState</name></type> <name>search_state</name> <init>= <expr><name><name>vpc</name><operator>-&gt;</operator><name>search_state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_code_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>END_NOT_FOUND</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>vpc</name><operator>-&gt;</operator><name>bytes_to_skip</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_found</name> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>unesc_buffer</name> <operator>+</operator> <name>unesc_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UNESCAPED_THRESHOLD</name> <operator>-</operator> <name>unesc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vc1_extract_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>unesc_buffer</name></expr></argument>, <argument><expr><name>unesc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_code_found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name> <operator>&amp;&amp;</operator> <name>unesc_index</name> <operator>&lt;</operator> <name>UNESCAPED_THRESHOLD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unesc_buffer</name><index>[<expr><name>unesc_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>search_state</name> <operator>&lt;=</operator> <name>ONE_ZERO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>search_state</name> <operator>=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><name>NO_MATCH</name></expr> </then><else>: <expr><name>search_state</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>search_state</name> <operator>==</operator> <name>TWO_ZEROS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>search_state</name> <operator>=</operator> <name>ONE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>unesc_index</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>search_state</name> <operator>=</operator> <name>NO_MATCH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><name>search_state</name> <operator>=</operator> <name>NO_MATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_code_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>unesc_index</name> <operator>&gt;=</operator> <name>UNESCAPED_THRESHOLD</name> <operator>&amp;&amp;</operator>

<name><name>vpc</name><operator>-&gt;</operator><name>prev_start_code</name></name> <operator>==</operator> <operator>(</operator><name>VC1_CODE_FRAME</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vc1_extract_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>unesc_buffer</name></expr></argument>, <argument><expr><name>unesc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unesc_index</name> <operator>&gt;=</operator> <name>UNESCAPED_THRESHOLD</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>start_code_found</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>search_state</name> <operator>==</operator> <name>NO_MATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>vc1dsp</name><operator>.</operator><name>startcode_find_candidate</name></name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>search_state</name> <operator>=</operator> <name>ONE_ZERO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>search_state</name> <operator>==</operator> <name>ONE_ZERO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>search_state</name> <operator>=</operator> <ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><name>NO_MATCH</name></expr> </then><else>: <expr><name>TWO_ZEROS</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>search_state</name> <operator>==</operator> <name>TWO_ZEROS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>search_state</name> <operator>=</operator> <ternary><condition><expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>ONE</name></expr> </then><else>: <expr><name>NO_MATCH</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><name>search_state</name> <operator>=</operator> <name>NO_MATCH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_code_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_code_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vc1_extract_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>unesc_buffer</name></expr></argument>, <argument><expr><name>unesc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>prev_start_code</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unesc_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic_found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b</name> <operator>==</operator> <operator>(</operator><name>VC1_CODE_FRAME</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>||</operator> <name>b</name> <operator>==</operator> <operator>(</operator><name>VC1_CODE_FIELD</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pic_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>pic_found</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <operator>(</operator><name>VC1_CODE_FIELD</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <operator>(</operator><name>VC1_CODE_SLICE</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pic_found</name> <operator>=</operator> <name>b</name> <operator>==</operator> <operator>(</operator><name>VC1_CODE_FRAME</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>frame_start_found</name></name> <operator>=</operator> <name>pic_found</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>unesc_index</name></name> <operator>=</operator> <name>unesc_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>search_state</name></name> <operator>=</operator> <name>search_state</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpc</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>bytes_to_skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>bytes_to_skip</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>!=</operator> <name>END_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>bytes_to_skip</name></name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vc1_split</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>VC1_CODE_SEQHDR</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>VC1_CODE_ENTRYPOINT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>charged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>charged</name> <operator>&amp;&amp;</operator> <call><name>IS_MARKER</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ptr</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>buf</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vc1_parse_init</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VC1ParseContext</name> <modifier>*</modifier></type><name>vpc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>s</name><operator>.</operator><name>slice_context_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>first_pic_header_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>prev_start_code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>bytes_to_skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>unesc_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpc</name><operator>-&gt;</operator><name>search_state</name></name> <operator>=</operator> <name>NO_MATCH</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vc1_init_common</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vpc</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_vc1_parser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_VC1</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VC1ParseContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parser_init</name> <operator>=</operator> <name>vc1_parse_init</name></expr>,

<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>vc1_parse</name></expr>,

<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>ff_parse_close</name></expr>,

<expr><operator>.</operator><name>split</name> <operator>=</operator> <name>vc1_split</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
