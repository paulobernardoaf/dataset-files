<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cook.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audiodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unary.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cookdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONO</name></cpp:macro> <cpp:value>0x1000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEREO</name></cpp:macro> <cpp:value>0x1000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOINT_STEREO</name></cpp:macro> <cpp:value>0x1000003</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_COOK</name></cpp:macro> <cpp:value>0x2000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBBAND_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SUBPACKETS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>cook_gains</name> <block>{

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

}</block></struct></type> <name>cook_gains</name>;</typedef>

<typedef>typedef <type><struct>struct <name>COOKSubpacket</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>ch_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cookversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subbands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>js_subband_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>js_vlc_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples_per_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_numvector_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channel_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>channel_coupling</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>joint_stereo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_subpacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_subpdiv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_subbands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numvector_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>mono_previous_buffer1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>mono_previous_buffer2</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cook_gains</name></type> <name>gains1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cook_gains</name></type> <name>gains2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>gain_1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>gain_2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>gain_3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>gain_4</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>COOKSubpacket</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cook</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>scalar_dequant</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cook</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quant_index</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>subband_coef_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>subband_coef_sign</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>decouple</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cook</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subband</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f2</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>decode_buffer</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_buffer1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_buffer2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>imlt_window</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cook</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer1</name></decl></parameter>,

<parameter><decl><type><name>cook_gains</name> <modifier>*</modifier></type><name>gains_ptr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>previous_buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>interpolate</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cook</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>gain_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gain_index_next</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>saturate_output</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cook</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioDSPContext</name></type> <name>adsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_vectors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples_per_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>random_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>discarded_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>mlt_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name><name>envelope_quant_index</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name><name>sqvh</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>gain_size_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>gain_table</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>decoded_bytes_buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>mono_mdct_output</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2048</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>decode_buffer_1</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>decode_buffer_2</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>decode_buffer_0</name><index>[<expr><literal type="number">1060</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name><name>cplscales</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_subpackets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COOKSubpacket</name></type> <name><name>subpacket</name><index>[<expr><name>MAX_SUBPACKETS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>COOKContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>pow2tab</name><index>[<expr><literal type="number">127</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>rootpow2tab</name><index>[<expr><literal type="number">127</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_pow2table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>exp2_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>M_SQRT2</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>exp2_val</name> <init>= <expr><call><name>powf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">63</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>root_val</name> <init>= <expr><call><name>powf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">63</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>root_val</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pow2tab</name><index>[<expr><literal type="number">63</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>exp2_val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rootpow2tab</name><index>[<expr><literal type="number">63</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>root_val</name> <operator>*</operator> <name><name>exp2_tab</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>exp2_val</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_gain_table</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>gain_size_factor</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>gain_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>pow2tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">48</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>q</name><operator>-&gt;</operator><name>gain_size_factor</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_cook_vlc_tables</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>envelope_quant_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>,

<argument><expr><name><name>envelope_quant_index_huffbits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>envelope_quant_index_huffcodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqvh VLC init\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>sqvh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vhvlcsize_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vhsize_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cvh_huffbits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>cvh_huffcodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>num_subpackets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>joint_stereo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>channel_coupling</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>js_vlc_bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ccpl_huffbits</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>js_vlc_bits</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ccpl_huffcodes</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>js_vlc_bits</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"subpacket %i Joint-stereo VLC used.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VLC tables initialized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_cook_mlt</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mlt_size</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>mlt_window</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>mlt_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>q</name><operator>-&gt;</operator><name>mlt_window</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_sine_window_init</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mlt_window</name></name></expr></argument>, <argument><expr><name>mlt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mlt_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>mlt_window</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal> <operator>/</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>mlt_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">32768.0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mlt_window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MDCT initialized, order = %d.\n"</literal></expr></argument>,

<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>mlt_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_cplscales_table</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>cplscales</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cplscales</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_BYTES_PAD1</name><parameter_list>(<parameter><type><name>bytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(3 - ((bytes) + 3) % 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_BYTES_PAD2</name><parameter_list>(<parameter><type><name>bytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bytes) % 4 + DECODE_BYTES_PAD1(2 * (bytes)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decode_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inbuffer</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>AV_BE2NE32C</name><argument_list>(<argument><expr><literal type="number">0x37c511f2u</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_BE2NE32C</name><argument_list>(<argument><expr><literal type="number">0xf237c511u</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>AV_BE2NE32C</name><argument_list>(<argument><expr><literal type="number">0x11f237c5u</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_BE2NE32C</name><argument_list>(<argument><expr><literal type="number">0xc511f237u</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>obuf</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>inbuffer</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>inbuffer</name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bytes</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>off</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cook_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Deallocating memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mlt_window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>envelope_quant_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>sqvh</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>num_subpackets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>channel_coupling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Memory deallocated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_gain_info</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>gaininfo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gain</name> <init>= <expr><ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">7</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gaininfo</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>gain</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></while>

<while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gaininfo</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_envelope</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>quant_index_table</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>vlc_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>quant_index_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vlc_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>js_subband_start</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_index</name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>js_subband_start</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>vlc_index</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc_index</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vlc_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc_index</name> <operator>&gt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vlc_index</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>envelope_quant_index</name><index>[<expr><name>vlc_index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>envelope_quant_index</name><index>[<expr><name>vlc_index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant_index_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>quant_index_table</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>quant_index_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">63</literal> <operator>||</operator> <name><name>quant_index_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">63</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid quantizer %d at position %d, outside [-63, 63] range\n"</literal></expr></argument>,

<argument><expr><name><name>quant_index_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>categorize</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>quant_index_table</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>category_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>exp_idx</name></decl>, <decl><type ref="prev"/><name>bias</name></decl>, <decl><type ref="prev"/><name>tmpbias1</name></decl>, <decl><type ref="prev"/><name>tmpbias2</name></decl>, <decl><type ref="prev"/><name>bits_left</name></decl>, <decl><type ref="prev"/><name>num_bits</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>exp_index2</name><index>[<expr><literal type="number">102</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>exp_index1</name><index>[<expr><literal type="number">102</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>tmp_categorize_array</name><index>[<expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_categorize_array1_idx</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>numvector_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_categorize_array2_idx</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>numvector_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bits_left</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bits_per_subpacket</name></name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&gt;</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits_left</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>bits_left</name> <operator>-</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name><operator>)</operator> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bias</name> <operator>=</operator> <operator>-</operator><literal type="number">32</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>num_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>exp_idx</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <name><name>quant_index_table</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+</operator> <name>bias</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bits</name> <operator>+=</operator> <name><name>expbits_tab</name><index>[<expr><name>exp_idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>num_bits</name> <operator>&gt;=</operator> <name>bits_left</name> <operator>-</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bias</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>num_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>exp_idx</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name>bias</name> <operator>-</operator> <name><name>quant_index_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bits</name> <operator>+=</operator> <name><name>expbits_tab</name><index>[<expr><name>exp_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp_index1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>exp_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp_index2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>exp_idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmpbias1</name> <operator>=</operator> <name>tmpbias2</name> <operator>=</operator> <name>num_bits</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>numvector_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tmpbias1</name> <operator>+</operator> <name>tmpbias2</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>bits_left</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><operator>-</operator><literal type="number">999999</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>exp_index1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name><name>exp_index1</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name><name>quant_index_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>bias</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp_categorize_array</name><index>[<expr><name>tmp_categorize_array1_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbias1</name> <operator>-=</operator> <name><name>expbits_tab</name><index>[<expr><name><name>exp_index1</name><index>[<expr><name>index</name></expr>]</index></name></expr>]</index></name> <operator>-</operator>

<name><name>expbits_tab</name><index>[<expr><name><name>exp_index1</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>exp_index1</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><literal type="number">999999</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>exp_index2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name><name>exp_index2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name><name>quant_index_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>bias</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp_categorize_array</name><index>[<expr><operator>--</operator><name>tmp_categorize_array2_idx</name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbias2</name> <operator>-=</operator> <name><name>expbits_tab</name><index>[<expr><name><name>exp_index2</name><index>[<expr><name>index</name></expr>]</index></name></expr>]</index></name> <operator>-</operator>

<name><name>expbits_tab</name><index>[<expr><name><name>exp_index2</name><index>[<expr><name>index</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>exp_index2</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>category</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>exp_index2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>numvector_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>category_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp_categorize_array</name><index>[<expr><name>tmp_categorize_array2_idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>expand_category</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>category</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>category_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>num_vectors</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>category_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>category</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>dither_tab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>category</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scalar_dequant_float</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quant_index</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>subband_coef_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>subband_coef_sign</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBBAND_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>subband_coef_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>quant_centroid_tab</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name><name>subband_coef_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subband_coef_sign</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <operator>-</operator><name>f1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>dither_tab</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0x80000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <operator>-</operator><name>f1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mlt_p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>f1</name> <operator>*</operator> <name><name>rootpow2tab</name><index>[<expr><name>quant_index</name> <operator>+</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_SQVH</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>subband_coef_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>subband_coef_sign</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vlc</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vd</name> <operator>=</operator> <name><name>vd_tab</name><index>[<expr><name>category</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vpr_tab</name><index>[<expr><name>category</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>sqvh</name><index>[<expr><name>category</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>sqvh</name><index>[<expr><name>category</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>bits_per_subpacket</name></name> <operator>&lt;</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>vd</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>vlc</name> <operator>*</operator> <name><name>invradix_tab</name><index>[<expr><name>category</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">0x100000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subband_coef_index</name><index>[<expr><name>vd</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>vlc</name> <operator>-</operator> <name>tmp</name> <operator>*</operator> <operator>(</operator><name><name>kmax_tab</name><index>[<expr><name>category</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vd</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>subband_coef_index</name><index>[<expr><name>i</name> <operator>*</operator> <name>vd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>bits_per_subpacket</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>subband_coef_sign</name><index>[<expr><name>i</name> <operator>*</operator> <name>vd</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subband_coef_sign</name><index>[<expr><name>i</name> <operator>*</operator> <name>vd</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>subband_coef_sign</name><index>[<expr><name>i</name> <operator>*</operator> <name>vd</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_vectors</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>category</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>quant_index_table</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>subband_coef_index</name><index>[<expr><name>SUBBAND_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>subband_coef_sign</name><index>[<expr><name>SUBBAND_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>category</name><index>[<expr><name>band</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>category</name><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unpack_SQVH</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>category</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>, <argument><expr><name>subband_coef_index</name></expr></argument>, <argument><expr><name>subband_coef_sign</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>category</name><index>[<expr><name>band</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>subband_coef_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subband_coef_index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>subband_coef_sign</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subband_coef_sign</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>scalar_dequant</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>quant_index_table</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name>subband_coef_index</name></expr></argument>, <argument><expr><name>subband_coef_sign</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>mlt_buffer</name><index>[<expr><name>band</name> <operator>*</operator> <name>SUBBAND_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name> <operator>*</operator> <name>SUBBAND_SIZE</name> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mono_decode</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>category_index</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>category</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>quant_index_table</name><index>[<expr><literal type="number">102</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_envelope</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>quant_index_table</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>num_vectors</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>log2_numvector_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>categorize</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>quant_index_table</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>category_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_category</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>category_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>total_subbands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>category</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>decode_vectors</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>quant_index_table</name></expr></argument>, <argument><expr><name>mlt_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interpolate_float</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>gain_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gain_index_next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fc1</name></decl>, <decl><type ref="prev"/><name>fc2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fc1</name> <operator>=</operator> <name><name>pow2tab</name><index>[<expr><name>gain_index</name> <operator>+</operator> <literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gain_index</name> <operator>==</operator> <name>gain_index_next</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>gain_size_factor</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>fc1</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>fc2</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>gain_table</name><index>[<expr><literal type="number">15</literal> <operator>+</operator> <operator>(</operator><name>gain_index_next</name> <operator>-</operator> <name>gain_index</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>gain_size_factor</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>fc1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fc1</name> <operator>*=</operator> <name>fc2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imlt_window_float</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>inbuffer</name></decl></parameter>,

<parameter><decl><type><name>cook_gains</name> <modifier>*</modifier></type><name>gains_ptr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>previous_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fc</name> <init>= <expr><name><name>pow2tab</name><index>[<expr><name><name>gains_ptr</name><operator>-&gt;</operator><name>previous</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">63</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>inbuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>inbuffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>fc</name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>mlt_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator>

<name><name>previous_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>mlt_window</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imlt_gain</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>inbuffer</name></decl></parameter>,

<parameter><decl><type><name>cook_gains</name> <modifier>*</modifier></type><name>gains_ptr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>previous_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer0</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>mono_mdct_output</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer1</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>mono_mdct_output</name></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><operator>.</operator><name>imdct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>mono_mdct_output</name></name></expr></argument>, <argument><expr><name>inbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>imlt_window</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>buffer1</name></expr></argument>, <argument><expr><name>gains_ptr</name></expr></argument>, <argument><expr><name>previous_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>gains_ptr</name><operator>-&gt;</operator><name>now</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>gains_ptr</name><operator>-&gt;</operator><name>now</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>interpolate</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer1</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>gain_size_factor</name></name> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>gains_ptr</name><operator>-&gt;</operator><name>now</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>gains_ptr</name><operator>-&gt;</operator><name>now</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>previous_buffer</name></expr></argument>, <argument><expr><name>buffer0</name></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>previous_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decouple_info</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>decouple_tab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vlc</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>cplband</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>js_subband_start</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>cplband</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>subbands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vlc</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>decouple_tab</name><index>[<expr><name>start</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>channel_coupling</name><operator>.</operator><name>table</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>channel_coupling</name><operator>.</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>js_vlc_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>js_vlc_bits</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decouple value too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>decouple_tab</name><index>[<expr><name>start</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decouple_float</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subband</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f2</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>decode_buffer</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_buffer1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_buffer2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>tmp_idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBBAND_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp_idx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>js_subband_start</name></name> <operator>+</operator> <name>subband</name><operator>)</operator> <operator>*</operator> <name>SUBBAND_SIZE</name><operator>)</operator> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlt_buffer1</name><index>[<expr><name>SUBBAND_SIZE</name> <operator>*</operator> <name>subband</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>f1</name> <operator>*</operator> <name><name>decode_buffer</name><index>[<expr><name>tmp_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlt_buffer2</name><index>[<expr><name>SUBBAND_SIZE</name> <operator>*</operator> <name>subband</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>f2</name> <operator>*</operator> <name><name>decode_buffer</name><index>[<expr><name>tmp_idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>joint_decode</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_buffer_left</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>mlt_buffer_right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>decouple_tab</name><index>[<expr><name>SUBBAND_SIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>decode_buffer</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_0</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>cpl_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cplscale</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>decode_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mlt_buffer_left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mlt_buffer_left</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mlt_buffer_right</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mlt_buffer_right</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decouple_info</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>decouple_tab</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mono_decode</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>decode_buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>js_subband_start</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBBAND_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mlt_buffer_left</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">20</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>decode_buffer</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">40</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlt_buffer_right</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">20</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>decode_buffer</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">40</literal> <operator>+</operator> <literal type="number">20</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>js_vlc_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>js_subband_start</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cpl_tmp</name> <operator>=</operator> <name><name>cplband</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>-=</operator> <name><name>decouple_tab</name><index>[<expr><name>cpl_tmp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cplscale</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>cplscales</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>js_vlc_bits</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>cplscale</name><index>[<expr><name><name>decouple_tab</name><index>[<expr><name>cpl_tmp</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <name><name>cplscale</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>decouple</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>decode_buffer</name></expr></argument>,

<argument><expr><name>mlt_buffer_left</name></expr></argument>, <argument><expr><name>mlt_buffer_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>js_vlc_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_bytes_and_gain</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inbuffer</name></decl></parameter>,

<parameter><decl><type><name>cook_gains</name> <modifier>*</modifier></type><name>gains_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>decode_bytes</name><argument_list>(<argument><expr><name>inbuffer</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bits_per_subpacket</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name> <operator>+</operator> <name>offset</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bits_per_subpacket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_gain_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>gains_ptr</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>gains_ptr</name><operator>-&gt;</operator><name>now</name></name></expr></argument>, <argument><expr><name><name>gains_ptr</name><operator>-&gt;</operator><name>previous</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>saturate_output_float</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>adsp</name><operator>.</operator><name>vector_clipf</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>mono_mdct_output</name></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr></argument>,

<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mlt_compensate_output</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>decode_buffer</name></decl></parameter>,

<parameter><decl><type><name>cook_gains</name> <modifier>*</modifier></type><name>gains_ptr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>previous_buffer</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>imlt_gain</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>decode_buffer</name></expr></argument>, <argument><expr><name>gains_ptr</name></expr></argument>, <argument><expr><name>previous_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>saturate_output</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_subpacket</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>COOKSubpacket</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inbuffer</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>outbuffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sub_packet_size</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_bytes_and_gain</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>inbuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>gains1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>joint_stereo</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>joint_decode</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_1</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_2</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mono_decode</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_1</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_bytes_and_gain</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>inbuffer</name> <operator>+</operator> <name>sub_packet_size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>gains2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>mono_decode</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_2</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mlt_compensate_output</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>gains1</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mono_previous_buffer1</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>outbuffer</name></expr> ?</condition><then> <expr><name><name>outbuffer</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>ch_idx</name></name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>joint_stereo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mlt_compensate_output</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>gains1</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mono_previous_buffer2</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>outbuffer</name></expr> ?</condition><then> <expr><name><name>outbuffer</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>ch_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mlt_compensate_output</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decode_buffer_2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>gains2</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mono_previous_buffer2</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>outbuffer</name></expr> ?</condition><then> <expr><name><name>outbuffer</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>ch_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cook_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>discarded_packets</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>num_subpackets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>buf</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>-</operator> <name><name>q</name><operator>-&gt;</operator><name>num_subpackets</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>-=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"frame subpacket size total &gt; avctx-&gt;block_align!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>num_subpackets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits_per_subpacket</name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator>

<name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits_per_subpdiv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ch_idx</name> <operator>=</operator> <name>chidx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"subpacket[%i] size %i js %i %i block_align %i\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>joint_stereo</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_subpacket</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chidx</name> <operator>+=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"subpacket[%i] %i %i\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>discarded_packets</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>discarded_packets</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_cook_context</name><parameter_list>(<parameter><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_dlog(q-&gt;avctx, " %s = %d\n", a, b);</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"COOKextradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"cookversion=%x\n"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cookversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cookversion</name> <operator>&gt;</operator> <name>STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"js_subband_start"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>js_subband_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"js_vlc_bits"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>js_vlc_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"COOKContext\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"nb_channels"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"bit_rate"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>q</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"sample_rate"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"samples_per_channel"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>samples_per_channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"subbands"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>subbands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"js_subband_start"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>js_subband_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"log2_numvector_size"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>log2_numvector_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"numvector_size"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>numvector_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINT</name><argument_list>(<argument><expr><literal type="string">"total_subbands"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>total_subbands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cook_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>COOKContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channel_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples_per_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Necessary extradata missing!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"codecdata_length=%d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audiodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>cookversion</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_per_frame</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>subbands</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_subband_start</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_subband_start</name> <operator>&gt;=</operator> <literal type="number">51</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"js_subband_start %d is too large\n"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_subband_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_vlc_bits</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>samples_per_channel</name> <operator>=</operator> <name>samples_per_frame</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>bits_per_subpacket</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>log2_numvector_size</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>total_subbands</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>subbands</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>num_channels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"subpacket[%i].cookversion=%x\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>cookversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>joint_stereo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>cookversion</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MONO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Container channels != 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MONO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STEREO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>bits_per_subpdiv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>num_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"STEREO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JOINT_STEREO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Container channels != 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"JOINT_STEREO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>total_subbands</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>subbands</name> <operator>+</operator>

<name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_subband_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>joint_stereo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>num_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>samples_per_channel</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>log2_numvector_size</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>samples_per_channel</name> <operator>&gt;</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>log2_numvector_size</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MC_COOK</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"MULTI_CHANNEL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_mask</name> <operator>|=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>channel_mask</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>channel_mask</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>total_subbands</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>subbands</name> <operator>+</operator>

<name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_subband_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>joint_stereo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>num_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>samples_per_channel</name> <operator>=</operator> <name>samples_per_frame</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>samples_per_channel</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>log2_numvector_size</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>samples_per_channel</name> <operator>&gt;</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>log2_numvector_size</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>samples_per_channel</name> <operator>=</operator> <name>samples_per_frame</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Cook version %d"</literal></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>cookversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>samples_per_channel</name> <operator>!=</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"different number of samples per channel!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>samples_per_channel</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>numvector_size</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>log2_numvector_size</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>total_subbands</name> <operator>&gt;</operator> <literal type="number">53</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"total_subbands &gt; 53"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_vlc_bits</name> <operator>&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_vlc_bits</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>joint_stereo</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"js_vlc_bits = %d, only &gt;= %d and &lt;= 6 allowed!\n"</literal></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>js_vlc_bits</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>joint_stereo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>subbands</name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"subbands &gt; 50"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>subbands</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"subbands = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name><name>gains1</name><operator>.</operator><name>now</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>gain_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name><name>gains1</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>gain_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name><name>gains2</name><operator>.</operator><name>now</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>gain_3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name><name>gains2</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>gain_4</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>num_subpackets</name></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>subpacket</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>num_channels</name> <operator>&gt;</operator> <name><name>q</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many subpackets %d for channels %d\n"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>num_subpackets</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>num_subpackets</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>MAX_SUBPACKETS</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"subpackets &gt; %d"</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>MAX_SUBPACKETS</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name> <operator>!=</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name> <operator>!=</operator> <literal type="number">512</literal> <operator>&amp;&amp;</operator>

<name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"samples_per_channel = %d"</literal></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>samples_per_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_pow2table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_gain_table</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_cplscales_table</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_cook_vlc_tables</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name> <operator>=</operator>

<call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name>

<operator>+</operator> <call><name>DECODE_BYTES_PAD1</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call>

<operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_cook_mlt</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>scalar_dequant</name></name> <operator>=</operator> <name>scalar_dequant_float</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>decouple</name></name> <operator>=</operator> <name>decouple_float</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>imlt_window</name></name> <operator>=</operator> <name>imlt_window_float</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>interpolate</name></name> <operator>=</operator> <name>interpolate_float</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>saturate_output</name></name> <operator>=</operator> <name>saturate_output_float</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>channel_mask</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_STEREO</name></expr> </then><else>: <expr><name>AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>dump_cook_context</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_cook_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cook"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Cook / Cooker / Gecko (RealAudio G2)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_COOK</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>COOKContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cook_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>cook_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>cook_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
