<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\mpegvideoencdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideoencdsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_norm1_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sv</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sum</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixv</name> <init>= <expr><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>vec_msum</name><argument_list>(<argument><expr><name>pixv</name></expr></argument>, <argument><expr><name>pixv</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sv</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_norm1_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sv</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sum</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixl</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixr</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixv</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>pixl</name></expr></argument>, <argument><expr><name>pixr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>vec_msum</name><argument_list>(<argument><expr><name>pixv</name></expr></argument>, <argument><expr><name>pixv</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sv</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_VSX</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_sum_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sad</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumdiffs</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t1</name> <init>= <expr><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sad</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_sum_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm</name> <init>= <expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sad</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumdiffs</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixl</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixr</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t1</name> <init>= <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>pixl</name></expr></argument>, <argument><expr><name>pixr</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sad</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpegvideoencdsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>MpegvideoEncDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_norm1</name></name> <operator>=</operator> <name>pix_norm1_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_sum</name></name> <operator>=</operator> <name>pix_sum_altivec</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
