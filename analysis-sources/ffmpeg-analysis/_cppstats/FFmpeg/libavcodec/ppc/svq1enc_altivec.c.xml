<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\svq1enc_altivec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/svq1enc.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssd_int8_vs_int16_altivec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>intptr_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size16</name> <init>= <expr><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>vpix1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>vpix2</name></decl>, <decl><type ref="prev"/><name>vdiff</name></decl>, <decl><type ref="prev"/><name>vpix1l</name></decl>, <decl><type ref="prev"/><name>vpix1h</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>vscore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>score</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>u</name> <init>= <expr><block>{ <expr><operator>.</operator><name>vscore</name> <operator>=</operator> <macro><name>vec_splat_s32</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</union>

<while>while <condition>(<expr><name>size16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vpix1</name> <operator>=</operator> <call><name>vec_unaligned_load</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vpix2</name> <operator>=</operator> <call><name>vec_unaligned_load</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vpix1h</name> <operator>=</operator> <call><name>vec_unpackh</name><argument_list>(<argument><expr><name>vpix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vdiff</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vpix1h</name></expr></argument>, <argument><expr><name>vpix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vpix1l</name> <operator>=</operator> <call><name>vec_unpackl</name><argument_list>(<argument><expr><name>vpix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vpix2</name> <operator>=</operator> <call><name>vec_unaligned_load</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>vscore</name></name> <operator>=</operator> <call><name>vec_msum</name><argument_list>(<argument><expr><name>vdiff</name></expr></argument>, <argument><expr><name>vdiff</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>vscore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vdiff</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vpix1l</name></expr></argument>, <argument><expr><name>vpix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>vscore</name></name> <operator>=</operator> <call><name>vec_msum</name><argument_list>(<argument><expr><name>vdiff</name></expr></argument>, <argument><expr><name>vdiff</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>vscore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size16</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>vscore</name></name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>vscore</name></name></expr></argument>, <argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>%=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>score</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>pix1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>pix1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name><name>u</name><operator>.</operator><name>score</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_svq1enc_init_ppc</name><parameter_list>(<parameter><decl><type><name>SVQ1EncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ssd_int8_vs_int16</name></name> <operator>=</operator> <name>ssd_int8_vs_int16_altivec</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
