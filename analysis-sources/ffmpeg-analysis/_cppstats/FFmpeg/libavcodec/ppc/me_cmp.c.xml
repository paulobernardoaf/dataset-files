<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\me_cmp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/me_cmp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PERM</name><parameter_list>(<parameter><type><name>per1</name></type></parameter>, <parameter><type><name>per2</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{per1 = vec_lvsl(0, pix);per2 = vec_add(per1, vec_splat_u8(1));}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_PIX</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>iv</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>, <parameter><type><name>per1</name></type></parameter>, <parameter><type><name>per2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{vector unsigned char pix2l = vec_ld(0, pix);vector unsigned char pix2r = vec_ld(16, pix);v = vec_perm(pix2l, pix2r, per1);iv = vec_perm(pix2l, pix2r, per2);}</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PERM</name><parameter_list>(<parameter><type><name>per1</name></type></parameter>, <parameter><type><name>per2</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_PIX</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>iv</name></type></parameter>, <parameter><type><name>pix</name></type></parameter>, <parameter><type><name>per1</name></type></parameter>, <parameter><type><name>per2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{v = vec_vsx_ld(0, pix);iv = vec_vsx_ld(1, pix);}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sad16_x2_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sad</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumdiffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm1</name></decl>, <decl><type ref="prev"/><name>perm2</name></decl>, <decl><type ref="prev"/><name>pix2v</name></decl>, <decl><type ref="prev"/><name>pix2iv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_PERM</name><argument_list>(<argument><expr><name>perm1</name></expr></argument>, <argument><expr><name>perm2</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pix1v</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD_PIX</name><argument_list>(<argument><expr><name>pix2v</name></expr></argument>, <argument><expr><name>pix2iv</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>perm1</name></expr></argument>, <argument><expr><name>perm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>avgv</name> <init>= <expr><call><name>vec_avg</name><argument_list>(<argument><expr><name>pix2v</name></expr></argument>, <argument><expr><name>pix2iv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t5</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vec_max</name><argument_list>(<argument><expr><name>pix1v</name></expr></argument>, <argument><expr><name>avgv</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vec_min</name><argument_list>(<argument><expr><name>pix1v</name></expr></argument>, <argument><expr><name>avgv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sad</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sad16_y2_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pix1v</name></decl>, <decl><type ref="prev"/><name>pix3v</name></decl>, <decl><type ref="prev"/><name>avgv</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sad</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumdiffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix3</name> <init>= <expr><name>pix2</name> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pix2v</name> <init>= <expr><call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pix1v</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix3v</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avgv</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>(<argument><expr><name>pix2v</name></expr></argument>, <argument><expr><name>pix3v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t5</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vec_max</name><argument_list>(<argument><expr><name>pix1v</name></expr></argument>, <argument><expr><name>avgv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_min</name><argument_list>(<argument><expr><name>pix1v</name></expr></argument>, <argument><expr><name>avgv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2v</name> <operator>=</operator> <name>pix3v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix3</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sad</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sad16_xy2_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix3</name> <init>= <expr><name>pix2</name> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>two</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>avgv</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pix1v</name></decl>, <decl><type ref="prev"/><name>pix3v</name></decl>, <decl><type ref="prev"/><name>pix3iv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>pix3lv</name></decl>, <decl><type ref="prev"/><name>pix3hv</name></decl>, <decl><type ref="prev"/><name>pix3ilv</name></decl>, <decl><type ref="prev"/><name>pix3ihv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>avghv</name></decl>, <decl><type ref="prev"/><name>avglv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sad</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumdiffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm1</name></decl>, <decl><type ref="prev"/><name>perm2</name></decl>, <decl><type ref="prev"/><name>pix2v</name></decl>, <decl><type ref="prev"/><name>pix2iv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_PERM</name><argument_list>(<argument><expr><name>perm1</name></expr></argument>, <argument><expr><name>perm2</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_PIX</name><argument_list>(<argument><expr><name>pix2v</name></expr></argument>, <argument><expr><name>pix2iv</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>perm1</name></expr></argument>, <argument><expr><name>perm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>pix2hv</name> <init>=

<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix2v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>pix2lv</name> <init>=

<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix2v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>pix2ihv</name> <init>=

<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix2iv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>pix2ilv</name> <init>=

<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix2iv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>t1</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>pix2hv</name></expr></argument>, <argument><expr><name>pix2ihv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>t2</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>pix2lv</name></expr></argument>, <argument><expr><name>pix2ilv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pix1v</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD_PIX</name><argument_list>(<argument><expr><name>pix3v</name></expr></argument>, <argument><expr><name>pix3iv</name></expr></argument>, <argument><expr><name>pix3</name></expr></argument>, <argument><expr><name>perm1</name></expr></argument>, <argument><expr><name>perm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix3hv</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix3v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix3lv</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix3v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix3ihv</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix3iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix3ilv</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix3iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pix3hv</name></expr></argument>, <argument><expr><name>pix3ihv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pix3lv</name></expr></argument>, <argument><expr><name>pix3ilv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avghv</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><call><name>vec_add</name><argument_list>(<argument><expr><call><name>vec_add</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avglv</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><call><name>vec_add</name><argument_list>(<argument><expr><call><name>vec_add</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avgv</name> <operator>=</operator> <call><name>vec_pack</name><argument_list>(<argument><expr><name>avghv</name></expr></argument>, <argument><expr><name>avglv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t5</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vec_max</name><argument_list>(<argument><expr><name>pix1v</name></expr></argument>, <argument><expr><name>avgv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_min</name><argument_list>(<argument><expr><name>pix1v</name></expr></argument>, <argument><expr><name>avgv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix3</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sad</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sad16_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sad</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumdiffs</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t1</name> <init>=<expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t2</name> <init>= <expr><call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t3</name> <init>= <expr><call><name>vec_max</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t4</name> <init>= <expr><call><name>vec_min</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t5</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sad</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sad8_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permclear</name> <init>=

<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sad</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumdiffs</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pix1l</name> <init>= <expr><call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pix2l</name> <init>= <expr><call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t1</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><name>pix1l</name></expr></argument>, <argument><expr><name>permclear</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t2</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><name>pix2l</name></expr></argument>, <argument><expr><name>permclear</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t3</name> <init>= <expr><call><name>vec_max</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t4</name> <init>= <expr><call><name>vec_min</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t5</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sad</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>sad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sad</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumdiffs</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumdiffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sse8_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>permclear</name> <init>=

<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sum</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumsqr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t1</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permclear</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t2</name> <init>= <expr><call><name>vec_and</name><argument_list>(<argument><expr><call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>permclear</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t3</name> <init>= <expr><call><name>vec_max</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t4</name> <init>= <expr><call><name>vec_min</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t5</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_msum</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumsqr</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumsqr</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumsqr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumsqr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sse16_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>sum</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>sumsqr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t1</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t2</name> <init>= <expr><call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t3</name> <init>= <expr><call><name>vec_max</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t4</name> <init>= <expr><call><name>vec_min</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>t5</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_msum</name><argument_list>(<argument><expr><name>t5</name></expr></argument>, <argument><expr><name>t5</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sumsqr</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumsqr</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>sumsqr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>sumsqr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hadamard8_diff8x8_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vzero</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>,

<decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vprod1</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vprod2</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vprod3</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm1</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm2</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{ <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,

<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm3</name> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{ <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONEITERBUTTERFLY</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ register vector unsigned char srcO = unaligned_load(stride * i, src); register vector unsigned char dstO = unaligned_load(stride * i, dst); register vector signed short srcV = (vector signed short) VEC_MERGEH((vector signed char) vzero, (vector signed char) srcO); register vector signed short dstV = (vector signed short) VEC_MERGEH((vector signed char) vzero, (vector signed char) dstO); register vector signed short but0 = vec_sub(srcV, dstV); register vector signed short op1 = vec_perm(but0, but0, perm1); register vector signed short but1 = vec_mladd(but0, vprod1, op1); register vector signed short op2 = vec_perm(but1, but1, perm2); register vector signed short but2 = vec_mladd(but1, vprod2, op2); register vector signed short op3 = vec_perm(but2, but2, perm3); res = vec_mladd(but2, vprod3, op3); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>temp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>temp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>temp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>temp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONEITERBUTTERFLY</name></cpp:undef>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vsum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0B</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line0</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2B</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line0</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1B</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3B</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4B</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line4</name></expr></argument>, <argument><expr><name>line6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6B</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line4</name></expr></argument>, <argument><expr><name>line6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5B</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line5</name></expr></argument>, <argument><expr><name>line7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7B</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line5</name></expr></argument>, <argument><expr><name>line7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0C</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line0B</name></expr></argument>, <argument><expr><name>line4B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4C</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line0B</name></expr></argument>, <argument><expr><name>line4B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1C</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line1B</name></expr></argument>, <argument><expr><name>line5B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5C</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line1B</name></expr></argument>, <argument><expr><name>line5B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2C</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line2B</name></expr></argument>, <argument><expr><name>line6B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6C</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line2B</name></expr></argument>, <argument><expr><name>line6B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3C</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line3B</name></expr></argument>, <argument><expr><name>line7B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7C</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line3B</name></expr></argument>, <argument><expr><name>line7B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line0C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line1C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line2C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line3C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line4C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line5C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line6C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line7C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hadamard8_diff16x8_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name>

<name>temp0</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v0"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp1</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v1"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp2</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v2"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp3</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v3"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp4</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v4"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp5</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v5"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp6</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v6"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp7</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v7"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name>

<name>temp0S</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v8"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp1S</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v9"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp2S</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v10"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp3S</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v11"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp4S</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v12"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp5S</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v13"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp6S</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v14"</literal></expr></argument>)</argument_list></decl>,

<decl><type ref="prev"/><name>temp7S</name> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v15"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <name>vzero</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v31"</literal></expr></argument>)</argument_list> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name> <name>vprod1</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v16"</literal></expr></argument>)</argument_list> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name> <name>vprod2</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v17"</literal></expr></argument>)</argument_list> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name> <name>vprod3</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v18"</literal></expr></argument>)</argument_list> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name><operator>)</operator> <block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <name>perm1</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v19"</literal></expr></argument>)</argument_list> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <name>perm2</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v20"</literal></expr></argument>)</argument_list> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{ <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,

<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <name>perm3</name></type> <name>__asm__</name> <argument_list>(<argument><expr><literal type="string">"v21"</literal></expr></argument>)</argument_list> <init>=

<expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<block>{ <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONEITERBUTTERFLY</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>res1</name></type></parameter>, <parameter><type><name>res2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ register vector unsigned char srcO __asm__ ("v22") = unaligned_load(stride * i, src); register vector unsigned char dstO __asm__ ("v23") = unaligned_load(stride * i, dst); register vector signed short srcV __asm__ ("v24") = (vector signed short) VEC_MERGEH((vector signed char) vzero, (vector signed char) srcO); register vector signed short dstV __asm__ ("v25") = (vector signed short) VEC_MERGEH((vector signed char) vzero, (vector signed char) dstO); register vector signed short srcW __asm__ ("v26") = (vector signed short) VEC_MERGEL((vector signed char) vzero, (vector signed char) srcO); register vector signed short dstW __asm__ ("v27") = (vector signed short) VEC_MERGEL((vector signed char) vzero, (vector signed char) dstO); register vector signed short but0 __asm__ ("v28") = vec_sub(srcV, dstV); register vector signed short but0S __asm__ ("v29") = vec_sub(srcW, dstW); register vector signed short op1 __asm__ ("v30") = vec_perm(but0, but0, perm1); register vector signed short but1 __asm__ ("v22") = vec_mladd(but0, vprod1, op1); register vector signed short op1S __asm__ ("v23") = vec_perm(but0S, but0S, perm1); register vector signed short but1S __asm__ ("v24") = vec_mladd(but0S, vprod1, op1S); register vector signed short op2 __asm__ ("v25") = vec_perm(but1, but1, perm2); register vector signed short but2 __asm__ ("v26") = vec_mladd(but1, vprod2, op2); register vector signed short op2S __asm__ ("v27") = vec_perm(but1S, but1S, perm2); register vector signed short but2S __asm__ ("v28") = vec_mladd(but1S, vprod2, op2S); register vector signed short op3 __asm__ ("v29") = vec_perm(but2, but2, perm3); register vector signed short op3S __asm__ ("v30") = vec_perm(but2S, but2S, perm3); res1 = vec_mladd(but2, vprod3, op3); res2 = vec_mladd(but2S, vprod3, op3S); }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp0S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp1S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp2S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp3S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp4S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>temp5</name></expr></argument>, <argument><expr><name>temp5S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp6S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ONEITERBUTTERFLY</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>temp7</name></expr></argument>, <argument><expr><name>temp7S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONEITERBUTTERFLY</name></cpp:undef>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vsum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>temp5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp6</name></expr></argument>, <argument><expr><name>temp7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0B</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line0</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2B</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line0</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1B</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3B</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4B</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line4</name></expr></argument>, <argument><expr><name>line6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6B</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line4</name></expr></argument>, <argument><expr><name>line6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5B</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line5</name></expr></argument>, <argument><expr><name>line7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7B</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line5</name></expr></argument>, <argument><expr><name>line7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0C</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line0B</name></expr></argument>, <argument><expr><name>line4B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4C</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line0B</name></expr></argument>, <argument><expr><name>line4B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1C</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line1B</name></expr></argument>, <argument><expr><name>line5B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5C</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line1B</name></expr></argument>, <argument><expr><name>line5B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2C</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line2B</name></expr></argument>, <argument><expr><name>line6B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6C</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line2B</name></expr></argument>, <argument><expr><name>line6B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3C</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line3B</name></expr></argument>, <argument><expr><name>line7B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7C</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line3B</name></expr></argument>, <argument><expr><name>line7B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0S</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp0S</name></expr></argument>, <argument><expr><name>temp1S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1S</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp0S</name></expr></argument>, <argument><expr><name>temp1S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2S</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp2S</name></expr></argument>, <argument><expr><name>temp3S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3S</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp2S</name></expr></argument>, <argument><expr><name>temp3S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4S</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp4S</name></expr></argument>, <argument><expr><name>temp5S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5S</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp4S</name></expr></argument>, <argument><expr><name>temp5S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6S</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>temp6S</name></expr></argument>, <argument><expr><name>temp7S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7S</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>temp6S</name></expr></argument>, <argument><expr><name>temp7S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0BS</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line0S</name></expr></argument>, <argument><expr><name>line2S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2BS</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line0S</name></expr></argument>, <argument><expr><name>line2S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1BS</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line1S</name></expr></argument>, <argument><expr><name>line3S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3BS</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line1S</name></expr></argument>, <argument><expr><name>line3S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4BS</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line4S</name></expr></argument>, <argument><expr><name>line6S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6BS</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line4S</name></expr></argument>, <argument><expr><name>line6S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5BS</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line5S</name></expr></argument>, <argument><expr><name>line7S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7BS</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line5S</name></expr></argument>, <argument><expr><name>line7S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line0CS</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line0BS</name></expr></argument>, <argument><expr><name>line4BS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line4CS</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line0BS</name></expr></argument>, <argument><expr><name>line4BS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line1CS</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line1BS</name></expr></argument>, <argument><expr><name>line5BS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line5CS</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line1BS</name></expr></argument>, <argument><expr><name>line5BS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line2CS</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line2BS</name></expr></argument>, <argument><expr><name>line6BS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line6CS</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line2BS</name></expr></argument>, <argument><expr><name>line6BS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line3CS</name> <init>= <expr><call><name>vec_add</name><argument_list>(<argument><expr><name>line3BS</name></expr></argument>, <argument><expr><name>line7BS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>line7CS</name> <init>= <expr><call><name>vec_sub</name><argument_list>(<argument><expr><name>line3BS</name></expr></argument>, <argument><expr><name>line7BS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line0C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line1C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line2C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line3C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line4C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line5C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line6C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line7C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line0CS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line1CS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line2CS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line3CS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line4CS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line5CS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line6CS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sum4s</name><argument_list>(<argument><expr><call><name>vec_abs</name><argument_list>(<argument><expr><name>line7CS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sums</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>vzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_ste</name><argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hadamard8_diff16_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><call><name>hadamard8_diff16x8_altivec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>hadamard8_diff16x8_altivec</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>score</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_me_cmp_init_ppc</name><parameter_list>(<parameter><decl><type><name>MECmpContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sad16_x2_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>sad16_y2_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>sad16_xy2_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sad16_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sad8_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sad16_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sad8_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sse16_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sse8_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>hadamard8_diff16_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hadamard8_diff8x8_altivec</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
