<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\h264qpel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264qpel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp_altivec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_OP_U8_ALTIVEC</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = s</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVG_OP_U8_ALTIVEC</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>d = vec_avg(dst, s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_U8_ALTIVEC</name></cpp:macro> <cpp:value>PUT_OP_U8_ALTIVEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_h_lowpass_altivec</name></cpp:macro> <cpp:value>put_h264_qpel16_h_lowpass_altivec</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_h_lowpass_num</name></cpp:macro> <cpp:value>altivec_put_h264_qpel16_h_lowpass_num</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_v_lowpass_altivec</name></cpp:macro> <cpp:value>put_h264_qpel16_v_lowpass_altivec</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_v_lowpass_num</name></cpp:macro> <cpp:value>altivec_put_h264_qpel16_v_lowpass_num</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_hv_lowpass_altivec</name></cpp:macro> <cpp:value>put_h264_qpel16_hv_lowpass_altivec</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_hv_lowpass_num</name></cpp:macro> <cpp:value>altivec_put_h264_qpel16_hv_lowpass_num</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_U8_ALTIVEC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_h_lowpass_altivec</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_h_lowpass_num</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_v_lowpass_altivec</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_v_lowpass_num</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_hv_lowpass_altivec</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_hv_lowpass_num</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_U8_ALTIVEC</name></cpp:macro> <cpp:value>AVG_OP_U8_ALTIVEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_h_lowpass_altivec</name></cpp:macro> <cpp:value>avg_h264_qpel16_h_lowpass_altivec</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_h_lowpass_num</name></cpp:macro> <cpp:value>altivec_avg_h264_qpel16_h_lowpass_num</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_v_lowpass_altivec</name></cpp:macro> <cpp:value>avg_h264_qpel16_v_lowpass_altivec</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_v_lowpass_num</name></cpp:macro> <cpp:value>altivec_avg_h264_qpel16_v_lowpass_num</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_hv_lowpass_altivec</name></cpp:macro> <cpp:value>avg_h264_qpel16_hv_lowpass_altivec</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_h264_qpel16_hv_lowpass_num</name></cpp:macro> <cpp:value>altivec_avg_h264_qpel16_hv_lowpass_num</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_U8_ALTIVEC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_h_lowpass_altivec</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_h_lowpass_num</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_v_lowpass_altivec</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_v_lowpass_num</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_hv_lowpass_altivec</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREFIX_h264_qpel16_hv_lowpass_num</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MC</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>CODETYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##h264_qpel ##SIZE ##_mc00_ ##CODETYPE (uint8_t *dst, const uint8_t *src, ptrdiff_t stride){ff_ ##OPNAME ##pixels ##SIZE ##_ ##CODETYPE(dst, src, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc10_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){ DECLARE_ALIGNED(16, uint8_t, half)[SIZE*SIZE];put_h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(half, src, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, src, half, stride, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc20_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(dst, src, stride, stride);}static void OPNAME ##h264_qpel ##SIZE ##_mc30_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, half)[SIZE*SIZE];put_h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(half, src, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, src+1, half, stride, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc01_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, half)[SIZE*SIZE];put_h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(half, src, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, src, half, stride, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc02_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(dst, src, stride, stride);}static void OPNAME ##h264_qpel ##SIZE ##_mc03_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, half)[SIZE*SIZE];put_h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(half, src, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, src+stride, half, stride, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc11_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, halfH)[SIZE*SIZE];DECLARE_ALIGNED(16, uint8_t, halfV)[SIZE*SIZE];put_h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(halfH, src, SIZE, stride);put_h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(halfV, src, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, halfH, halfV, stride, SIZE, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc31_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, halfH)[SIZE*SIZE];DECLARE_ALIGNED(16, uint8_t, halfV)[SIZE*SIZE];put_h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(halfH, src, SIZE, stride);put_h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(halfV, src+1, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, halfH, halfV, stride, SIZE, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc13_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, halfH)[SIZE*SIZE];DECLARE_ALIGNED(16, uint8_t, halfV)[SIZE*SIZE];put_h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(halfH, src + stride, SIZE, stride);put_h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(halfV, src, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, halfH, halfV, stride, SIZE, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc33_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, halfH)[SIZE*SIZE];DECLARE_ALIGNED(16, uint8_t, halfV)[SIZE*SIZE];put_h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(halfH, src + stride, SIZE, stride);put_h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(halfV, src+1, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, halfH, halfV, stride, SIZE, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc22_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, int16_t, tmp)[SIZE*(SIZE+8)];OPNAME ##h264_qpel ##SIZE ##_hv_lowpass_ ##CODETYPE(dst, tmp, src, stride, SIZE, stride);}static void OPNAME ##h264_qpel ##SIZE ##_mc21_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, halfH)[SIZE*SIZE];DECLARE_ALIGNED(16, uint8_t, halfHV)[SIZE*SIZE];DECLARE_ALIGNED(16, int16_t, tmp)[SIZE*(SIZE+8)];put_h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(halfH, src, SIZE, stride);put_h264_qpel ##SIZE ##_hv_lowpass_ ##CODETYPE(halfHV, tmp, src, SIZE, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, halfH, halfHV, stride, SIZE, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc23_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, halfH)[SIZE*SIZE];DECLARE_ALIGNED(16, uint8_t, halfHV)[SIZE*SIZE];DECLARE_ALIGNED(16, int16_t, tmp)[SIZE*(SIZE+8)];put_h264_qpel ##SIZE ##_h_lowpass_ ##CODETYPE(halfH, src + stride, SIZE, stride);put_h264_qpel ##SIZE ##_hv_lowpass_ ##CODETYPE(halfHV, tmp, src, SIZE, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, halfH, halfHV, stride, SIZE, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc12_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, halfV)[SIZE*SIZE];DECLARE_ALIGNED(16, uint8_t, halfHV)[SIZE*SIZE];DECLARE_ALIGNED(16, int16_t, tmp)[SIZE*(SIZE+8)];put_h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(halfV, src, SIZE, stride);put_h264_qpel ##SIZE ##_hv_lowpass_ ##CODETYPE(halfHV, tmp, src, SIZE, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, halfV, halfHV, stride, SIZE, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc32_ ##CODETYPE(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){DECLARE_ALIGNED(16, uint8_t, halfV)[SIZE*SIZE];DECLARE_ALIGNED(16, uint8_t, halfHV)[SIZE*SIZE];DECLARE_ALIGNED(16, int16_t, tmp)[SIZE*(SIZE+8)];put_h264_qpel ##SIZE ##_v_lowpass_ ##CODETYPE(halfV, src+1, SIZE, stride);put_h264_qpel ##SIZE ##_hv_lowpass_ ##CODETYPE(halfHV, tmp, src, SIZE, SIZE, stride);OPNAME ##pixels ##SIZE ##_l2_ ##CODETYPE(dst, halfV, halfHV, stride, SIZE, SIZE);}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_unligned_store</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ tmp1 = vec_ld(0, dest); mask = vec_lvsl(0, dest); tmp2 = vec_ld(15, dest); edges = vec_perm(tmp2, tmp1, mask); align = vec_lvsr(0, dest); tmp2 = vec_perm(s, edges, align); tmp1 = vec_perm(edges, s, align); vec_st(tmp2, 15, dest); vec_st(tmp1, 0 , dest); }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_unligned_store</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_vsx_st(s, 0, dest);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_pixels16_l2_altivec</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>mask_</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>, <decl><type ref="prev"/><name>edges</name></decl>, <decl><type ref="prev"/><name>align</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mask_</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name>src_stride1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>load_with_perm_vec</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_unligned_store</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg_unligned_store</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ tmp1 = vec_ld(0, dest); mask = vec_lvsl(0, dest); tmp2 = vec_ld(15, dest); a = vec_avg(vec_perm(tmp1, tmp2, mask), s); edges = vec_perm(tmp2, tmp1, mask); align = vec_lvsr(0, dest); tmp2 = vec_perm(a, edges, align); tmp1 = vec_perm(edges, a, align); vec_st(tmp2, 15, dest); vec_st(tmp1, 0 , dest); }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg_unligned_store</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{ a = vec_avg(vec_vsx_ld(0, dst), s); vec_vsx_st(a, 0, dst); }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>avg_pixels16_l2_altivec</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_stride1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>mask_</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>, <decl><type ref="prev"/><name>edges</name></decl>, <decl><type ref="prev"/><name>align</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mask_</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name>src_stride1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>load_with_perm_vec</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avg_unligned_store</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<macro><name>H264_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">16</literal></argument>, <argument>altivec</argument>)</argument_list></macro>

<macro><name>H264_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>, <argument>altivec</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264qpel_init_ppc</name><parameter_list>(<parameter><decl><type><name>H264QpelContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>high_bit_depth</name> <init>= <expr><name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dspfunc</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>NUM</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;PFX ##_pixels_tab[IDX][ 0] = PFX ##NUM ##_mc00_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 1] = PFX ##NUM ##_mc10_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 2] = PFX ##NUM ##_mc20_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 3] = PFX ##NUM ##_mc30_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 4] = PFX ##NUM ##_mc01_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 5] = PFX ##NUM ##_mc11_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 6] = PFX ##NUM ##_mc21_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 7] = PFX ##NUM ##_mc31_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 8] = PFX ##NUM ##_mc02_altivec; c-&gt;PFX ##_pixels_tab[IDX][ 9] = PFX ##NUM ##_mc12_altivec; c-&gt;PFX ##_pixels_tab[IDX][10] = PFX ##NUM ##_mc22_altivec; c-&gt;PFX ##_pixels_tab[IDX][11] = PFX ##NUM ##_mc32_altivec; c-&gt;PFX ##_pixels_tab[IDX][12] = PFX ##NUM ##_mc03_altivec; c-&gt;PFX ##_pixels_tab[IDX][13] = PFX ##NUM ##_mc13_altivec; c-&gt;PFX ##_pixels_tab[IDX][14] = PFX ##NUM ##_mc23_altivec; c-&gt;PFX ##_pixels_tab[IDX][15] = PFX ##NUM ##_mc33_altivec</cpp:value></cpp:define>

<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dspfunc</name></cpp:undef>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
