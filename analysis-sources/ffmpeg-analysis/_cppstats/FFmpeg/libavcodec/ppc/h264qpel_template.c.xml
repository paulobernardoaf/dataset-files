<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\h264qpel_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_ALIGNED</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_assert2(!((uintptr_t)ptr&amp;0x0000000F));</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>load_alignment</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>ali</name></type></parameter>, <parameter><type><name>pm2</name></type></parameter>, <parameter><type><name>pm1</name></type></parameter>, <parameter><type><name>pp0</name></type></parameter>, <parameter><type><name>pp1</name></type></parameter>, <parameter><type><name>pp2</name></type></parameter>, <parameter><type><name>pp3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{vec_u8 srcR1 = vec_ld(-2, s);vec_u8 srcR2 = vec_ld(14, s);switch (ali) {default: {srcM2 = vec_perm(srcR1, srcR2, pm2);srcM1 = vec_perm(srcR1, srcR2, pm1);srcP0 = vec_perm(srcR1, srcR2, pp0);srcP1 = vec_perm(srcR1, srcR2, pp1);srcP2 = vec_perm(srcR1, srcR2, pp2);srcP3 = vec_perm(srcR1, srcR2, pp3);} break;case 11: {srcM2 = vec_perm(srcR1, srcR2, pm2);srcM1 = vec_perm(srcR1, srcR2, pm1);srcP0 = vec_perm(srcR1, srcR2, pp0);srcP1 = vec_perm(srcR1, srcR2, pp1);srcP2 = vec_perm(srcR1, srcR2, pp2);srcP3 = srcR2;} break;case 12: {vec_u8 srcR3 = vec_ld(30, s);srcM2 = vec_perm(srcR1, srcR2, pm2);srcM1 = vec_perm(srcR1, srcR2, pm1);srcP0 = vec_perm(srcR1, srcR2, pp0);srcP1 = vec_perm(srcR1, srcR2, pp1);srcP2 = srcR2;srcP3 = vec_perm(srcR2, srcR3, pp3);} break;case 13: {vec_u8 srcR3 = vec_ld(30, s);srcM2 = vec_perm(srcR1, srcR2, pm2);srcM1 = vec_perm(srcR1, srcR2, pm1);srcP0 = vec_perm(srcR1, srcR2, pp0);srcP1 = srcR2;srcP2 = vec_perm(srcR2, srcR3, pp2);srcP3 = vec_perm(srcR2, srcR3, pp3);} break;case 14: {vec_u8 srcR3 = vec_ld(30, s);srcM2 = vec_perm(srcR1, srcR2, pm2);srcM1 = vec_perm(srcR1, srcR2, pm1);srcP0 = srcR2;srcP1 = vec_perm(srcR2, srcR3, pp1);srcP2 = vec_perm(srcR2, srcR3, pp2);srcP3 = vec_perm(srcR2, srcR3, pp3);} break;case 15: {vec_u8 srcR3 = vec_ld(30, s);srcM2 = vec_perm(srcR1, srcR2, pm2);srcM1 = srcR2;srcP0 = vec_perm(srcR2, srcR3, pp0);srcP1 = vec_perm(srcR2, srcR3, pp1);srcP2 = vec_perm(srcR2, srcR3, pp2);srcP3 = vec_perm(srcR2, srcR3, pp3);} break;}}</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>load_alignment</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>ali</name></type></parameter>, <parameter><type><name>pm2</name></type></parameter>, <parameter><type><name>pm1</name></type></parameter>, <parameter><type><name>pp0</name></type></parameter>, <parameter><type><name>pp1</name></type></parameter>, <parameter><type><name>pp2</name></type></parameter>, <parameter><type><name>pp3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{srcM2 = vec_vsx_ld(-2, s);srcM1 = vec_vsx_ld(-1, s);srcP0 = vec_vsx_ld(0, s);srcP1 = vec_vsx_ld(1, s);srcP2 = vec_vsx_ld(2, s);srcP3 = vec_vsx_ld(3, s);}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PREFIX_h264_qpel16_h_lowpass_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PREFIX_h264_qpel16_h_lowpass_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>permM2</name></decl>, <decl><type ref="prev"/><name>permM1</name></decl>, <decl><type ref="prev"/><name>permP0</name></decl>, <decl><type ref="prev"/><name>permP1</name></decl>, <decl><type ref="prev"/><name>permP2</name></decl>, <decl><type ref="prev"/><name>permP3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v5ss</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>v5us</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v20ss</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v16ss</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>srcM2</name></decl>, <decl><type ref="prev"/><name>srcM1</name></decl>, <decl><type ref="prev"/><name>srcP0</name></decl>, <decl><type ref="prev"/><name>srcP1</name></decl>, <decl><type ref="prev"/><name>srcP2</name></decl>, <decl><type ref="prev"/><name>srcP3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>align</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcP0A</name></decl>, <decl><type ref="prev"/><name>srcP0B</name></decl>, <decl><type ref="prev"/><name>srcP1A</name></decl>, <decl><type ref="prev"/><name>srcP1B</name></decl>,

<decl><type ref="prev"/><name>srcP2A</name></decl>, <decl><type ref="prev"/><name>srcP2B</name></decl>, <decl><type ref="prev"/><name>srcP3A</name></decl>, <decl><type ref="prev"/><name>srcP3B</name></decl>,

<decl><type ref="prev"/><name>srcM1A</name></decl>, <decl><type ref="prev"/><name>srcM1B</name></decl>, <decl><type ref="prev"/><name>srcM2A</name></decl>, <decl><type ref="prev"/><name>srcM2B</name></decl>,

<decl><type ref="prev"/><name>sum1A</name></decl>, <decl><type ref="prev"/><name>sum1B</name></decl>, <decl><type ref="prev"/><name>sum2A</name></decl>, <decl><type ref="prev"/><name>sum2B</name></decl>, <decl><type ref="prev"/><name>sum3A</name></decl>, <decl><type ref="prev"/><name>sum3B</name></decl>,

<decl><type ref="prev"/><name>pp1A</name></decl>, <decl><type ref="prev"/><name>pp1B</name></decl>, <decl><type ref="prev"/><name>pp2A</name></decl>, <decl><type ref="prev"/><name>pp2B</name></decl>, <decl><type ref="prev"/><name>pp3A</name></decl>, <decl><type ref="prev"/><name>pp3B</name></decl>,

<decl><type ref="prev"/><name>psumA</name></decl>, <decl><type ref="prev"/><name>psumB</name></decl>, <decl><type ref="prev"/><name>sumA</name></decl>, <decl><type ref="prev"/><name>sumB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>fsum</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<expr_stmt><expr><name>permM2</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permM1</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permP0</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permP1</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permP2</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permP3</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>load_alignment</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><name>permM2</name></expr></argument>, <argument><expr><name>permM1</name></expr></argument>, <argument><expr><name>permP0</name></expr></argument>, <argument><expr><name>permP1</name></expr></argument>, <argument><expr><name>permP2</name></expr></argument>, <argument><expr><name>permP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP0A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP0B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP1A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP1B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP2A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP2B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP3A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP3B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM1A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM1B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM2A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM2B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcP0A</name></expr></argument>, <argument><expr><name>srcP1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcP0B</name></expr></argument>, <argument><expr><name>srcP1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum2A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM1A</name></expr></argument>, <argument><expr><name>srcP2A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum2B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM1B</name></expr></argument>, <argument><expr><name>srcP2B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum3A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM2A</name></expr></argument>, <argument><expr><name>srcP3A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum3B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM2B</name></expr></argument>, <argument><expr><name>srcP3B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1A</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum1A</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>, <argument><expr><name>v16ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1B</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum1B</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>, <argument><expr><name>v16ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2A</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum2A</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2B</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum2B</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp3A</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>sum3A</name></expr></argument>, <argument><expr><name>pp1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp3B</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>sum3B</name></expr></argument>, <argument><expr><name>pp1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psumA</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp3A</name></expr></argument>, <argument><expr><name>pp2A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psumB</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp3B</name></expr></argument>, <argument><expr><name>pp2B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumA</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>psumA</name></expr></argument>, <argument><expr><name>v5us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumB</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>psumB</name></expr></argument>, <argument><expr><name>v5us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>sumA</name></expr></argument>, <argument><expr><name>sumB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT_ALIGNED</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP_U8_ALTIVEC</name><argument_list>(<argument><expr><name>fsum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>fsum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PREFIX_h264_qpel16_v_lowpass_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PREFIX_h264_qpel16_v_lowpass_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>perm</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v20ss</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u16</name></type> <name>v5us</name> <init>= <expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v5ss</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v16ss</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcbis</name> <init>= <expr><name>src</name> <operator>-</operator> <operator>(</operator><name>srcStride</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>srcM2</name> <init>= <expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>srcbis</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>srcbis</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>srcM1</name> <init>= <expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>srcbis</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>srcbis</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>srcP0</name> <init>= <expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>srcbis</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>srcbis</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>srcP1</name> <init>= <expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>srcbis</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>srcbis</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>srcP2</name> <init>= <expr><call><name>load_with_perm_vec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>srcbis</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>srcbis</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcM2ssA</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcM2ssB</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcM1ssA</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcM1ssB</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcP0ssA</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcP0ssB</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcP1ssA</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcP1ssB</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcP2ssA</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcP2ssB</name> <init>= <expr><operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>pp1A</name></decl>, <decl><type ref="prev"/><name>pp1B</name></decl>, <decl><type ref="prev"/><name>pp2A</name></decl>, <decl><type ref="prev"/><name>pp2B</name></decl>, <decl><type ref="prev"/><name>pp3A</name></decl>, <decl><type ref="prev"/><name>pp3B</name></decl>,

<decl><type ref="prev"/><name>psumA</name></decl>, <decl><type ref="prev"/><name>psumB</name></decl>, <decl><type ref="prev"/><name>sumA</name></decl>, <decl><type ref="prev"/><name>sumB</name></decl>,

<decl><type ref="prev"/><name>srcP3ssA</name></decl>, <decl><type ref="prev"/><name>srcP3ssB</name></decl>,

<decl><type ref="prev"/><name>sum1A</name></decl>, <decl><type ref="prev"/><name>sum1B</name></decl>, <decl><type ref="prev"/><name>sum2A</name></decl>, <decl><type ref="prev"/><name>sum2B</name></decl>, <decl><type ref="prev"/><name>sum3A</name></decl>, <decl><type ref="prev"/><name>sum3B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>fsum</name></decl>, <decl><type ref="prev"/><name>srcP3</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>srcP3</name> <operator>=</operator> <call><name>load_with_perm_vec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>srcbis</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcbis</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP3ssA</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP3ssB</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcP0ssA</name></expr></argument>, <argument><expr><name>srcP1ssA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcP0ssB</name></expr></argument>, <argument><expr><name>srcP1ssB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum2A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM1ssA</name></expr></argument>, <argument><expr><name>srcP2ssA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum2B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM1ssB</name></expr></argument>, <argument><expr><name>srcP2ssB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum3A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM2ssA</name></expr></argument>, <argument><expr><name>srcP3ssA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum3B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM2ssB</name></expr></argument>, <argument><expr><name>srcP3ssB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM2ssA</name> <operator>=</operator> <name>srcM1ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM2ssB</name> <operator>=</operator> <name>srcM1ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM1ssA</name> <operator>=</operator> <name>srcP0ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM1ssB</name> <operator>=</operator> <name>srcP0ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP0ssA</name> <operator>=</operator> <name>srcP1ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP0ssB</name> <operator>=</operator> <name>srcP1ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP1ssA</name> <operator>=</operator> <name>srcP2ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP1ssB</name> <operator>=</operator> <name>srcP2ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP2ssA</name> <operator>=</operator> <name>srcP3ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP2ssB</name> <operator>=</operator> <name>srcP3ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1A</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum1A</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>, <argument><expr><name>v16ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1B</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum1B</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>, <argument><expr><name>v16ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2A</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum2A</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2B</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum2B</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp3A</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>sum3A</name></expr></argument>, <argument><expr><name>pp1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp3B</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>sum3B</name></expr></argument>, <argument><expr><name>pp1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psumA</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp3A</name></expr></argument>, <argument><expr><name>pp2A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psumB</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp3B</name></expr></argument>, <argument><expr><name>pp2B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumA</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>psumA</name></expr></argument>, <argument><expr><name>v5us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumB</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>psumB</name></expr></argument>, <argument><expr><name>v5us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>sumA</name></expr></argument>, <argument><expr><name>sumB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT_ALIGNED</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP_U8_ALTIVEC</name><argument_list>(<argument><expr><name>fsum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>fsum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PREFIX_h264_qpel16_hv_lowpass_altivec</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PREFIX_h264_qpel16_hv_lowpass_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tmpStride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>LOAD_ZERO</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>permM2</name></decl>, <decl><type ref="prev"/><name>permM1</name></decl>, <decl><type ref="prev"/><name>permP0</name></decl>, <decl><type ref="prev"/><name>permP1</name></decl>, <decl><type ref="prev"/><name>permP2</name></decl>, <decl><type ref="prev"/><name>permP3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v20ss</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>v10ui</name> <init>= <expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v5ss</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>v1ss</name> <init>= <expr><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s32</name></type> <name>v512si</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_s32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u32</name></type> <name>v16ui</name> <init>= <expr><call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>vec_splat_u32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>align</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>src</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>srcP0A</name></decl>, <decl><type ref="prev"/><name>srcP0B</name></decl>, <decl><type ref="prev"/><name>srcP1A</name></decl>, <decl><type ref="prev"/><name>srcP1B</name></decl>,

<decl><type ref="prev"/><name>srcP2A</name></decl>, <decl><type ref="prev"/><name>srcP2B</name></decl>, <decl><type ref="prev"/><name>srcP3A</name></decl>, <decl><type ref="prev"/><name>srcP3B</name></decl>,

<decl><type ref="prev"/><name>srcM1A</name></decl>, <decl><type ref="prev"/><name>srcM1B</name></decl>, <decl><type ref="prev"/><name>srcM2A</name></decl>, <decl><type ref="prev"/><name>srcM2B</name></decl>,

<decl><type ref="prev"/><name>sum1A</name></decl>, <decl><type ref="prev"/><name>sum1B</name></decl>, <decl><type ref="prev"/><name>sum2A</name></decl>, <decl><type ref="prev"/><name>sum2B</name></decl>, <decl><type ref="prev"/><name>sum3A</name></decl>, <decl><type ref="prev"/><name>sum3B</name></decl>,

<decl><type ref="prev"/><name>pp1A</name></decl>, <decl><type ref="prev"/><name>pp1B</name></decl>, <decl><type ref="prev"/><name>pp2A</name></decl>, <decl><type ref="prev"/><name>pp2B</name></decl>, <decl><type ref="prev"/><name>psumA</name></decl>, <decl><type ref="prev"/><name>psumB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_u8</name></type> <name>mperm</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vec_u8</name><operator>)</operator>

<block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,

<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0F</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmpbis</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>tmpM1ssA</name></decl>, <decl><type ref="prev"/><name>tmpM1ssB</name></decl>, <decl><type ref="prev"/><name>tmpM2ssA</name></decl>, <decl><type ref="prev"/><name>tmpM2ssB</name></decl>,

<decl><type ref="prev"/><name>tmpP0ssA</name></decl>, <decl><type ref="prev"/><name>tmpP0ssB</name></decl>, <decl><type ref="prev"/><name>tmpP1ssA</name></decl>, <decl><type ref="prev"/><name>tmpP1ssB</name></decl>,

<decl><type ref="prev"/><name>tmpP2ssA</name></decl>, <decl><type ref="prev"/><name>tmpP2ssB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s32</name></type> <name>pp1Ae</name></decl>, <decl><type ref="prev"/><name>pp1Ao</name></decl>, <decl><type ref="prev"/><name>pp1Be</name></decl>, <decl><type ref="prev"/><name>pp1Bo</name></decl>, <decl><type ref="prev"/><name>pp2Ae</name></decl>, <decl><type ref="prev"/><name>pp2Ao</name></decl>, <decl><type ref="prev"/><name>pp2Be</name></decl>, <decl><type ref="prev"/><name>pp2Bo</name></decl>,

<decl><type ref="prev"/><name>pp3Ae</name></decl>, <decl><type ref="prev"/><name>pp3Ao</name></decl>, <decl><type ref="prev"/><name>pp3Be</name></decl>, <decl><type ref="prev"/><name>pp3Bo</name></decl>, <decl><type ref="prev"/><name>pp1cAe</name></decl>, <decl><type ref="prev"/><name>pp1cAo</name></decl>, <decl><type ref="prev"/><name>pp1cBe</name></decl>, <decl><type ref="prev"/><name>pp1cBo</name></decl>,

<decl><type ref="prev"/><name>pp32Ae</name></decl>, <decl><type ref="prev"/><name>pp32Ao</name></decl>, <decl><type ref="prev"/><name>pp32Be</name></decl>, <decl><type ref="prev"/><name>pp32Bo</name></decl>, <decl><type ref="prev"/><name>sumAe</name></decl>, <decl><type ref="prev"/><name>sumAo</name></decl>, <decl><type ref="prev"/><name>sumBe</name></decl>, <decl><type ref="prev"/><name>sumBo</name></decl>,

<decl><type ref="prev"/><name>ssumAe</name></decl>, <decl><type ref="prev"/><name>ssumAo</name></decl>, <decl><type ref="prev"/><name>ssumBe</name></decl>, <decl><type ref="prev"/><name>ssumBo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>fsum</name></decl>, <decl><type ref="prev"/><name>sumv</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>ssume</name></decl>, <decl><type ref="prev"/><name>ssumo</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<expr_stmt><expr><name>permM2</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permM1</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permP0</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permP1</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permP2</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>permP3</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>src</name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>srcStride</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">21</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vec_u8</name></type> <name>srcM2</name></decl>, <decl><type ref="prev"/><name>srcM1</name></decl>, <decl><type ref="prev"/><name>srcP0</name></decl>, <decl><type ref="prev"/><name>srcP1</name></decl>, <decl><type ref="prev"/><name>srcP2</name></decl>, <decl><type ref="prev"/><name>srcP3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>load_alignment</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><name>permM2</name></expr></argument>, <argument><expr><name>permM1</name></expr></argument>, <argument><expr><name>permP0</name></expr></argument>, <argument><expr><name>permP1</name></expr></argument>, <argument><expr><name>permP2</name></expr></argument>, <argument><expr><name>permP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP0A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP0B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP1A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP1B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP2A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP2B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP3A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcP3B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM1A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM1B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM2A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcM2B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>zero_u8v</name></expr></argument>, <argument><expr><name>srcM2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcP0A</name></expr></argument>, <argument><expr><name>srcP1A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcP0B</name></expr></argument>, <argument><expr><name>srcP1B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum2A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM1A</name></expr></argument>, <argument><expr><name>srcP2A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum2B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM1B</name></expr></argument>, <argument><expr><name>srcP2B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum3A</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM2A</name></expr></argument>, <argument><expr><name>srcP3A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum3B</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>srcM2B</name></expr></argument>, <argument><expr><name>srcP3B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1A</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum1A</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>, <argument><expr><name>sum3A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1B</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum1B</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>, <argument><expr><name>sum3B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2A</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum2A</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2B</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>sum2B</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>, <argument><expr><name>zero_s16v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psumA</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp1A</name></expr></argument>, <argument><expr><name>pp2A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psumB</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp1B</name></expr></argument>, <argument><expr><name>pp2B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>psumA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>psumB</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>srcStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>tmpStride</name></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>tmpM2ssA</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpM2ssB</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbis</name> <operator>+=</operator> <name>tmpStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpM1ssA</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpM1ssB</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbis</name> <operator>+=</operator> <name>tmpStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP0ssA</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP0ssB</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbis</name> <operator>+=</operator> <name>tmpStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP1ssA</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP1ssB</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbis</name> <operator>+=</operator> <name>tmpStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP2ssA</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP2ssB</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbis</name> <operator>+=</operator> <name>tmpStride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>tmpP3ssA</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>tmpP3ssB</name> <init>= <expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tmpbis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>sum1A</name> <init>= <expr><call><name>vec_adds</name><argument_list>(<argument><expr><name>tmpP0ssA</name></expr></argument>, <argument><expr><name>tmpP1ssA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>sum1B</name> <init>= <expr><call><name>vec_adds</name><argument_list>(<argument><expr><name>tmpP0ssB</name></expr></argument>, <argument><expr><name>tmpP1ssB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>sum2A</name> <init>= <expr><call><name>vec_adds</name><argument_list>(<argument><expr><name>tmpM1ssA</name></expr></argument>, <argument><expr><name>tmpP2ssA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vec_s16</name></type> <name>sum2B</name> <init>= <expr><call><name>vec_adds</name><argument_list>(<argument><expr><name>tmpM1ssB</name></expr></argument>, <argument><expr><name>tmpP2ssB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>sum3A</name> <init>= <expr><call><name>vec_adds</name><argument_list>(<argument><expr><name>tmpM2ssA</name></expr></argument>, <argument><expr><name>tmpP3ssA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vec_s16</name></type> <name>sum3B</name> <init>= <expr><call><name>vec_adds</name><argument_list>(<argument><expr><name>tmpM2ssB</name></expr></argument>, <argument><expr><name>tmpP3ssB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmpbis</name> <operator>+=</operator> <name>tmpStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpM2ssA</name> <operator>=</operator> <name>tmpM1ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpM2ssB</name> <operator>=</operator> <name>tmpM1ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpM1ssA</name> <operator>=</operator> <name>tmpP0ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpM1ssB</name> <operator>=</operator> <name>tmpP0ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP0ssA</name> <operator>=</operator> <name>tmpP1ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP0ssB</name> <operator>=</operator> <name>tmpP1ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP1ssA</name> <operator>=</operator> <name>tmpP2ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP1ssB</name> <operator>=</operator> <name>tmpP2ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP2ssA</name> <operator>=</operator> <name>tmpP3ssA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpP2ssB</name> <operator>=</operator> <name>tmpP3ssB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1Ae</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>sum1A</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1Ao</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>sum1A</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1Be</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>sum1B</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1Bo</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>sum1B</name></expr></argument>, <argument><expr><name>v20ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2Ae</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>sum2A</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2Ao</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>sum2A</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2Be</name> <operator>=</operator> <call><name>vec_mule</name><argument_list>(<argument><expr><name>sum2B</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp2Bo</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>sum2B</name></expr></argument>, <argument><expr><name>v5ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp3Ao</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>sum3A</name></expr></argument>, <argument><expr><name>v1ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp3Bo</name> <operator>=</operator> <call><name>vec_mulo</name><argument_list>(<argument><expr><name>sum3B</name></expr></argument>, <argument><expr><name>v1ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<expr_stmt><expr><name>sum3A</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_perm</name><argument_list>(<argument><expr><name>sum3A</name></expr></argument>, <argument><expr><name>sum3A</name></expr></argument>,<argument><expr><call><name>vcswapi2s</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum3B</name> <operator>=</operator> <operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_perm</name><argument_list>(<argument><expr><name>sum3B</name></expr></argument>, <argument><expr><name>sum3B</name></expr></argument>,<argument><expr><call><name>vcswapi2s</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pp3Ae</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s32</name><operator>)</operator><name>sum3A</name></expr></argument>, <argument><expr><name>v16ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp3Be</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s32</name><operator>)</operator><name>sum3B</name></expr></argument>, <argument><expr><name>v16ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1cAe</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pp1Ae</name></expr></argument>, <argument><expr><name>v512si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1cAo</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pp1Ao</name></expr></argument>, <argument><expr><name>v512si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1cBe</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pp1Be</name></expr></argument>, <argument><expr><name>v512si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp1cBo</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pp1Bo</name></expr></argument>, <argument><expr><name>v512si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp32Ae</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp3Ae</name></expr></argument>, <argument><expr><name>pp2Ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp32Ao</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp3Ao</name></expr></argument>, <argument><expr><name>pp2Ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp32Be</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp3Be</name></expr></argument>, <argument><expr><name>pp2Be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp32Bo</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>pp3Bo</name></expr></argument>, <argument><expr><name>pp2Bo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumAe</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pp1cAe</name></expr></argument>, <argument><expr><name>pp32Ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumAo</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pp1cAo</name></expr></argument>, <argument><expr><name>pp32Ao</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumBe</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pp1cBe</name></expr></argument>, <argument><expr><name>pp32Be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumBo</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pp1cBo</name></expr></argument>, <argument><expr><name>pp32Bo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssumAe</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>sumAe</name></expr></argument>, <argument><expr><name>v10ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssumAo</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>sumAo</name></expr></argument>, <argument><expr><name>v10ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssumBe</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>sumBe</name></expr></argument>, <argument><expr><name>v10ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssumBo</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>sumBo</name></expr></argument>, <argument><expr><name>v10ui</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssume</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name>ssumAe</name></expr></argument>, <argument><expr><name>ssumBe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ssumo</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name>ssumAo</name></expr></argument>, <argument><expr><name>ssumBo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sumv</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>ssume</name></expr></argument>, <argument><expr><name>ssumo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>sumv</name></expr></argument>, <argument><expr><name>sumv</name></expr></argument>, <argument><expr><name>mperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASSERT_ALIGNED</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OP_U8_ALTIVEC</name><argument_list>(<argument><expr><name>fsum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>fsum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dstStride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
