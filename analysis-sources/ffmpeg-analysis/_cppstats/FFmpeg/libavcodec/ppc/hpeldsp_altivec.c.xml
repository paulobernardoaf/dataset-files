<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\hpeldsp_altivec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/hpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp_altivec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<function><type><name>void</name></type> <name>ff_put_pixels16_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1C</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1D</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>ptrdiff_t</name></type> <name>line_size_2</name> <init>= <expr><name>line_size</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>ptrdiff_t</name></type> <name>line_size_3</name> <init>= <expr><name>line_size</name> <operator>+</operator> <name>line_size_2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>ptrdiff_t</name></type> <name>line_size_4</name> <init>= <expr><name>line_size</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1B</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1C</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size_2</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1D</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size_3</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>pixelsv1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>pixelsv1B</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>pixelsv1C</name></expr></argument>, <argument><expr><name>line_size_2</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>pixelsv1D</name></expr></argument>, <argument><expr><name>line_size_3</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name><operator>+=</operator><name>line_size_4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator><name>line_size_4</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = ( ((a)|(b)) - ((((a)^(b))&amp;0xFEFEFEFEUL)&gt;&gt;1) )</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_avg_pixels16_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv</name></decl>, <decl><type ref="prev"/><name>blockv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>,<argument><expr><name>pixelsv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name><operator>+=</operator><name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator><name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_pixels8_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv</name></decl>, <decl><type ref="prev"/><name>blockv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rightside</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>block</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rightside</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pixelsv</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsv</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>s0</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pixelsv</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsv</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><name>s0</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pixels8_xy2_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1</name></decl>, <decl><type ref="prev"/><name>pixelsv2</name></decl>, <decl><type ref="prev"/><name>pixelsavg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>blockv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>pixelssum1</name></decl>, <decl><type ref="prev"/><name>pixelssum2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vczero</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vctwo</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rightside</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>block</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>pixelssum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum2</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsavg</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>vczero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rightside</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsavg</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsavg</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_no_rnd_pixels8_xy2_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1</name></decl>, <decl><type ref="prev"/><name>pixelsv2</name></decl>, <decl><type ref="prev"/><name>pixelsavg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>blockv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>pixelssum1</name></decl>, <decl><type ref="prev"/><name>pixelssum2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vczero</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vcone</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vctwo</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>vcone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rightside</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>block</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>pixelssum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum2</name></expr></argument>, <argument><expr><name>vcone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsavg</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>vczero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rightside</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsavg</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsavg</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pixels16_xy2_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1</name></decl>, <decl><type ref="prev"/><name>pixelsv2</name></decl>, <decl><type ref="prev"/><name>pixelsv3</name></decl>, <decl><type ref="prev"/><name>pixelsv4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>blockv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>,

<decl><type ref="prev"/><name>pixelssum1</name></decl>, <decl><type ref="prev"/><name>pixelssum2</name></decl>, <decl><type ref="prev"/><name>pixelssum3</name></decl>, <decl><type ref="prev"/><name>pixelssum4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vczero</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vctwo</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv3</name> <operator>=</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv4</name> <operator>=</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv3</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum3</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv3</name> <operator>=</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv4</name> <operator>=</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum4</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv3</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp4</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum3</name></expr></argument>, <argument><expr><name>pixelssum4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp4</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>pixelssum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum4</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum2</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_no_rnd_pixels16_xy2_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1</name></decl>, <decl><type ref="prev"/><name>pixelsv2</name></decl>, <decl><type ref="prev"/><name>pixelsv3</name></decl>, <decl><type ref="prev"/><name>pixelsv4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>blockv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>,

<decl><type ref="prev"/><name>pixelssum1</name></decl>, <decl><type ref="prev"/><name>pixelssum2</name></decl>, <decl><type ref="prev"/><name>pixelssum3</name></decl>, <decl><type ref="prev"/><name>pixelssum4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vczero</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vcone</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vctwo</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv3</name> <operator>=</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv4</name> <operator>=</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv3</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum3</name></expr></argument>, <argument><expr><name>vcone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>vcone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv3</name> <operator>=</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv4</name> <operator>=</operator> <call><name>VEC_MERGEL</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum4</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv3</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp4</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum3</name></expr></argument>, <argument><expr><name>pixelssum4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp4</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>temp4</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>pixelssum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum4</name></expr></argument>, <argument><expr><name>vcone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum2</name></expr></argument>, <argument><expr><name>vcone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VEC_ST</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_pixels8_xy2_altivec</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>pixelsv1</name></decl>, <decl><type ref="prev"/><name>pixelsv2</name></decl>, <decl><type ref="prev"/><name>pixelsavg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>blockv</name></decl>, <decl><type ref="prev"/><name>blocktemp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>pixelssum1</name></decl>, <decl><type ref="prev"/><name>pixelssum2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>vczero</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator>

<call><name>vec_splat_u8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>vctwo</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator>

<call><name>vec_splat_u16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_LD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rightside</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>block</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>unaligned_load</name><argument_list>(<argument><expr><name>line_size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv1</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsv2</name> <operator>=</operator> <call><name>VEC_MERGEH</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv1</name></expr></argument>,

<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>pixelsv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum1</name></expr></argument>, <argument><expr><name>pixelssum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp3</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelssum1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>pixelssum2</name></expr></argument>, <argument><expr><name>vctwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixelsavg</name> <operator>=</operator> <call><name>vec_packsu</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>vczero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rightside</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blocktemp</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsavg</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>blocktemp</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>pixelsavg</name></expr></argument>, <argument><expr><call><name>vcprm</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>(<argument><expr><name>blocktemp</name></expr></argument>, <argument><expr><name>blockv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_hpeldsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>HpelDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_avg_pixels16_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels8_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels8_xy2_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_pixels16_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels8_xy2_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels16_xy2_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_put_pixels16_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_pixels8_xy2_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_pixels16_xy2_altivec</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
