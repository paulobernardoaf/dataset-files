<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\mpegaudiodsp_altivec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegaudiodsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACS</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rt+=(ra)*(rb)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLSS</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rt-=(ra)*(rb)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUM8</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>sum</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ op(sum, (w)[0 * 64], (p)[0 * 64]); op(sum, (w)[1 * 64], (p)[1 * 64]); op(sum, (w)[2 * 64], (p)[2 * 64]); op(sum, (w)[3 * 64], (p)[3 * 64]); op(sum, (w)[4 * 64], (p)[4 * 64]); op(sum, (w)[5 * 64], (p)[5 * 64]); op(sum, (w)[6 * 64], (p)[6 * 64]); op(sum, (w)[7 * 64], (p)[7 * 64]); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_window</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sum1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sum2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>win1a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>float</name> <operator>*</operator><operator>)</operator> <name>win1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>win2a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>float</name> <operator>*</operator><operator>)</operator> <name>win2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>bufa</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>float</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>sum1a</name> <init>= <expr><operator>(</operator><name>vector</name> <name>float</name> <operator>*</operator><operator>)</operator> <name>sum1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>sum2a</name> <init>= <expr><operator>(</operator><name>vector</name> <name>float</name> <operator>*</operator><operator>)</operator> <name>sum2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>v0</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>v4</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v1 = vec_ld(a, win1a); v2 = vec_ld(b, win2a); v3 = vec_ld(a, bufa); v0 = vec_madd(v3, v1, v0); v4 = vec_madd(v2, v3, v4); }</cpp:value></cpp:define>

<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MULT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MULT</name><argument_list>( <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MULT</name><argument_list>( <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MULT</name><argument_list>( <argument><expr><literal type="number">768</literal></expr></argument>, <argument><expr><literal type="number">192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MULT</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MULT</name><argument_list>(<argument><expr><literal type="number">1280</literal></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MULT</name><argument_list>(<argument><expr><literal type="number">1536</literal></expr></argument>, <argument><expr><literal type="number">384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MULT</name><argument_list>(<argument><expr><literal type="number">1792</literal></expr></argument>, <argument><expr><literal type="number">448</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sum1a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sum2a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1a</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sum2a</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>win1a</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>win2a</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bufa</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_window_mp3</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>incr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>suma</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">17</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>sumb</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">17</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>sumc</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">17</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>sumd</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">17</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out2</name> <init>= <expr><name>out</name> <operator>+</operator> <literal type="number">32</literal> <operator>*</operator> <name>incr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_window</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>win</name></expr></argument> , <argument><expr><name>win</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>suma</name></expr></argument>, <argument><expr><name>sumc</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_window</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>win</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>win</name> <operator>+</operator> <literal type="number">640</literal></expr></argument>, <argument><expr><name>sumb</name></expr></argument>, <argument><expr><name>sumd</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUM8</name><argument_list>(<argument><expr><name>MLSS</name></expr></argument>, <argument><expr><name><name>suma</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>win</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sumc</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sumb</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sumd</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <name><name>suma</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>incr</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>suma</name><index>[ <expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>sumd</name><index>[<expr><literal type="number">16</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out2</name> <operator>=</operator> <operator>-</operator><name><name>sumb</name><index>[<expr><literal type="number">16</literal><operator>-</operator><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>sumc</name><index>[ <expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>-=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUM8</name><argument_list>(<argument><expr><name>MLSS</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>win</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpadsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>MPADSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>apply_window_float</name></name> <operator>=</operator> <name>apply_window_mp3</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
