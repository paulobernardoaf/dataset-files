<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\fdctdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/fdctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdct.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vs16</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vector signed short) (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vs32</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vector signed int) (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vu8</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vector unsigned char) (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vu16</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vector unsigned short) (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vu32</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vector unsigned int) (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C1</name></cpp:macro> <cpp:value>0.98078528040323044912618224</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2</name></cpp:macro> <cpp:value>0.92387953251128675612818319</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>0.83146961230254523707878838</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C4</name></cpp:macro> <cpp:value>0.70710678118654752440084436</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C5</name></cpp:macro> <cpp:value>0.55557023301960222474283081</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C6</name></cpp:macro> <cpp:value>0.38268343236508977172845998</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C7</name></cpp:macro> <cpp:value>0.19509032201612826784828487</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W0</name></cpp:macro> <cpp:value>-(2 * C2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W1</name></cpp:macro> <cpp:value>(2 * C6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W2</name></cpp:macro> <cpp:value>(M_SQRT2 * C6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W3</name></cpp:macro> <cpp:value>(M_SQRT2 * C3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W4</name></cpp:macro> <cpp:value>(M_SQRT2 * (-C1 + C3 + C5 - C7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W5</name></cpp:macro> <cpp:value>(M_SQRT2 * (C1 + C3 - C5 + C7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W6</name></cpp:macro> <cpp:value>(M_SQRT2 * (C1 + C3 + C5 - C7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W7</name></cpp:macro> <cpp:value>(M_SQRT2 * (C1 + C3 - C5 - C7))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W8</name></cpp:macro> <cpp:value>(M_SQRT2 * (C7 - C3))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W9</name></cpp:macro> <cpp:value>(M_SQRT2 * (-C1 - C3))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WA</name></cpp:macro> <cpp:value>(M_SQRT2 * (-C3 - C5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WB</name></cpp:macro> <cpp:value>(M_SQRT2 * (C5 - C3))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>vector</name> <name>float</name></type> <name><name>fdctconsts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>W0</name></expr>, <expr><name>W1</name></expr>, <expr><name>W2</name></expr>, <expr><name>W3</name></expr> }</block></expr>,

<expr><block>{ <expr><name>W4</name></expr>, <expr><name>W5</name></expr>, <expr><name>W6</name></expr>, <expr><name>W7</name></expr> }</block></expr>,

<expr><block>{ <expr><name>W8</name></expr>, <expr><name>W9</name></expr>, <expr><name>WA</name></expr>, <expr><name>WB</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W0</name></cpp:macro> <cpp:value>vec_splat(cnsts0, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W1</name></cpp:macro> <cpp:value>vec_splat(cnsts0, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W2</name></cpp:macro> <cpp:value>vec_splat(cnsts0, 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W3</name></cpp:macro> <cpp:value>vec_splat(cnsts0, 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W4</name></cpp:macro> <cpp:value>vec_splat(cnsts1, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W5</name></cpp:macro> <cpp:value>vec_splat(cnsts1, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W6</name></cpp:macro> <cpp:value>vec_splat(cnsts1, 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W7</name></cpp:macro> <cpp:value>vec_splat(cnsts1, 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W8</name></cpp:macro> <cpp:value>vec_splat(cnsts2, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_W9</name></cpp:macro> <cpp:value>vec_splat(cnsts2, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_WA</name></cpp:macro> <cpp:value>vec_splat(cnsts2, 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_WB</name></cpp:macro> <cpp:value>vec_splat(cnsts2, 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDCTROW</name><parameter_list>(<parameter><type><name>b0</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b4</name></type></parameter>, <parameter><type><name>b5</name></type></parameter>, <parameter><type><name>b6</name></type></parameter>, <parameter><type><name>b7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x0 = vec_add(b0, b7); x7 = vec_sub(b0, b7); x1 = vec_add(b1, b6); x6 = vec_sub(b1, b6); x2 = vec_add(b2, b5); x5 = vec_sub(b2, b5); x3 = vec_add(b3, b4); x4 = vec_sub(b3, b4); b7 = vec_add(x0, x3); b1 = vec_add(x1, x2); b0 = vec_add(b7, b1); b4 = vec_sub(b7, b1); b2 = vec_sub(x0, x3); b6 = vec_sub(x1, x2); b5 = vec_add(b6, b2); cnst = LD_W2; b5 = vec_madd(cnst, b5, mzero); cnst = LD_W1; b2 = vec_madd(cnst, b2, b5); cnst = LD_W0; b6 = vec_madd(cnst, b6, b5); x0 = vec_add(x4, x7); x1 = vec_add(x5, x6); x2 = vec_add(x4, x6); x3 = vec_add(x5, x7); x8 = vec_add(x2, x3); cnst = LD_W3; x8 = vec_madd(cnst, x8, mzero); cnst = LD_W8; x0 = vec_madd(cnst, x0, mzero); cnst = LD_W9; x1 = vec_madd(cnst, x1, mzero); cnst = LD_WA; x2 = vec_madd(cnst, x2, x8); cnst = LD_WB; x3 = vec_madd(cnst, x3, x8); cnst = LD_W4; b7 = vec_madd(cnst, x4, x0); cnst = LD_W5; b5 = vec_madd(cnst, x5, x1); cnst = LD_W6; b3 = vec_madd(cnst, x6, x1); cnst = LD_W7; b1 = vec_madd(cnst, x7, x0); b7 = vec_add(b7, x2); b5 = vec_add(b5, x3); b3 = vec_add(b3, x2); b1 = vec_add(b1, x3)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDCTCOL</name><parameter_list>(<parameter><type><name>b0</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b4</name></type></parameter>, <parameter><type><name>b5</name></type></parameter>, <parameter><type><name>b6</name></type></parameter>, <parameter><type><name>b7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x0 = vec_add(b0, b7); x7 = vec_sub(b0, b7); x1 = vec_add(b1, b6); x6 = vec_sub(b1, b6); x2 = vec_add(b2, b5); x5 = vec_sub(b2, b5); x3 = vec_add(b3, b4); x4 = vec_sub(b3, b4); b7 = vec_add(x0, x3); b1 = vec_add(x1, x2); b0 = vec_add(b7, b1); b4 = vec_sub(b7, b1); b2 = vec_sub(x0, x3); b6 = vec_sub(x1, x2); b5 = vec_add(b6, b2); cnst = LD_W2; b5 = vec_madd(cnst, b5, mzero); cnst = LD_W1; b2 = vec_madd(cnst, b2, b5); cnst = LD_W0; b6 = vec_madd(cnst, b6, b5); x0 = vec_add(x4, x7); x1 = vec_add(x5, x6); x2 = vec_add(x4, x6); x3 = vec_add(x5, x7); x8 = vec_add(x2, x3); cnst = LD_W3; x8 = vec_madd(cnst, x8, mzero); cnst = LD_W8; x0 = vec_madd(cnst, x0, mzero); cnst = LD_W9; x1 = vec_madd(cnst, x1, mzero); cnst = LD_WA; x2 = vec_madd(cnst, x2, x8); cnst = LD_WB; x3 = vec_madd(cnst, x3, x8); cnst = LD_W4; b7 = vec_madd(cnst, x4, x0); cnst = LD_W5; b5 = vec_madd(cnst, x5, x1); cnst = LD_W6; b3 = vec_madd(cnst, x6, x1); cnst = LD_W7; b1 = vec_madd(cnst, x7, x0); b7 = vec_add(b7, x2); b5 = vec_add(b5, x3); b3 = vec_add(b3, x2); b1 = vec_add(b1, x3)</cpp:value></cpp:define> 

<function><type><name>void</name></type> <name>ff_fdct_altivec</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>fdctconsts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>b00</name></decl>, <decl><type ref="prev"/><name>b10</name></decl>, <decl><type ref="prev"/><name>b20</name></decl>, <decl><type ref="prev"/><name>b30</name></decl>, <decl><type ref="prev"/><name>b40</name></decl>, <decl><type ref="prev"/><name>b50</name></decl>, <decl><type ref="prev"/><name>b60</name></decl>, <decl><type ref="prev"/><name>b70</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>b01</name></decl>, <decl><type ref="prev"/><name>b11</name></decl>, <decl><type ref="prev"/><name>b21</name></decl>, <decl><type ref="prev"/><name>b31</name></decl>, <decl><type ref="prev"/><name>b41</name></decl>, <decl><type ref="prev"/><name>b51</name></decl>, <decl><type ref="prev"/><name>b61</name></decl>, <decl><type ref="prev"/><name>b71</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>mzero</name></decl>, <decl><type ref="prev"/><name>cnst</name></decl>, <decl><type ref="prev"/><name>cnsts0</name></decl>, <decl><type ref="prev"/><name>cnsts1</name></decl>, <decl><type ref="prev"/><name>cnsts2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>x4</name></decl>, <decl><type ref="prev"/><name>x5</name></decl>, <decl><type ref="prev"/><name>x6</name></decl>, <decl><type ref="prev"/><name>x7</name></decl>, <decl><type ref="prev"/><name>x8</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mzero</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_splat_u32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mzero</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><call><name>vu32</name><argument_list>(<argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vu32</name><argument_list>(<argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cnsts0</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cnsts1</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cnsts2</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_S16</name><parameter_list>(<parameter><type><name>hl</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_merge ##hl(vs16(a), vs16(b))</cpp:value></cpp:define>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>block</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b00</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b40</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b01</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b40</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b11</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b40</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b50</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b21</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b50</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b31</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b50</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b20</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b60</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b41</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b20</name></expr></argument>, <argument><expr><name>b60</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b51</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b20</name></expr></argument>, <argument><expr><name>b60</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b30</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b70</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b61</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b30</name></expr></argument>, <argument><expr><name>b70</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b71</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b30</name></expr></argument>, <argument><expr><name>b70</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b41</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b41</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>, <argument><expr><name>b51</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>, <argument><expr><name>b51</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b21</name></expr></argument>, <argument><expr><name>b61</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b21</name></expr></argument>, <argument><expr><name>b61</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b31</name></expr></argument>, <argument><expr><name>b71</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b31</name></expr></argument>, <argument><expr><name>b71</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b00</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x4</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x4</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b20</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x5</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b30</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x5</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b40</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b50</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b60</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b70</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>MERGE_S16</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MERGE_S16</name></cpp:undef>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_add</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b00</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b70</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b00</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b70</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_add</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b60</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b60</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_add</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b20</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b50</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b20</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b50</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_add</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b30</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b40</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b30</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b40</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b70</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_add</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b10</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_add</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b00</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_add</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b70</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b40</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b70</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>b10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTF0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b ##n ##1 = ((vector float) vec_unpackl(vs16(b ##n ##0))); b ##n ##0 = ((vector float) vec_unpackh(vs16(b ##n ##0))); b ##n ##1 = vec_ctf(vs32(b ##n ##1), 0); b ##n ##0 = vec_ctf(vs32(b ##n ##0), 0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CTF0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTF0</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b20</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b60</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vs16</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTF0</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTF0</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CTF0</name></cpp:undef>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b60</name></expr></argument>, <argument><expr><name>b20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b61</name></expr></argument>, <argument><expr><name>b21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b20</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b20</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b21</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b21</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b60</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b60</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b61</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b61</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTFX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b ##0 = ((vector float) vec_unpackh(vs16(x))); b ##1 = ((vector float) vec_unpackl(vs16(x))); b ##0 = vec_ctf(vs32(b ##0), 0); b ##1 = vec_ctf(vs32(b ##1), 0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CTFX</name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>b7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTFX</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTFX</name><argument_list>(<argument><expr><name>x6</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTFX</name><argument_list>(<argument><expr><name>x7</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CTFX</name></cpp:undef>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b70</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b50</name></expr></argument>, <argument><expr><name>b30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b70</name></expr></argument>, <argument><expr><name>b30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b50</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x8</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x8</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x8</name></expr></argument>, <argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W8</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W9</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_WA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_WB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b70</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b70</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b50</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b50</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b30</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b30</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b10</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b70</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b70</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b50</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b50</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b30</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b30</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b10</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b10</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b71</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b51</name></expr></argument>, <argument><expr><name>b31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b71</name></expr></argument>, <argument><expr><name>b31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b51</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x8</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x8</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x8</name></expr></argument>, <argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W8</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W9</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>mzero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_WA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_WB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>x8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b71</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b71</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b51</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b51</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W6</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b31</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b31</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst</name> <operator>=</operator> <name>LD_W7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b11</name> <operator>=</operator> <call><name>vec_madd</name><argument_list>(<argument><expr><name>cnst</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b71</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b71</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b51</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b51</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b31</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b31</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b11</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>b11</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b20</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b00</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b10</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b20</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b30</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>b41</name></expr></argument>, <argument><expr><name>b61</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>b41</name></expr></argument>, <argument><expr><name>b61</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>b51</name></expr></argument>, <argument><expr><name>b71</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>b51</name></expr></argument>, <argument><expr><name>b71</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b41</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b51</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b61</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b71</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>b11</name></expr></argument>, <argument><expr><name>b31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>b11</name></expr></argument>, <argument><expr><name>b31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>b40</name></expr></argument>, <argument><expr><name>b60</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x5</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>b40</name></expr></argument>, <argument><expr><name>b60</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x6</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>b50</name></expr></argument>, <argument><expr><name>b70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x7</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>b50</name></expr></argument>, <argument><expr><name>b70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b40</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b50</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b60</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b70</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b01</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b11</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>x7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b21</name> <operator>=</operator> <call><name>vec_mergeh</name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b31</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FDCTCOL</name><argument_list>(<argument><expr><name>b00</name></expr></argument>, <argument><expr><name>b10</name></expr></argument>, <argument><expr><name>b20</name></expr></argument>, <argument><expr><name>b30</name></expr></argument>, <argument><expr><name>b40</name></expr></argument>, <argument><expr><name>b50</name></expr></argument>, <argument><expr><name>b60</name></expr></argument>, <argument><expr><name>b70</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FDCTCOL</name><argument_list>(<argument><expr><name>b01</name></expr></argument>, <argument><expr><name>b11</name></expr></argument>, <argument><expr><name>b21</name></expr></argument>, <argument><expr><name>b31</name></expr></argument>, <argument><expr><name>b41</name></expr></argument>, <argument><expr><name>b51</name></expr></argument>, <argument><expr><name>b61</name></expr></argument>, <argument><expr><name>b71</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b ##n ##0 = vec_round(b ##n ##0); b ##n ##1 = vec_round(b ##n ##1); b ##n ##0 = ((vector float) vec_cts(b ##n ##0, 0)); b ##n ##1 = ((vector float) vec_cts(b ##n ##1, 0)); b ##n ##0 = ((vector float) vec_pack(vs32(b ##n ##0), vs32(b ##n ##1))); vec_st(vs16(b ##n ##0), 0, bp)</cpp:value></cpp:define>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>block</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTS</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTS</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTS</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CTS</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CTS</name></cpp:undef>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_fdctdsp_init_ppc</name><parameter_list>(<parameter><decl><type><name>FDCTDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>high_bit_depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>dct_algo</name></name> <operator>==</operator> <name>FF_DCT_AUTO</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>dct_algo</name></name> <operator>==</operator> <name>FF_DCT_ALTIVEC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fdct</name></name> <operator>=</operator> <name>ff_fdct_altivec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
