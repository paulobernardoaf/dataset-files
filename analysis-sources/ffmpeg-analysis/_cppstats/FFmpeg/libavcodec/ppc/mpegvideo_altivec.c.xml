<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\mpegvideo_altivec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ppc/util_altivec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideo.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_h263_altivec</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nCoeffs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qadd</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmul</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>qadd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>vczero</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splat_s16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>short</name></expr></argument>, <argument><expr><name>qmul8</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>qmul</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>short</name></expr></argument>, <argument><expr><name>qadd8</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>qadd</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>signed</name> <name>short</name></type> <name>blockv</name></decl>, <decl><type ref="prev"/><name>qmulv</name></decl>, <decl><type ref="prev"/><name>qaddv</name></decl>, <decl><type ref="prev"/><name>nqaddv</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>vector</name> <name>bool</name> <name>short</name></type> <name>blockv_null</name></decl>, <decl><type ref="prev"/><name>blockv_neg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name></type> <name>backup_0</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>qmulv</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_lde</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qmul8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qaddv</name> <operator>=</operator> <call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>vec_s16</name><operator>)</operator><call><name>vec_lde</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qadd8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nqaddv</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>vczero</name></expr></argument>, <argument><expr><name>qaddv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;=</operator> <name>nCoeffs</name></expr> ;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>(<argument><expr><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blockv_neg</name> <operator>=</operator> <call><name>vec_cmplt</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>vczero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blockv_null</name> <operator>=</operator> <call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>vczero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <call><name>vec_sel</name><argument_list>(<argument><expr><name>qaddv</name></expr></argument>, <argument><expr><name>nqaddv</name></expr></argument>, <argument><expr><name>blockv_neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp1</name> <operator>=</operator> <call><name>vec_mladd</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>qmulv</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blockv</name> <operator>=</operator> <call><name>vec_sel</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>blockv_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><name>blockv</name></expr></argument>, <argument><expr><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>nCoeffs</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>-</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>backup_0</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpv_common_init_ppc</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALTIVEC</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PPC_ALTIVEC</name><argument_list>(<argument><expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>dct_algo</name></name> <operator>==</operator> <name>FF_DCT_AUTO</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>dct_algo</name></name> <operator>==</operator> <name>FF_DCT_ALTIVEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_intra</name></name> <operator>=</operator> <name>dct_unquantize_h263_altivec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_inter</name></name> <operator>=</operator> <name>dct_unquantize_h263_altivec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
