<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ppc\mathops.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PPC4XX</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC16</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ ("maclhw %0, %2, %3" : "=r" (rt) : "0" (rt), "r" (ra), "r" (rb));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL16</name><parameter_list>(<parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ int __rt; __asm__ ("mullhw %0, %1, %2" : "=r" (__rt) : "r" (ra), "r" (rb)); __rt; })</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULH</name></cpp:macro> <cpp:value>MULH</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>MULH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<asm>__asm__ ("mulhw %0, %1, %2" : "=r"(r) : "r"(a), "r"(b));</asm>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>ARCH_PPC64</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int64_t</name></type> <name>MAC64</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>x</name> <init>= <expr><block>{ <expr><name>d</name></expr> }</block></expr></init></decl>;</union>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<asm>__asm__ ("mullw %3, %4, %5 \n\t"

"mulhw %2, %4, %5 \n\t"

"addc %1, %1, %3 \n\t"

"adde %0, %0, %2 \n\t"

: "+r"(x.hl[0]), "+r"(x.hl[1]), "=&amp;r"(h), "=&amp;r"(l)

: "r"(a), "r"(b));</asm>

<return>return <expr><name><name>x</name><operator>.</operator><name>x</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC64</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) = MAC64(d, a, b))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int64_t</name></type> <name>MLS64</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>x</name> <init>= <expr><block>{ <expr><name>d</name></expr> }</block></expr></init></decl>;</union>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<asm>__asm__ ("mullw %3, %4, %5 \n\t"

"mulhw %2, %4, %5 \n\t"

"subfc %1, %3, %1 \n\t"

"subfe %0, %2, %0 \n\t"

: "+r"(x.hl[0]), "+r"(x.hl[1]), "=&amp;r"(h), "=&amp;r"(l)

: "r"(a), "r"(b));</asm>

<return>return <expr><name><name>x</name><operator>.</operator><name>x</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLS64</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) = MLS64(d, a, b))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
