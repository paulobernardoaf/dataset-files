<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\jpegls.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpegls.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_jpegls_init_state</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>twonear</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name><operator>)</operator> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>range</name></name></expr>;</condition> <incr><expr><name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>bpp</name></name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>bpp</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">367</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>range</name></name> <operator>+</operator> <literal type="number">32</literal> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>iso_clip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vmin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vmax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>vmax</name> <operator>||</operator> <name>v</name> <operator>&lt;</operator> <name>vmin</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>vmin</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>v</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_jpegls_reset_coding_parameters</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reset_all</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>basic_t1</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>basic_t2</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>basic_t3</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>factor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reset_all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>, <argument><expr><literal type="number">4095</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>T1</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reset_all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>T1</name></name> <operator>=</operator> <call><name>iso_clip</name><argument_list>(<argument><expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>basic_t1</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>near</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>near</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>T2</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reset_all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>T2</name></name> <operator>=</operator> <call><name>iso_clip</name><argument_list>(<argument><expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>basic_t2</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>near</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>T1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>T3</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reset_all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>T3</name></name> <operator>=</operator> <call><name>iso_clip</name><argument_list>(<argument><expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>basic_t3</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>near</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>T2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <literal type="number">256</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>T1</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reset_all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>T1</name></name> <operator>=</operator> <call><name>iso_clip</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>basic_t1</name> <operator>/</operator> <name>factor</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>near</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>near</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>T2</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reset_all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>T2</name></name> <operator>=</operator> <call><name>iso_clip</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>basic_t2</name> <operator>/</operator> <name>factor</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>near</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>T1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>T3</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reset_all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>T3</name></name> <operator>=</operator> <call><name>iso_clip</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>basic_t3</name> <operator>/</operator> <name>factor</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>near</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>T2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>reset_all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"[JPEG-LS RESET] T=%i,%i,%i\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>T1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>T2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>T3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
