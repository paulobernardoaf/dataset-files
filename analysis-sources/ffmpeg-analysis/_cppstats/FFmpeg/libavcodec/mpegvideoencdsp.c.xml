<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegvideoencdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideoencdsp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_8x8basis_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>rem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>weight</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name><name>basis</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>rem</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>basis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BASIS_SHIFT</name> <operator>-</operator> <name>RECON_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>

<operator>(</operator><name>BASIS_SHIFT</name> <operator>-</operator> <name>RECON_SHIFT</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <name>RECON_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">512</literal> <operator>&lt;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>w</name> <operator>*</operator> <name>b</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>w</name> <operator>*</operator> <name>b</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_8x8basis_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>rem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>basis</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rem</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>basis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BASIS_SHIFT</name> <operator>-</operator> <name>RECON_SHIFT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>

<operator>(</operator><name>BASIS_SHIFT</name> <operator>-</operator> <name>RECON_SHIFT</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_sum_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>pix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>line_size</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_norm1_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sq</name> <init>= <expr><name>ff_square_tab</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_64BIT</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>register</specifier> <name>uint64_t</name></type> <name>x</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>pix</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>register</specifier> <name>uint32_t</name></type> <name>x</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>pix</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>pix</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>line_size</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_edges_8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wrap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name> <operator>-</operator> <name>w</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>wrap</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_line</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wrap</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sides</name> <operator>&amp;</operator> <name>EDGE_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wrap</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>w</name> <operator>+</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sides</name> <operator>&amp;</operator> <name>EDGE_BOTTOM</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>last_line</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wrap</name></expr></argument>, <argument><expr><name>last_line</name></expr></argument>, <argument><expr><name>width</name> <operator>+</operator> <name>w</name> <operator>+</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shrink22</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_wrap</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_wrap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>height</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>s1</name> <operator>+</operator> <name>src_wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name>width</name></expr>;</init> <condition><expr><name>w</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>w</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>w</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_wrap</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shrink44</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_wrap</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_wrap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>height</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>s1</name> <operator>+</operator> <name>src_wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s3</name> <operator>=</operator> <name>s2</name> <operator>+</operator> <name>src_wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s4</name> <operator>=</operator> <name>s3</name> <operator>+</operator> <name>src_wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name>width</name></expr>;</init> <condition><expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>w</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<name><name>s2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<name><name>s3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<name><name>s4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s3</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s4</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>src_wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_wrap</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shrink88</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_wrap</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_wrap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>height</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>w</name> <operator>=</operator> <name>width</name></expr>;</init><condition><expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>w</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_wrap</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>dst</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>src_wrap</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>src_wrap</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_wrap</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpegvideoencdsp_init</name><parameter_list>(<parameter><decl><type><name>MpegvideoEncDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>try_8x8basis</name></name> <operator>=</operator> <name>try_8x8basis_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_8x8basis</name></name> <operator>=</operator> <name>add_8x8basis_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>shrink</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>av_image_copy_plane</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>shrink</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>shrink22</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>shrink</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>shrink44</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>shrink</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>shrink88</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_sum</name></name> <operator>=</operator> <name>pix_sum_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_norm1</name></name> <operator>=</operator> <name>pix_norm1_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>draw_edges</name></name> <operator>=</operator> <name>draw_edges_8_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpegvideoencdsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpegvideoencdsp_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpegvideoencdsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpegvideoencdsp_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
