<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\elbg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elbg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELTA_ERR_MAX</name></cpp:macro> <cpp:value>0.1</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>cell_s</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cell_s</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block></struct></type> <name>cell</name>;</typedef>

<typedef>typedef <type><struct>struct <name>elbg_data</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numCB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>codebook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier><modifier>*</modifier></type><name>cells</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>utility</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>utility_inc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nearest_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>points</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>rand_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>scratchbuf</name></decl>;</decl_stmt>

}</block></struct></type> <name>elbg_data</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>distance_limited</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dist</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT_MAX</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>dist</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vect_division</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>div</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>div</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name><name>vect</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>res</name> <operator>!=</operator> <name>vect</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>vect</name></expr></argument>, <argument><expr><name>dim</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eval_error_cell</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>centroid</name></decl></parameter>, <parameter><decl><type><name>cell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>cells</name></expr>;</condition> <incr><expr><name>cells</name><operator>=</operator><name><name>cells</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>+=</operator> <call><name>distance_limited</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name><name>cells</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_closest_codebook</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pick</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>diff_min</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>distance_limited</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name></name> <operator>+</operator> <name>index</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name>diff_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>diff_min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pick</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_min</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>pick</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_high_utility_cell</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>rand_state</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>rand_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><call><name>av_lfg_get</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>rand_state</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>simple_lbg</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name><name>centroid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>newutility</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>points</name></decl></parameter>,

<parameter><decl><type><name>cell</name> <modifier>*</modifier></type><name>cells</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>numpoints</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>newcentroid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name><name>elbg</name><operator>-&gt;</operator><name>scratchbuf</name></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>dim</name></expr>,

<expr><name><name>elbg</name><operator>-&gt;</operator><name>scratchbuf</name></name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>dim</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier></type><name>tempcell</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>dim</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>newcentroid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newutility</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>newutility</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tempcell</name> <operator>=</operator> <name>cells</name></expr>;</init> <condition><expr><name>tempcell</name></expr>;</condition> <incr><expr><name>tempcell</name><operator>=</operator><name><name>tempcell</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>distance_limited</name><argument_list>(<argument><expr><name><name>centroid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>points</name> <operator>+</operator> <name><name>tempcell</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name>dim</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call><operator>&gt;=</operator>

<call><name>distance_limited</name><argument_list>(<argument><expr><name><name>centroid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>points</name> <operator>+</operator> <name><name>tempcell</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name>dim</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>numpoints</name><index>[<expr><name>idx</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newcentroid</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>points</name><index>[<expr><name><name>tempcell</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name>dim</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vect_division</name><argument_list>(<argument><expr><name><name>centroid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numpoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vect_division</name><argument_list>(<argument><expr><name><name>centroid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>numpoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tempcell</name> <operator>=</operator> <name>cells</name></expr>;</init> <condition><expr><name>tempcell</name></expr>;</condition> <incr><expr><name>tempcell</name><operator>=</operator><name><name>tempcell</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>dist</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><call><name>distance_limited</name><argument_list>(<argument><expr><name><name>centroid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>points</name> <operator>+</operator> <name><name>tempcell</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name>dim</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>,

<macro><name>distance_limited</name><argument_list>(<argument>centroid[<literal type="number">1</literal>]</argument>, <argument>points + tempcell-&gt;index*dim</argument>, <argument>dim</argument>, <argument>INT_MAX</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>dist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>newutility</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <name><name>dist</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>newutility</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>newutility</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_new_centroids</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>huc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newcentroid_i</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newcentroid_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier></type><name>tempcell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>min</name> <init>= <expr><name>newcentroid_i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>max</name> <init>= <expr><name>newcentroid_p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>tempcell</name> <operator>=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>huc</name></expr>]</index></name></expr>;</init> <condition><expr><name>tempcell</name></expr>;</condition> <incr><expr><name>tempcell</name> <operator>=</operator> <name><name>tempcell</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>min</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>tempcell</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>tempcell</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ni</name> <init>= <expr><name><name>min</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>max</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>min</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>np</name> <init>= <expr><name><name>min</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>max</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>min</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>newcentroid_i</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ni</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newcentroid_p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shift_codebook</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>indexes</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name><name>newcentroid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier></type><name>tempdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>indexes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>*</operator><name>pp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp</name><operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tempdata</name> <operator>=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>tempdata</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier></type><name>tempcell2</name> <init>= <expr><name><name>tempdata</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>distance_limited</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name><name>tempdata</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>,

<argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call> <operator>&gt;</operator>

<call><name>distance_limited</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name><name>tempdata</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>,

<argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tempdata</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>indexes</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>indexes</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>tempdata</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tempdata</name> <operator>=</operator> <name>tempcell2</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>evaluate_utility_inc</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>inc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>utility</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>elbg</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inc</name> <operator>+=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>utility</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_utility_and_n_cb</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newutility</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier></type><name>tempcell</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>utility</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>newutility</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tempcell</name><operator>=</operator><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</init> <condition><expr><name>tempcell</name></expr>;</condition> <incr><expr><name>tempcell</name><operator>=</operator><name><name>tempcell</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>nearest_cb</name><index>[<expr><name><name>tempcell</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>try_shift_candidate</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>olderror</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>newerror</name></decl>, <decl><type ref="prev"/><name>cont</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>newutility</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>newcentroid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name><name>elbg</name><operator>-&gt;</operator><name>scratchbuf</name></name></expr>,

<expr><name><name>elbg</name><operator>-&gt;</operator><name>scratchbuf</name></name> <operator>+</operator> <name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr>,

<expr><name><name>elbg</name><operator>-&gt;</operator><name>scratchbuf</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier></type><name>tempcell</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>olderror</name> <operator>+=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>utility</name><index>[<expr><name><name>idx</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>tempcell</name><operator>=</operator><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</init> <condition><expr><name>tempcell</name></expr>;</condition> <incr><expr><name>tempcell</name><operator>=</operator><name><name>tempcell</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cont</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newcentroid</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>tempcell</name><operator>-&gt;</operator><name>index</name></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><call><name>vect_division</name><argument_list>(<argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_new_centroids</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>, <argument><expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newutility</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>eval_error_cell</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>, <argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newutility</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>eval_error_cell</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>, <argument><expr><name><name>newcentroid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newerror</name> <operator>=</operator> <name><name>newutility</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newerror</name> <operator>+=</operator> <call><name>simple_lbg</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name>newcentroid</name></expr></argument>, <argument><expr><name>newutility</name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name></name></expr></argument>,

<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>olderror</name> <operator>&gt;</operator> <name>newerror</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shift_codebook</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>newcentroid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>error</name></name> <operator>+=</operator> <name>newerror</name> <operator>-</operator> <name>olderror</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_utility_and_n_cb</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>, <argument><expr><name><name>idx</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>newutility</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>evaluate_utility_inc</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_shiftings</name><parameter_list>(<parameter><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>evaluate_utility_inc</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name></expr>;</condition> <incr><expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>utility</name><index>[<expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>elbg</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_high_utility_cell</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_closest_codebook</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>, <argument><expr><name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>try_shift_candidate</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_PRIME</name></cpp:macro> <cpp:value>433494437LL</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>avpriv_init_elbg</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numpoints</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>codebook</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>numCB</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_steps</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>closest_cb</name></decl></parameter>,

<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>rand_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>numpoints</name> <operator>&gt;</operator> <literal type="number">24</literal><operator>*</operator><name>numCB</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>temp_points</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>dim</name></expr></argument>, <argument><expr><operator>(</operator><name>numpoints</name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp_points</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>numpoints</name><operator>/</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>*</operator><name>BIG_PRIME</name><operator>)</operator> <operator>%</operator> <name>numpoints</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_points</name> <operator>+</operator> <name>i</name><operator>*</operator><name>dim</name></expr></argument>, <argument><expr><name>points</name> <operator>+</operator> <name>k</name><operator>*</operator><name>dim</name></expr></argument>, <argument><expr><name>dim</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_init_elbg</name><argument_list>(<argument><expr><name>temp_points</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>numpoints</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>codebook</name></expr></argument>,

<argument><expr><name>numCB</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>max_steps</name></expr></argument>, <argument><expr><name>closest_cb</name></expr></argument>, <argument><expr><name>rand_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp_points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_do_elbg</name><argument_list>(<argument><expr><name>temp_points</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>numpoints</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>codebook</name></expr></argument>,

<argument><expr><name>numCB</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>max_steps</name></expr></argument>, <argument><expr><name>closest_cb</name></expr></argument>, <argument><expr><name>rand_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>temp_points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numCB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>codebook</name> <operator>+</operator> <name>i</name><operator>*</operator><name>dim</name></expr></argument>, <argument><expr><name>points</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>*</operator><name>BIG_PRIME</name><operator>)</operator><operator>%</operator><name>numpoints</name><operator>)</operator><operator>*</operator><name>dim</name></expr></argument>,

<argument><expr><name>dim</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_do_elbg</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numpoints</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>codebook</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>numCB</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_steps</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>closest_cb</name></decl></parameter>,

<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>rand_state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>elbg_data</name></type> <name>elbg_d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>elbg_data</name> <modifier>*</modifier></type><name>elbg</name> <init>= <expr><operator>&amp;</operator><name>elbg_d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>last_error</name></decl>, <decl><type ref="prev"/><name>steps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>dist_cb</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>numpoints</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>size_part</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>numCB</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier></type><name>list_buffer</name> <init>= <expr><call><name>av_malloc_array</name><argument_list>(<argument><expr><name>numpoints</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cell</name> <modifier>*</modifier></type><name>free_cells</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_dist</name></decl>, <decl><type ref="prev"/><name>best_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name> <operator>=</operator> <name>dim</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name> <operator>=</operator> <name>numCB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name></name> <operator>=</operator> <name>codebook</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>numCB</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cell</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>utility</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>numCB</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>nearest_cb</name></name> <operator>=</operator> <name>closest_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>numCB</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>scratchbuf</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>*</operator><name>dim</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dist_cb</name> <operator>||</operator> <operator>!</operator><name>size_part</name> <operator>||</operator> <operator>!</operator><name>list_buffer</name> <operator>||</operator> <operator>!</operator><name><name>elbg</name><operator>-&gt;</operator><name>cells</name></name> <operator>||</operator>

<operator>!</operator><name><name>elbg</name><operator>-&gt;</operator><name>utility</name></name> <operator>||</operator> <operator>!</operator><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name></name> <operator>||</operator> <operator>!</operator><name><name>elbg</name><operator>-&gt;</operator><name>scratchbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>rand_state</name></name> <operator>=</operator> <name>rand_state</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>free_cells</name> <operator>=</operator> <name>list_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_error</name> <operator>=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>error</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>steps</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>utility</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numCB</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numCB</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cell</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numpoints</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>best_dist</name> <operator>=</operator> <call><name>distance_limited</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name></name> <operator>+</operator> <name>best_idx</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>distance_limited</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name></name> <operator>+</operator> <name>k</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>best_dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;</operator> <name>best_dist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_dist</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_idx</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>nearest_cb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>best_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dist_cb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>best_dist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>error</name></name> <operator>+=</operator> <name><name>dist_cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>utility</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>nearest_cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name><name>dist_cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>free_cells</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>free_cells</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>nearest_cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>nearest_cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>free_cells</name></expr>;</expr_stmt>

<expr_stmt><expr><name>free_cells</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>do_shiftings</name><argument_list>(<argument><expr><name>elbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>size_part</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numCB</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name><operator>*</operator><name>dim</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numpoints</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>size_part</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>nearest_cb</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name><index>[<expr><name><name>elbg</name><operator>-&gt;</operator><name>nearest_cb</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+=</operator>

<name><name>elbg</name><operator>-&gt;</operator><name>points</name><index>[<expr><name>i</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>elbg</name><operator>-&gt;</operator><name>numCB</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vect_division</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>,

<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>codebook</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>, <argument><expr><name><name>size_part</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>dim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block> while<condition>(<expr><operator>(</operator><operator>(</operator><name>last_error</name> <operator>-</operator> <name><name>elbg</name><operator>-&gt;</operator><name>error</name></name><operator>)</operator> <operator>&gt;</operator> <name>DELTA_ERR_MAX</name><operator>*</operator><name><name>elbg</name><operator>-&gt;</operator><name>error</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>steps</name> <operator>&lt;</operator> <name>max_steps</name><operator>)</operator></expr>)</condition>;</do>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dist_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>size_part</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>utility</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>list_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>cells</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>utility_inc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>elbg</name><operator>-&gt;</operator><name>scratchbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
