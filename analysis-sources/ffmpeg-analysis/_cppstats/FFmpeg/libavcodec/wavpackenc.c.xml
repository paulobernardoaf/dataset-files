<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\wavpackenc.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_WRITER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wavpackenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wavpack.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_WEIGHT</name><parameter_list>(<parameter><type><name>weight</name></type></parameter>, <parameter><type><name>delta</name></type></parameter>, <parameter><type><name>source</name></type></parameter>, <parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((source) &amp;&amp; (result)) { int32_t s = (int32_t) ((source) ^ (result)) &gt;&gt; 31; weight = ((delta) ^ s) + ((weight) - s); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_WEIGHT_F</name><parameter_list>(<parameter><type><name>weight</name></type></parameter>, <parameter><type><name>sample</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((((sample) &amp; 0xffff) * (weight)) &gt;&gt; 9) + ((((sample) &amp; ~0xffff) &gt;&gt; 9) * (weight)) + 1) &gt;&gt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_WEIGHT_I</name><parameter_list>(<parameter><type><name>weight</name></type></parameter>, <parameter><type><name>sample</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((weight) * (sample) + 512) &gt;&gt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_WEIGHT</name><parameter_list>(<parameter><type><name>weight</name></type></parameter>, <parameter><type><name>sample</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sample) != (short) (sample) ? APPLY_WEIGHT_F(weight, sample) : APPLY_WEIGHT_I (weight, sample))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>destin</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(&amp;destin, 0, sizeof(destin));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_LSB</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_MASK</name></cpp:macro> <cpp:value>(0x1FU &lt;&lt; SHIFT_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAG_LSB</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAG_MASK</name></cpp:macro> <cpp:value>(0x1FU &lt;&lt; MAG_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRATE_LSB</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRATE_MASK</name></cpp:macro> <cpp:value>(0xFU &lt;&lt; SRATE_LSB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_TRY_DELTAS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_ADJUST_DELTAS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_SORT_FIRST</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_BRANCHES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_SORT_LAST</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>WavPackExtraInfo</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name></type> <name><name>dps</name><index>[<expr><name>MAX_TERMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nterms</name></decl>, <name>log_limit</name>, <name>gt16bit</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>best_bits</name></decl>;</decl_stmt>

}</block></struct></type> <name>WavPackExtraInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WavPackWords</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pend_data</name></decl>, <name>holding_one</name>, <name>zeros_acc</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>holding_zero</name></decl>, <name>pend_count</name>;</decl_stmt>

<decl_stmt><decl><type><name>WvChannel</name></type> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>WavPackWords</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WavPackEncodeContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stereo</name></decl>, <name>stereo_in</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>samples_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>sampleptrs</name><index>[<expr><name>MAX_TERMS</name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sampleptrs_size</name><index>[<expr><name>MAX_TERMS</name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>temp_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>temp_buffer_size</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>best_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>best_buffer_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>js_left</name></decl>, <modifier>*</modifier><name>js_right</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>js_left_size</name></decl>, <name>js_right_size</name>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>orig_l</name></decl>, <modifier>*</modifier><name>orig_r</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_l_size</name></decl>, <name>orig_r_size</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>extra_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>optimize_mono</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decorr_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>joint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_branches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WavPackWords</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>int32_sent_bits</name></decl>, <name>int32_zeros</name>, <name>int32_ones</name>, <name>int32_dups</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>float_flags</name></decl>, <name>float_shift</name>, <name>float_max_exp</name>, <name>max_exp</name>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>shifted_ones</name></decl>, <name>shifted_zeros</name>, <name>shifted_both</name>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>false_zeros</name></decl>, <name>neg_zeros</name>, <name>ordata</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_terms</name></decl>, <name>shift</name>, <name>joint_stereo</name>, <name>false_stereo</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_decorrs</name></decl>, <name>num_passes</name>, <name>best_decorr</name>, <name>mask_decorr</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name></type> <name><name>decorr_passes</name><index>[<expr><name>MAX_TERMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>WavPackDecorrSpec</name> <modifier>*</modifier></type><name>decorr_specs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta_decay</name></decl>;</decl_stmt>

}</block></struct></type> <name>WavPackEncodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wavpack_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel count: %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>block_samples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_samples</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>block_samples</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>block_samples</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>WV_MAX_SAMPLES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_samples</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>block_samples</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">40000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_samples</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>block_samples</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name>WV_MAX_SAMPLES</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid block size: %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>!=</operator> <name>FF_COMPRESSION_DEFAULT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_filter</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_branches</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>=</operator> <name>EXTRA_TRY_DELTAS</name><operator>|</operator><name>EXTRA_ADJUST_DELTAS</name><operator>|</operator><name>EXTRA_SORT_FIRST</name><operator>|</operator><name>EXTRA_SORT_LAST</name><operator>|</operator><name>EXTRA_BRANCHES</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_branches</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>=</operator> <name>EXTRA_TRY_DELTAS</name><operator>|</operator><name>EXTRA_ADJUST_DELTAS</name><operator>|</operator><name>EXTRA_SORT_FIRST</name><operator>|</operator><name>EXTRA_BRANCHES</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_branches</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>=</operator> <name>EXTRA_TRY_DELTAS</name><operator>|</operator><name>EXTRA_ADJUST_DELTAS</name><operator>|</operator><name>EXTRA_SORT_FIRST</name><operator>|</operator><name>EXTRA_BRANCHES</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_branches</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>=</operator> <name>EXTRA_TRY_DELTAS</name><operator>|</operator><name>EXTRA_ADJUST_DELTAS</name><operator>|</operator><name>EXTRA_SORT_FIRST</name><operator>|</operator><name>EXTRA_BRANCHES</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_branches</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>=</operator> <name>EXTRA_TRY_DELTAS</name><operator>|</operator><name>EXTRA_ADJUST_DELTAS</name><operator>|</operator><name>EXTRA_BRANCHES</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_filter</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_decorrs</name></name> <operator>=</operator> <name><name>decorr_filter_sizes</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>decorr_filter</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_specs</name></name> <operator>=</operator> <name><name>decorr_filters</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>decorr_filter</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shift_mono</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shift_stereo</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>left</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_SHIFT_ONES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_SHIFT_SAME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_SHIFT_SENT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_ZEROS_SENT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_NEG_ZEROS</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_EXCEPTIONS</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_mantissa</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f) &amp; 0x7fffff)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_exponent</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((f) &gt;&gt; 23) &amp; 0xff)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_sign</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((f) &gt;&gt; 31) &amp; 0x1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_float</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>shift_count</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><operator>*</operator><name>sample</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>|=</operator> <name>FLOAT_EXCEPTIONS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0x1000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>-</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0x800000</literal> <operator>+</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift_count</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <name>shift_count</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>false_zeros</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>get_sign</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>neg_zeros</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift_count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_count</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>get_mantissa</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shifted_zeros</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>get_mantissa</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shifted_ones</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shifted_both</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ordata</name></name> <operator>|=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sample</name> <operator>=</operator> <ternary><condition><expr><call><name>get_sign</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>value</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scan_float</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><literal type="number">0xffffffffu</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shifted_ones</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>shifted_zeros</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>shifted_both</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ordata</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>false_zeros</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>neg_zeros</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>f</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>*</operator> <literal type="number">27</literal> <operator>+</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>get_sign</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>&amp;&amp;</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>=</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>*</operator> <literal type="number">27</literal> <operator>+</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>get_sign</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>&amp;&amp;</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>=</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>*</operator> <literal type="number">27</literal> <operator>+</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>get_sign</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>&amp;&amp;</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name> <operator>=</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>crc_x</name></name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>process_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>process_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_max_exp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_exp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>shifted_both</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>|=</operator> <name>FLOAT_SHIFT_SENT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>shifted_ones</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>shifted_zeros</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>|=</operator> <name>FLOAT_SHIFT_ONES</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>shifted_ones</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>shifted_zeros</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>|=</operator> <name>FLOAT_SHIFT_SAME</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ordata</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ordata</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ordata</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ordata</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_mono</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_stereo</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MAG_MASK</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ordata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ordata</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>false_zeros</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>neg_zeros</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>|=</operator> <name>FLOAT_ZEROS_SENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>neg_zeros</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>|=</operator> <name>FLOAT_NEG_ZEROS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FLOAT_EXCEPTIONS</name> <operator>|</operator> <name>FLOAT_ZEROS_SENT</name> <operator>|</operator>

<name>FLOAT_SHIFT_SENT</name> <operator>|</operator> <name>FLOAT_SHIFT_SAME</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_int23</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>magdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ordata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xordata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>anddata</name> <init>= <expr><operator>~</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_sent_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_zeros</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_ones</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_dups</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>M</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>magdata</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>M</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><name>M</name></expr> </then><else>: <expr><name>M</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>xordata</name> <operator>|=</operator> <name>M</name> <operator>^</operator> <operator>-</operator><operator>(</operator><name>M</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>anddata</name> <operator>&amp;=</operator> <name>M</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ordata</name> <operator>|=</operator> <name>M</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ordata</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>anddata</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>xordata</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>L</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>R</name> <init>= <expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>magdata</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>L</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><name>L</name></expr> </then><else>: <expr><name>L</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>magdata</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>R</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><name>R</name></expr> </then><else>: <expr><name>R</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>xordata</name> <operator>|=</operator> <name>L</name> <operator>^</operator> <operator>-</operator><operator>(</operator><name>L</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xordata</name> <operator>|=</operator> <name>R</name> <operator>^</operator> <operator>-</operator><operator>(</operator><name>R</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>anddata</name> <operator>&amp;=</operator> <name>L</name> <operator>&amp;</operator> <name>R</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ordata</name> <operator>|=</operator> <name>L</name> <operator>|</operator> <name>R</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ordata</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>anddata</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>xordata</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MAG_MASK</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>magdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>magdata</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ordata</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_zeros</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_shift</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ordata</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name>ordata</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>;</do>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>anddata</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_ones</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_shift</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>anddata</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>anddata</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>;</do>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>xordata</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_dups</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_shift</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xordata</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name>xordata</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>total_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>WV_INT32_DATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_mono</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>total_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_stereo</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>total_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scan_int32</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>magdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ordata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>xordata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>anddata</name> <init>= <expr><operator>~</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><literal type="number">0xffffffffu</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_sent_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_zeros</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_ones</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_dups</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>M</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name>M</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>M</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>magdata</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>M</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><name>M</name></expr> </then><else>: <expr><name>M</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>xordata</name> <operator>|=</operator> <name>M</name> <operator>^</operator> <operator>-</operator><operator>(</operator><name>M</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>anddata</name> <operator>&amp;=</operator> <name>M</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ordata</name> <operator>|=</operator> <name>M</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>L</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>R</name> <init>= <expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name>L</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>L</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name>crc</name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name>R</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>R</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>magdata</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>L</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><name>L</name></expr> </then><else>: <expr><name>L</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>magdata</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>R</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><name>R</name></expr> </then><else>: <expr><name>R</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>xordata</name> <operator>|=</operator> <name>L</name> <operator>^</operator> <operator>-</operator><operator>(</operator><name>L</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xordata</name> <operator>|=</operator> <name>R</name> <operator>^</operator> <operator>-</operator><operator>(</operator><name>R</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>anddata</name> <operator>&amp;=</operator> <name>L</name> <operator>&amp;</operator> <name>R</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ordata</name> <operator>|=</operator> <name>L</name> <operator>|</operator> <name>R</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>crc_x</name></name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MAG_MASK</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>magdata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>magdata</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>WV_INT32_DATA</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ordata</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_zeros</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_shift</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ordata</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name>ordata</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>;</do></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>anddata</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_ones</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_shift</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>anddata</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>anddata</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>;</do></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>xordata</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_dups</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_shift</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xordata</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name>xordata</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>;</do></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>int32_sent_bits</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>-</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>total_shift</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_sent_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MAG_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>+=</operator> <literal type="number">23</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>total_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>WV_INT32_DATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_mono</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>total_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_stereo</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>total_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>int32_sent_bits</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>store_weight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>weight</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>weight</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>weight</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>weight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>weight</name> <operator>-=</operator> <operator>(</operator><name>weight</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>weight</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>restore_weight</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>weight</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <name>weight</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><name>result</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log2s</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><call><name>wp_log2</name><argument_list>(<argument><expr><operator>-</operator><name>value</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>wp_log2</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decorr_mono</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_samples</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out_samples</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_samples</name> <operator>+=</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>in_samples</name> <operator>+=</operator> <operator>(</operator><name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name> <operator>=</operator> <call><name>restore_weight</name><argument_list>(<argument><expr><call><name>store_weight</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>log2s</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <name>MAX_TERM</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>sam_A</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>!</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left</name> <operator>=</operator> <name><name>in_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>-=</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_samples</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_samples</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>m</name> <operator>+</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>sam_A</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>left</name> <operator>=</operator> <name><name>in_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>-=</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_samples</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_samples</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;=</operator> <name>MAX_TERM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>temp_A</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_A</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>temp_A</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reverse_mono_decorr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <name>MAX_TERM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sam_A</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sam_A</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>&amp;=</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>&amp;=</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>count_bits</name><parameter_list>(<parameter><type><name>av</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((av) ? 32 - ff_clz(av) : 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>log2sample</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dbits</name> <init>= <expr><call><name>count_bits</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>+=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>+=</operator> <operator>(</operator><name>dbits</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>wp_log2_table</name><index>[<expr><operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">9</literal> <operator>-</operator> <name>dbits</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>+=</operator> <name>dbits</name> <operator>=</operator> <operator>(</operator><name>dbits</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>wp_log2_table</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>dbits</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&amp;&amp;</operator> <name>dbits</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>log2mono</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>log2sample</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>*</operator><name>samples</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>UINT32_MAX</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>log2stereo</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>log2sample</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>*</operator><name>samples_l</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>log2sample</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><operator>*</operator><name>samples_r</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>UINT32_MAX</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decorr_mono_buffer</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>outsamples</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name></type> <name>dp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dppi</name> <init>= <expr><name>dpp</name> <operator>+</operator> <name>tindex</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name><name>dppi</name><operator>-&gt;</operator><name>delta</name></name></expr></init></decl>, <decl><type ref="prev"/><name>pre_delta</name></decl>, <decl><type ref="prev"/><name>term</name> <init>= <expr><name><name>dppi</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pre_delta</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pre_delta</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pre_delta</name> <operator>=</operator> <name>delta</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <name>pre_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_mono</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>outsamples</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tindex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reverse_mono_decorr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dppi</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dppi</name><operator>-&gt;</operator><name>weightA</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>weightA</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_mono</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>outsamples</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>, <argument><expr><name><name>dppi</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dppi</name><operator>-&gt;</operator><name>weightA</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>weightA</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>sumA</name></name> <operator>/</operator> <name>nb_samples</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decorr_mono</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>outsamples</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recurse_mono</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WavPackExtraInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>input_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>term</name></decl>, <decl><type ref="prev"/><name>branches</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>num_branches</name></name> <operator>-</operator> <name>depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outsamples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>term_bits</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>branches</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>branches</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>term_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>outsamples</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>term</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>term</name> <operator>&lt;=</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>term</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <literal type="number">17</literal> <operator>&amp;&amp;</operator> <name>branches</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>term</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>term</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>term</name> <operator>&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_mono_buffer</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>outsamples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>log2mono</name><argument_list>(<argument><expr><name>outsamples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term_bits</name><index>[<expr><name>term</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name>branches</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>local_best_bits</name> <init>= <expr><name>input_bits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">22</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>term_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>term_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>local_best_bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>local_best_bits</name> <operator>=</operator> <name><name>term_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_term</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>best_term</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>term_bits</name><index>[<expr><name>best_term</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>best_term</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_mono_buffer</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>outsamples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>recurse_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>local_best_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sort_mono</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WavPackExtraInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reversed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>reversed</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ri</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reversed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ri</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>ri</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decorr_mono_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>ri</name></expr> ]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name></expr> ]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ri</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_mono_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>log2mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reversed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>ri</name></expr> ]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_mono_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delta_mono</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WavPackExtraInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lower</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>delta</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>delta</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>d</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_mono_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>log2mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lower</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>delta</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>!</operator><name>lower</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_mono_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>log2mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>allocate_buffers2</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nterms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nterms</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sampleptrs_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sampleptrs_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>allocate_buffers</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>best_buffer_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp_buffer_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>best_buffer_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp_buffer_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>analyze_mono</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavPackExtraInfo</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>log_limit</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>log_limit</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">6912</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>allocate_buffers2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>dps</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>dps</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>dps</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>best_bits</name></name> <operator>=</operator> <call><name>log2mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_BRANCHES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>recurse_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>floor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>log2mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_SORT_FIRST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sort_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_TRY_DELTAS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>delta_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_ADJUST_DELTAS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>*</operator> <literal type="number">2.0</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>delta</name><operator>)</operator> <operator>/</operator> <literal type="number">3.0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_SORT_LAST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sort_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_samples</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>nterms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_word</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WvChannel</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>value</name> <init>= <expr><call><name>labs</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>-</operator> <name>low</name> <operator>&lt;</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>-</operator> <name>low</name> <operator>&lt;</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_mono</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>no_history</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name></type> <name>temp_decorr_pass</name></decl>, <decl><type ref="prev"/><name><name>save_decorr_passes</name><index>[<expr><name>MAX_TERMS</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_samples</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>best_size</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_limit</name></decl>, <decl><type ref="prev"/><name>pi</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nb_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>log_limit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>log_limit</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">6912</literal></expr></argument>, <argument><expr><name>log_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>allocate_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_history</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>WavPackDecorrSpec</name> <modifier>*</modifier></type><name>wpds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nterms</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pi</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_decorrs</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>wpds</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_specs</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nterms</name> <operator>=</operator> <name><name>decorr_filter_nterms</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>decorr_filter</name></name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>save_decorr_passes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nterms</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>temp_decorr_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <name><name>wpds</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>wpds</name><operator>-&gt;</operator><name>terms</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>temp_decorr_pass</name><operator>.</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decorr_mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><operator>~</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>samplesA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>reverse_mono_decorr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>save_decorr_passes</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Decorr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><operator>~</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>log2mono</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>log_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>UINT32_MAX</name> <operator>||</operator> <operator>!</operator><name>nterms</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nterms</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>best_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name>save_decorr_passes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Decorr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_TERMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <name>nterms</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pi</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_decorrs</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>analyze_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>do_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>do_samples</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_history</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scan_word</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decorr_stereo</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_left</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_right</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out_left</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out_right</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>sumB</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_left</name> <operator>+=</operator> <name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>+=</operator> <name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>+=</operator> <name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>+=</operator> <name>nb_samples</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name> <operator>=</operator> <call><name>restore_weight</name><argument_list>(<argument><expr><call><name>store_weight</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name> <operator>=</operator> <call><name>restore_weight</name><argument_list>(<argument><expr><call><name>store_weight</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>log2s</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>log2s</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumB</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name> <argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumB</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">18</literal></expr>:</case>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumB</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<default>default:</default> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumB</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>temp_A</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>temp_B</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_A</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_B</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_A</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_B</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>sam_B</name> <operator>=</operator> <name><name>in_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumB</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>sam_A</name> <operator>=</operator> <name><name>in_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumB</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>

<while>while <condition>(<expr><name>nb_samples</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name><name>in_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-=</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumB</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name><name>in_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-=</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>sumA</name></name> <operator>+=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_left</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reverse_decorr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <name>MAX_TERM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sam_A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sam_B</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sam_A</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sam_B</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>&amp;=</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>&amp;=</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decorr_stereo_quick</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_left</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_right</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out_left</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out_right</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name> <operator>=</operator> <call><name>restore_weight</name><argument_list>(<argument><expr><call><name>store_weight</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name> <operator>=</operator> <call><name>restore_weight</name><argument_list>(<argument><expr><call><name>store_weight</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>log2s</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>wp_exp2</name><argument_list>(<argument><expr><call><name>log2s</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">18</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>temp_A</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>temp_B</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_A</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_B</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_A</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_B</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>sam_B</name> <operator>=</operator> <name><name>in_left</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_right</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>sam_A</name> <operator>=</operator> <name><name>in_right</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in_left</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name><name>in_right</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-=</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name><name>in_left</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-=</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decorr_stereo_buffer</name><parameter_list>(<parameter><decl><type><name>WavPackExtraInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_left</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_right</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out_left</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out_right</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tindex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name></type> <name>dp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dppi</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name> <operator>+</operator> <name>tindex</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name><name>dppi</name><operator>-&gt;</operator><name>delta</name></name></expr></init></decl>, <decl><type ref="prev"/><name>pre_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>term</name> <init>= <expr><name><name>dppi</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pre_delta</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pre_delta</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pre_delta</name> <operator>=</operator> <name>delta</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <name>pre_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_stereo</name><argument_list>(<argument><expr><name>in_left</name></expr></argument>, <argument><expr><name>in_right</name></expr></argument>, <argument><expr><name>out_left</name></expr></argument>, <argument><expr><name>out_right</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tindex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reverse_decorr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dppi</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dppi</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>, <argument><expr><name><name>dp</name><operator>.</operator><name>samplesB</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dppi</name><operator>-&gt;</operator><name>weightA</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>weightA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dppi</name><operator>-&gt;</operator><name>weightB</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>weightB</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_stereo</name><argument_list>(<argument><expr><name>in_left</name></expr></argument>, <argument><expr><name>in_right</name></expr></argument>, <argument><expr><name>out_left</name></expr></argument>, <argument><expr><name>out_right</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>, <argument><expr><name><name>dppi</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesB</name></name></expr></argument>, <argument><expr><name><name>dppi</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><operator>.</operator><name>samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dppi</name><operator>-&gt;</operator><name>weightA</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>weightA</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>sumA</name></name> <operator>/</operator> <name>nb_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dppi</name><operator>-&gt;</operator><name>weightB</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>weightB</name></name> <operator>=</operator> <name><name>dp</name><operator>.</operator><name>sumB</name></name> <operator>/</operator> <name>nb_samples</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>gt16bit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo</name><argument_list>(<argument><expr><name>in_left</name></expr></argument>, <argument><expr><name>in_right</name></expr></argument>, <argument><expr><name>out_left</name></expr></argument>, <argument><expr><name>out_right</name></expr></argument>,

<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo_quick</name><argument_list>(<argument><expr><name>in_left</name></expr></argument>, <argument><expr><name>in_right</name></expr></argument>, <argument><expr><name>out_left</name></expr></argument>, <argument><expr><name>out_right</name></expr></argument>,

<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sort_stereo</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WavPackExtraInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reversed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>reversed</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ri</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reversed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ri</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ri</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>ri</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ri</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decorr_stereo_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>ri</name></expr> ]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name></expr> ]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ri</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>log2stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reversed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>ri</name></expr> ]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_stereo_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delta_stereo</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WavPackExtraInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lower</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>delta</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>delta</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>d</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_stereo_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>log2stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lower</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>delta</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>!</operator><name>lower</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_stereo_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>log2stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recurse_stereo</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WavPackExtraInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>input_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>term</name></decl>, <decl><type ref="prev"/><name>branches</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>num_branches</name></name> <operator>-</operator> <name>depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_left</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in_right</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_left</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>term_bits</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>branches</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>branches</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>term_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_right</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_right</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>term</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>term</name> <operator>&lt;=</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>term</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>term</name> <operator>||</operator> <operator>(</operator><name>term</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>term</name> <operator>&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <literal type="number">17</literal> <operator>&amp;&amp;</operator> <name>branches</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>term</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>term</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_CROSS_DECORR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>term</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>term</name> <operator>&lt;</operator> <literal type="number">17</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_stereo_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>in_left</name></expr></argument>, <argument><expr><name>in_right</name></expr></argument>, <argument><expr><name>out_left</name></expr></argument>, <argument><expr><name>out_right</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>log2stereo</name><argument_list>(<argument><expr><name>out_left</name></expr></argument>, <argument><expr><name>out_right</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>best_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>depth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>term_bits</name><index>[<expr><name>term</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name>branches</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>local_best_bits</name> <init>= <expr><name>input_bits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">22</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>term_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>term_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>local_best_bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>local_best_bits</name> <operator>=</operator> <name><name>term_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_term</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>best_term</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>term_bits</name><index>[<expr><name>best_term</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>best_term</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dps</name><index>[<expr><name>depth</name></expr>]</index></name><operator>.</operator><name>delta</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorr_stereo_buffer</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>in_left</name></expr></argument>, <argument><expr><name>in_right</name></expr></argument>, <argument><expr><name>out_left</name></expr></argument>, <argument><expr><name>out_right</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>recurse_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>local_best_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>analyze_stereo</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_left</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>in_right</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>do_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavPackExtraInfo</name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>gt16bit</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>log_limit</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>log_limit</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">6912</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>log_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>allocate_buffers2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>dps</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>dps</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>in_left</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>in_right</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>dps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>gt16bit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>dps</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo_quick</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>dps</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>best_bits</name></name> <operator>=</operator> <call><name>log2stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_BRANCHES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>recurse_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>floor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>log2stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_SORT_FIRST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sort_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_TRY_DELTAS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>delta_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_ADJUST_DELTAS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>*</operator> <literal type="number">2.0</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>delta</name><operator>)</operator> <operator>/</operator> <literal type="number">3.0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>delta_decay</name></name> <operator>=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>&amp;</operator> <name>EXTRA_SORT_LAST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sort_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>in_left</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>in_right</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name><name>info</name><operator>.</operator><name>nterms</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>nterms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wv_stereo</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>no_history</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name></type> <name>temp_decorr_pass</name></decl>, <decl><type ref="prev"/><name><name>save_decorr_passes</name><index>[<expr><name>MAX_TERMS</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_samples</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_limit</name></decl>, <decl><type ref="prev"/><name>force_js</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>force_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_js</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pi</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>best_size</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nb_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>WV_JOINT_STEREO</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>log_limit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>log_limit</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">6912</literal></expr></argument>, <argument><expr><name>log_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>joint</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>force_js</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>joint</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>force_ts</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>joint</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>allocate_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_history</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pi</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>WavPackDecorrSpec</name> <modifier>*</modifier></type><name>wpds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nterms</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_decorrs</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>wpds</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_specs</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nterms</name> <operator>=</operator> <name><name>decorr_filter_nterms</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>decorr_filter</name></name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>force_js</name> <operator>||</operator> <operator>(</operator><name><name>wpds</name><operator>-&gt;</operator><name>joint_stereo</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_ts</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_js</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>js_left</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>js_left_size</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>js_right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>js_right_size</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>js_left</name></name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>js_right</name></name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>js_right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>js_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>js_right</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>got_js</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>js_left</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>js_right</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>save_decorr_passes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nterms</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>temp_decorr_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <name><name>wpds</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>wpds</name><operator>-&gt;</operator><name>terms</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>temp_decorr_pass</name><operator>.</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_CROSS_DECORR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decorr_stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[ <expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[ <expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><operator>~</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><operator>~</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>samplesA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>temp_decorr_pass</name><operator>.</operator><name>samplesB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>reverse_decorr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>save_decorr_passes</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Decorr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[ <expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[ <expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><operator>~</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><operator>~</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo_quick</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[ <expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[ <expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><operator>~</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><operator>~</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_decorr_pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>log2stereo</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>log_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>UINT32_MAX</name> <operator>||</operator> <operator>!</operator><name>nterms</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nterms</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>best_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>j</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr></argument>, <argument><expr><name>save_decorr_passes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Decorr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_TERMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <name>nterms</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pi</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mask_decorr</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_decorrs</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>force_js</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_specs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name></expr>]</index></name><operator>.</operator><name>joint_stereo</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_ts</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>WV_JOINT_STEREO</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>WV_JOINT_STEREO</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_JOINT_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>analyze_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>js_left</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>js_right</name></name></expr></argument>, <argument><expr><name>do_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>js_left</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>js_right</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>analyze_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>do_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>do_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>extra_flags</name></name> <operator>||</operator> <name>no_history</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>joint_stereo</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_specs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name></expr>]</index></name><operator>.</operator><name>joint_stereo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>joint_stereo</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_specs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>best_decorr</name></name></expr>]</index></name><operator>.</operator><name>joint_stereo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scan_word</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scan_word</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_flush</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavPackWords</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cbits</name> <init>= <expr><call><name>count_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cbits</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cbits</name> <operator>-=</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cbits</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cbits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>cbits</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cbits</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cbits</name> <operator>=</operator> <call><name>count_bits</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cbits</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cbits</name> <operator>-=</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>cbits</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cbits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>cbits</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>holding_zero</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>pend_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>pend_data</name></name> <operator>=</operator> <name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wavpack_encode_sample</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WvChannel</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavPackWords</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ones_count</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><name>sample</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>median</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>holding_zero</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>median</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sample</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>encode_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sample</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>median</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>median</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>zeros_acc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <operator>~</operator><name>sample</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>&lt;</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ones_count</name> <operator>=</operator> <name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>-</operator> <name>low</name> <operator>&lt;</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ones_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>low</name> <operator>+</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>-</operator> <name>low</name> <operator>&lt;</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ones_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>low</name> <operator>+</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ones_count</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>sample</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>+=</operator> <operator>(</operator><name>ones_count</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>low</name> <operator>+</operator> <call><name>GET_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INC_MED</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>holding_zero</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ones_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>encode_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ones_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_zero</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ones_count</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_zero</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>holding_one</name></name> <operator>=</operator> <name>ones_count</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>high</name> <operator>!=</operator> <name>low</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>maxcode</name> <init>= <expr><name>high</name> <operator>-</operator> <name>low</name></expr></init></decl>, <decl><type ref="prev"/><name>code</name> <init>= <expr><name>sample</name> <operator>-</operator> <name>low</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitcount</name> <init>= <expr><call><name>count_bits</name><argument_list>(<argument><expr><name>maxcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>extras</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bitcount</name><operator>)</operator> <operator>-</operator> <name>maxcode</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <name>extras</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>pend_data</name></name> <operator>|=</operator> <name>code</name> <operator>&lt;&lt;</operator> <name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name> <operator>+=</operator> <name>bitcount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>pend_data</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>+</operator> <name>extras</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name> <operator>+=</operator> <name>bitcount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>pend_data</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>+</operator> <name>extras</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>pend_data</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>sign</name> <operator>&lt;&lt;</operator> <name><name>w</name><operator>-&gt;</operator><name>pend_count</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>holding_zero</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>encode_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pack_int32</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sent_bits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>int32_sent_bits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pre_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pre_shift</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_zeros</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_ones</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_dups</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sent_bits</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sent_bits</name></expr></argument>, <argument><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>pre_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sent_bits</name></expr></argument>, <argument><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>pre_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>sent_bits</name></expr></argument>, <argument><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>pre_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pack_float_sample</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_exp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>float_max_exp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>shift_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_mantissa</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><call><name>get_mantissa</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0x1000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <name>max_exp</name> <operator>-</operator> <call><name>get_exponent</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0x800000</literal> <operator>+</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <ternary><condition><expr><name>max_exp</name></expr> ?</condition><then> <expr><name>max_exp</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift_count</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <name>shift_count</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>&amp;</operator> <name>FLOAT_ZEROS_SENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_exponent</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>get_mantissa</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><call><name>get_mantissa</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_exp</name> <operator>&gt;=</operator> <literal type="number">25</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>get_exponent</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_sign</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>&amp;</operator> <name>FLOAT_NEG_ZEROS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_sign</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift_count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>&amp;</operator> <name>FLOAT_SHIFT_SENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>shift_count</name></expr></argument>, <argument><expr><call><name>get_mantissa</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name> <operator>&amp;</operator> <name>FLOAT_SHIFT_SAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_mantissa</name><argument_list>(<argument><expr><operator>*</operator><name>sample</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pack_float</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pack_float_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>pack_float_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pack_float_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decorr_stereo_pass2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">18</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>temp_A</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>temp_B</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_A</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_B</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_A</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_B</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>sam_B</name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>sam_A</name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-=</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-=</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT_CLIP</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>update_weight_d2</name><parameter_list>(<parameter><type><name>weight</name></type></parameter>, <parameter><type><name>delta</name></type></parameter>, <parameter><type><name>source</name></type></parameter>, <parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (source &amp;&amp; result) weight -= (((source ^ result) &gt;&gt; 29) &amp; 4) - 2;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>update_weight_clip_d2</name><parameter_list>(<parameter><type><name>weight</name></type></parameter>, <parameter><type><name>delta</name></type></parameter>, <parameter><type><name>source</name></type></parameter>, <parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (source &amp;&amp; result) { const int32_t s = (source ^ result) &gt;&gt; 31; if ((weight = (weight ^ s) + (2 - s)) &gt; 1024) weight = 1024; weight = (weight ^ s) - s; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decorr_stereo_pass_id2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">18</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>temp_A</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>temp_B</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_A</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_B</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_A</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_B</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>sam_B</name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_clip_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_clip_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name>sam_A</name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_clip_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_clip_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam_A</name></decl>, <decl><type ref="prev"/><name>sam_B</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sam_A</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sam_B</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-=</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_clip_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_B</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-=</operator> <call><name>APPLY_WEIGHT_I</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_weight_clip_d2</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam_A</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_metadata_block</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WP_IDF_ODD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wavpack_encode_block</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_l</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples_r</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>, <decl><type ref="prev"/><name>tcount</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><literal type="number">0xffffffffu</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>optimize_mono</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>lor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lor</name> <operator>|=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>|=</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lor</name> <operator>&amp;&amp;</operator> <name>diff</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nb_samples</name> <operator>&amp;&amp;</operator> <name>lor</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>diff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>WV_JOINT_STEREO</name> <operator>|</operator> <name>WV_CROSS_DECORR</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>WV_FALSE_STEREO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>false_stereo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>false_stereo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>false_stereo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>false_stereo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHIFT_MASK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHIFT_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SHIFT_LSB</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mag</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_mono</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shift_stereo</name><argument_list>(<argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mag</name> <operator>-=</operator> <name>shift</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>MAG_MASK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>-=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>*</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_FLOAT_DATA</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>orig_l</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>orig_l_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>orig_l</name></name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>orig_r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>orig_r_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>orig_r</name></name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_FLOAT_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_extra</name> <operator>=</operator> <call><name>scan_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>got_extra</name> <operator>=</operator> <call><name>scan_int32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>scan_int23</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_zeros</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_ones</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_dups</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_zeros</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_ones</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>int32_dups</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>crc</name> <operator>+=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>crc</name> <operator>+=</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wv_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>WV_INITIAL_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>WV_FINAL_BLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x410</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_INITIAL_BLOCK</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_MONO</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_metadata_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_CHANINFO</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SRATE_MASK</name><operator>)</operator> <operator>==</operator> <name>SRATE_MASK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_metadata_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_SAMPLE_RATE</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_metadata_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_DECTERMS</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_DECWEIGHT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { temp = store_weight(type); bytestream2_put_byte(&amp;pb, temp); type = restore_weight(temp); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_DECWEIGHTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>store_weight</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>store_weight</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tcount</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>tcount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>WRITE_DECWEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WRITE_DECWEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>weightB</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>start</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>WP_ID_DECWEIGHTS</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>WP_IDF_ODD</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>start</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_DECSAMPLE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { temp = log2s(type); type = wp_exp2(temp); bytestream2_put_le16(&amp;pb, temp); } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_DECSAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <name>MAX_TERM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>WRITE_DECSAMPLE</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WRITE_DECSAMPLE</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>WRITE_DECSAMPLE</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WRITE_DECSAMPLE</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>WRITE_DECSAMPLE</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WRITE_DECSAMPLE</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>WRITE_DECSAMPLE</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WRITE_DECSAMPLE</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>start</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_CHAN_ENTROPY</name><parameter_list>(<parameter><type><name>chan</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (i = 0; i &lt; 3; i++) { temp = wp_log2(s-&gt;w.c[chan].median[i]); bytestream2_put_le16(&amp;pb, temp); s-&gt;w.c[chan].median[i] = wp_exp2(temp); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>put_metadata_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_ENTROPY</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WRITE_CHAN_ENTROPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WRITE_CHAN_ENTROPY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_FLOAT_DATA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_metadata_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_FLOATINFO</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>float_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>float_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>float_max_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_INT32_DATA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_metadata_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_INT32INFO</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int32_sent_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int32_zeros</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int32_ones</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>int32_dups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tcount</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr><operator>,</operator> <expr><name>dpp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr>;</init> <condition><expr><name>tcount</name><operator>--</operator></expr>;</condition> <incr><expr><name>dpp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>sam</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <name>MAX_TERM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sam</name> <operator>=</operator> <name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><operator>(</operator><name>m</name> <operator>+</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>code</name> <operator>-=</operator> <call><name>APPLY_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_WEIGHT</name><argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>weightA</name></name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>, <argument><expr><name>sam</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>tcount</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr><operator>,</operator> <expr><name>dpp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name></name></expr>;</init> <condition><expr><name>tcount</name><operator>--</operator></expr>;</condition> <incr><expr><name>dpp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dpp</name><operator>-&gt;</operator><name>value</name></name> <operator>&lt;=</operator> <name>MAX_TERM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>temp_A</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>temp_B</name><index>[<expr><name>MAX_TERM</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_A</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp_B</name></expr></argument>, <argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_TERM</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesA</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_A</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dpp</name><operator>-&gt;</operator><name>samplesB</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>temp_B</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MAX_TERM</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>num_passes</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_JOINT_STEREO</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>samples_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>samples_r</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_terms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>Decorr</name></name> <modifier>*</modifier></type><name>dpp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decorr_passes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>dpp</name><operator>-&gt;</operator><name>delta</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo_pass2</name><argument_list>(<argument><expr><name>dpp</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decorr_stereo_pass_id2</name><argument_list>(<argument><expr><name>dpp</name></expr></argument>, <argument><expr><name>samples_l</name></expr></argument>, <argument><expr><name>samples_r</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_DATA</name> <operator>|</operator> <name>WP_IDF_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_MONO_DATA</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wavpack_encode_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>wavpack_encode_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wavpack_encode_sample</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>encode_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>data_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_extra</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>WP_ID_EXTRABITS</name> <operator>|</operator> <name>WP_IDF_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WV_FLOAT_DATA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pack_float</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>orig_l</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>orig_r</name></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pack_int32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>orig_l</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>orig_r</name></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>data_size</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>crc_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>block_size</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><call><name>bytestream2_get_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>block_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_buffer</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SAMPLES</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const type *sptr = (const type *)src; for (i = 0; i &lt; nb_samples; i++) dst[i] = (sptr[i] - offset) &gt;&gt; shift; } while (0)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_U8P</name></expr>:</case>

<expr_stmt><expr><call><name>COPY_SAMPLES</name><argument_list>(<argument><expr><name>int8_t</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>

<expr_stmt><expr><call><name>COPY_SAMPLES</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>COPY_SAMPLES</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>nb_samples</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_samplerate</name><parameter_list>(<parameter><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wv_rates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>i</name> <operator>&lt;&lt;</operator> <name>SRATE_LSB</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wavpack_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>samples_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>samples_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">8</literal>

<operator>+</operator> <literal type="number">200</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr> ;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>set_samplerate</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">3</literal> <operator>|</operator> <name>WV_FLOAT_DATA</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>WV_MONO</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>WV_CROSS_DECORR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ch_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>MAG_LSB</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>wavpack_encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_index</name></name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>buf</name> <operator>-</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wavpack_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WavPackEncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TERMS</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sampleptrs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sampleptrs_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sampleptrs_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>best_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>best_buffer_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp_buffer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temp_buffer_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>temp_buffer_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>js_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>js_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>js_left_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>js_right_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>orig_l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>orig_r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>orig_l_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>orig_r_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(WavPackEncodeContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM | AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"joint_stereo"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>joint</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"optimize_mono"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>optimize_mono</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>wavpack_encoder_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"WavPack encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wavpack_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wavpack"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"WavPack"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WAVPACK</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WavPackEncodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>wavpack_encoder_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>wavpack_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>wavpack_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>wavpack_encode_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_U8P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32P</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
