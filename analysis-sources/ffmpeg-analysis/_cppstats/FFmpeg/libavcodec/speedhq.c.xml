<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\speedhq.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12vlc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INDEX</name></cpp:macro> <cpp:value>(64 - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_VLC_BITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SHQContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScanTable</name></type> <name>intra_scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>quant_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>SHQ_SUBSAMPLING_420</name></decl>, <decl><name>SHQ_SUBSAMPLING_422</name></decl>, <decl><name>SHQ_SUBSAMPLING_444</name></decl> }</block>

<decl><name>subsampling</name></decl>;</enum>

<enum>enum <block>{ <decl><name>SHQ_NO_ALPHA</name></decl>, <decl><name>SHQ_RLE_ALPHA</name></decl>, <decl><name>SHQ_DCT_ALPHA</name></decl> }</block> <decl><name>alpha_type</name></decl>;</enum>

}</block></struct></type> <name>SHQContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>speedhq_vlc</name><index>[<expr><literal type="number">123</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0x0001</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0007</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0017</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0028</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x006F</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x001F</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00C4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0044</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x005F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x00DF</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x007F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00FF</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x3E00</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1E00</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x2E00</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0E00</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x3600</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1600</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x2600</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0600</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x3A00</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1A00</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x2A00</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0A00</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x3200</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x1200</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x2200</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0200</literal></expr>, <expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0C00</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x7400</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x3400</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x5400</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1400</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x6400</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x2400</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x4400</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0400</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000C</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x004F</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00E4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0004</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0D00</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1500</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x7C00</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x3C00</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x5C00</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1C00</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x6C00</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x2C00</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x4C00</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xC800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x4800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x8800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0300</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1D00</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0070</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x003F</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00C0</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0500</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0180</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0280</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0C80</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0080</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0B00</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1300</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x001C</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0064</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0380</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1900</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0D80</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x00BF</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0480</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0B80</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0038</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0040</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0900</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0030</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0780</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x2800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0A80</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0050</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0880</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x000F</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1100</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x002F</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0100</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0084</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x5800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x00A4</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x9800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0140</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xE800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x01C0</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x6800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x02C0</literal></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xA800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0F80</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0580</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0980</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0E80</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0680</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1F00</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0F00</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1700</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0700</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x1B00</literal></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xF800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x7800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xB800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x3800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xD800</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>speedhq_level</name><index>[<expr><literal type="number">121</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,

<expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>,

<expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>speedhq_run</name><index>[<expr><literal type="number">121</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>,

<expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>,

<expr><literal type="number">31</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RLTable</name></type> <name>ff_rl_speedhq</name> <init>= <expr><block>{

<expr><literal type="number">121</literal></expr>,

<expr><literal type="number">121</literal></expr>,

<expr><operator>(</operator><specifier>const</specifier> <call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[]</index><operator>)</operator><name>speedhq_vlc</name></expr>,

<expr><name>speedhq_run</name></expr>,

<expr><name>speedhq_level</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>unscaled_quant_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">34</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>,

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">38</literal></expr>,

<expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">40</literal></expr>,

<expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>,

<expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">58</literal></expr>,

<expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">69</literal></expr>,

<expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">83</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>ff_speedhq_static_rl_table_store</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>MAX_RUN</name> <operator>+</operator> <name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>ff_dc_lum_vlc_le</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>ff_dc_chroma_vlc_le</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>ff_dc_alpha_run_vlc_le</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>ff_dc_alpha_level_vlc_le</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decode_dc_le</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>component</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>component</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_dc_lum_vlc_le</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_dc_chroma_vlc_le</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid dc code at\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0xffff</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>get_xbits_le</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>diff</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decode_alpha_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHQContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>last_alpha</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>block</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE_LE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VLC</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_dc_alpha_run_vlc_le</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>ALPHA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE_LE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VLC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_dc_alpha_level_vlc_le</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>ALPHA_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>last_alpha</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-=</operator> <name><name>block</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>last_alpha</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decode_dct_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHQContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>last_dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>quant_matrix</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>quant_matrix</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc_offset</name> <operator>=</operator> <call><name>decode_dc_le</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last_dc</name><index>[<expr><name>component</name></expr>]</index></name> <operator>-=</operator> <name>dc_offset</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scantable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>last_dc</name><index>[<expr><name>component</name></expr>]</index></name></expr>;</expr_stmt> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE_LE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_RL_VLC</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_rl_speedhq</name><operator>.</operator><name>rl_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>TEX_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>MAX_INDEX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>^</operator> <call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator>

<call><name>SHOW_SBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MIN_CACHE_BITS</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">12</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> MIN_CACHE_BITS is too small for the escape code, add UPDATE_CACHE</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>MAX_INDEX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_speedhq_field</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHQContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field_number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>slice_number</name></decl>, <decl><type ref="prev"/><name><name>slice_offsets</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize_y</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>line_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize_cb</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>line_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize_cr</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>line_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize_a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>!=</operator> <name>SHQ_NO_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>linesize_a</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>line_stride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>start</name> <operator>||</operator> <name>end</name> <operator>-</operator> <name><name>start</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>end</name></expr></argument> &gt;</argument_list></name> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>slice_offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_offsets</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>slice_number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>slice_number</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>slice_number</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_offset</name></decl>, <decl><type ref="prev"/><name>slice_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last_offset</name> <operator>=</operator> <name><name>slice_offsets</name><index>[<expr><name>slice_number</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_len</name> <operator>=</operator> <call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>last_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_offsets</name><index>[<expr><name>slice_number</name></expr>]</index></name> <operator>=</operator> <name>last_offset</name> <operator>+</operator> <name>slice_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name><name>slice_offsets</name><index>[<expr><name>slice_number</name></expr>]</index></name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>slice_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice_number</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>slice_number</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>slice_begin</name></decl>, <decl><type ref="prev"/><name>slice_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slice_begin</name> <operator>=</operator> <name><name>slice_offsets</name><index>[<expr><name>slice_number</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_end</name> <operator>=</operator> <name><name>slice_offsets</name><index>[<expr><name>slice_number</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>slice_begin</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>slice_end</name> <operator>-</operator> <name>slice_begin</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>slice_number</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name>line_stride</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>line_stride</name> <operator>*</operator> <literal type="number">64</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>last_dc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>last_alpha</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>last_alpha</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>last_alpha</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>field_number</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>==</operator> <name>SHQ_SUBSAMPLING_420</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest_cb</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>field_number</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>field_number</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dest_cb</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>field_number</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>field_number</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>!=</operator> <name>SHQ_NO_ALPHA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest_a</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>field_number</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>linesize_y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize_y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_y</name></expr></argument>, <argument><expr><name>linesize_y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize_y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>linesize_cb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>linesize_cr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>!=</operator> <name>SHQ_SUBSAMPLING_420</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest_cb</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_cb</name></expr></argument>, <argument><expr><name>linesize_cb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dest_cr</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_cr</name></expr></argument>, <argument><expr><name>linesize_cr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>==</operator> <name>SHQ_SUBSAMPLING_444</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest_cb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize_cb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dest_cr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize_cr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest_cb</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_cb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize_cb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dest_cr</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_cr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize_cr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>==</operator> <name>SHQ_RLE_ALPHA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_alpha_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_alpha</name></expr></argument>, <argument><expr><name>dest_a</name></expr></argument>, <argument><expr><name>linesize_a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_alpha_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_alpha</name></expr></argument>, <argument><expr><name>dest_a</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_a</name></expr></argument>, <argument><expr><name>linesize_a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest_a</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>==</operator> <name>SHQ_DCT_ALPHA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dest_a</name></expr></argument>, <argument><expr><name>linesize_a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dest_a</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize_a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dest_a</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_a</name></expr></argument>, <argument><expr><name>linesize_a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_dct_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>last_dc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dest_a</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize_a</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize_a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dest_a</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_quant_matrix</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>unscaled_quant_matrix</name><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name>qscale</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>speedhq_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SHQContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>second_field_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>quality</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quality</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>compute_quant_matrix</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quant_matrix</name></name></expr></argument>, <argument><expr><literal type="number">100</literal> <operator>-</operator> <name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>second_field_offset</name> <operator>=</operator> <call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>second_field_offset</name> <operator>&gt;=</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>second_field_offset</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_speedhq_field</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_speedhq_field</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>second_field_offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_speedhq_field</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>second_field_offset</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>compute_alpha_vlcs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>run_code</name><index>[<expr><literal type="number">134</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>level_code</name><index>[<expr><literal type="number">266</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>run_bits</name><index>[<expr><literal type="number">134</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>level_bits</name><index>[<expr><literal type="number">266</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>run_symbols</name><index>[<expr><literal type="number">134</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>level_symbols</name><index>[<expr><literal type="number">266</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entry</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_code</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_bits</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_symbols</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>entry</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>run_code</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_bits</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_symbols</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>entry</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>run_code</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_bits</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_symbols</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>entry</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>run_code</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_bits</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_symbols</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>entry</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>entry</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>run_code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_LE_VLC_SPARSE_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_dc_alpha_run_vlc_le</name></expr></argument>, <argument><expr><name>ALPHA_VLC_BITS</name></expr></argument>,

<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>run_code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>run_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>run_code</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>run_symbols</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">160</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sign</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>sign</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>level_code</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sign</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level_bits</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level_symbols</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>entry</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>level_code</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>sign</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level_bits</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level_symbols</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>entry</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>level_code</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level_bits</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level_symbols</name><index>[<expr><name>entry</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>entry</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>entry</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>level_code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_LE_VLC_SPARSE_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_dc_alpha_level_vlc_le</name></expr></argument>, <argument><expr><name>ALPHA_VLC_BITS</name></expr></argument>,

<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>level_code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>level_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>level_code</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>level_symbols</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">288</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>reverse</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>bitswap_32</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reverse_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>reversed_code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_entries</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>reversed_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>reverse</name><argument_list>(<argument><expr><name><name>code</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>speedhq_static_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>ff_mpeg12_vlc_dc_lum_code_reversed</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>ff_mpeg12_vlc_dc_chroma_code_reversed</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>reverse_code</name><argument_list>(<argument><expr><name>ff_mpeg12_vlc_dc_lum_code</name></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_lum_bits</name></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_lum_code_reversed</name></expr></argument>,

<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_LE_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_dc_lum_vlc_le</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_lum_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_lum_code_reversed</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reverse_code</name><argument_list>(<argument><expr><name>ff_mpeg12_vlc_dc_chroma_code</name></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_chroma_bits</name></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_chroma_code_reversed</name></expr></argument>,

<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_LE_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_dc_chroma_vlc_le</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_chroma_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ff_mpeg12_vlc_dc_chroma_code_reversed</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">514</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_rl_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_rl_speedhq</name></expr></argument>, <argument><expr><name>ff_speedhq_static_rl_table_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_2D_VLC_RL</name><argument_list>(<argument><expr><name>ff_rl_speedhq</name></expr></argument>, <argument><expr><literal type="number">674</literal></expr></argument>, <argument><expr><name>INIT_VLC_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_alpha_vlcs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>speedhq_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>init_once</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SHQContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_once</name></expr></argument>, <argument><expr><name>speedhq_static_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name></name></expr></argument>, <argument><expr><name>ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>=</operator> <name>SHQ_SUBSAMPLING_420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>=</operator> <name>SHQ_NO_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>=</operator> <name>SHQ_SUBSAMPLING_420</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>=</operator> <name>SHQ_RLE_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>=</operator> <name>SHQ_SUBSAMPLING_422</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>=</operator> <name>SHQ_NO_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>=</operator> <name>SHQ_SUBSAMPLING_422</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>=</operator> <name>SHQ_RLE_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>=</operator> <name>SHQ_SUBSAMPLING_444</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>=</operator> <name>SHQ_NO_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>=</operator> <name>SHQ_SUBSAMPLING_444</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>=</operator> <name>SHQ_RLE_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>=</operator> <name>SHQ_SUBSAMPLING_422</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>=</operator> <name>SHQ_DCT_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA422P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name> <operator>=</operator> <name>SHQ_SUBSAMPLING_444</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_type</name></name> <operator>=</operator> <name>SHQ_DCT_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA444P</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown NewTek SpeedHQ FOURCC provided (%08X)\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_CENTER</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_speedhq_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"speedhq"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"NewTek SpeedHQ"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SPEEDHQ</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHQContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>speedhq_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>speedhq_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
