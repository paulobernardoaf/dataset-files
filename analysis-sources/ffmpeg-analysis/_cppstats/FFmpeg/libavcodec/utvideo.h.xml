<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\utvideo.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utvideodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lossless_videodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lossless_videoencdsp.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>PRED_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PRED_LEFT</name></decl>,

<decl><name>PRED_GRADIENT</name></decl>,

<decl><name>PRED_MEDIAN</name></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>COMP_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>COMP_HUFF</name></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>UTVIDEO_RGB</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>UTVIDEO_RGBA</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>UTVIDEO_420</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>UTVIDEO_422</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>UTVIDEO_444</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ff_ut_pred_order</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>UtvideoContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UTVideoDSPContext</name></type> <name>utdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LLVidDSPContext</name></type> <name>llviddsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LLVidEncDSPContext</name></type> <name>llvidencdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_info_size</name></decl>, <name>flags</name>, <name>frame_info</name>, <name>offset</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compression</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pro</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>slice_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>slice_bits</name></decl>, <modifier>*</modifier><name><name>slice_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_bits_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>packed_stream</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>packed_stream_size</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>control_stream</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>control_stream_size</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>UtvideoContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HuffEntry</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

}</block></struct></type> <name>HuffEntry</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_ut_huff_cmp_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ut10_huff_cmp_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
