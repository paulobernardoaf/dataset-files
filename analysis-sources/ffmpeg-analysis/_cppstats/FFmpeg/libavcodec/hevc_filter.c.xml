<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\hevc_filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cabac_functions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUMA</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>tctable</name><index>[<expr><literal type="number">54</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, 

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, 

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>betatable</name><index>[<expr><literal type="number">52</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, 

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">36</literal></expr>, 

<expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">64</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chroma_tc</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qp_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tc_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>qp_c</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>, <decl><type ref="prev"/><name>qp_i</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>idxt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>qp_i</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>qp_y</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>qp_i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name>qp_i</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>qp_i</name> <operator>&gt;</operator> <literal type="number">43</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name>qp_i</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>qp_c</name><index>[<expr><name>qp_i</name> <operator>-</operator> <literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>qp_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>idxt</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>qp</name> <operator>+</operator> <name>DEFAULT_INTRA_TC_OFFSET</name> <operator>+</operator> <name>tc_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>tctable</name><index>[<expr><name>idxt</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_qPy_pred</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctb_size_mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>MinCuQpDeltaSizeMask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xQgBase</name> <init>= <expr><name>xBase</name> <operator>-</operator> <operator>(</operator><name>xBase</name> <operator>&amp;</operator> <name>MinCuQpDeltaSizeMask</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yQgBase</name> <init>= <expr><name>yBase</name> <operator>-</operator> <operator>(</operator><name>yBase</name> <operator>&amp;</operator> <name>MinCuQpDeltaSizeMask</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_cb_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_cb_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_cb</name> <init>= <expr><name>xQgBase</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_cb</name> <init>= <expr><name>yQgBase</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>availableA</name> <init>= <expr><operator>(</operator><name>xBase</name> <operator>&amp;</operator> <name>ctb_size_mask</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>xQgBase</name> <operator>&amp;</operator> <name>ctb_size_mask</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>availableB</name> <init>= <expr><operator>(</operator><name>yBase</name> <operator>&amp;</operator> <name>ctb_size_mask</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>yQgBase</name> <operator>&amp;</operator> <name>ctb_size_mask</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qPy_pred</name></decl>, <decl><type ref="prev"/><name>qPy_a</name></decl>, <decl><type ref="prev"/><name>qPy_b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lc</name><operator>-&gt;</operator><name>first_qp_group</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>xQgBase</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>yQgBase</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>first_qp_group</name></name> <operator>=</operator> <operator>!</operator><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>is_cu_qp_delta_coded</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qPy_pred</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_qp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>qPy_pred</name> <operator>=</operator> <name><name>lc</name><operator>-&gt;</operator><name>qPy_pred</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>availableA</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qPy_a</name> <operator>=</operator> <name>qPy_pred</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>qPy_a</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qp_y_tab</name><index>[<expr><operator>(</operator><name>x_cb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>y_cb</name> <operator>*</operator> <name>min_cb_width</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>availableB</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qPy_b</name> <operator>=</operator> <name>qPy_pred</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>qPy_b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qp_y_tab</name><index>[<expr><name>x_cb</name> <operator>+</operator> <operator>(</operator><name>y_cb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>min_cb_width</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>qPy_a</name> <operator>&gt;=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>qp_bd_offset</name></name> <operator>&amp;&amp;</operator> <name>qPy_a</name> <operator>&lt;</operator> <literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>qPy_b</name> <operator>&gt;=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>qp_bd_offset</name></name> <operator>&amp;&amp;</operator> <name>qPy_b</name> <operator>&lt;</operator> <literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>qPy_a</name> <operator>+</operator> <name>qPy_b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_set_qPy</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qp_y</name> <init>= <expr><call><name>get_qPy_pred</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>xBase</name></expr></argument>, <argument><expr><name>yBase</name></expr></argument>, <argument><expr><name>log2_cb_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>cu_qp_delta</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>qp_bd_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>qp_y</name></name> <operator>=</operator> <call><name>FFUMOD</name><argument_list>(<argument><expr><name>qp_y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>cu_qp_delta</name></name> <operator>+</operator> <literal type="number">52</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>off</name></expr></argument>,

<argument><expr><literal type="number">52</literal> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>qp_y</name></name> <operator>=</operator> <name>qp_y</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_qPy</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xC</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yC</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log2_min_cb_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>xC</name> <operator>&gt;&gt;</operator> <name>log2_min_cb_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>yC</name> <operator>&gt;&gt;</operator> <name>log2_min_cb_size</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>qp_y_tab</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_cb_width</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_CTB</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>dst</name> <operator>|</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>src</name> <operator>|</operator> <name>stride_dst</name> <operator>|</operator> <name>stride_src</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_COPY64U</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride_src</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">16</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride_src</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_pixel</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_vert</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride_src</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride_dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride_src</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_CTB_to_hv</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_ctb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_ctb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao_pixel_buffer_h</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>y_ctb</name><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao_pixel_buffer_h</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>y_ctb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>,

<argument><expr><name>src</name> <operator>+</operator> <name>stride_src</name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>width</name> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_vert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao_pixel_buffer_v</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_ctb</name><operator>)</operator> <operator>*</operator> <name>h</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_vert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao_pixel_buffer_v</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_ctb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>h</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_tqb_pixels</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>loop_filter_disable_flag</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_pu_size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_min</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_min</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_max</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator> <name>width</name> <operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_max</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <name>height</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>min_pu_size</name> <operator>&gt;&gt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y_min</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y_max</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>x_min</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>x_max</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_pcm</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>src1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name><operator>)</operator> <operator>*</operator> <name>stride_src</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name><operator>)</operator> <operator>*</operator> <name>stride_dst</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>min_pu_size</name> <operator>&gt;&gt;</operator> <name>vshift</name><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride_src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride_dst</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTB</name><parameter_list>(<parameter><type><name>tab</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tab)[(y) * s-&gt;ps.sps-&gt;ctb_width + (x)])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sao_filter_CTB</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sao_tab</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>edges</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x_ctb</name> <init>= <expr><name>x</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_ctb</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctb_addr_rs</name> <init>= <expr><name>y_ctb</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>+</operator> <name>x_ctb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctb_addr_ts</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name>ctb_addr_rs</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAOParams</name> <modifier>*</modifier></type><name>sao</name> <init>= <expr><operator>&amp;</operator><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vert_edge</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>horiz_edge</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>diag_edge</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>lfase</name> <init>= <expr><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_slice_edges</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>no_tile_filter</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>restore</name> <init>= <expr><name>no_tile_filter</name> <operator>||</operator> <operator>!</operator><name>lfase</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>left_tile_edge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>right_tile_edge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>up_tile_edge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bottom_tile_edge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x_ctb</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y_ctb</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edges</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>x_ctb</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>edges</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>y_ctb</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restore</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left_tile_edge</name> <operator>=</operator> <name>no_tile_filter</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name>ctb_addr_ts</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name>ctb_addr_rs</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vert_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>lfase</name> <operator>&amp;&amp;</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>left_tile_edge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>right_tile_edge</name> <operator>=</operator> <name>no_tile_filter</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name>ctb_addr_ts</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name>ctb_addr_rs</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vert_edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>lfase</name> <operator>&amp;&amp;</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>right_tile_edge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>up_tile_edge</name> <operator>=</operator> <name>no_tile_filter</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name>ctb_addr_ts</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name>ctb_addr_rs</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>horiz_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>lfase</name> <operator>&amp;&amp;</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>up_tile_edge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bottom_tile_edge</name> <operator>=</operator> <name>no_tile_filter</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name>ctb_addr_ts</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name>ctb_addr_rs</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>horiz_edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>lfase</name> <operator>&amp;&amp;</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>bottom_tile_edge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>diag_edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>lfase</name> <operator>&amp;&amp;</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>left_tile_edge</name> <operator>||</operator> <name>up_tile_edge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>diag_edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>lfase</name> <operator>&amp;&amp;</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>right_tile_edge</name> <operator>||</operator> <name>up_tile_edge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>diag_edge</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>lfase</name> <operator>&amp;&amp;</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>right_tile_edge</name> <operator>||</operator> <name>bottom_tile_edge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>edges</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>diag_edge</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>lfase</name> <operator>&amp;&amp;</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tab_slice_address</name></name></expr></argument>, <argument><expr><name>x_ctb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>left_tile_edge</name> <operator>||</operator> <name>bottom_tile_edge</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>c_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c_idx</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>c_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><name>x</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y0</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride_src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctb_size_h</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctb_size_v</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ctb_size_h</name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ctb_size_v</name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name>y0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tab</name> <init>= <expr><name><name>sao_tab</name><index>[<expr><operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>c_idx</name></expr>]</index><index>[<expr><name>y0</name> <operator>*</operator> <name>stride_src</name> <operator>+</operator> <operator>(</operator><name>x0</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride_dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>sao</name><operator>-&gt;</operator><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SAO_BAND</name></expr>:</case>

<expr_stmt><expr><call><name>copy_CTB_to_hv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>,

<argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>loop_filter_disable_flag</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>lc</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stride_dst</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>MAX_PB_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_CTB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>sao_band_filter</name><index>[<expr><name>tab</name></expr>]</index></name><operator>(</operator><name>src</name><operator>,</operator> <name>dst</name><operator>,</operator> <name>stride_src</name><operator>,</operator> <name>stride_dst</name><operator>,</operator>

<name><name>sao</name><operator>-&gt;</operator><name>offset_val</name><index>[<expr><name>c_idx</name></expr>]</index></name><operator>,</operator> <name><name>sao</name><operator>-&gt;</operator><name>band_position</name><index>[<expr><name>c_idx</name></expr>]</index></name><operator>,</operator>

<name>width</name><operator>,</operator> <name>height</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_tqb_pixels</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>sao_band_filter</name><index>[<expr><name>tab</name></expr>]</index></name><operator>(</operator><name>src</name><operator>,</operator> <name>src</name><operator>,</operator> <name>stride_src</name><operator>,</operator> <name>stride_src</name><operator>,</operator>

<name><name>sao</name><operator>-&gt;</operator><name>offset_val</name><index>[<expr><name>c_idx</name></expr>]</index></name><operator>,</operator> <name><name>sao</name><operator>-&gt;</operator><name>band_position</name><index>[<expr><name>c_idx</name></expr>]</index></name><operator>,</operator>

<name>width</name><operator>,</operator> <name>height</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sao</name><operator>-&gt;</operator><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>=</operator> <name>SAO_APPLIED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SAO_EDGE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left_edge</name> <init>= <expr><name><name>edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top_edge</name> <init>= <expr><name><name>edges</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right_edge</name> <init>= <expr><name><name>edges</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bottom_edge</name> <init>= <expr><name><name>edges</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left_pixels</name></decl>, <decl><type ref="prev"/><name>right_pixels</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride_dst</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>lc</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <name>stride_dst</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>top_edge</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>left_edge</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>right_edge</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_idx</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <name>dst</name> <operator>-</operator> <name>stride_dst</name> <operator>-</operator> <operator>(</operator><name>left</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>src</name> <operator>-</operator> <name>stride_src</name> <operator>-</operator> <operator>(</operator><name>left</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sao_pixel_buffer_h</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>y_ctb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x0</name> <operator>-</operator> <name>left</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src_idx</name> <operator>=</operator> <operator>(</operator><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>==</operator>

<name>SAO_APPLIED</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_pixel</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>src_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src_idx</name> <operator>=</operator> <operator>(</operator><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>==</operator>

<name>SAO_APPLIED</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>src_idx</name></expr>]</index></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>width</name> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>width</name> <operator>&lt;&lt;</operator> <name>sh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_idx</name> <operator>=</operator> <operator>(</operator><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>==</operator>

<name>SAO_APPLIED</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_pixel</name><argument_list>(<argument><expr><name>dst1</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>src_idx</name></expr>]</index></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bottom_edge</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>left_edge</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>right_edge</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_idx</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dst1</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>height</name> <operator>*</operator> <name>stride_dst</name> <operator>-</operator> <operator>(</operator><name>left</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>height</name> <operator>*</operator> <name>stride_src</name> <operator>-</operator> <operator>(</operator><name>left</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sao_pixel_buffer_h</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>y_ctb</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x0</name> <operator>-</operator> <name>left</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src_idx</name> <operator>=</operator> <operator>(</operator><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>==</operator>

<name>SAO_APPLIED</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_pixel</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>src_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src_idx</name> <operator>=</operator> <operator>(</operator><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>==</operator>

<name>SAO_APPLIED</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>src_idx</name></expr>]</index></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>width</name> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>right</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>width</name> <operator>&lt;&lt;</operator> <name>sh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_idx</name> <operator>=</operator> <operator>(</operator><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>==</operator>

<name>SAO_APPLIED</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_pixel</name><argument_list>(<argument><expr><name>dst1</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><name>src_idx</name></expr>]</index></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>left_pixels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left_edge</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>==</operator> <name>SAO_APPLIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_vert</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao_pixel_buffer_v</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_ctb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>h</name> <operator>+</operator> <name>y0</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>,

<argument><expr><name>sh</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>left_pixels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>right_pixels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>right_edge</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CTB</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao</name></name></expr></argument>, <argument><expr><name>x_ctb</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>==</operator> <name>SAO_APPLIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_vert</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <operator>(</operator><name>width</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sao_pixel_buffer_v</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>x_ctb</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>h</name> <operator>+</operator> <name>y0</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>,

<argument><expr><name>sh</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>right_pixels</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>copy_CTB</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><name>left_pixels</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>,

<argument><expr><name>src</name> <operator>-</operator> <operator>(</operator><name>left_pixels</name> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>width</name> <operator>+</operator> <name>left_pixels</name> <operator>+</operator> <name>right_pixels</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh</name></expr></argument>,

<argument><expr><name>height</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_CTB_to_hv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>,

<argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>sao_edge_filter</name><index>[<expr><name>tab</name></expr>]</index></name><operator>(</operator><name>src</name><operator>,</operator> <name>dst</name><operator>,</operator> <name>stride_src</name><operator>,</operator> <name><name>sao</name><operator>-&gt;</operator><name>offset_val</name><index>[<expr><name>c_idx</name></expr>]</index></name><operator>,</operator>

<name><name>sao</name><operator>-&gt;</operator><name>eo_class</name><index>[<expr><name>c_idx</name></expr>]</index></name><operator>,</operator> <name>width</name><operator>,</operator> <name>height</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>sao_edge_restore</name><index>[<expr><name>restore</name></expr>]</index></name><operator>(</operator><name>src</name><operator>,</operator> <name>dst</name><operator>,</operator>

<name>stride_src</name><operator>,</operator> <name>stride_dst</name><operator>,</operator>

<name>sao</name><operator>,</operator>

<name>edges</name><operator>,</operator> <name>width</name><operator>,</operator>

<name>height</name><operator>,</operator> <name>c_idx</name><operator>,</operator>

<name>vert_edge</name><operator>,</operator>

<name>horiz_edge</name><operator>,</operator>

<name>diag_edge</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_tqb_pixels</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride_src</name></expr></argument>, <argument><expr><name>stride_dst</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sao</name><operator>-&gt;</operator><name>type_idx</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>=</operator> <name>SAO_APPLIED</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_pcm</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log2_min_pu_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_pu</name></decl>, <decl><type ref="prev"/><name>y_pu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x_pu</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_pu</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x_pu</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>||</operator> <name>y_pu</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>is_pcm</name><index>[<expr><name>y_pu</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>+</operator> <name>x_pu</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TC_CALC</name><parameter_list>(<parameter><type><name>qp</name></type></parameter>, <parameter><type><name>bs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tctable[av_clip((qp) + DEFAULT_INTRA_TC_OFFSET * ((bs) - 1) + (tc_offset &amp; -2), 0, MAX_QP + DEFAULT_INTRA_TC_OFFSET)]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deblocking_filter_CTB</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>c_tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>no_p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>no_q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_ctb_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_end</name></decl>, <decl><type ref="prev"/><name>x_end2</name></decl>, <decl><type ref="prev"/><name>y_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctb_size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_ctb_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctb</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>&gt;&gt;</operator> <name>log2_ctb_size</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>y0</name> <operator>&gt;&gt;</operator> <name>log2_ctb_size</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_tc_offset</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>deblock</name><index>[<expr><name>ctb</name></expr>]</index></name><operator>.</operator><name>tc_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_beta_offset</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>deblock</name><index>[<expr><name>ctb</name></expr>]</index></name><operator>.</operator><name>beta_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left_tc_offset</name></decl>, <decl><type ref="prev"/><name>left_beta_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tc_offset</name></decl>, <decl><type ref="prev"/><name>beta_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pcmf</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>loop_filter_disable_flag</name></name><operator>)</operator> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left_tc_offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>deblock</name><index>[<expr><name>ctb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tc_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left_beta_offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>deblock</name><index>[<expr><name>ctb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>beta_offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>left_tc_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>left_beta_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x_end</name> <operator>=</operator> <name>x0</name> <operator>+</operator> <name>ctb_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x_end</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x_end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_end</name> <operator>=</operator> <name>y0</name> <operator>+</operator> <name>ctb_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y_end</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y_end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tc_offset</name> <operator>=</operator> <name>cur_tc_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>beta_offset</name> <operator>=</operator> <name>cur_beta_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_end2</name> <operator>=</operator> <name>x_end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x_end2</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x_end2</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y_end</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><name>x0</name></expr> ?</condition><then> <expr><name>x0</name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>x_end</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vertical_bs</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vertical_bs</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bs0</name> <operator>||</operator> <name>bs1</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qp</name> <init>= <expr><operator>(</operator><call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <name><name>betatable</name><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><name>qp</name> <operator>+</operator> <name>beta_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_QP</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>bs0</name></expr> ?</condition><then> <expr><call><name>TC_CALC</name><argument_list>(<argument><expr><name>qp</name></expr></argument>, <argument><expr><name>bs0</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>bs1</name></expr> ?</condition><then> <expr><call><name>TC_CALC</name><argument_list>(<argument><expr><name>qp</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>LUMA</name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>LUMA</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>no_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>hevc_v_loop_filter_luma_c</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>LUMA</name></expr>]</index></name></expr></argument>,

<argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>hevc_v_loop_filter_luma</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>LUMA</name></expr>]</index></name></expr></argument>,

<argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><name>x0</name></expr> ?</condition><then> <expr><name>x0</name> <operator>-</operator> <literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>x_end2</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>horizontal_bs</name><index>[<expr><operator>(</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>horizontal_bs</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bs0</name> <operator>||</operator> <name>bs1</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qp</name> <init>= <expr><operator>(</operator><call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tc_offset</name> <operator>=</operator> <ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <name>x0</name></expr> ?</condition><then> <expr><name>cur_tc_offset</name></expr> </then><else>: <expr><name>left_tc_offset</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>beta_offset</name> <operator>=</operator> <ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <name>x0</name></expr> ?</condition><then> <expr><name>cur_beta_offset</name></expr> </then><else>: <expr><name>left_beta_offset</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <name><name>betatable</name><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><name>qp</name> <operator>+</operator> <name>beta_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_QP</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>bs0</name></expr> ?</condition><then> <expr><call><name>TC_CALC</name><argument_list>(<argument><expr><name>qp</name></expr></argument>, <argument><expr><name>bs0</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>bs1</name></expr> ?</condition><then> <expr><call><name>TC_CALC</name><argument_list>(<argument><expr><name>qp</name></expr></argument>, <argument><expr><name>bs1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>LUMA</name></expr>]</index><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>LUMA</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>no_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>hevc_h_loop_filter_luma_c</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>LUMA</name></expr>]</index></name></expr></argument>,

<argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>hevc_h_loop_filter_luma</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>LUMA</name></expr>]</index></name></expr></argument>,

<argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>chroma</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>chroma</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>chroma</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y_end</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>v</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><name>x0</name></expr> ?</condition><then> <expr><name>x0</name></expr> </then><else>: <expr><literal type="number">8</literal> <operator>*</operator> <name>h</name></expr></else></ternary></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>x_end</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>h</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vertical_bs</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vertical_bs</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>v</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bs0</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bs1</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qp0</name> <init>= <expr><operator>(</operator><call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qp1</name> <init>= <expr><operator>(</operator><call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>v</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>v</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c_tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bs0</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>chroma_tc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>qp0</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>tc_offset</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c_tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bs1</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>chroma_tc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>qp1</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>tc_offset</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>chroma</name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>chroma</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>chroma</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>chroma</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>no_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>v</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>v</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>hevc_v_loop_filter_chroma_c</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></argument>,

<argument><expr><name>c_tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>hevc_v_loop_filter_chroma</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></argument>,

<argument><expr><name>c_tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tc_offset</name> <operator>=</operator> <ternary><condition><expr><name>x0</name></expr> ?</condition><then> <expr><name>left_tc_offset</name></expr> </then><else>: <expr><name>cur_tc_offset</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>x_end2</name> <operator>=</operator> <name>x_end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x_end</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x_end2</name> <operator>=</operator> <name>x_end</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><name>x0</name></expr> ?</condition><then> <expr><name>x0</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>h</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>x_end2</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>h</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>horizontal_bs</name><index>[<expr><operator>(</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bs1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>horizontal_bs</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>h</name><operator>)</operator> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bs0</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bs1</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qp0</name> <init>= <expr><ternary><condition><expr><name>bs0</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><operator>(</operator><call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qp1</name> <init>= <expr><ternary><condition><expr><name>bs1</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><operator>(</operator><call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>h</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>get_qPy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>h</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c_tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>bs0</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>chroma_tc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>qp0</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>tc_offset</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c_tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>bs1</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><call><name>chroma_tc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>qp1</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>cur_tc_offset</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>chroma</name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>chroma</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pcmf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>no_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>h</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>no_q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_pcm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>h</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>hevc_h_loop_filter_chroma_c</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></argument>,

<argument><expr><name>c_tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hevcdsp</name><operator>.</operator><name>hevc_h_loop_filter_chroma</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>chroma</name></expr>]</index></name></expr></argument>,

<argument><expr><name>c_tc</name></expr></argument>, <argument><expr><name>no_p</name></expr></argument>, <argument><expr><name>no_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>boundary_strength</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MvField</name> <modifier>*</modifier></type><name>curr</name></decl></parameter>, <parameter><decl><type><name>MvField</name> <modifier>*</modifier></type><name>neigh</name></decl></parameter>,

<parameter><decl><type><name>RefPicList</name> <modifier>*</modifier></type><name>neigh_refPicList</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>==</operator> <name>PF_BI</name> <operator>&amp;&amp;</operator> <name><name>neigh</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>==</operator> <name>PF_BI</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>neigh_refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>neigh_refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>neigh_refPicList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>neigh_refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>neigh_refPicList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>neigh_refPicList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>neigh_refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>curr</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>!=</operator> <name>PF_BI</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>neigh</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>!=</operator> <name>PF_BI</name><operator>)</operator></expr>)</condition><block>{<block_content> 

<decl_stmt><decl><type><name>Mv</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_A</name></decl>, <decl><type ref="prev"/><name>ref_B</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_A</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_A</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>neigh</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_B</name> <operator>=</operator> <name><name>neigh_refPicList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>neigh</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_B</name> <operator>=</operator> <name><name>neigh_refPicList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name><name>neigh</name><operator>-&gt;</operator><name>ref_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ref_A</name> <operator>==</operator> <name>ref_B</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_deblocking_boundary_strengths</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_trafo_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>tab_mvf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_min_pu_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_min_tu_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_pu_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_tu_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_tb_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_intra</name> <init>= <expr><name><name>tab_mvf</name><index>[<expr><operator>(</operator><name>y0</name> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name><operator>)</operator> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator>

<operator>(</operator><name>x0</name> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>boundary_upper</name></decl>, <decl><type ref="prev"/><name>boundary_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>boundary_upper</name> <operator>=</operator> <name>y0</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>y0</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>boundary_upper</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_loop_filter_across_slices_enabled_flag</name></name> <operator>&amp;&amp;</operator>

<name><name>lc</name><operator>-&gt;</operator><name>boundary_flags</name></name> <operator>&amp;</operator> <name>BOUNDARY_UPPER_SLICE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>y0</name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name> <operator>&amp;&amp;</operator>

<name><name>lc</name><operator>-&gt;</operator><name>boundary_flags</name></name> <operator>&amp;</operator> <name>BOUNDARY_UPPER_TILE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>y0</name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>boundary_upper</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>boundary_upper</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RefPicList</name> <modifier>*</modifier></type><name>rpl_top</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>lc</name><operator>-&gt;</operator><name>boundary_flags</name></name> <operator>&amp;</operator> <name>BOUNDARY_UPPER_SLICE</name><operator>)</operator></expr> ?</condition><then>

<expr><call><name>ff_hevc_get_ref_list</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yp_pu</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yq_pu</name> <init>= <expr><name>y0</name> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yp_tu</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_tu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yq_tu</name> <init>= <expr><name>y0</name> <operator>&gt;&gt;</operator> <name>log2_min_tu_size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_pu</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_tu</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_tu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>&amp;</operator><name><name>tab_mvf</name><index>[<expr><name>yp_pu</name> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator> <name>x_pu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><operator>&amp;</operator><name><name>tab_mvf</name><index>[<expr><name>yq_pu</name> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator> <name>x_pu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>top_cbf_luma</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cbf_luma</name><index>[<expr><name>yp_tu</name> <operator>*</operator> <name>min_tu_width</name> <operator>+</operator> <name>x_tu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>curr_cbf_luma</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cbf_luma</name><index>[<expr><name>yq_tu</name> <operator>*</operator> <name>min_tu_width</name> <operator>+</operator> <name>x_tu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>==</operator> <name>PF_INTRA</name> <operator>||</operator> <name><name>top</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>==</operator> <name>PF_INTRA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>curr_cbf_luma</name> <operator>||</operator> <name>top_cbf_luma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>boundary_strength</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>rpl_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>horizontal_bs</name><index>[<expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name>y0</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bs</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>boundary_left</name> <operator>=</operator> <name>x0</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>x0</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>boundary_left</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_loop_filter_across_slices_enabled_flag</name></name> <operator>&amp;&amp;</operator>

<name><name>lc</name><operator>-&gt;</operator><name>boundary_flags</name></name> <operator>&amp;</operator> <name>BOUNDARY_LEFT_SLICE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>x0</name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name> <operator>&amp;&amp;</operator>

<name><name>lc</name><operator>-&gt;</operator><name>boundary_flags</name></name> <operator>&amp;</operator> <name>BOUNDARY_LEFT_TILE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>x0</name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>boundary_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>boundary_left</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RefPicList</name> <modifier>*</modifier></type><name>rpl_left</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>lc</name><operator>-&gt;</operator><name>boundary_flags</name></name> <operator>&amp;</operator> <name>BOUNDARY_LEFT_SLICE</name><operator>)</operator></expr> ?</condition><then>

<expr><call><name>ff_hevc_get_ref_list</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><name>x0</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xp_pu</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xq_pu</name> <init>= <expr><name>x0</name> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xp_tu</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_tu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xq_tu</name> <init>= <expr><name>x0</name> <operator>&gt;&gt;</operator> <name>log2_min_tu_size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_pu</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_tu</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_tu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>&amp;</operator><name><name>tab_mvf</name><index>[<expr><name>y_pu</name> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator> <name>xp_pu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><operator>&amp;</operator><name><name>tab_mvf</name><index>[<expr><name>y_pu</name> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator> <name>xq_pu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>left_cbf_luma</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cbf_luma</name><index>[<expr><name>y_tu</name> <operator>*</operator> <name>min_tu_width</name> <operator>+</operator> <name>xp_tu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>curr_cbf_luma</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cbf_luma</name><index>[<expr><name>y_tu</name> <operator>*</operator> <name>min_tu_width</name> <operator>+</operator> <name>xq_tu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>==</operator> <name>PF_INTRA</name> <operator>||</operator> <name><name>left</name><operator>-&gt;</operator><name>pred_flag</name></name> <operator>==</operator> <name>PF_INTRA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>curr_cbf_luma</name> <operator>||</operator> <name>left_cbf_luma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>boundary_strength</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>rpl_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vertical_bs</name><index>[<expr><operator>(</operator><name>x0</name> <operator>+</operator> <operator>(</operator><name>y0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bs</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>log2_trafo_size</name> <operator>&gt;</operator> <name>log2_min_pu_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_intra</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RefPicList</name> <modifier>*</modifier></type><name>rpl</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>yp_pu</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yq_pu</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_pu</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>&amp;</operator><name><name>tab_mvf</name><index>[<expr><name>yp_pu</name> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator> <name>x_pu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><operator>&amp;</operator><name><name>tab_mvf</name><index>[<expr><name>yq_pu</name> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator> <name>x_pu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>boundary_strength</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>rpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>horizontal_bs</name><index>[<expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y0</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bs</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_pu</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_trafo_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xp_pu</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xq_pu</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_min_pu_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>&amp;</operator><name><name>tab_mvf</name><index>[<expr><name>y_pu</name> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator> <name>xp_pu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><operator>&amp;</operator><name><name>tab_mvf</name><index>[<expr><name>y_pu</name> <operator>*</operator> <name>min_pu_width</name> <operator>+</operator> <name>xq_pu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>boundary_strength</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>rpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vertical_bs</name><index>[<expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y0</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bs_width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>bs</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LUMA</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CB</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CR</name></cpp:undef>

<function><type><name>void</name></type> <name>ff_hevc_hls_filter</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctb_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_end</name> <init>= <expr><name>x</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>ctb_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_IDR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONINTRA</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_type</name></name> <operator>!=</operator> <name>HEVC_SLICE_I</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_BIDIR</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name> <operator>&amp;&amp;</operator>

<call><name>ff_hevc_nal_is_nonref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nal_unit_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deblocking_filter_CTB</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>sao_enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skip</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_end</name> <init>= <expr><name>y</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>ctb_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sao_filter_CTB</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>ctb_size</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>ctb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sao_filter_CTB</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>ctb_size</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&amp;&amp;</operator> <name>x_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sao_filter_CTB</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>ctb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>threads_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_end</name> <operator>&amp;&amp;</operator> <name>y_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sao_filter_CTB</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>threads_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>ctb_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>threads_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name> <operator>&amp;&amp;</operator> <name>x_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>ctb_size</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_hls_filters</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_ctb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_ctb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctb_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_end</name> <init>= <expr><name>x_ctb</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>ctb_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_end</name> <init>= <expr><name>y_ctb</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>ctb_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y_ctb</name> <operator>&amp;&amp;</operator> <name>x_ctb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hevc_hls_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x_ctb</name> <operator>-</operator> <name>ctb_size</name></expr></argument>, <argument><expr><name>y_ctb</name> <operator>-</operator> <name>ctb_size</name></expr></argument>, <argument><expr><name>ctb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_ctb</name> <operator>&amp;&amp;</operator> <name>x_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hevc_hls_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x_ctb</name></expr></argument>, <argument><expr><name>y_ctb</name> <operator>-</operator> <name>ctb_size</name></expr></argument>, <argument><expr><name>ctb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_ctb</name> <operator>&amp;&amp;</operator> <name>y_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hevc_hls_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x_ctb</name> <operator>-</operator> <name>ctb_size</name></expr></argument>, <argument><expr><name>y_ctb</name></expr></argument>, <argument><expr><name>ctb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
