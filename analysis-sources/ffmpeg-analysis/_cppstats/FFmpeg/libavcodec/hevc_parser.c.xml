<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\hevc_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_ps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_sei.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2645_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_CODE</name></cpp:macro> <cpp:value>0x000001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_IRAP_NAL</name><parameter_list>(<parameter><type><name>nal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nal-&gt;type &gt;= 16 &amp;&amp; nal-&gt;type &lt;= 23)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_IDR_NAL</name><parameter_list>(<parameter><type><name>nal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nal-&gt;type == HEVC_NAL_IDR_W_RADL || nal-&gt;type == HEVC_NAL_IDR_N_LP)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>HEVCParserContext</name> <block>{

<decl_stmt><decl><type><name>ParseContext</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H2645Packet</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCParamSets</name></type> <name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCSEI</name></type> <name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SliceHeader</name></type> <name>sh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_avc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nal_length_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parsed_extradata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pocTid0</name></decl>;</decl_stmt>

}</block></struct></type> <name>HEVCParserContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hevc_parse_slice_header</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCParserContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sei</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SliceHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sh</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCWindow</name> <modifier>*</modifier></type><name>ow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>den</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>first_slice_in_pic_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name><name>sei</name><operator>-&gt;</operator><name>picture_timing</name><operator>.</operator><name>picture_struct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <name><name>sei</name><operator>-&gt;</operator><name>picture_timing</name><operator>.</operator><name>picture_struct</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_IRAP_NAL</name><argument_list>(<argument><expr><name>nal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>no_output_of_prior_pics_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>pps_id</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>pps_id</name></name> <operator>&gt;=</operator> <name>HEVC_MAX_PPS_COUNT</name> <operator>||</operator> <operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name><name>sh</name><operator>-&gt;</operator><name>pps_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PPS id out of range: %d\n"</literal></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>pps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name></name> <operator>=</operator> <operator>(</operator><name>HEVCPPS</name><operator>*</operator><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name><name>sh</name><operator>-&gt;</operator><name>pps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name> <operator>&gt;=</operator> <name>HEVC_MAX_SPS_COUNT</name> <operator>||</operator> <operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id out of range: %d\n"</literal></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name></name> <operator>!=</operator> <operator>(</operator><name>HEVCSPS</name><operator>*</operator><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name></name> <operator>=</operator> <operator>(</operator><name>HEVCSPS</name><operator>*</operator><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>vps</name></name> <operator>=</operator> <operator>(</operator><name>HEVCVPS</name><operator>*</operator><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>vps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ow</name> <operator>=</operator> <operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>output_window</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>ow</name><operator>-&gt;</operator><name>left_offset</name></name> <operator>-</operator> <name><name>ow</name><operator>-&gt;</operator><name>right_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>ow</name><operator>-&gt;</operator><name>top_offset</name></name> <operator>-</operator> <name><name>ow</name><operator>-&gt;</operator><name>bottom_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>general_ptl</name><operator>.</operator><name>profile_idc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>general_ptl</name><operator>.</operator><name>level_idc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>vps</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>vps</name><operator>-&gt;</operator><name>vps_num_units_in_tick</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>vps</name><operator>-&gt;</operator><name>vps_time_scale</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_num_units_in_tick</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vui_time_scale</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>den</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sh</name><operator>-&gt;</operator><name>first_slice_in_pic_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slice_address_length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>slice_address_length</name> <operator>=</operator> <call><name>av_ceil_log2_c</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>*</operator>

<name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_segment_addr</name></name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>slice_address_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>slice_segment_addr</name></name> <operator>&gt;=</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>*</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid slice segment address: %u.\n"</literal></expr></argument>,

<argument><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_segment_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_I</name> <operator>||</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_P</name> <operator>||</operator>

<name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown slice type: %d.\n"</literal></expr></argument>,

<argument><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_B</name></expr> </then><else>:

<expr><ternary><condition><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_P</name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_P</name></expr> </then><else>:

<expr><name>AV_PICTURE_TYPE_I</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>pic_output_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>colour_plane_id</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_IDR_NAL</name><argument_list>(<argument><expr><name>nal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_picture_number</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>poc</name></name> <operator>=</operator> <call><name>ff_hevc_compute_poc</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pocTid0</name></name></expr></argument>, <argument><expr><name><name>sh</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_picture_number</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>poc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HEVC_NAL_TRAIL_N</name> <operator>&amp;&amp;</operator>

<name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HEVC_NAL_TSA_N</name> <operator>&amp;&amp;</operator>

<name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HEVC_NAL_STSA_N</name> <operator>&amp;&amp;</operator>

<name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HEVC_NAL_RADL_N</name> <operator>&amp;&amp;</operator>

<name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HEVC_NAL_RASL_N</name> <operator>&amp;&amp;</operator>

<name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HEVC_NAL_RADL_R</name> <operator>&amp;&amp;</operator>

<name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HEVC_NAL_RASL_R</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pocTid0</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_nal_units</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCParserContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sei</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>AV_PICTURE_STRUCTURE_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_hevc_reset_sei</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h2645_packet_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_avc</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nal_length_size</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_HEVC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>nb_nals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pkt</name><operator>.</operator><name>nals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>nuh_layer_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_hevc_decode_nal_vps</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_hevc_decode_nal_sps</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case>

<expr_stmt><expr><call><name>ff_hevc_decode_nal_pps</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SEI_PREFIX</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_SEI_SUFFIX</name></expr>:</case>

<expr_stmt><expr><call><name>ff_hevc_decode_nal_sei</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sei</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_TRAIL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TRAIL_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TSA_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TSA_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_STSA_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_STSA_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_CRA_NUT</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RADL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RADL_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RASL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RASL_R</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>picture_struct</name></name> <operator>==</operator> <name>HEVC_SEI_PIC_STRUCT_FRAME_DOUBLING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>picture_struct</name></name> <operator>==</operator> <name>HEVC_SEI_PIC_STRUCT_FRAME_TRIPLING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hevc_parse_slice_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nal</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing picture in access unit with size %d\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hevc_find_frame_end</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCParserContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nut</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state64</name></name> <operator>=</operator> <operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>state64</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>state64</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator> <operator>!=</operator> <name>START_CODE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nut</name> <operator>=</operator> <operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>state64</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nut</name> <operator>&gt;=</operator> <name>HEVC_NAL_VPS</name> <operator>&amp;&amp;</operator> <name>nut</name> <operator>&lt;=</operator> <name>HEVC_NAL_EOB_NUT</name><operator>)</operator> <operator>||</operator> <name>nut</name> <operator>==</operator> <name>HEVC_NAL_SEI_PREFIX</name> <operator>||</operator>

<operator>(</operator><name>nut</name> <operator>&gt;=</operator> <literal type="number">41</literal> <operator>&amp;&amp;</operator> <name>nut</name> <operator>&lt;=</operator> <literal type="number">44</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nut</name> <operator>&gt;=</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <name>nut</name> <operator>&lt;=</operator> <literal type="number">55</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nut</name> <operator>&lt;=</operator> <name>HEVC_NAL_RASL_R</name> <operator>||</operator>

<operator>(</operator><name>nut</name> <operator>&gt;=</operator> <name>HEVC_NAL_BLA_W_LP</name> <operator>&amp;&amp;</operator> <name>nut</name> <operator>&lt;=</operator> <name>HEVC_NAL_CRA_NUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first_slice_segment_in_pic_flag</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_slice_segment_in_pic_flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_start_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>END_NOT_FOUND</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hevc_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCParserContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_dummy_buf</name> <init>= <expr><operator>!</operator><name>buf_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dummy_buf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>parsed_extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_hevc_decode_extradata</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_avc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nal_length_size</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>parsed_extradata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>hevc_find_frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>is_dummy_buf</name> <operator>&amp;=</operator> <operator>(</operator><name>dummy_buf</name> <operator>==</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_dummy_buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_nal_units</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hevc_split</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_vps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_sps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_pps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nut</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>!=</operator> <name>START_CODE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nut</name> <operator>=</operator> <operator>(</operator><name>state</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nut</name> <operator>==</operator> <name>HEVC_NAL_VPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_vps</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nut</name> <operator>==</operator> <name>HEVC_NAL_SPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_sps</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nut</name> <operator>==</operator> <name>HEVC_NAL_PPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_pps</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>nut</name> <operator>!=</operator> <name>HEVC_NAL_SEI_PREFIX</name> <operator>||</operator> <name>has_pps</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>nut</name> <operator>!=</operator> <name>HEVC_NAL_AUD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_vps</name> <operator>&amp;&amp;</operator> <name>has_sps</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>ptr</name> <operator>-</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>ptr</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>buf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_parser_close</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCParserContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_hevc_ps_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h2645_packet_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_hevc_reset_sei</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pc</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_hevc_parser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_HEVC</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HEVCParserContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>hevc_parse</name></expr>,

<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>hevc_parser_close</name></expr>,

<expr><operator>.</operator><name>split</name> <operator>=</operator> <name>hevc_split</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
