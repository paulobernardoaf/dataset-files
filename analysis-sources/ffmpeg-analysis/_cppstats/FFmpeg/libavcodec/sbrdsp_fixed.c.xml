<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\sbrdsp_fixed.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FIXED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbrdsp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SoftFloat</name></type> <name>sbr_sum_square_c</name><argument_list>(<argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SoftFloat</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>accu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>accu0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>accu1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>accu2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>accu3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nz</name></decl>, <decl><type ref="prev"/><name>nz0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accu0</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu1</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu2</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu3</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>accu0</name><operator>|</operator><name>accu1</name><operator>|</operator><name>accu2</name><operator>|</operator><name>accu3</name><operator>)</operator> <operator>&gt;</operator> <name>UINT64_MAX</name> <operator>-</operator> <name>INT32_MIN</name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>INT32_MIN</name> <operator>||</operator> <name>i</name><operator>+</operator><literal type="number">2</literal><operator>&gt;=</operator><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>accu0</name> <operator>&gt;&gt;=</operator> <name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu1</name> <operator>&gt;&gt;=</operator> <name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu2</name> <operator>&gt;&gt;=</operator> <name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu3</name> <operator>&gt;&gt;=</operator> <name>nz</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>accu0</name><operator>|</operator><name>accu1</name><operator>|</operator><name>accu2</name><operator>|</operator><name>accu3</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>UINT64_MAX</name> <operator>-</operator> <name>accu</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>accu0</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accu1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accu2</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accu3</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <name>accu0</name> <operator>+</operator> <name>accu1</name> <operator>+</operator> <name>accu2</name> <operator>+</operator> <name>accu3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu0</name> <operator>=</operator> <name>accu1</name> <operator>=</operator> <name>accu2</name> <operator>=</operator> <name>accu3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nz0</name> <operator>=</operator> <literal type="number">15</literal> <operator>-</operator> <name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>accu</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>u</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0x80000000U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>nz</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>nz</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>nz0</name> <operator>-</operator> <name>nz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_neg_odd_64_c</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_pre_shuffle_c</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">65</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">64</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>k</name></expr> ]</index></name> <operator>=</operator> <operator>-</operator><name><name>z</name><index>[<expr><literal type="number">64</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">64</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[ <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_post_shuffle_c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>W</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>W</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>z</name><index>[<expr><literal type="number">63</literal><operator>-</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>W</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_deint_neg_c</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>v</name><index>[ <expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>src</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>+</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name><name>src</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>SoftFloat</name></type> <name>autocorr_calc</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>accu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nz</name></decl>, <decl><type ref="prev"/><name>mant</name></decl>, <decl><type ref="prev"/><name>expo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>accu</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">32</literal><operator>-</operator><name>nz</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>nz</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mant</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>nz</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mant</name> <operator>=</operator> <operator>(</operator><name>mant</name> <operator>+</operator> <literal type="number">0x40LL</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mant</name> <operator>*=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>expo</name> <operator>=</operator> <name>nz</name> <operator>+</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<return>return <expr><call><name>av_int2sf</name><argument_list>(<argument><expr><name>mant</name></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>-</operator> <name>expo</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>autocorrelate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>x</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SoftFloat</name></type> <name><name>phi</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>real_sum</name></decl>, <decl><type ref="prev"/><name>imag_sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>accu_re</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>accu_im</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lag</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">38</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name><operator>+</operator><name>lag</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name><operator>+</operator><name>lag</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_im</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name><operator>+</operator><name>lag</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_im</name> <operator>-=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name><operator>+</operator><name>lag</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>real_sum</name> <operator>=</operator> <name>accu_re</name></expr>;</expr_stmt>

<expr_stmt><expr><name>imag_sum</name> <operator>=</operator> <name>accu_im</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>lag</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>lag</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_im</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>lag</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_im</name> <operator>-=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>lag</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal><operator>-</operator><name>lag</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>autocorr_calc</name><argument_list>(<argument><expr><name>accu_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal><operator>-</operator><name>lag</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>autocorr_calc</name><argument_list>(<argument><expr><name>accu_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>accu_re</name> <operator>=</operator> <name>real_sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_im</name> <operator>=</operator> <name>imag_sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_im</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_im</name> <operator>-=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>autocorr_calc</name><argument_list>(<argument><expr><name>accu_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>autocorr_calc</name><argument_list>(<argument><expr><name>accu_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">38</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>real_sum</name> <operator>=</operator> <name>accu_re</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>autocorr_calc</name><argument_list>(<argument><expr><name>accu_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>=</operator> <name>real_sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu_re</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>autocorr_calc</name><argument_list>(<argument><expr><name>accu_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_autocorrelate_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>x</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>SoftFloat</name></type> <name><name>phi</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>autocorrelate</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>phi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>autocorrelate</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>phi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>autocorrelate</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>phi</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_gen_c</name><argument_list>(<argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>X_high</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>X_low</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>int</name> <name><name>alpha0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name><name>alpha1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>int</name> <name>bw</name></expr></argument>, <argument><expr><name>int</name> <name>start</name></expr></argument>, <argument><expr><name>int</name> <name>end</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>alpha</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>accu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>alpha0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>alpha0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>bw</name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>alpha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>alpha1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>-=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>-=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X_high</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x10000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x20000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X_high</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x10000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_g_filt_c</name><argument_list>(<argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>X_high</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>SoftFloat</name> <operator>*</operator><name>g_filt</name></expr></argument>, <argument><expr><name>int</name> <name>m_max</name></expr></argument>, <argument><expr><name>intptr_t</name> <name>ixh</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>accu</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>m_max</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">22</literal> <operator>-</operator> <name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>exp</name> <operator>&lt;</operator> <literal type="number">61</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>r</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">22</literal><operator>-</operator><name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>exp</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_high</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>ixh</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>+</operator> <literal type="number">0x40</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">23</literal><operator>-</operator><name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>exp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>X_high</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>ixh</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>+</operator> <literal type="number">0x40</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">23</literal><operator>-</operator><name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>exp</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>sbr_hf_apply_noise</name><argument_list>(<argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>SoftFloat</name> <operator>*</operator><name>s_m</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>SoftFloat</name> <operator>*</operator><name>q_filt</name></expr></argument>,

<argument><expr><name>int</name> <name>noise</name></expr></argument>,

<argument><expr><name>int</name> <name>phi_sign0</name></expr></argument>,

<argument><expr><name>int</name> <name>phi_sign1</name></expr></argument>,

<argument><expr><name>int</name> <name>m_max</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>m_max</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>y0</name> <init>= <expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>y1</name> <init>= <expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>noise</name> <operator>=</operator> <operator>(</operator><name>noise</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s_m</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>round</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">22</literal> <operator>-</operator> <name><name>s_m</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>exp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overflow in sbr_hf_apply_noise, shift=%d\n"</literal></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y0</name> <operator>+=</operator> <operator>(</operator><name><name>s_m</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>*</operator> <name>phi_sign0</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y1</name> <operator>+=</operator> <operator>(</operator><name><name>s_m</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>*</operator> <name>phi_sign1</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>round</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>accu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">22</literal> <operator>-</operator> <name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>exp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overflow in sbr_hf_apply_noise, shift=%d\n"</literal></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>*</operator> <name><name>ff_sbr_noise_table_fixed</name><index>[<expr><name>noise</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y0</name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>*</operator> <name><name>ff_sbr_noise_table_fixed</name><index>[<expr><name>noise</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y1</name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name>round</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>phi_sign1</name> <operator>=</operator> <operator>-</operator><name>phi_sign1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbrdsp_template.c"</cpp:file></cpp:include>

</unit>
