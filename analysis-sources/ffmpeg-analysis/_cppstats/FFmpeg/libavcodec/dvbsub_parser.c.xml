<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dvbsub_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_BUF_SIZE</name></cpp:macro> <cpp:value>(65536)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DVBSubParseContext</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>packet_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_packet</name></decl>;</decl_stmt>

}</block></struct></type> <name>DVBSubParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dvbsub_parse_init</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVBSubParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>PARSE_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVBSubParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>buf_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"DVB parse packet pts=%"</literal><name>PRIx64</name><literal type="string">", lpts=%"</literal><name>PRIx64</name><literal type="string">", cpts=%"</literal><name>PRIx64</name><literal type="string">":\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_pts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_pts</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_start_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fetch_timestamp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>!=</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Discarding %d bytes\n"</literal></expr></argument>,

<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x20</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Bad packet header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_pos</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>in_packet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>!=</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name></expr></argument>,

<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>-=</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>-</operator> <name>buf_pos</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>&gt;</operator> <name>PARSE_BUF_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>in_packet</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buf_pos</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>buf_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>+=</operator> <name>buf_size</name> <operator>-</operator> <name>buf_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>p_end</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x0f</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">6</literal> <operator>&lt;=</operator> <name>p_end</name> <operator>-</operator> <name>p</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">6</literal> <operator>&lt;=</operator> <name>p_end</name> <operator>-</operator> <name>p</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>out_size</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <name>p_end</name> <operator>-</operator> <name>p</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Junk at end of packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>in_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Junk in packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_index</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>in_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>out_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>packet_start</name></name> <operator>=</operator> <operator>*</operator><name>poutbuf_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>dvbsub_parse_close</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVBSubParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>packet_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_dvbsub_parser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_DVB_SUBTITLE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubParseContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parser_init</name> <operator>=</operator> <name>dvbsub_parse_init</name></expr>,

<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>dvbsub_parse</name></expr>,

<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>dvbsub_parse_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
