<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libdavs2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"davs2.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DAVS2Context</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>davs2_param_t</name></type> <name>param</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>davs2_packet_t</name></type> <name>packet</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>davs2_picture_t</name></type> <name>out_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>davs2_seq_info_t</name></type> <name>headerset</name></decl>;</decl_stmt> 

}</block></struct></type><name>DAVS2Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>davs2_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DAVS2Context</name> <modifier>*</modifier></type><name>cad</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>threads</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>info_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>disable_avx</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_AVX</name> <operator>&amp;&amp;</operator>

<name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_AVX2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <call><name>davs2_decoder_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decoder created error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"decoder created. %p\n"</literal></expr></argument>, <argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>davs2_dump_frames</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>davs2_picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>davs2_seq_info_t</name> <modifier>*</modifier></type><name>headerset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret_type</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DAVS2Context</name> <modifier>*</modifier></type><name>cad</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_sample</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>bytes_per_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>headerset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name> <operator>||</operator> <name>ret_type</name> <operator>==</operator> <name>DAVS2_GOT_HEADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>headerset</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>headerset</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>headerset</name><operator>-&gt;</operator><name>output_bit_depth</name></name> <operator>==</operator> <literal type="number">10</literal></expr> ?</condition><then>

<expr><name>AV_PIX_FMT_YUV420P10</name></expr> </then><else>: <expr><name>AV_PIX_FMT_YUV420P</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <call><name>av_d2q</name><argument_list>(<argument><expr><name><name>headerset</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>,<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DAVS2_PIC_I</name></expr>:</case>

<case>case <expr><name>DAVS2_PIC_G</name></expr>:</case>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DAVS2_PIC_P</name></expr>:</case>

<case>case <expr><name>DAVS2_PIC_S</name></expr>:</case>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DAVS2_PIC_B</name></expr>:</case>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DAVS2_PIC_F</name></expr>:</case>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_S</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoder error: unknown frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>plane</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size_line</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>widths</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>bytes_per_sample</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>size_line</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoder error: allocation failure, can't dump frames.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>plane</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>=</operator> <name>size_line</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name>plane</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>line</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>line</name> <operator>*</operator> <name>size_line</name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>line</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>strides</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>widths</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>*</operator> <name>bytes_per_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>cad</name><operator>-&gt;</operator><name>headerset</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>cad</name><operator>-&gt;</operator><name>headerset</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>cad</name><operator>-&gt;</operator><name>out_frame</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>davs2_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DAVS2Context</name> <modifier>*</modifier></type><name>cad</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>DAVS2_GOT_FRAME</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>==</operator> <name>DAVS2_GOT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>davs2_decoder_flush</name><argument_list>(<argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>headerset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>out_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>davs2_decoder_frame_unref</name><argument_list>(<argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>out_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DAVS2_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Decoder flushing failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_delayed_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DAVS2Context</name> <modifier>*</modifier></type><name>cad</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>DAVS2_DEFAULT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>davs2_decoder_flush</name><argument_list>(<argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>headerset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>out_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DAVS2_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoder error: can't flush delayed frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DAVS2_GOT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>davs2_dump_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>out_frame</name></name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>headerset</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>davs2_decoder_frame_unref</name><argument_list>(<argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>out_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>davs2_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DAVS2Context</name> <modifier>*</modifier></type><name>cad</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>davs2_decoder_close</name><argument_list>(<argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>davs2_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DAVS2Context</name> <modifier>*</modifier></type><name>cad</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_ptr</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>DAVS2_DEFAULT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>send_delayed_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buf_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cad</name><operator>-&gt;</operator><name>packet</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>davs2_decoder_send_packet</name><argument_list>(<argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DAVS2_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoder error: can't read packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>davs2_decoder_recv_frame</name><argument_list>(<argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>headerset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>out_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DAVS2_DEFAULT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>davs2_dump_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>out_frame</name></name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>headerset</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>davs2_decoder_frame_unref</name><argument_list>(<argument><expr><name><name>cad</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cad</name><operator>-&gt;</operator><name>out_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>buf_size</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libdavs2_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libdavs2"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libdavs2 AVS2-P2/IEEE1857.4"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AVS2</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DAVS2Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>davs2_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>davs2_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>davs2_decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>davs2_flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libdavs2"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
