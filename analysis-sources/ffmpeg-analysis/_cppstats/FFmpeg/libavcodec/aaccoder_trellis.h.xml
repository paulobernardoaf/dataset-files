<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aaccoder_trellis.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenctab.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TrellisBandCodingPath</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>prev_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>cost</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>;</decl_stmt>

}</block></struct></type> <name>TrellisBandCodingPath</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>codebook_trellis_rate</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TrellisBandCodingPath</name></type> <name><name>path</name><index>[<expr><literal type="number">120</literal></expr>]</index><index>[<expr><name>CB_TOT_ALL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>swb</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_sfb</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>run_bits</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>run_esc</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>run_bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>ppos</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>stackrun</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>stackcb</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>stack_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>next_minbits</name> <init>= <expr><name>INFINITY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_mincb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>win</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>CB_TOT_ALL</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>run_bits</name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>swb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>swb</name> <operator>&lt;</operator> <name>max_sfb</name></expr>;</condition> <incr><expr><name>swb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>swb</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>swb</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>cost_stay_here</name> <init>= <expr><name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cost</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cost_get_here</name> <init>= <expr><name>next_minbits</name> <operator>+</operator> <name>run_bits</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>run_value_bits</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>run</name></expr>]</index></name>

<operator>!=</operator> <name><name>run_value_bits</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>run</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cost_stay_here</name> <operator>+=</operator> <name>run_bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cost_get_here</name> <operator>&lt;</operator> <name>cost_stay_here</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <name>next_mincb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost_get_here</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost_stay_here</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>next_minbits</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_mincb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>CB_TOT_ALL</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <literal type="number">61450</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>minbits</name> <init>= <expr><name>next_minbits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mincb</name> <init>= <expr><name>next_mincb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startcb</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>swb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>startcb</name> <operator>=</operator> <name><name>aac_cb_in_map</name><index>[<expr><name>startcb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_minbits</name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_mincb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>startcb</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <literal type="number">61450</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <name>startcb</name></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>CB_TOT_ALL</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>cost_stay_here</name></decl>, <decl><type ref="prev"/><name>cost_get_here</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bits</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>swb</name></expr>]</index></name> <operator>!=</operator> <name><name>aac_cb_out_map</name><index>[<expr><name>cb</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <literal type="number">61450</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>group_len</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>quantize_band_cost_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name> <operator>+</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><name>start</name> <operator>+</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>swb</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>aac_cb_out_map</name><index>[<expr><name>cb</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cost_stay_here</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>+</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cost_get_here</name> <operator>=</operator> <name>minbits</name> <operator>+</operator> <name>bits</name> <operator>+</operator> <name>run_bits</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>run_value_bits</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name></expr>]</index></name>

<operator>!=</operator> <name><name>run_value_bits</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cost_stay_here</name> <operator>+=</operator> <name>run_bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cost_get_here</name> <operator>&lt;</operator> <name>cost_stay_here</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <name>mincb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost_get_here</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>cost_stay_here</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>&lt;</operator> <name>next_minbits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_minbits</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>swb</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_mincb</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>swb</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>stack_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cb</name> <operator>&lt;</operator> <name>CB_TOT_ALL</name></expr>;</condition> <incr><expr><name>cb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>max_sfb</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>&lt;</operator> <name><name>path</name><index>[<expr><name>max_sfb</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>ppos</name> <operator>=</operator> <name>max_sfb</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ppos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stackrun</name><index>[<expr><name>stack_len</name></expr>]</index></name> <operator>=</operator> <name><name>path</name><index>[<expr><name>ppos</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stackcb</name> <index>[<expr><name>stack_len</name></expr>]</index></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>ppos</name><operator>-</operator><name><name>path</name><index>[<expr><name>ppos</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>prev_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ppos</name> <operator>-=</operator> <name><name>path</name><index>[<expr><name>ppos</name></expr>]</index><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stack_len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>stack_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>aac_cb_out_map</name><index>[<expr><name><name>stackcb</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>stackrun</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name></name> <operator>+</operator> <name>win</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><operator>!</operator><name>cb</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>win</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>start</name></expr>]</index></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>run_esc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>run_bits</name></expr></argument>, <argument><expr><name>run_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>run_esc</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>run_bits</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
