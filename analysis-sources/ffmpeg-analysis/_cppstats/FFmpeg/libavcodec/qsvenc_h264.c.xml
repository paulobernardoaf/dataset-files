<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qsvenc_h264.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsvenc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>QSVH264EncContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVEncContext</name></type> <name>qsv</name></decl>;</decl_stmt>

}</block></struct></type> <name>QSVH264EncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_h264_set_encode_ctrl</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>mfxEncodeCtrl</name><modifier>*</modifier></type> <name>enc_ctrl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVH264EncContext</name> <modifier>*</modifier></type><name>qh264</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name><name>qh264</name><operator>-&gt;</operator><name>qsv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>a53_cc</name></name> <operator>&amp;&amp;</operator> <name>frame</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>mfxPayload</name><modifier>*</modifier></type> <name>payload</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxU8</name><modifier>*</modifier></type> <name>sei_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sei_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_alloc_a53_sei</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxPayload</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>payload</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sei_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>payload</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sei_data</name> <operator>=</operator> <operator>(</operator><name>mfxU8</name><operator>*</operator><operator>)</operator><operator>(</operator><name>payload</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxU8</name><operator>)</operator><name>sei_size</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>payload</name><operator>-&gt;</operator><name>BufSize</name></name> <operator>=</operator> <name>sei_size</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>payload</name><operator>-&gt;</operator><name>NumBit</name></name> <operator>=</operator> <name><name>payload</name><operator>-&gt;</operator><name>BufSize</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>payload</name><operator>-&gt;</operator><name>Type</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>payload</name><operator>-&gt;</operator><name>Data</name></name> <operator>=</operator> <name>sei_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctrl</name><operator>-&gt;</operator><name>NumExtParam</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctrl</name><operator>-&gt;</operator><name>NumPayload</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enc_ctrl</name><operator>-&gt;</operator><name>Payload</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>payload</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qsv_enc_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVH264EncContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>qsv</name><operator>.</operator><name>set_encode_ctrl_cb</name></name> <operator>=</operator> <name>qsv_h264_set_encode_ctrl</name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_qsv_enc_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_enc_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVH264EncContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_qsv_encode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_packet</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qsv_enc_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVH264EncContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_qsv_enc_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>qsv</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(QSVH264EncContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>QSV_COMMON_OPTS</name>

<block>{ <expr><literal type="string">"cavlc"</literal></expr>, <expr><literal type="string">"Enable CAVLC"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>cavlc</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_VCM</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"vcm"</literal></expr>, <expr><literal type="string">"Use the video conferencing mode ratecontrol"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>vcm</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"idr_interval"</literal></expr>, <expr><literal type="string">"Distance (in I-frames) between IDR frames"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>idr_interval</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pic_timing_sei"</literal></expr>, <expr><literal type="string">"Insert picture timing SEI with pic_struct_syntax element"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>pic_timing_sei</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"single_sei_nal_unit"</literal></expr>, <expr><literal type="string">"Put all the SEI messages into one NALU"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>single_sei_nal_unit</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_dec_frame_buffering"</literal></expr>, <expr><literal type="string">"Maximum number of frames buffered in the DPB"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>max_dec_frame_buffering</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT16_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_LA</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"look_ahead"</literal></expr>, <expr><literal type="string">"Use VBR algorithm with look ahead"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>look_ahead</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"look_ahead_depth"</literal></expr>, <expr><literal type="string">"Depth of look ahead in number frames"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>look_ahead_depth</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_LA_DS</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"look_ahead_downsampling"</literal></expr>, <expr><literal type="string">"Downscaling factor for the frames saved for the lookahead analysis"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>look_ahead_downsampling</name></name></expr></argument>)</argument_list></call></expr>,

<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_LOOKAHEAD_DS_UNKNOWN</name></expr> }</block></expr>, <expr><name>MFX_LOOKAHEAD_DS_UNKNOWN</name></expr>, <expr><name>MFX_LOOKAHEAD_DS_4x</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"look_ahead_downsampling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"unknown"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_LOOKAHEAD_DS_UNKNOWN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"look_ahead_downsampling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_LOOKAHEAD_DS_UNKNOWN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"look_ahead_downsampling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"off"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_LOOKAHEAD_DS_OFF</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"look_ahead_downsampling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2x"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_LOOKAHEAD_DS_2x</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"look_ahead_downsampling"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4x"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_LOOKAHEAD_DS_4x</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"look_ahead_downsampling"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"int_ref_type"</literal></expr>, <expr><literal type="string">"Intra refresh type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>int_ref_type</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>UINT16_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"int_ref_type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VE</name></expr>, <expr><literal type="string">"int_ref_type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vertical"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VE</name></expr>, <expr><literal type="string">"int_ref_type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"int_ref_cycle_size"</literal></expr>, <expr><literal type="string">"Number of frames in the intra refresh cycle"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>int_ref_cycle_size</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>UINT16_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"int_ref_qp_delta"</literal></expr>, <expr><literal type="string">"QP difference for the refresh MBs"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>int_ref_qp_delta</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INT16_MIN</name></expr> }</block></expr>, <expr><name>INT16_MIN</name></expr>, <expr><name>INT16_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"recovery_point_sei"</literal></expr>, <expr><literal type="string">"Insert recovery point SEI messages"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>recovery_point_sei</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_UNKNOWN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"unknown"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_UNKNOWN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"baseline"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_AVC_BASELINE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"main"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_AVC_MAIN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"high"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_PROFILE_AVC_HIGH</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"a53cc"</literal></expr> , <expr><literal type="string">"Use A53 Closed Captions (if available)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>a53_cc</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"Insert the Access Unit Delimiter NAL"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>aud</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_MF</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"mfmode"</literal></expr>, <expr><literal type="string">"Multi-Frame Mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>mfmode</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_MF_AUTO</name></expr> }</block></expr>, <expr><name>MFX_MF_DEFAULT</name></expr>, <expr><name>MFX_MF_AUTO</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"mfmode"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"off"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_MF_DISABLED</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"mfmode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto"</literal></expr> , <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>MFX_MF_AUTO</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"mfmode"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"repeat_pps"</literal></expr>, <expr><literal type="string">"repeat pps for every frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name><name>qsv</name><operator>.</operator><name>repeat_pps</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"h264_qsv encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>qsv_enc_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"1M"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"refs"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"250"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"3"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODER_TYPE</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"coder"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"trellis"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"+cgop"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"b_strategy"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_h264_qsv_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_qsv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 (Intel Quick Sync Video acceleration)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QSVH264EncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>qsv_enc_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>qsv_enc_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>qsv_enc_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_HYBRID</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_P010</name></expr>,

<expr><name>AV_PIX_FMT_QSV</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>class</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>qsv_enc_defaults</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"qsv"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
