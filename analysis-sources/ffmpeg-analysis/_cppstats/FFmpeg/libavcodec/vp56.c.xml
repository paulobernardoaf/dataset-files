<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vp56.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56data.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_vp56_init_dequant</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quantizer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quantizer</name></name> <operator>!=</operator> <name>quantizer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_vp3dsp_set_bounding_values</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bounding_values_array</name></name></expr></argument>, <argument><expr><name><name>ff_vp56_filter_threshold</name><index>[<expr><name>quantizer</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quantizer</name></name> <operator>=</operator> <name>quantizer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dequant_dc</name></name> <operator>=</operator> <name><name>ff_vp56_dc_dequant</name><index>[<expr><name>quantizer</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dequant_ac</name></name> <operator>=</operator> <name><name>ff_vp56_ac_dequant</name><index>[<expr><name>quantizer</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp56_get_vectors_predictors</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>VP56Frame</name></type> <name>ref_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_pred</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56mv</name></type> <name><name>vect</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56mv</name></type> <name>mvp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mvp</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>col</name> <operator>+</operator> <name><name>ff_vp56_candidate_predictor_pos</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvp</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>row</name> <operator>+</operator> <name><name>ff_vp56_candidate_predictor_pos</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mvp</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mvp</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator>

<name><name>mvp</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mvp</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>mvp</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>*</operator><name><name>mvp</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_vp56_reference_frame</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name> <operator>!=</operator> <name>ref_frame</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>vect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>vect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vect</name><index>[<expr><name>nb_pred</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>mv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_pred</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_pred</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vector_candidate_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>nb_pred</name><operator>+</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp56_parse_mb_type_models</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ctx</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ctx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ctx</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>ctx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">174</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name><index>[<expr><name>ctx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ff_vp56_pre_def_mb_type_stats</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name><index>[<expr><name>ctx</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>type</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">205</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>, <decl><type ref="prev"/><name>sign</name> <init>= <expr><call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>vp56_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ff_vp56_pmbtm_tree</name></expr></argument>,

<argument><expr><name>ff_vp56_mb_type_model_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>delta</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>delta</name> <operator>^</operator> <operator>-</operator><name>sign</name><operator>)</operator> <operator>+</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ctx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ctx</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>ctx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>type</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>type</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p02</name></decl>, <decl><type ref="prev"/><name>p34</name></decl>, <decl><type ref="prev"/><name>p0234</name></decl>, <decl><type ref="prev"/><name>p17</name></decl>, <decl><type ref="prev"/><name>p56</name></decl>, <decl><type ref="prev"/><name>p89</name></decl>, <decl><type ref="prev"/><name>p5689</name></decl>, <decl><type ref="prev"/><name>p156789</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <operator>(</operator><literal type="number">255</literal> <operator>*</operator> <name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p02</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p34</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p0234</name> <operator>=</operator> <name>p02</name> <operator>+</operator> <name>p34</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p17</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p56</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p89</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p5689</name> <operator>=</operator> <name>p56</name> <operator>+</operator> <name>p89</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p156789</name> <operator>=</operator> <name>p17</name> <operator>+</operator> <name>p5689</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name>p0234</name><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p0234</name><operator>+</operator><name>p156789</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name>p02</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p0234</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name>p17</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p156789</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p02</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p34</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p17</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name>p56</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p5689</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p56</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>p89</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>*</operator> <name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>type</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VP56mb</name></type> <name>vp56_parse_mb_type</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>VP56mb</name></type> <name>prev_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mb_type_model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>prev_type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>mb_type_model</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>prev_type</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>vp56_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ff_vp56_pmbt_tree</name></expr></argument>, <argument><expr><name>mb_type_model</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp56_decode_4mv</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56mv</name></type> <name>mv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>type</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>type</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>type</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>type</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VP56_MB_INTER_NOVEC_PF</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VP56mv</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_DELTA_PF</name></expr>:</case>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>parse_vector_adjustment</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_V1_PF</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_V2_PF</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name>col</name></expr>]</index></name><operator>.</operator><name>mv</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name>RSHIFT</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>x</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name>RSHIFT</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>y</name></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VP56mb</name></type> <name>vp56_decode_mv</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>mv</name></decl>, <decl><type ref="prev"/><name>vect</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctx</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>vp56_get_vectors_predictors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>VP56_FRAME_PREVIOUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <call><name>vp56_parse_mb_type</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name>col</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VP56_MB_INTER_V1_PF</name></expr>:</case>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_V2_PF</name></expr>:</case>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_V1_GF</name></expr>:</case>

<expr_stmt><expr><call><name>vp56_get_vectors_predictors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>VP56_FRAME_GOLDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_V2_GF</name></expr>:</case>

<expr_stmt><expr><call><name>vp56_get_vectors_predictors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>VP56_FRAME_GOLDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vector_candidate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_DELTA_PF</name></expr>:</case>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>parse_vector_adjustment</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name>vect</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_DELTA_GF</name></expr>:</case>

<expr_stmt><expr><call><name>vp56_get_vectors_predictors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>VP56_FRAME_GOLDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>parse_vector_adjustment</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name>vect</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_4V</name></expr>:</case>

<expr_stmt><expr><call><name>vp56_decode_4mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name>vect</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>row</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name>col</name></expr>]</index></name><operator>.</operator><name>mv</name> <operator>=</operator> <operator>*</operator><name>mv</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>mv</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VP56mb</name></type> <name>vp56_conceal_mv</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>mv</name></decl>, <decl><type ref="prev"/><name>vect</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <name>VP56_MB_INTER_NOVEC_PF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name>col</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <operator>&amp;</operator><name>vect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>row</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name>col</name></expr>]</index></name><operator>.</operator><name>mv</name> <operator>=</operator> <operator>*</operator><name>mv</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>mv</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp56_add_predictors_dc</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP56Frame</name></type> <name>ref_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idct_scantable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VP56RefDc</name> <modifier>*</modifier></type><name>ab</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56RefDc</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>left_block</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ref_frame</name> <operator>==</operator> <name><name>lb</name><operator>-&gt;</operator><name>ref_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dc</name> <operator>+=</operator> <name><name>lb</name><operator>-&gt;</operator><name>dc_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ref_frame</name> <operator>==</operator> <name><name>ab</name><operator>-&gt;</operator><name>ref_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dc</name> <operator>+=</operator> <name><name>ab</name><operator>-&gt;</operator><name>dc_coeff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP5</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>ref_frame</name> <operator>==</operator> <name><name>ab</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>.</operator><name>ref_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dc</name> <operator>+=</operator> <name><name>ab</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>.</operator><name>dc_coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_dc</name><index>[<expr><name><name>ff_vp56_b2p</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>ref_frame</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dc</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_dc</name><index>[<expr><name><name>ff_vp56_b2p</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>ref_frame</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>dc_coeff</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ab</name><operator>-&gt;</operator><name>ref_frame</name></name> <operator>=</operator> <name>ref_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lb</name><operator>-&gt;</operator><name>dc_coeff</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lb</name><operator>-&gt;</operator><name>ref_frame</name></name> <operator>=</operator> <name>ref_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>dequant_dc</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp56_deblock_filter</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>yuv</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP5</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>ff_vp56_filter_threshold</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>quantizer</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp56dsp</name><operator>.</operator><name>edge_filter_hor</name></name><argument_list>(<argument><expr><name>yuv</name> <operator>+</operator> <literal type="number">10</literal><operator>-</operator><name>dx</name></expr></argument> , <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dy</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp56dsp</name><operator>.</operator><name>edge_filter_ver</name></name><argument_list>(<argument><expr><name>yuv</name> <operator>+</operator> <name>stride</name><operator>*</operator><operator>(</operator><literal type="number">10</literal><operator>-</operator><name>dy</name><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>bounding_values</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bounding_values_array</name></name> <operator>+</operator> <literal type="number">127</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_vp3dsp_h_loop_filter_12</name><argument_list>(<argument><expr><name>yuv</name> <operator>+</operator> <literal type="number">10</literal><operator>-</operator><name>dx</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>bounding_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_vp3dsp_v_loop_filter_12</name><argument_list>(<argument><expr><name>yuv</name> <operator>+</operator> <name>stride</name><operator>*</operator><operator>(</operator><literal type="number">10</literal><operator>-</operator><name>dy</name><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>bounding_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp56_mc</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overlap_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vp56_coord_div</name><index>[<expr><name>b</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deblock_filtering</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filtering</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>deblock_filtering</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>vp56_coord_div</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>vp56_coord_div</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>dx</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>dy</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>x</name><operator>+</operator><literal type="number">12</literal><operator>&gt;=</operator><name><name>s</name><operator>-&gt;</operator><name>plane_width</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>||</operator>

<name>y</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>y</name><operator>+</operator><literal type="number">12</literal><operator>&gt;=</operator><name><name>s</name><operator>-&gt;</operator><name>plane_height</name><index>[<expr><name>plane</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,

<argument><expr><name>src</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>dy</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <operator>(</operator><name>dx</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane_width</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane_height</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_block</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_offset</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>deblock_filtering</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name><operator>,</operator>

<name>src</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>dy</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <operator>(</operator><name>dx</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>,</operator>

<name>stride</name><operator>,</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_block</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_offset</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src_block</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name>dy</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>dx</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>deblock_filtering</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp56_deblock_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>src_block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dx</name><operator>&amp;</operator><literal type="number">7</literal></expr></argument>, <argument><expr><name>dy</name><operator>&amp;</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>overlap_offset</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>overlap_offset</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>stride</name></expr> </then><else>: <expr><operator>-</operator><name>stride</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>overlap_offset</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src_block</name></expr></argument>, <argument><expr><name>src_offset</name></expr></argument>, <argument><expr><name>src_offset</name><operator>+</operator><name>overlap_offset</name></expr></argument>,

<argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter_selection</name></name></expr></argument>, <argument><expr><name>b</name><operator>&lt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp3dsp</name><operator>.</operator><name>put_no_rnd_pixels_l2</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src_block</name><operator>+</operator><name>src_offset</name></expr></argument>,

<argument><expr><name>src_block</name><operator>+</operator><name>src_offset</name><operator>+</operator><name>overlap_offset</name></expr></argument>,

<argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src_block</name><operator>+</operator><name>src_offset</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp56_idct_put</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selector</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>selector</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>||</operator> <name>selector</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp3dsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_vp3dsp_idct10_put</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp56_idct_add</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selector</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>selector</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp3dsp</name><operator>.</operator><name>idct_add</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>selector</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_vp3dsp_idct10_add</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vp3dsp</name><operator>.</operator><name>idct_dc_add</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp56_render_mb</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_alpha</name></decl></parameter>, <parameter><decl><type><name>VP56mb</name></type> <name>mb_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>ab</name></decl>, <decl><type ref="prev"/><name>b_max</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame_current</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>frame_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Frame</name></type> <name>ref_frame</name> <init>= <expr><name><name>ff_vp56_reference_frame</name><index>[<expr><name>mb_type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vp56_add_predictors_dc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ref_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_current</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_ref</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>ref_frame</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_type</name> <operator>!=</operator> <name>VP56_MB_INTRA</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>frame_ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ab</name> <operator>=</operator> <literal type="number">6</literal><operator>*</operator><name>is_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_max</name> <operator>=</operator> <literal type="number">6</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>is_alpha</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mb_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VP56_MB_INTRA</name></expr>:</case>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><name>b_max</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>plane</name> <operator>=</operator> <name><name>ff_vp56_b2p</name><index>[<expr><name>b</name><operator>+</operator><name>ab</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp56_idct_put</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>frame_current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>idct_selector</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_NOVEC_PF</name></expr>:</case>

<case>case <expr><name>VP56_MB_INTER_NOVEC_GF</name></expr>:</case>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><name>b_max</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>plane</name> <operator>=</operator> <name><name>ff_vp56_b2p</name><index>[<expr><name>b</name><operator>+</operator><name>ab</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>frame_current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>off</name><operator>,</operator>

<name><name>frame_ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>off</name><operator>,</operator>

<name><name>s</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>plane</name></expr>]</index></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp56_idct_add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>frame_current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>idct_selector</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>VP56_MB_INTER_DELTA_PF</name></expr>:</case>

<case>case <expr><name>VP56_MB_INTER_V1_PF</name></expr>:</case>

<case>case <expr><name>VP56_MB_INTER_V2_PF</name></expr>:</case>

<case>case <expr><name>VP56_MB_INTER_DELTA_GF</name></expr>:</case>

<case>case <expr><name>VP56_MB_INTER_4V</name></expr>:</case>

<case>case <expr><name>VP56_MB_INTER_V1_GF</name></expr>:</case>

<case>case <expr><name>VP56_MB_INTER_V2_GF</name></expr>:</case>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><name>b_max</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_off</name> <init>= <expr><ternary><condition><expr><name>b</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>b</name><operator>==</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_off</name> <init>= <expr><ternary><condition><expr><name>b</name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name>b</name><operator>==</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>plane</name> <operator>=</operator> <name><name>ff_vp56_b2p</name><index>[<expr><name>b</name><operator>+</operator><name>ab</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp56_mc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>plane</name></expr></argument>, <argument><expr><name><name>frame_ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">16</literal><operator>*</operator><name>col</name><operator>+</operator><name>x_off</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>row</name><operator>+</operator><name>y_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp56_idct_add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>frame_current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>plane</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>idct_selector</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>is_alpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp56_decode_mb</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56mb</name></type> <name>mb_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <name>VP56_MB_INTRA</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <call><name>vp56_decode_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>parse_coeff</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vp56_render_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>is_alpha</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp56_conceal_mb</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56mb</name></type> <name>mb_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <name>VP56_MB_INTRA</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <call><name>vp56_conceal_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vp56_render_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>is_alpha</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp56_size_changed</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane_width</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane_width</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane_width</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane_width</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane_height</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane_height</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane_height</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane_height</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>have_undamaged_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>flip</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>+</operator><literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>&gt;</operator> <literal type="number">1000</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"picture too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name></name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>+</operator><literal type="number">6</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer_alloc</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>*</operator><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer_alloc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer_alloc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flip</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+=</operator> <literal type="number">15</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vp56_size_changed</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ff_vp56_decode_mbs</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>ff_vp56_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remaining_buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alpha_offset</name> <init>= <expr><name>remaining_buf_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>remaining_buf_size</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>alpha_offset</name> <operator>=</operator> <call><name>bytestream_get_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_buf_size</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining_buf_size</name> <operator>&lt;</operator> <name>alpha_offset</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>parse_header</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>alpha_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>VP56_SIZE_CHANGE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>VP56_SIZE_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>VP56_SIZE_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>VP56_SIZE_CHANGE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_size_changed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bak_w</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bak_h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bak_cw</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bak_ch</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>alpha_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_buf_size</name> <operator>-=</operator> <name>alpha_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name><operator>-&gt;</operator><name>parse_header</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>alpha_context</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>remaining_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>res</name><operator>==</operator><name>VP56_SIZE_CHANGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Alpha reconfiguration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>bak_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>bak_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name>bak_cw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name>bak_ch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>discard_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ff_vp56_decode_mbs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVA420P</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>discard_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_vp56_decode_mbs</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s0</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_alpha</name> <init>= <expr><operator>(</operator><name>jobnr</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><ternary><condition><expr><name>is_alpha</name></expr> ?</condition><then> <expr><name><name>s0</name><operator>-&gt;</operator><name>alpha_context</name></name></expr> </then><else>: <expr><name>s0</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_row</name></decl>, <decl><type ref="prev"/><name>mb_col</name></decl>, <decl><type ref="prev"/><name>mb_row_flip</name></decl>, <decl><type ref="prev"/><name>mb_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>uv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride_y</name></decl>, <decl><type ref="prev"/><name>stride_uv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>damaged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>default_models_init</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>block</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>VP56_MB_INTRA</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp56_parse_mb_type_models</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>parse_vector_models</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <name>VP56_MB_INTER_NOVEC_PF</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>-&gt;</operator><name>parse_coeff_models</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_dc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_dc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>block</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>+</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>ref_frame</name> <operator>=</operator> <name>VP56_FRAME_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>dc_coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>not_null_dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>ref_frame</name> <operator>=</operator> <name>VP56_FRAME_CURRENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>ref_frame</name> <operator>=</operator> <name>VP56_FRAME_CURRENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>stride_y</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stride_uv</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flip</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_offset</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>mb_row</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_row</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>mb_row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flip</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_row_flip</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <name>mb_row</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_row_flip</name> <operator>=</operator> <name>mb_row</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>block</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>left_block</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>ref_frame</name> <operator>=</operator> <name>VP56_FRAME_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>left_block</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>dc_coeff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>left_block</name><index>[<expr><name>block</name></expr>]</index></name><operator>.</operator><name>not_null_dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx_last</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx_last</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frbi</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mb_row_flip</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>mb_offset</name><operator>)</operator> <operator>*</operator> <name>stride_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>srbi</name></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frbi</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mb_row_flip</name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <name>mb_offset</name><operator>)</operator> <operator>*</operator> <name>stride_uv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mb_col</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_col</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>damaged</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vp56_decode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_row</name></expr></argument>, <argument><expr><name>mb_col</name></expr></argument>, <argument><expr><name>is_alpha</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>damaged</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>have_undamaged_frame</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>error_concealment</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>discard_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>damaged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp56_conceal_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_row</name></expr></argument>, <argument><expr><name>mb_col</name></expr></argument>, <argument><expr><name>is_alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>uv</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>uv</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>uv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><name>uv</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>uv</name></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>damaged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>have_undamaged_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>next</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>golden_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AVFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vp56_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_vp56_init_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vp56_init_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name>has_alpha</name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_YUVA420P</name></expr> </then><else>: <expr><name>AV_PIX_FMT_YUV420P</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>skip_alpha</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h264chroma_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>h264chroma</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_hpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vdsp</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp3dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vp3dsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPOSE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 3) | (((x) &amp; 7) &lt;&lt; 3))</cpp:value></cpp:define>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idct_scantable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TRANSPOSE</name><argument_list>(<argument><expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRANSPOSE</name></cpp:undef>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp56_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer_alloc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quantizer</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>deblock_filtering</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>golden_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_alpha</name></name> <operator>=</operator> <name>has_alpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>model</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flip</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frbi</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>srbi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frbi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>srbi</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vp56_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_vp56_free_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vp56_free_context</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>edge_emu_buffer_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
