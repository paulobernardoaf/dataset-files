<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\golomb.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_VLC</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_golomb_vlc_len</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_ue_golomb_vlc_code</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>ff_se_golomb_vlc_code</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_ue_golomb_len</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_interleaved_ue_golomb_vlc_code</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>ff_interleaved_se_golomb_vlc_code</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_interleaved_dirac_golomb_vlc_code</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_ue_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CACHED_BITSTREAM_READER</name></expr></cpp:if>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ff_ue_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <name>log</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ff_ue_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid UE golomb code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <name>log</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>get_ue_golomb_long</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>buf</name></decl>, <decl><type ref="prev"/><name>log</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log</name> <operator>=</operator> <literal type="number">31</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>log</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_ue_golomb_31</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CACHED_BITSTREAM_READER</name></expr></cpp:if>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name><name>ff_ue_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>get_interleaved_ue_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CACHED_BITSTREAM_READER</name></expr></cpp:if>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;</operator> <literal type="number">0xAA800000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ff_interleaved_ue_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name><name>ff_interleaved_dirac_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>ff_interleaved_dirac_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>ret</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;</operator> <literal type="number">0xAA800000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ff_interleaved_ue_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name><name>ff_interleaved_dirac_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>ff_interleaved_dirac_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ret</name><operator>&lt;</operator><literal type="number">0x8000000U</literal> <operator>&amp;&amp;</operator> <call><name>BITS_AVAILABLE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_te0_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>range</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>range</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_te_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>range</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_se_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CACHED_BITSTREAM_READER</name></expr></cpp:if>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ff_se_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <name>log</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>buf</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>buf</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ff_se_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">31</literal> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <name>log</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>buf</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_se_golomb_long</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf</name> <init>= <expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>(</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>buf</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_interleaved_se_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CACHED_BITSTREAM_READER</name></expr></cpp:if>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;</operator> <literal type="number">0xAA800000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ff_interleaved_se_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>|=</operator> <literal type="number">1</literal> <operator>|</operator> <call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xAAAAAAAA</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALID_VLC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>log</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><operator>(</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>log</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>buf</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>buf</name> <operator>&lt;&lt;</operator> <name>log</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>buf</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">63</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>log</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>signed</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>buf</name> <operator>&lt;&lt;</operator> <name>log</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><operator>(</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&amp;</operator> <literal type="number">0xAA800000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_interleaved_golomb_vlc_len</name><index>[<expr><name>buf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ff_interleaved_se_golomb_vlc_code</name><index>[<expr><name>buf</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>|=</operator> <literal type="number">1</literal> <operator>|</operator> <operator>(</operator><call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0xAAAAAAAA</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALID_VLC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>log</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><operator>(</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>log</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>buf</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>buf</name> <operator>&lt;&lt;</operator> <name>log</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>log</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>buf</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">63</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>log</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>signed</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>buf</name> <operator>&lt;&lt;</operator> <name>log</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><operator>(</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dirac_get_se_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name> <init>= <expr><call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_ur_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>esc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CACHED_BITSTREAM_READER</name></expr></cpp:if>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>-</operator> <name>limit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <name>log</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><literal type="number">30</literal> <operator>-</operator> <name>log</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <name>k</name> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name> <operator>+</operator> <name>limit</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>-</operator> <name>limit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <name>log</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><literal type="number">30U</literal> <operator>-</operator> <name>log</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <name>k</name> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name> <operator>+</operator> <name>limit</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_ur_golomb_jpegls</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>esc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CACHED_BITSTREAM_READER</name></expr></cpp:if>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log</name> <operator>-</operator> <name>k</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="number">32</literal> <operator>-</operator> <name>log</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <name>log</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><literal type="number">30</literal> <operator>-</operator> <name>log</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <name>k</name> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>limit</name> <operator>&amp;&amp;</operator> <name>get_bits1</name><operator>(</operator><name>gb</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>get_bits_left</name><operator>(</operator><name>gb</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>limit</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log</name> <operator>-</operator> <name>k</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>-</operator> <name>MIN_CACHE_BITS</name> <operator>+</operator> <operator>(</operator><name>MIN_CACHE_BITS</name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<literal type="number">32</literal> <operator>-</operator> <name>log</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>&gt;&gt;=</operator> <name>log</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><literal type="number">30U</literal> <operator>-</operator> <name>log</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <name>k</name> <operator>-</operator> <name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <name>MIN_CACHE_BITS</name> <operator>&lt;=</operator> <name>limit</name> <operator>&amp;&amp;</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>MIN_CACHE_BITS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>MIN_CACHE_BITS</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gb</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>&lt;=</operator> <name>re_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>MIN_CACHE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>limit</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>MIN_CACHE_BITS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name><operator>-</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>|=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name><operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name><operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>SUINT</name><operator>)</operator><name>i</name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>limit</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_sr_golomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>esc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>v</name> <init>= <expr><call><name>get_ur_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_sr_golomb_flac</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>esc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>v</name> <init>= <expr><call><name>get_ur_golomb_jpegls</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>get_ur_golomb_shorten</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_ur_golomb_jpegls</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_sr_golomb_shorten</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>uvar</name> <init>= <expr><call><name>get_ur_golomb_jpegls</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>uvar</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><operator>(</operator><name>uvar</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_ue</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>show</name> <init>= <expr><call><name>show_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name>show</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>len</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%5d %2d %3d ue @%5d in %s %s:%d\n"</literal></expr></argument>,

<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_se</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>show</name> <init>= <expr><call><name>show_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name>show</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>len</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%5d %2d %3d se @%5d in %s %s:%d\n"</literal></expr></argument>,

<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_te</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>show</name> <init>= <expr><call><name>show_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>get_te0_golomb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name>show</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>len</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%5d %2d %3d te @%5d in %s %s:%d\n"</literal></expr></argument>,

<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_ue_golomb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_ue(a, __FILE__, __func__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_se_golomb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_se(a, __FILE__, __func__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_te_golomb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_te(a, r, __FILE__, __func__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_te0_golomb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_te(a, r, __FILE__, __func__, __LINE__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_ue_golomb</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0xFFFE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ff_ue_golomb_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_ue_golomb_long</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ff_ue_golomb_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits64</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_te_golomb</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>range</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_ue_golomb</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_se_golomb</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>^=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>set_ue_golomb</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_ur_golomb</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>esc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>i</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>e</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>+</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>limit</name> <operator>+</operator> <name>esc_len</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>limit</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_ur_golomb_jpegls</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>esc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>-=</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>-=</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_sr_golomb</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>esc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>^=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_ur_golomb</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_sr_golomb_flac</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>esc_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>^=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_ur_golomb_jpegls</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>esc_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
