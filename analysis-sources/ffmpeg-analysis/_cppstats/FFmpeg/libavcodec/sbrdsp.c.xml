<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\sbrdsp.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FIXED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbrdsp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>sbr_sum_square_c</name><argument_list>(<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sum0</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>sum0</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum1</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sum0</name> <operator>+</operator> <name>sum1</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_neg_odd_64_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name> <modifier>*</modifier></type><name>xi</name> <init>= <expr><operator>(</operator>union <name>av_intfloat32</name><operator>*</operator><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>xi</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>^=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xi</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>^=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_pre_shuffle_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name> <modifier>*</modifier></type><name>zi</name> <init>= <expr><operator>(</operator>union <name>av_intfloat32</name><operator>*</operator><operator>)</operator> <name>z</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>zi</name><index>[<expr><literal type="number">64</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zi</name><index>[<expr><literal type="number">65</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>zi</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[<expr><literal type="number">64</literal> <operator>-</operator> <name>k</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>^</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zi</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[ <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zi</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>k</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>^</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zi</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[ <expr><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>zi</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[<expr><literal type="number">64</literal> <operator>-</operator> <literal type="number">31</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>^</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zi</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[<expr><literal type="number">31</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_post_shuffle_c</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>W</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>union</name> <name>av_intfloat32</name></name> <modifier>*</modifier></type><name>zi</name> <init>= <expr><operator>(</operator><specifier>const</specifier> union <name>av_intfloat32</name><operator>*</operator><operator>)</operator> <name>z</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name> <modifier>*</modifier></type><name>Wi</name> <init>= <expr><operator>(</operator>union <name>av_intfloat32</name><operator>*</operator><operator>)</operator> <name>W</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>Wi</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>k</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>^</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Wi</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[ <expr><name>k</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Wi</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[<expr><literal type="number">62</literal> <operator>-</operator> <name>k</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>^</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Wi</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>zi</name><index>[ <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_deint_neg_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>union</name> <name>av_intfloat32</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><operator>(</operator><specifier>const</specifier> union <name>av_intfloat32</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name> <modifier>*</modifier></type><name>vi</name> <init>= <expr><operator>(</operator>union <name>av_intfloat32</name><operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vi</name><index>[ <expr><name>i</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>si</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr> ]</index></name><operator>.</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vi</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>=</operator> <name><name>si</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i</name> <operator>^</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static av_always_inline void autocorrelate(const float x[40][2],

float phi[3][2][2], int lag)

{

int i;

float real_sum = 0.0f;

float imag_sum = 0.0f;

if (lag) {

for (i = 1; i &lt; 38; i++) {

real_sum += x[i][0] * x[i+lag][0] + x[i][1] * x[i+lag][1];

imag_sum += x[i][0] * x[i+lag][1] - x[i][1] * x[i+lag][0];

}

phi[2-lag][1][0] = real_sum + x[ 0][0] * x[lag][0] + x[ 0][1] * x[lag][1];

phi[2-lag][1][1] = imag_sum + x[ 0][0] * x[lag][1] - x[ 0][1] * x[lag][0];

if (lag == 1) {

phi[0][0][0] = real_sum + x[38][0] * x[39][0] + x[38][1] * x[39][1];

phi[0][0][1] = imag_sum + x[38][0] * x[39][1] - x[38][1] * x[39][0];

}

} else {

for (i = 1; i &lt; 38; i++) {

real_sum += x[i][0] * x[i][0] + x[i][1] * x[i][1];

}

phi[2][1][0] = real_sum + x[ 0][0] * x[ 0][0] + x[ 0][1] * x[ 0][1];

phi[1][0][0] = real_sum + x[38][0] * x[38][0] + x[38][1] * x[38][1];

}

}

static void sbr_autocorrelate_c(const float x[40][2], float phi[3][2][2])

{

autocorrelate(x, phi, 0);

autocorrelate(x, phi, 1);

autocorrelate(x, phi, 2);

}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_autocorrelate_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>x</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>phi</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>real_sum2</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>imag_sum2</name> <init>= <expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>real_sum1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>imag_sum1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>real_sum0</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">38</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>real_sum0</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>real_sum1</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>imag_sum1</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>real_sum2</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>imag_sum2</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>real_sum2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>imag_sum2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>real_sum0</name> <operator>+</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>real_sum0</name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>real_sum1</name> <operator>+</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[ <expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[ <expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>imag_sum1</name> <operator>+</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[ <expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[ <expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>real_sum1</name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phi</name><index>[<expr><literal type="number">0</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>imag_sum1</name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_gen_c</name><argument_list>(<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>X_high</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>X_low</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>float</name> <name><name>alpha0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>float</name> <name><name>alpha1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>float</name> <name>bw</name></expr></argument>, <argument><expr><name>int</name> <name>start</name></expr></argument>, <argument><expr><name>int</name> <name>end</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>alpha</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>alpha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>bw</name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>alpha1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>bw</name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>alpha0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>alpha0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>bw</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X_high</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator>

<name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator>

<name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<name><name>X_low</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X_high</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<name><name>X_low</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>alpha</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<name><name>X_low</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_g_filt_c</name><argument_list>(<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>X_high</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>float</name> <operator>*</operator><name>g_filt</name></expr></argument>, <argument><expr><name>int</name> <name>m_max</name></expr></argument>, <argument><expr><name>intptr_t</name> <name>ixh</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>m_max</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>X_high</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>ixh</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>X_high</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>ixh</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>g_filt</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>sbr_hf_apply_noise</name><argument_list>(<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>float</name> <operator>*</operator><name>s_m</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>float</name> <operator>*</operator><name>q_filt</name></expr></argument>,

<argument><expr><name>int</name> <name>noise</name></expr></argument>,

<argument><expr><name>float</name> <name>phi_sign0</name></expr></argument>,

<argument><expr><name>float</name> <name>phi_sign1</name></expr></argument>,

<argument><expr><name>int</name> <name>m_max</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>m_max</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>y0</name> <init>= <expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y1</name> <init>= <expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>noise</name> <operator>=</operator> <operator>(</operator><name>noise</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1ff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s_m</name><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y0</name> <operator>+=</operator> <name><name>s_m</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name>phi_sign0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y1</name> <operator>+=</operator> <name><name>s_m</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name>phi_sign1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>y0</name> <operator>+=</operator> <name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name><name>ff_sbr_noise_table</name><index>[<expr><name>noise</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y1</name> <operator>+=</operator> <name><name>q_filt</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name><name>ff_sbr_noise_table</name><index>[<expr><name>noise</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>phi_sign1</name> <operator>=</operator> <operator>-</operator><name>phi_sign1</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbrdsp_template.c"</cpp:file></cpp:include>

</unit>
