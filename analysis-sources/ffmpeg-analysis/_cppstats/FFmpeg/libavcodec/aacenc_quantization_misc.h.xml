<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacenc_quantization_misc.h"><function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>quantize_band_cost_cached</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACQuantizeBandCostCacheEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>scale_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scale_idx</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>quantize_band_cost_cache</name><index>[<expr><name>scale_idx</name></expr>]</index><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>generation</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>quantize_band_cost_cache_generation</name></name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>cb</name></name> <operator>!=</operator> <name>cb</name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>rtz</name></name> <operator>!=</operator> <name>rtz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>rd</name></name> <operator>=</operator> <call><name>quantize_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>scaled</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>scale_idx</name></expr></argument>,

<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>lambda</name></expr></argument>, <argument><expr><name>uplim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>, <argument><expr><name>rtz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>rtz</name></name> <operator>=</operator> <name>rtz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>generation</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>quantize_band_cost_cache_generation</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>bits</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>rd</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
