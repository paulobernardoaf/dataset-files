<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\motion_est.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"motion_est.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_LEFT</name></cpp:macro> <cpp:value>P[1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_TOP</name></cpp:macro> <cpp:value>P[2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_TOPRIGHT</name></cpp:macro> <cpp:value>P[3]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_MEDIAN</name></cpp:macro> <cpp:value>P[4]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_MV1</name></cpp:macro> <cpp:value>P[9]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ME_MAP_SHIFT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ME_MAP_MV_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sad_hpel_motion_search</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mx_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>my_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmin</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>update_map_generation</name><parameter_list>(<parameter><decl><type><name>MotionEstContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>map_generation</name></name><operator>+=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>ME_MAP_MV_BITS</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>map_generation</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>map_generation</name></name><operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>ME_MAP_MV_BITS</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>ME_MAP_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>map_generation</name></name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>Minima</name><block>{

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>checked</name></decl>;</decl_stmt>

}</block></struct></type><name>Minima</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>minima_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Minima</name> <modifier>*</modifier></type><name>da</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Minima</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Minima</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Minima</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>da</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>db</name><operator>-&gt;</operator><name>height</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_QPEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_CHROMA</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_DIRECT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_ref</name><parameter_list>(<parameter><decl><type><name>MotionEstContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ref</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ref2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>offset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>= <expr><block>{

<expr><name>y</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator> <name>stride</name></name> <operator>+</operator> <name>x</name></expr>,

<expr><operator>(</operator><operator>(</operator><name>y</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name> <operator>+</operator> <name>x</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>,

<expr><operator>(</operator><operator>(</operator><name>y</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name> <operator>+</operator> <name>x</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>src</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>ref</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>ref_index</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>ref_index</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>ref2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_flags</name><parameter_list>(<parameter><decl><type><name>MotionEstContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list><block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_QPEL</name><operator>)</operator></expr> ?</condition><then> <expr><name>FLAG_QPEL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>direct</name></expr> ?</condition><then> <expr><name>FLAG_DIRECT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>chroma</name></expr> ?</condition><then> <expr><name>FLAG_CHROMA</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>cmp_direct_inline</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>suby</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>cmp_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>chroma_cmp_func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qpel</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hx</name><init>= <expr><name>subx</name> <operator>+</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>qpel</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hy</name><init>= <expr><name>suby</name> <operator>+</operator> <operator>(</operator><name>y</name><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>qpel</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>ref</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>ref_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>src</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>src_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>&amp;&amp;</operator> <name>hx</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>ymin</name></name> <operator>&amp;&amp;</operator> <name>hy</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>&amp;&amp;</operator> <name>hx</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>ymin</name></name> <operator>&amp;&amp;</operator> <name>hy</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>time_pp</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>time_pb</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name><init>= <expr><literal type="number">2</literal><operator>*</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name><operator>==</operator><name>MV_TYPE_8X8</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fx</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>hx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fy</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>hy</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bx</name> <init>= <expr><ternary><condition><expr><name>hx</name></expr> ?</condition><then> <expr><name>fx</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>time_pb</name> <operator>-</operator> <name>time_pp</name><operator>)</operator><operator>/</operator><name>time_pp</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>by</name> <init>= <expr><ternary><condition><expr><name>hy</name></expr> ?</condition><then> <expr><name>fy</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>time_pb</name> <operator>-</operator> <name>time_pp</name><operator>)</operator><operator>/</operator><name>time_pp</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fxy</name><init>= <expr><operator>(</operator><name>fx</name><operator>&amp;</operator><name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>fy</name><operator>&amp;</operator><name>mask</name><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bxy</name><init>= <expr><operator>(</operator><name>bx</name><operator>&amp;</operator><name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>by</name><operator>&amp;</operator><name>mask</name><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>*</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>qpel</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>fxy</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bxy</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>fxy</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bxy</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fx</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>hx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fy</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>hy</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bx</name> <init>= <expr><ternary><condition><expr><name>hx</name></expr> ?</condition><then> <expr><name>fx</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>time_pb</name> <operator>-</operator> <name>time_pp</name><operator>)</operator><operator>/</operator><name>time_pp</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>by</name> <init>= <expr><ternary><condition><expr><name>hy</name></expr> ?</condition><then> <expr><name>fy</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>time_pb</name> <operator>-</operator> <name>time_pp</name><operator>)</operator><operator>/</operator><name>time_pp</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fxy</name><init>= <expr><operator>(</operator><name>fx</name><operator>&amp;</operator><name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>fy</name><operator>&amp;</operator><name>mask</name><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bxy</name><init>= <expr><operator>(</operator><name>bx</name><operator>&amp;</operator><name>mask</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>by</name><operator>&amp;</operator><name>mask</name><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>qpel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>qpel</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>fxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>fxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">8</literal> <operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>fxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>fxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">8</literal> <operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>fxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>fx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>fy</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>bx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>by</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cmp_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name><operator>=</operator> <literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>cmp_inline</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>suby</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>cmp_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>chroma_cmp_func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qpel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvstride</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dxy</name><init>= <expr><name>subx</name> <operator>+</operator> <operator>(</operator><name>suby</name><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>qpel</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hx</name><init>= <expr><name>subx</name> <operator>+</operator> <name>x</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>qpel</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hy</name><init>= <expr><name>suby</name> <operator>+</operator> <name>y</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>qpel</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>ref</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>ref_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>src</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>src_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvdxy</name></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name>dxy</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>qpel</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;&lt;</operator> <name>size</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name> <operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>chroma</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cx</name><init>= <expr><name>hx</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cy</name><init>= <expr><name>hy</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cx</name><operator>=</operator> <operator>(</operator><name>cx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>cx</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cy</name><operator>=</operator> <operator>(</operator><name>cy</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>cy</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>uvdxy</name><operator>=</operator> <operator>(</operator><name>cx</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>cy</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>temp</name></name><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uvdxy</name><operator>=</operator> <name>dxy</name> <operator>|</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cmp_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cmp_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uvdxy</name><operator>=</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>chroma</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>uvtemp</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><name>size</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>uvdxy</name></expr>]</index></name><operator>(</operator><name>uvtemp</name> <operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>uvstride</name><operator>,</operator> <name>uvstride</name><operator>,</operator> <name>h</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><name>size</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>uvdxy</name></expr>]</index></name><operator>(</operator><name>uvtemp</name><operator>+</operator><literal type="number">8</literal><operator>,</operator> <name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>uvstride</name><operator>,</operator> <name>uvstride</name><operator>,</operator> <name>h</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <call><name>chroma_cmp_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>uvtemp</name></expr></argument> , <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvstride</name></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <call><name>chroma_cmp_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>uvtemp</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvstride</name></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_simple</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>cmp_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>chroma_cmp_func</name></decl></parameter>)</parameter_list><block>{<block_content>

<return>return <expr><call><name>cmp_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_fpel_internal</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>cmp_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>chroma_cmp_func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>flags</name><operator>&amp;</operator><name>FLAG_DIRECT</name></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>cmp_direct_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><name>flags</name><operator>&amp;</operator><name>FLAG_QPEL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><call><name>cmp_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name><operator>&amp;</operator><name>FLAG_CHROMA</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_internal</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>suby</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>cmp_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>chroma_cmp_func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>flags</name><operator>&amp;</operator><name>FLAG_DIRECT</name></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>cmp_direct_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>subx</name></expr></argument>,<argument><expr><name>suby</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><name>flags</name><operator>&amp;</operator><name>FLAG_QPEL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><call><name>cmp_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>subx</name></expr></argument>,<argument><expr><name>suby</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><name>flags</name><operator>&amp;</operator><name>FLAG_QPEL</name></expr></argument>, <argument><expr><name>flags</name><operator>&amp;</operator><name>FLAG_CHROMA</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>suby</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>cmp_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>chroma_cmp_func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>av_builtin_constant_p</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>av_builtin_constant_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>av_builtin_constant_p</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>av_builtin_constant_p</name><argument_list>(<argument><expr><name>subx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>av_builtin_constant_p</name><argument_list>(<argument><expr><name>suby</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>flags</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name><operator>==</operator><literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>size</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>subx</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>suby</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>cmp_simple</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>av_builtin_constant_p</name><argument_list>(<argument><expr><name>subx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>av_builtin_constant_p</name><argument_list>(<argument><expr><name>suby</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>subx</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>suby</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>cmp_fpel_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><call><name>cmp_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>subx</name></expr></argument>,<argument><expr><name>suby</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_hpel</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>suby</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>cmp_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>chroma_cmp_func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>flags</name><operator>&amp;</operator><name>FLAG_DIRECT</name></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>cmp_direct_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>subx</name></expr></argument>,<argument><expr><name>suby</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><call><name>cmp_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>subx</name></expr></argument>,<argument><expr><name>suby</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name><operator>&amp;</operator><name>FLAG_CHROMA</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_qpel</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>suby</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>cmp_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>chroma_cmp_func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>flags</name><operator>&amp;</operator><name>FLAG_DIRECT</name></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>cmp_direct_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>subx</name></expr></argument>,<argument><expr><name>suby</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><call><name>cmp_inline</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>subx</name></expr></argument>,<argument><expr><name>suby</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>ref_index</name></expr></argument>,<argument><expr><name>src_index</name></expr></argument>, <argument><expr><name>cmp_func</name></expr></argument>, <argument><expr><name>chroma_cmp_func</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name><operator>&amp;</operator><name>FLAG_CHROMA</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"motion_est_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>zero_cmp</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zero_hpel</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list><block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_init_me</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cache_size</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ME_MAP_SIZE</name><operator>&gt;&gt;</operator><name>ME_MAP_SHIFT</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>ME_MAP_SHIFT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dia_size</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>dia_size</name></name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">255</literal></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pre_dia_size</name></name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>dia_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pre_dia_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>-</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>ME_MAP_SIZE</name></expr></argument>, <argument><expr><name>MAX_SAB_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ME_MAP size is too small for SAB diamond\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H261</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>cache_size</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>dia_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"ME_MAP size may be a little small for the selected diamond size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_pre_cmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_pre_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_cmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_sub_cmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>get_flags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>&amp;</operator><name>FF_CMP_CHROMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_flags</name></name><operator>=</operator> <call><name>get_flags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name><operator>&amp;</operator><name>FF_CMP_CHROMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mb_flags</name></name> <operator>=</operator> <call><name>get_flags</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name> <operator>&amp;</operator><name>FF_CMP_CHROMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QPEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><operator>=</operator> <name>qpel_motion_search</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_avg</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>put_no_rnd_qpel_pixels_tab</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>qpel_put</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>put_qpel_pixels_tab</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name><operator>&amp;</operator><name>FF_CMP_CHROMA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><operator>=</operator> <name>hpel_motion_search</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name> <operator>==</operator> <name>FF_CMP_SAD</name>

<operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator> <name>me_cmp</name></name> <operator>==</operator> <name>FF_CMP_SAD</name>

<operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator> <name>mb_cmp</name></name> <operator>==</operator> <name>FF_CMP_SAD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><operator>=</operator> <name>sad_hpel_motion_search</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><operator>=</operator> <name>hpel_motion_search</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_avg</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>avg_pixels_tab</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_put</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_put</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name><operator>=</operator> <literal type="number">8</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_SNOW</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>&amp;</operator> <name>FF_CMP_CHROMA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_cmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>zero_cmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name> <operator>&amp;</operator> <name>FF_CMP_CHROMA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_sub_cmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_sub_cmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>zero_cmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hpel_put</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name>zero_hpel</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H261</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><operator>=</operator> <name>no_sub_motion_search</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SAD_HALF_MV</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{d = s-&gt;mecc.pix_abs[size][(x ? 1 : 0) + (y ? 2 : 0)](NULL, pix, ptr + ((x) &gt;&gt; 1), stride, h); d += (mv_penalty[pen_x + x] + mv_penalty[pen_y + y])*penalty_factor;COPY3_IF_LT(dminh, d, dx, x, dy, y)}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sad_hpel_motion_search</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mx_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>my_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmin</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>penalty_factor</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>sub_penalty_factor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>dminh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_COMMON</name></type>

<name>av_assert2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sub_flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mx_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>dmin</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>src_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>*</operator><name>mx_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <operator>*</operator><name>my_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>ref_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>my</name> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dminh</name> <operator>=</operator> <name>dmin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&gt;</operator> <name>xmin</name> <operator>&amp;&amp;</operator> <name><name>mx</name> <argument_list type="generic">&lt; <argument><expr><name>xmax</name> <operator>&amp;&amp;</operator>

<name>my</name></expr></argument> &gt;</argument_list></name> <name>ymin</name> <operator>&amp;&amp;</operator> <name>my</name> <operator>&lt;</operator> <name>ymax</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dy</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>pen_x</name></decl>, <decl><type ref="prev"/><name>pen_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><name>my</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>ME_MAP_SHIFT</name><operator>)</operator> <operator>+</operator> <name>mx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t</name><init>= <expr><name><name>score_map</name><index>[<expr><operator>(</operator><name>index</name><operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>ME_MAP_SHIFT</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>ME_MAP_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>l</name><init>= <expr><name><name>score_map</name><index>[<expr><operator>(</operator><name>index</name><operator>-</operator> <literal type="number">1</literal> <operator>)</operator><operator>&amp;</operator><operator>(</operator><name>ME_MAP_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name><init>= <expr><name><name>score_map</name><index>[<expr><operator>(</operator><name>index</name><operator>+</operator> <literal type="number">1</literal> <operator>)</operator><operator>&amp;</operator><operator>(</operator><name>ME_MAP_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b</name><init>= <expr><name><name>score_map</name><index>[<expr><operator>(</operator><name>index</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>ME_MAP_SHIFT</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>ME_MAP_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pen_x</name><operator>=</operator> <name>pred_x</name> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pen_y</name><operator>=</operator> <name>pred_y</name> <operator>+</operator> <name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name><operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name><operator>&lt;=</operator><name>b</name></expr>)</condition><block>{<block_content>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>y2</argument> , <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<if_stmt><if>if<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><block>{<block_content>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<if_stmt><if>if<condition>(<expr><name>t</name><operator>+</operator><name>r</name><operator>&lt;=</operator><name>b</name><operator>+</operator><name>l</name></expr>)</condition><block>{<block_content>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>+<literal type="number">1</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>+<literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>x2</argument> , <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

</block_content>}</block></if><else>else<block>{<block_content>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>+<literal type="number">1</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<if_stmt><if>if<condition>(<expr><name>t</name><operator>+</operator><name>l</name><operator>&lt;=</operator><name>b</name><operator>+</operator><name>r</name></expr>)</condition><block>{<block_content>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>+<literal type="number">1</literal></argument>, <argument>+<literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>x2</argument> , <argument>+<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>t</name><operator>+</operator><name>l</name><operator>&lt;=</operator><name>b</name><operator>+</operator><name>r</name></expr>)</condition><block>{<block_content>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>+<literal type="number">1</literal></argument>, <argument>+<literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>x2</argument> , <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>+<literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>t</name><operator>+</operator><name>r</name><operator>&lt;=</operator><name>b</name><operator>+</operator><name>l</name></expr>)</condition><block>{<block_content>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>+<literal type="number">1</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>+<literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>x2</argument> , <argument>+<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>xy2</argument>, <argument>+<literal type="number">1</literal></argument>, <argument>+<literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<macro><name>CHECK_SAD_HALF_MV</name><argument_list>(<argument>y2</argument> , <argument><literal type="number">0</literal></argument>, <argument>+<literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mx</name><operator>+=</operator><name>dx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name><operator>+=</operator><name>dy</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>mx_ptr</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my_ptr</name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

<return>return <expr><name>dminh</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_p_mv_tables</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mv4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xy</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mv4</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mot_xy</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mot_xy</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>get_limits</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>FLAG_QPEL</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_range</name> <init>= <expr><name>MAX_MV</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>FLAG_QPEL</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name> <operator>=</operator> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <operator>-</operator> <name>x</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <operator>-</operator> <name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator> <literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>y</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator> <literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name> <operator>=</operator> <operator>-</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <operator>-</operator> <name>x</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <operator>-</operator> <name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>*</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>range</name> <operator>||</operator> <name>range</name> <operator>&gt;</operator> <name>max_range</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>range</name> <operator>=</operator> <name>max_range</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>range</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>,<argument><expr><operator>-</operator><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name></expr></argument>,<argument><expr><operator>-</operator><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_mv4_ref</name><parameter_list>(<parameter><decl><type><name>MotionEstContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>h263_mv4_search</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name><init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>=<expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>P</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dmin_sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mx4_sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>my4_sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>same</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mv_penalty</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>safety_clipping</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_mv4_ref</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>block</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx4</name></decl>, <decl><type ref="prev"/><name>my4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred_x4</name></decl>, <decl><type ref="prev"/><name>pred_y4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dmin4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>off</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>block</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>safety_clipping</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <operator>-</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><name>block</name> <operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>=</operator> <operator>-</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><operator>(</operator><name>block</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>&amp;&amp;</operator> <name>block</name><operator>&lt;</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name><operator>=</operator> <name>pred_x4</name><operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name><operator>=</operator> <name>pred_y4</name><operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <name><name>off</name><index>[<expr><name>block</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <name><name>off</name><index>[<expr><name>block</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name><operator>=</operator> <name>pred_x4</name> <operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name><operator>=</operator> <name>pred_y4</name> <operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>P_MV1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MV1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>safety_clipping</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>&amp;&amp;</operator> <name><name>block</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i</name></expr></argument>&gt;</argument_list></name><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dmin4</name> <operator>=</operator> <call><name>epzs_motion_search2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my4</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>&gt;&gt;</operator><name>shift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin4</name><operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my4</name></expr></argument>, <argument><expr><name>dmin4</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_sub_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name><init>= <expr><operator>(</operator><operator>(</operator><name>block</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>block</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mx4</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my4</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>my4</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx4</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>put_no_rnd_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ref</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>put_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ref</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mx4</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my4</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>my4</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx4</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>,</operator> <name>ref</name> <operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name> <index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>,</operator> <name>ref</name> <operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dmin_sum</name><operator>+=</operator> <operator>(</operator><name><name>mv_penalty</name><index>[<expr><name>mx4</name><operator>-</operator><name>pred_x4</name></expr>]</index></name> <operator>+</operator> <name><name>mv_penalty</name><index>[<expr><name>my4</name><operator>-</operator><name>pred_y4</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin_sum</name><operator>+=</operator> <name>dmin4</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mx4_sum</name><operator>+=</operator> <name>mx4</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my4_sum</name><operator>+=</operator> <name>my4</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>mx4_sum</name><operator>+=</operator> <name>mx4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my4_sum</name><operator>+=</operator> <name>my4</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>block</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>block</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my4</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mx4</name> <operator>!=</operator> <name>mx</name> <operator>||</operator> <name>my4</name> <operator>!=</operator> <name>my</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>same</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>same</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_sub_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dmin_sum</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator>

<name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name>stride</name><operator>,</operator>

<name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name><operator>&amp;</operator><name>FF_CMP_CHROMA</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mx</name><operator>=</operator> <call><name>ff_h263_round_chroma</name><argument_list>(<argument><expr><name>mx4_sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name><operator>=</operator> <call><name>ff_h263_round_chroma</name><argument_list>(<argument><expr><name>my4_sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name><operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>mx</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>my</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name> <operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name> <index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name> <operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name> <index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dmin_sum</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin_sum</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name><operator>=</operator> <name>my</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>)</condition><block>{<block_content>

<case>case <expr><name>FF_CMP_RD</name></expr>:</case>

<return>return <expr><name>dmin_sum</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>dmin_sum</name><operator>+</operator> <literal type="number">11</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>init_interlaced_ref</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_index</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>ref_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>ref_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_CHROMA</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>ref_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>ref_index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>ref_index</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>ref_index</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>interlaced_search</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>ref_index</name></expr></argument>,

<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>mv_tables</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name><name>field_select_tables</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>int</name> <name>mx</name></expr></argument>, <argument><expr><name>int</name> <name>my</name></expr></argument>, <argument><expr><name>int</name> <name>user_field_select</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h</name><init>=<expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>P</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mv_penalty</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>same</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dmin_sum</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xy</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name>mot_stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_interlaced_ref</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ref_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>block</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>field_select</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_dmin</name><init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_field</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>field_select</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>field_select</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>field_select</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dmin</name></decl>, <decl><type ref="prev"/><name>mx_i</name></decl>, <decl><type ref="prev"/><name>my_i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>=</operator> <name><name>mv_tables</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><name>field_select</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>user_field_select</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>field_select</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>field_select</name><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>field_select_tables</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>field_select_tables</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>field_select_tables</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name> <operator>!=</operator> <name>field_select</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name><operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name><operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>xy</name> <operator>-</operator> <name>mot_stride</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>xy</name> <operator>-</operator> <name>mot_stride</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>P_MV1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>P_MV1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>epzs_motion_search2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_i</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>field_select</name><operator>+</operator><name>ref_index</name></expr></argument>, <argument><expr><name>mv_table</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_i</name></expr></argument>, <argument><expr><name>dmin</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>field_select</name><operator>+</operator><name>ref_index</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx_i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my_i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>me_sub_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>field_select</name><operator>+</operator><name>ref_index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mx_i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my_i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>my_i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mx_i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name><operator>,</operator> <name>ref</name> <operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name> <index>[<expr><name>size</name></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name><operator>,</operator> <name>ref</name> <operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><name>size</name></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name><operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin</name><operator>+=</operator> <operator>(</operator><name><name>mv_penalty</name><index>[<expr><name>mx_i</name><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name></expr>]</index></name> <operator>+</operator> <name><name>mv_penalty</name><index>[<expr><name>my_i</name><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin</name><operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>dmin</name> <operator>+=</operator> <name>field_select</name> <operator>!=</operator> <name>block</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>dmin</name> <operator>&lt;</operator> <name>best_dmin</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>best_dmin</name><operator>=</operator> <name>dmin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_field</name><operator>=</operator> <name>field_select</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<block>{<block_content>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>=</operator> <name><name>mv_tables</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><name>best_field</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>mx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>same</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>same</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>!=</operator> <name>my</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>same</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>best_field</name> <operator>!=</operator> <name>block</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>same</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>field_select_tables</name><index>[<expr><name>block</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name><operator>=</operator> <name>best_field</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin_sum</name> <operator>+=</operator> <name>best_dmin</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>same</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT_MAX</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>)</condition><block>{<block_content>

<case>case <expr><name>FF_CMP_RD</name></expr>:</case>

<return>return <expr><name>dmin_sum</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>dmin_sum</name><operator>+</operator> <literal type="number">11</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_penalty_factor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lambda2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list><block>{<block_content>

<switch>switch<condition>(<expr><name>type</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr>)</condition><block>{<block_content>

<default>default:</default>

<case>case <expr><name>FF_CMP_SAD</name></expr>:</case>

<return>return <expr><name>lambda</name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</return>

<case>case <expr><name>FF_CMP_DCT</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="number">3</literal><operator>*</operator><name>lambda</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>FF_LAMBDA_SHIFT</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<case>case <expr><name>FF_CMP_W53</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="number">4</literal><operator>*</operator><name>lambda</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>FF_LAMBDA_SHIFT</name><operator>)</operator></expr>;</return>

<case>case <expr><name>FF_CMP_W97</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>lambda</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>FF_LAMBDA_SHIFT</name><operator>)</operator></expr>;</return>

<case>case <expr><name>FF_CMP_SATD</name></expr>:</case>

<case>case <expr><name>FF_CMP_DCT264</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>lambda</name><operator>)</operator><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</return>

<case>case <expr><name>FF_CMP_RD</name></expr>:</case>

<case>case <expr><name>FF_CMP_PSNR</name></expr>:</case>

<case>case <expr><name>FF_CMP_SSE</name></expr>:</case>

<case>case <expr><name>FF_CMP_NSSE</name></expr>:</case>

<return>return <expr><name>lambda2</name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name></expr>;</return>

<case>case <expr><name>FF_CMP_BIT</name></expr>:</case>

<case>case <expr><name>FF_CMP_MEDIAN_SAD</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_estimate_p_frame_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ppix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>mx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>my</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dmin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>varc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vard</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>P</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name><init>= <expr><literal type="number">1</literal><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_type</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pic</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_ref</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>uvstride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>penalty_factor</name></name> <operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_penalty_factor</name></name><operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name> <operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_limits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>pix_sum</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>varc</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>pix_norm1</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <name>sum</name> <operator>*</operator> <name>sum</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">500</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_mean</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_y</name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sum</name><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_var</name> <index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_y</name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>varc</name><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mb_var_sum_temp</name></name> <operator>+=</operator> <operator>(</operator><name>varc</name><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>motion_est</name></name> <operator>!=</operator> <name>FF_ME_ZERO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>ff_epzs_motion_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>&gt;&gt;</operator><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ppix</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>my</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vard</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>pix</name><operator>,</operator> <name>ppix</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_y</name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>vard</name><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_mb_var_sum_temp</name></name> <operator>+=</operator> <operator>(</operator><name>vard</name><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>&gt;</operator> <name>FF_MB_DECISION_SIMPLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p_score</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>vard</name></expr></argument>, <argument><expr><name>varc</name><operator>-</operator><literal type="number">500</literal><operator>+</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_score</name><init>= <expr><name>varc</name><operator>-</operator><literal type="number">500</literal><operator>+</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name><operator>)</operator><operator>*</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scene_change_score</name></name><operator>+=</operator> <call><name>ff_sqrt</name><argument_list>(<argument><expr><name>p_score</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ff_sqrt</name><argument_list>(<argument><expr><name>i_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vard</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">200</literal><operator>*</operator><literal type="number">256</literal> <operator>&gt;</operator> <name>varc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>intra_penalty</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name><operator>|=</operator> <name>CANDIDATE_MB_TYPE_INTRA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>varc</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">200</literal><operator>*</operator><literal type="number">256</literal> <operator>&gt;</operator> <name>vard</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mb_type</name><operator>|=</operator> <name>CANDIDATE_MB_TYPE_INTER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>dmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_MV0</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name>mx</name> <operator>||</operator> <name>my</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>CANDIDATE_MB_TYPE_SKIPPED</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>&lt;&lt;=</operator><name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>&lt;&lt;=</operator><name>shift</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_4MV</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>skip</name></name> <operator>&amp;&amp;</operator> <name>varc</name><operator>&gt;</operator><literal type="number">50</literal><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>vard</name><operator>&gt;</operator><literal type="number">10</literal><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>h263_mv4_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name><operator>|=</operator><name>CANDIDATE_MB_TYPE_INTER4V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_p_mv_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_p_mv_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block>{<block_content> 

<if_stmt><if>if<condition>(<expr><call><name>interlaced_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_select_table</name></name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_type</name> <operator>|=</operator> <name>CANDIDATE_MB_TYPE_INTER_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>intra_score</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mb_type</name><operator>=</operator> <name>CANDIDATE_MB_TYPE_INTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>dmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <call><name>get_mb_score</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_4MV</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>skip</name></name> <operator>&amp;&amp;</operator> <name>varc</name><operator>&gt;</operator><literal type="number">50</literal><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>vard</name><operator>&gt;</operator><literal type="number">10</literal><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dmin4</name><init>= <expr><call><name>h263_mv4_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dmin4</name> <operator>&lt;</operator> <name>dmin</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mb_type</name><operator>=</operator> <name>CANDIDATE_MB_TYPE_INTER4V</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin</name><operator>=</operator><name>dmin4</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>dmin_i</name><init>= <expr><call><name>interlaced_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_select_table</name></name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dmin_i</name> <operator>&lt;</operator> <name>dmin</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <name>CANDIDATE_MB_TYPE_INTER_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <name>dmin_i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_p_mv_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>mb_type</name><operator>!=</operator><name>CANDIDATE_MB_TYPE_INTER4V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator><operator>==</operator><name>FF_CMP_SSE</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>intra_score</name><operator>=</operator> <name>varc</name> <operator>-</operator> <literal type="number">500</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mean</name> <init>= <expr><operator>(</operator><name>sum</name><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mean</name><operator>*=</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name><index>[<expr><name>i</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <name>mean</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name><index>[<expr><name>i</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>+</operator> <literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <name>mean</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name><index>[<expr><name>i</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>+</operator> <literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <name>mean</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name><index>[<expr><name>i</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>+</operator><literal type="number">12</literal></expr>]</index></name><operator>)</operator> <operator>=</operator> <name>mean</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>intra_score</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name><operator>,</operator> <name>pix</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>intra_score</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_penalty</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>intra_score</name> <operator>&lt;</operator> <name>dmin</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mb_type</name><operator>=</operator> <name>CANDIDATE_MB_TYPE_INTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <name>CANDIDATE_MB_TYPE_INTRA</name></expr>;</expr_stmt> 

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p_score</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>vard</name></expr></argument>, <argument><expr><name>varc</name><operator>-</operator><literal type="number">500</literal><operator>+</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_score</name><init>= <expr><name>varc</name><operator>-</operator><literal type="number">500</literal><operator>+</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name><operator>&gt;&gt;</operator><name>FF_LAMBDA_SHIFT</name><operator>)</operator><operator>*</operator><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scene_change_score</name></name><operator>+=</operator> <call><name>ff_sqrt</name><argument_list>(<argument><expr><name>p_score</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ff_sqrt</name><argument_list>(<argument><expr><name>i_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr>]</index></name><operator>=</operator> <name>mb_type</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_pre_estimate_p_frame_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>dmin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>P</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name><init>= <expr><literal type="number">1</literal><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xy</name><init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_ref</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pre_penalty_factor</name></name> <operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_pre_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_limits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name><operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name><operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator>

<name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>ff_epzs_motion_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>&gt;&gt;</operator><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mx</name><operator>&lt;&lt;</operator><name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name><operator>&lt;&lt;</operator><name>shift</name></expr>;</expr_stmt>

<return>return <expr><name>dmin</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>estimate_motion_b</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>int</name> <name>mb_x</name></expr></argument>, <argument><expr><name>int</name> <name>mb_y</name></expr></argument>,

<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>ref_index</name></expr></argument>, <argument><expr><name>int</name> <name>f_code</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>my</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dmin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>P</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name><init>= <expr><literal type="number">1</literal><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_xy</name> <init>= <expr><name>mb_y</name><operator>*</operator><name>mot_stride</name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mv_penalty</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><name>f_code</name></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_scale</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>penalty_factor</name></name> <operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_penalty_factor</name></name><operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name> <operator>=</operator> <call><name>get_penalty_factor</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name><operator>=</operator> <name>mv_penalty</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_limits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>motion_est</name></name> <operator>!=</operator> <name>FF_ME_ZERO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name> <operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name> <operator>=</operator> <name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mv_table</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mv_scale</name><operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>mv_scale</name><operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name><operator>&lt;&lt;</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>ff_epzs_motion_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ref_index</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>sub_motion_search</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>dmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ref_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <call><name>get_mb_score</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ref_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my</name></expr>;</expr_stmt>

<return>return <expr><name>dmin</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>check_bidir_mv</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>motion_fx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_fy</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>motion_bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_by</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pred_fx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred_fy</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pred_bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred_by</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mv_penalty_f</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mv_penalty_b</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>stride</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>scratchpad</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dxy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fbmin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src_data</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_data</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref2_data</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_fy</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_fx</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name>motion_fx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name>motion_fy</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>src_y</name> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>put_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_by</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_bx</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name>motion_bx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name>motion_by</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref2_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>src_y</name> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>avg_qpel_pixels_tab</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_fy</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_fx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name>motion_fx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name>motion_fy</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>src_y</name> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>,</operator> <name>ptr</name> <operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dxy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_by</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_bx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name>motion_bx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name>motion_by</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref2_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>src_y</name> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>avg_pixels_tab</name><index>[<expr><name>size</name></expr>]</index><index>[<expr><name>dxy</name></expr>]</index></name><operator>(</operator><name>dest_y</name> <operator>,</operator> <name>ptr</name> <operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fbmin</name> <operator>=</operator> <operator>(</operator><name><name>mv_penalty_f</name><index>[<expr><name>motion_fx</name><operator>-</operator><name>pred_fx</name></expr>]</index></name> <operator>+</operator> <name><name>mv_penalty_f</name><index>[<expr><name>motion_fy</name><operator>-</operator><name>pred_fy</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name>

<operator>+</operator><operator>(</operator><name><name>mv_penalty_b</name><index>[<expr><name>motion_bx</name><operator>-</operator><name>pred_bx</name></expr>]</index></name> <operator>+</operator> <name><name>mv_penalty_b</name><index>[<expr><name>motion_by</name><operator>-</operator><name>pred_by</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name>

<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>mb_cmp</name><index>[<expr><name>size</name></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name><name>src_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dest_y</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name><operator>&amp;</operator><name>FF_CMP_CHROMA</name></expr>)</condition><block>{<block_content>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fbmin</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>bidir_refine</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xy</name> <init>= <expr><name>mb_y</name> <operator>*</operator><name>mot_stride</name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fbmin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred_fx</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred_fy</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred_bx</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred_by</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_fx</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_fy</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_bx</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_by</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>sub_flags</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qpel</name><init>= <expr><name>flags</name><operator>&amp;</operator><name>FLAG_QPEL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name><init>= <expr><literal type="number">1</literal><operator>+</operator><name>qpel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xmin</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name><operator>&lt;&lt;</operator><name>shift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ymin</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name><operator>&lt;&lt;</operator><name>shift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xmax</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>&lt;&lt;</operator><name>shift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ymax</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>&lt;&lt;</operator><name>shift</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH</name><parameter_list>(<parameter><type><name>fx</name></type></parameter>,<parameter><type><name>fy</name></type></parameter>,<parameter><type><name>bx</name></type></parameter>,<parameter><type><name>by</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fx)+17*(fy)+63*(bx)+117*(by))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH8</name><parameter_list>(<parameter><type><name>fx</name></type></parameter>,<parameter><type><name>fy</name></type></parameter>,<parameter><type><name>bx</name></type></parameter>,<parameter><type><name>by</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint8_t)HASH(fx,fy,bx,by))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>hashidx</name><init>= <expr><call><name>HASH</name><argument_list>(<argument><expr><name>motion_fx</name></expr></argument>,<argument><expr><name>motion_fy</name></expr></argument>, <argument><expr><name>motion_bx</name></expr></argument>, <argument><expr><name>motion_by</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>map</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>map</name><index>[<expr><name>hashidx</name><operator>&amp;</operator><literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fbmin</name><operator>=</operator> <call><name>check_bidir_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>motion_fx</name></expr></argument>, <argument><expr><name>motion_fy</name></expr></argument>,

<argument><expr><name>motion_bx</name></expr></argument>, <argument><expr><name>motion_by</name></expr></argument>,

<argument><expr><name>pred_fx</name></expr></argument>, <argument><expr><name>pred_fy</name></expr></argument>,

<argument><expr><name>pred_bx</name></expr></argument>, <argument><expr><name>pred_by</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bidir_refine</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>limittab</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">64</literal></expr>,<expr><literal type="number">80</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limit</name><init>= <expr><name><name>limittab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bidir_refine</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>vect</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>hash</name><index>[]</index></name><init>=<expr><block>{

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HASH8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_BIDIR</name><parameter_list>(<parameter><type><name>fx</name></type></parameter>,<parameter><type><name>fy</name></type></parameter>,<parameter><type><name>bx</name></type></parameter>,<parameter><type><name>by</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if( !map[(hashidx+HASH(fx,fy,bx,by))&amp;255]&amp;&amp;(fx&lt;=0 || motion_fx+fx&lt;=xmax) &amp;&amp; (fy&lt;=0 || motion_fy+fy&lt;=ymax) &amp;&amp; (bx&lt;=0 || motion_bx+bx&lt;=xmax) &amp;&amp; (by&lt;=0 || motion_by+by&lt;=ymax)&amp;&amp;(fx&gt;=0 || motion_fx+fx&gt;=xmin) &amp;&amp; (fy&gt;=0 || motion_fy+fy&gt;=ymin) &amp;&amp; (bx&gt;=0 || motion_bx+bx&gt;=xmin) &amp;&amp; (by&gt;=0 || motion_by+by&gt;=ymin)){int score;map[(hashidx+HASH(fx,fy,bx,by))&amp;255] = 1;score= check_bidir_mv(s, motion_fx+fx, motion_fy+fy, motion_bx+bx, motion_by+by, pred_fx, pred_fy, pred_bx, pred_by, 0, 16);if(score &lt; fbmin){hashidx += HASH(fx,fy,bx,by);fbmin= score;motion_fx+=fx;motion_fy+=fy;motion_bx+=bx;motion_by+=by;end=0;}}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_BIDIR2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>CHECK_BIDIR(a,b,c,d)CHECK_BIDIR(-(a),-(b),-(c),-(d))</cpp:value></cpp:define>

<do>do<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>borderdist</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<macro><name>CHECK_BIDIR2</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CHECK_BIDIR2</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CHECK_BIDIR2</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CHECK_BIDIR2</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fx</name><init>= <expr><name>motion_fx</name><operator>+</operator><name><name>vect</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fy</name><init>= <expr><name>motion_fy</name><operator>+</operator><name><name>vect</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bx</name><init>= <expr><name>motion_bx</name><operator>+</operator><name><name>vect</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>by</name><init>= <expr><name>motion_by</name><operator>+</operator><name><name>vect</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>borderdist</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>= <expr><operator>(</operator><name>xmax</name> <operator>-</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>fx</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call><operator>)</operator><operator>|</operator><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>fx</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>xmin</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name><init>= <expr><operator>(</operator><name>ymax</name> <operator>-</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>fy</name></expr></argument>,<argument><expr><name>by</name></expr></argument>)</argument_list></call><operator>)</operator><operator>|</operator><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>fy</name></expr></argument>,<argument><expr><name>by</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ymin</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>a</name><operator>|</operator><name>b</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>hashidx</name><operator>+</operator><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>map</name><index>[<expr><operator>(</operator><name>hashidx</name><operator>+</operator><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>map</name><index>[<expr><operator>(</operator><name>hashidx</name><operator>+</operator><name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name><operator>=</operator> <call><name>check_bidir_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fx</name></expr></argument>, <argument><expr><name>fy</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>by</name></expr></argument>, <argument><expr><name>pred_fx</name></expr></argument>, <argument><expr><name>pred_fy</name></expr></argument>, <argument><expr><name>pred_bx</name></expr></argument>, <argument><expr><name>pred_by</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&lt;</operator> <name>fbmin</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>hashidx</name> <operator>+=</operator> <name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fbmin</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_fx</name><operator>=</operator><name>fx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_fy</name><operator>=</operator><name>fy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_bx</name><operator>=</operator><name>bx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_by</name><operator>=</operator><name>by</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>borderdist</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>borderdist</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>xmax</name> <operator>-</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>fx</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>fx</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>xmin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ymax</name> <operator>-</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>fy</name></expr></argument>,<argument><expr><name>by</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>fy</name></expr></argument>,<argument><expr><name>by</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ymin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>borderdist</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>while<condition>(<expr><operator>!</operator><name>end</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>motion_fx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>motion_fy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>motion_bx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>motion_by</name></expr>;</expr_stmt>

<return>return <expr><name>fbmin</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>direct_search</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>P</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mot_xy</name> <init>= <expr><name>mb_y</name><operator>*</operator><name>mot_stride</name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name><init>= <expr><literal type="number">1</literal><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dmin</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>time_pp</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>time_pb</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>xmin</name></decl>, <decl><type ref="prev"/><name>xmax</name></decl>, <decl><type ref="prev"/><name>ymin</name></decl>, <decl><type ref="prev"/><name>ymax</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ymin</name><operator>=</operator> <name>xmin</name><operator>=</operator><operator>(</operator><operator>-</operator><literal type="number">32</literal><operator>)</operator><operator>&gt;&gt;</operator><name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ymax</name><operator>=</operator> <name>xmax</name><operator>=</operator> <literal type="number">31</literal><operator>&gt;&gt;</operator><name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_8X8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mot_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name><operator>=</operator> <name>MV_TYPE_8X8</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name><operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>time_pb</name><operator>/</operator><name>time_pp</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>shift</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>time_pb</name><operator>/</operator><name>time_pp</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>shift</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name><operator>+=</operator> <literal type="number">16</literal><operator>*</operator><name>mb_x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>min</name><operator>+=</operator> <literal type="number">16</literal><operator>*</operator><name>mb_x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xmax</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>xmax</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xmin</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>xmin</name></expr></argument>, <argument><expr><operator>-</operator> <literal type="number">16</literal> <operator>-</operator> <name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>direct_basis_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>co_located_mv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name><operator>+=</operator> <literal type="number">16</literal><operator>*</operator><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>min</name><operator>+=</operator> <literal type="number">16</literal><operator>*</operator><name>mb_y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ymax</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>ymax</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ymin</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>ymin</name></expr></argument>, <argument><expr><operator>-</operator> <literal type="number">16</literal> <operator>-</operator> <name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>==</operator> <name>MV_TYPE_16X16</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>xmax</name> <operator>&lt;=</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name>ymax</name> <operator>&lt;=</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name>xmin</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>ymin</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>xmax</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>xmin</name></expr></argument> &gt;</argument_list></name><literal type="number">0</literal> <operator>||</operator> <name><name>ymax</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ymin</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name><index>[<expr><name>mot_xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name><index>[<expr><name>mot_xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">64</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmin</name></name><operator>=</operator> <name>xmin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymin</name></name><operator>=</operator> <name>ymin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>xmax</name></name><operator>=</operator> <name>xmax</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ymax</name></name><operator>=</operator> <name>ymax</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FLAG_DIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_flags</name></name> <operator>|=</operator> <name>FLAG_DIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_x</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pred_y</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>xmin</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>, <argument><expr><name>xmax</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ymin</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>, <argument><expr><name>ymax</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>xmin</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>, <argument><expr><name>xmax</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ymin</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>, <argument><expr><name>ymax</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>xmin</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>, <argument><expr><name>xmax</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name> <operator>-</operator> <name>mot_stride</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ymin</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>, <argument><expr><name>ymax</name><operator>&lt;&lt;</operator><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>P_MEDIAN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>P_LEFT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P_TOPRIGHT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>ff_epzs_motion_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mv_table</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">16</literal><operator>-</operator><name>shift</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sub_flags</name></name><operator>&amp;</operator><name>FLAG_QPEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>qpel_motion_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>dmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin</name> <operator>=</operator> <call><name>hpel_motion_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>dmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name> <operator>!=</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <call><name>get_mb_score</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_limits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>mot_xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FLAG_DIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sub_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FLAG_DIRECT</name></expr>;</expr_stmt>

<return>return <expr><name>dmin</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_estimate_b_frame_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>penalty_factor</name><init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mb_penalty_factor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fmin</name></decl>, <decl><type ref="prev"/><name>bmin</name></decl>, <decl><type ref="prev"/><name>dmin</name></decl>, <decl><type ref="prev"/><name>fbmin</name></decl>, <decl><type ref="prev"/><name>bimin</name></decl>, <decl><type ref="prev"/><name>fimin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xy</name> <init>= <expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_ref</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>mb_y</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_limits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_x</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>mbskip_table</name><index>[<expr><name>xy</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name><init>= <expr><call><name>direct_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>score</name><operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>score</name><operator>*</operator><name>score</name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">256</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_mb_var_sum_temp</name></name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var</name><index>[<expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr>]</index></name><operator>=</operator> <name>CANDIDATE_MB_TYPE_DIRECT0</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <call><name>direct_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dmin</name><operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fmin</name> <operator>=</operator> <call><name>estimate_motion_b</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<literal type="number">3</literal> <operator>*</operator> <name>penalty_factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bmin</name> <operator>=</operator> <call><name>estimate_motion_b</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<literal type="number">2</literal> <operator>*</operator> <name>penalty_factor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" %d %d "</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fbmin</name><operator>=</operator> <call><name>bidir_refine</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>penalty_factor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d %d %d %d\n"</literal></expr></argument>, <argument><expr><name>dmin</name></expr></argument>, <argument><expr><name>fmin</name></expr></argument>, <argument><expr><name>bmin</name></expr></argument>, <argument><expr><name>fbmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>skip</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fimin</name><operator>=</operator> <call><name>interlaced_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>current_mv_penalty</name></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mv_penalty</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name></expr>]</index></name> <operator>+</operator> <name>MAX_DMV</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bimin</name><operator>=</operator> <call><name>interlaced_search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fimin</name><operator>=</operator> <name>bimin</name><operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name><init>= <expr><name>fmin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CANDIDATE_MB_TYPE_FORWARD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dmin</name> <operator>&lt;=</operator> <name>score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>=</operator> <name>dmin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CANDIDATE_MB_TYPE_DIRECT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bmin</name><operator>&lt;</operator><name>score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name><operator>=</operator><name>bmin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name><operator>=</operator> <name>CANDIDATE_MB_TYPE_BACKWARD</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>fbmin</name><operator>&lt;</operator><name>score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name><operator>=</operator><name>fbmin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name><operator>=</operator> <name>CANDIDATE_MB_TYPE_BIDIR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>fimin</name><operator>&lt;</operator><name>score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name><operator>=</operator><name>fimin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name><operator>=</operator> <name>CANDIDATE_MB_TYPE_FORWARD_I</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bimin</name><operator>&lt;</operator><name>score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name><operator>=</operator><name>bimin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name><operator>=</operator> <name>CANDIDATE_MB_TYPE_BACKWARD_I</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>score</name><operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>score</name><operator>*</operator><name>score</name> <operator>+</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">256</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_mb_var_sum_temp</name></name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var</name><index>[<expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt> 

</block_content>}</block>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>&gt;</operator> <name>FF_MB_DECISION_SIMPLE</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>type</name><operator>=</operator> <name>CANDIDATE_MB_TYPE_FORWARD</name> <operator>|</operator> <name>CANDIDATE_MB_TYPE_BACKWARD</name> <operator>|</operator> <name>CANDIDATE_MB_TYPE_BIDIR</name> <operator>|</operator> <name>CANDIDATE_MB_TYPE_DIRECT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>fimin</name> <operator>&lt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>CANDIDATE_MB_TYPE_FORWARD_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>bimin</name> <operator>&lt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>CANDIDATE_MB_TYPE_BACKWARD_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>fimin</name> <operator>&lt;</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name>bimin</name> <operator>&lt;</operator> <name>INT_MAX</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>CANDIDATE_MB_TYPE_BIDIR_I</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>dmin</name><operator>&gt;</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>type</name><operator>&amp;=</operator> <operator>~</operator><name>CANDIDATE_MB_TYPE_DIRECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator> <name>type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_DIRECT</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_MV0</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name><index>[<expr><name>xy</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>|=</operator> <name>CANDIDATE_MB_TYPE_DIRECT0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr>]</index></name><operator>=</operator> <name>type</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>ff_get_best_fcode</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator> <name>s</name></expr></argument>, <argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>)</argument_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>motion_est</name></name> <operator>!=</operator> <name>FF_ME_ZERO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>score</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>range</name><init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr> </then><else>: <expr><operator>(</operator><name>INT_MAX</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>fcode_tab</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fcode_tab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_fcode</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_score</name><init>=<expr><operator>-</operator><literal type="number">10000000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>range</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;=</operator> <name>FF_COMPLIANCE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>range</name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>score</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name><operator>*</operator><operator>(</operator><literal type="number">8</literal><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xy</name><init>= <expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name></expr>]</index></name> <operator>&amp;</operator> <name>type</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>= <expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name><init>= <expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fcode</name><init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>fcode_tab</name><index>[<expr><name>mx</name> <operator>+</operator> <name>MAX_MV</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>fcode_tab</name><index>[<expr><name>my</name> <operator>+</operator> <name>MAX_MV</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mx</name> <operator>&gt;=</operator> <name>range</name> <operator>||</operator> <name>mx</name> <operator>&lt;</operator> <operator>-</operator><name>range</name> <operator>||</operator>

<name>my</name> <operator>&gt;=</operator> <name>range</name> <operator>||</operator> <name>my</name> <operator>&lt;</operator> <operator>-</operator><name>range</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>fcode</name> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var</name><index>[<expr><name>xy</name></expr>]</index></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_var</name><index>[<expr><name>xy</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>score</name><index>[<expr><name>j</name></expr>]</index></name><operator>-=</operator> <literal type="number">170</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xy</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>score</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>best_score</name><operator>=</operator> <name><name>score</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_fcode</name><operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>best_fcode</name></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>ff_fix_long_p_mvs</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>f_code</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>range</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>range</name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name>f_code</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>range</name> <operator>&lt;=</operator> <literal type="number">16</literal> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>range</name> <operator>&lt;=</operator><literal type="number">256</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;=</operator> <name>FF_COMPLIANCE_NORMAL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name> <operator>&amp;&amp;</operator> <name>range</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>range</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_4MV</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wrap</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xy</name><init>= <expr><name>y</name><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>wrap</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_INTER4V</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>block</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name><init>= <expr><operator>(</operator><name>block</name><operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>block</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>wrap</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><name>xy</name> <operator>+</operator> <name>off</name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><name>xy</name> <operator>+</operator> <name>off</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>mx</name> <operator>&gt;=</operator><name>range</name> <operator>||</operator> <name>mx</name> <operator>&lt;</operator><operator>-</operator><name>range</name>

<operator>||</operator> <name>my</name> <operator>&gt;=</operator><name>range</name> <operator>||</operator> <name>my</name> <operator>&lt;</operator><operator>-</operator><name>range</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>CANDIDATE_MB_TYPE_INTER4V</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xy</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>ff_fix_long_mvs</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator> <name>s</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>field_select_table</name></expr></argument>, <argument><expr><name>int</name> <name>field_select</name></expr></argument>,

<argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>f_code</name></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>, <argument><expr><name>int</name> <name>truncate</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MotionEstContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>h_range</name></decl>, <decl><type ref="prev"/><name>v_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range</name> <init>= <expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name>f_code</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name> <operator>&amp;&amp;</operator> <name>range</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>range</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h_range</name><operator>=</operator> <name>range</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_range</name><operator>=</operator> <ternary><condition><expr><name>field_select_table</name></expr> ?</condition><then> <expr><name>range</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>range</name></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xy</name><init>= <expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name></expr>]</index></name> <operator>&amp;</operator> <name>type</name></expr>)</condition><block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field_select_table</name> <operator>||</operator> <name><name>field_select_table</name><index>[<expr><name>xy</name></expr>]</index></name> <operator>==</operator> <name>field_select</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator><name>h_range</name> <operator>||</operator> <name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator><operator>-</operator><name>h_range</name>

<operator>||</operator> <name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator><name>v_range</name> <operator>||</operator> <name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator><operator>-</operator><name>v_range</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>truncate</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>h_range</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>h_range</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><name>h_range</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>-</operator><name>h_range</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>v_range</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>v_range</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><name>v_range</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>-</operator><name>v_range</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name></expr>]</index></name> <operator>|=</operator> <name>CANDIDATE_MB_TYPE_INTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator>

<name><name>mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xy</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

</unit>
