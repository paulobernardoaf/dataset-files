<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\jpegls.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>near</name></cpp:undef> 

<typedef>typedef <type><struct>struct <name>JpeglsContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>JpeglsContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>JLSState</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>T1</name></decl>, <name>T2</name>, <name>T3</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">367</literal></expr>]</index></name></decl>, <name><name>B</name><index>[<expr><literal type="number">367</literal></expr>]</index></name>, <name><name>C</name><index>[<expr><literal type="number">365</literal></expr>]</index></name>, <name><name>N</name><index>[<expr><literal type="number">367</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>, <name>reset</name>, <name>bpp</name>, <name>qbpp</name>, <name>maxval</name>, <name>range</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>near</name></decl>, <name>twonear</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>run_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>JLSState</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_jpegls_init_state</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_jpegls_quantize</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>T3</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>T2</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>T1</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>near</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>near</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>T1</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>T2</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>T3</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>ff_jpegls_reset_coding_parameters</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reset_all</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_jpegls_downscale_state</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>reset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_jpegls_update_state_regular</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>Q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">0x10000</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>*=</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>+=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_downscale_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;=</operator> <operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>Q</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>Q</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bits == 8 ? ((uint8_t *)(a))[i] : ((uint16_t *)(a))[i])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bits == 8 ? (((uint8_t *)(a))[i] = v) : (((uint16_t *)(a))[i] = v))</cpp:value></cpp:define>

</unit>
