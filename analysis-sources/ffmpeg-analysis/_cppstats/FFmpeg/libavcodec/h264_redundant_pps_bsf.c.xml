<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264_redundant_pps_bsf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h264.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>H264RedundantPPSContext</name> <block>{

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>access_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>global_pic_init_qp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_pic_init_qp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extradata_pic_init_qp</name></decl>;</decl_stmt>

}</block></struct></type> <name>H264RedundantPPSContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_redundant_pps_fixup_pps</name><parameter_list>(<parameter><decl><type><name>H264RedundantPPSContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>H264RawPPS</name> <modifier>*</modifier></type><name>pps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_pic_init_qp</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>global_pic_init_qp</name></name> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_redundant_pps_fixup_slice</name><parameter_list>(<parameter><decl><type><name>H264RedundantPPSContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>H264RawSliceHeader</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_pic_init_qp</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_qp_delta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name>qp</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>global_pic_init_qp</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_redundant_pps_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RedundantPPSContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>au_has_sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>au_has_sps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>nal</name> <init>= <expr><operator>&amp;</operator><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_SPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>au_has_sps</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_PPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>h264_redundant_pps_fixup_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>au_has_sps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Deleting redundant PPS "</literal>

<literal type="string">"at %"</literal><name>PRId64</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_delete_unit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_SLICE</name> <operator>||</operator>

<name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name><name>nal</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>h264_redundant_pps_fixup_slice</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_redundant_pps_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RedundantPPSContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_pic_init_qp</name></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_extradata</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_PPS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>h264_redundant_pps_fixup_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata_pic_init_qp</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>current_pic_init_qp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_extradata</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_out</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_redundant_pps_flush</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RedundantPPSContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>current_pic_init_qp</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>extradata_pic_init_qp</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_redundant_pps_close</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RedundantPPSContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>h264_redundant_pps_codec_ids</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_CODEC_ID_H264</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_h264_redundant_pps_bsf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_redundant_pps"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>H264RedundantPPSContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>h264_redundant_pps_init</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <operator>&amp;</operator><name>h264_redundant_pps_flush</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>h264_redundant_pps_close</name></expr>,

<expr><operator>.</operator><name>filter</name> <operator>=</operator> <operator>&amp;</operator><name>h264_redundant_pps_filter</name></expr>,

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>h264_redundant_pps_codec_ids</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
