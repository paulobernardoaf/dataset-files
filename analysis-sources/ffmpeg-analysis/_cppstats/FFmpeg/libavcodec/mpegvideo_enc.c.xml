<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegvideo_enc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideodata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h261.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixblockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"faandct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aandcttab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv10.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libxvid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sp5x.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUANT_BIAS_SHIFT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QMAT_SHIFT_MMX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QMAT_SHIFT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>encode_picture</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>picture_number</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dct_quantize_refine</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>weight</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sse_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>denoise_dct_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dct_quantize_trellis_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>default_mv_penalty</name><index>[<expr><name>MAX_FCODE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>MAX_DMV</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>default_fcode_tab</name><index>[<expr><name>MAX_MV</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name></type> <name><name>ff_mpv_generic_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>FF_MPV_COMMON_OPTS</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ff_convert_matrix</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>qmat</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>qmat16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><name>quant_matrix</name></expr></argument>,

<argument><expr><name>int</name> <name>bias</name></expr></argument>, <argument><expr><name>int</name> <name>qmin</name></expr></argument>, <argument><expr><name>int</name> <name>qmax</name></expr></argument>, <argument><expr><name>int</name> <name>intra</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FDCTDSPContext</name> <modifier>*</modifier></type><name>fdsp</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>qscale</name> <operator>=</operator> <name>qmin</name></expr>;</init> <condition><expr><name>qscale</name> <operator>&lt;=</operator> <name>qmax</name></expr>;</condition> <incr><expr><name>qscale</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qscale2</name> <operator>=</operator> <name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>qscale2</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fdsp</name><operator>-&gt;</operator><name>fdct</name></name> <operator>==</operator> <name>ff_jpeg_fdct_islow_8</name> <operator>||</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_FAANDCT</name></expr></cpp:if>

<name><name>fdsp</name><operator>-&gt;</operator><name>fdct</name></name> <operator>==</operator> <name>ff_faandct</name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<name><name>fdsp</name><operator>-&gt;</operator><name>fdct</name></name> <operator>==</operator> <name>ff_jpeg_fdct_islow_10</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>den</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>qscale2</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>qmat</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>QMAT_SHIFT</name><operator>)</operator> <operator>/</operator> <name>den</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fdsp</name><operator>-&gt;</operator><name>fdct</name></name> <operator>==</operator> <name>ff_fdct_ifast</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>den</name> <init>= <expr><name><name>ff_aanscales</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>qscale2</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>qmat</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>QMAT_SHIFT</name> <operator>+</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>den</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>den</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>qscale2</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>qmat</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>QMAT_SHIFT</name><operator>)</operator> <operator>/</operator> <name>den</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qmat16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>QMAT_SHIFT_MMX</name><operator>)</operator> <operator>/</operator> <name>den</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>qmat16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>qmat16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">128</literal> <operator>*</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>qmat16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>*</operator> <literal type="number">256</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qmat16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>bias</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>QUANT_BIAS_SHIFT</name><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><name><name>qmat16</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>intra</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>max</name> <init>= <expr><literal type="number">8191</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fdsp</name><operator>-&gt;</operator><name>fdct</name></name> <operator>==</operator> <name>ff_fdct_ifast</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><literal type="number">8191LL</literal> <operator>*</operator> <name><name>ff_aanscales</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>max</name> <operator>*</operator> <name><name>qmat</name><index>[<expr><name>qscale</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"Warning, QMAT_SHIFT is larger than %d, overflows possible\n"</literal></expr></argument>,

<argument><expr><name>QMAT_SHIFT</name> <operator>-</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_qscale</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bestdiff</name><init>=<expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_mpeg2_non_linear_qscale</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">139</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>||</operator>

<operator>(</operator><name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>vbv_ignore_qmax</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>bestdiff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bestdiff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name>best</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <literal type="number">139</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator>

<operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_ignore_qmax</name></name></expr> ?</condition><then> <expr><literal type="number">31</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator>

<name>FF_LAMBDA_SHIFT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_write_quant_matrix</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>matrix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_init_qscale_tab</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>qscale_table</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>qscale_table</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lam</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lambda_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name> <init>= <expr><operator>(</operator><name>lam</name> <operator>*</operator> <literal type="number">139</literal> <operator>+</operator> <name>FF_LAMBDA_SCALE</name> <operator>*</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>qscale_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>qp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_duplicate_context_after_me</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst-&gt;a= src-&gt;a</cpp:value></cpp:define>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>current_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>f_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>b_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>lambda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>lambda2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>picture_in_gop_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>gop_picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>frame_pred_frame_dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>progressive_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>partitioned_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COPY</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpv_encode_defaults</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mpv_common_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>default_fcode_tab</name><index>[<expr><name>i</name> <operator>+</operator> <name>MAX_MV</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>mv_penalty</name></name> <operator>=</operator> <name>default_mv_penalty</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fcode_tab</name></name> <operator>=</operator> <name>default_fcode_tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_in_gop_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_dct_encode_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_dct_encode_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dct_quantize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_quantize</name></name> <operator>=</operator> <name>ff_dct_quantize_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>denoise_dct</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>denoise_dct</name></name> <operator>=</operator> <name>denoise_dct_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fast_dct_quantize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_quantize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_quantize</name></name> <operator>=</operator> <name>dct_quantize_trellis_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_mpv_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>cpb_props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>format_supported</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mpv_encode_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"only YUV420 and YUV422 are supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_AMV</name></expr>:</case>

<expr_stmt><expr><name>format_supported</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ420P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ422P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ444P</name> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&lt;=</operator> <name>FF_COMPLIANCE_UNOFFICIAL</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>format_supported</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format_supported</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"colorspace not supported in jpeg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"only YUV420 is supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <name>CHROMA_444</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <name>CHROMA_422</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <name>CHROMA_420</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rtp_payload_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_payload_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rtp_payload_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>me_penalty_compensation</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me_penalty_compensation</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>me_penalty_compensation</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pre_me</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me_pre</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pre_me</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;</operator> <literal type="number">600</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"keyframe interval too large!, reducing it from %d to %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&gt;</operator> <name>MAX_B_FRAMES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many B-frames requested, maximum "</literal>

<literal type="string">"is %d.\n"</literal></expr></argument>, <argument><expr><name>MAX_B_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <name>MAX_B_FRAMES</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QPEL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_mode</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rtp_payload_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"intra dc precision must be positive, note some applications use"</literal>

<literal type="string">" 0 and some 8 as base meaning 8bit, the value must not be smaller than that\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AMV</name> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>huffman</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"intra dc precision too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>user_specified_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_only</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_qscale</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>adaptive_quant</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lumi_masking</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>dark_masking</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>temporal_cplx_masking</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>spatial_cplx_masking</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>p_masking</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>border_masking</name></name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_QP_RD</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOOP_FILTER</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr></argument>, <argument><expr><literal type="number">15000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">112LL</literal> <operator>/</operator> <literal type="number">15000000</literal> <operator>*</operator> <literal type="number">16384</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MSMPEG4V1</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MSMPEG4V2</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MSMPEG4V3</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;=</operator> <literal type="number">15000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>=</operator> <literal type="number">320</literal> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>-</operator> <literal type="number">15000000LL</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">760</literal><operator>-</operator><literal type="number">320</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">38400000</literal> <operator>-</operator> <literal type="number">15000000</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;=</operator> <literal type="number">2000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>=</operator> <literal type="number">80</literal> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>-</operator> <literal type="number">2000000LL</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">320</literal><operator>-</operator> <literal type="number">80</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">15000000</literal> <operator>-</operator> <literal type="number">2000000</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;=</operator> <literal type="number">384000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>=</operator> <literal type="number">40</literal> <operator>+</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>-</operator> <literal type="number">384000LL</literal><operator>)</operator> <operator>*</operator> <operator>(</operator> <literal type="number">80</literal><operator>-</operator> <literal type="number">40</literal><operator>)</operator> <operator>/</operator> <operator>(</operator> <literal type="number">2000000</literal> <operator>-</operator> <literal type="number">384000</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>*=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Automatically choosing VBV buffer size of %d kbyte\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name><operator>/</operator><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Either both buffer size and max rate or neither must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"Warning min_rate &gt; 0 but min_rate != max_rate isn't recommended!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bitrate below min bitrate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bitrate above max bitrate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"impossible bitrate constraints, this will fail\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VBV buffer too small for bitrate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_qscale</name></name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>bit_rate_tolerance</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"bitrate tolerance %d too small for bitrate %"</literal><name>PRId64</name><literal type="string">", overriding\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate_tolerance</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate_tolerance</name></name> <operator>=</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name><operator>)</operator> <operator>&amp;&amp;</operator>

<literal type="number">90000LL</literal> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>*</operator> <literal type="number">0xFFFFLL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"Warning vbv_delay will be set to 0xFFFF (=VBR) as the "</literal>

<literal type="string">"specified vbv buffer is too large for the given bitrate!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_4MV</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_H263</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_H263P</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_FLV1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"4MV not supported by codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>obmc</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>!=</operator> <name>FF_MB_DECISION_SIMPLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"OBMC is only supported with simple mb decision\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"qpel not supported by codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"B-frames not supported by codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"max b frames must be 0 or positive for mpegvideo based encoders\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263P</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Invalid pixel aspect ratio %i/%i, limit is 255/255 reducing\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263P</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">2048</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">1152</literal> <operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"H.263 does not support resolutions above 2048x1152\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263P</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"w/h must be a multiple of 4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">4095</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">4095</literal> <operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MPEG-1 does not support resolutions above 4095x4095\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">16383</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">16383</literal> <operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MPEG-2 does not support resolutions above 16383x16383\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV10</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator><literal type="number">15</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>&amp;</operator><literal type="number">15</literal> <operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"width and height must be a multiple of 16\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV20</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator><literal type="number">3</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>&amp;</operator><literal type="number">3</literal> <operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"width and height must be a multiple of 4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV1</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV2</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"width must be multiple of 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_FLAG_INTERLACED_DCT</name> <operator>|</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"interlacing not supported by codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>mpeg_quant</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>mpeg_quant</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG4</name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"mpeg2 style quantization not supported by codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_CBP_RD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CBP RD needs trellis quant\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_QP_RD</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>!=</operator> <name>FF_MB_DECISION_RD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"QP RD needs mbd=2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_QP_RD</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AMV</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"QP RD is no longer compatible with MJPEG or AMV\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scenechange_threshold</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scenechange_threshold</name></name> <operator>&lt;</operator> <literal type="number">1000000000</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_CLOSED_GOP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"closed gop with scene change detection are not supported yet, "</literal>

<literal type="string">"set threshold to 1000000000\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;=</operator> <name>FF_COMPLIANCE_NORMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"low delay forcing is only available for mpeg2, "</literal>

<literal type="string">"set strict_std_compliance to 'unofficial' or lower in order to allow it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"B-frames cannot be used with low delay\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;</operator> <literal type="number">28</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"non linear quant only supports qmax &lt;= 28 currently\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FLV1</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H261</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Multiple slices are not supported by this codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MJPEG</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_H263P</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"multi threaded encoding not supported by codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"automatic thread number detection not supported by codec, "</literal>

<literal type="string">"patch welcome\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"framerate not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_frame_strategy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_frame_strategy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_sensitivity</name></name> <operator>!=</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_sensitivity</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_sensitivity</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"notice: b_frame_strategy only affects the first pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>av_gcd</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"removing common factors from framerate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MJPEG</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_AMV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>QUANT_BIAS_SHIFT</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inter_quant_bias</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inter_quant_bias</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>QUANT_BIAS_SHIFT</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"qmin and or qmax are invalid, they must be 0 &lt; min &lt;= max\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"intra_quant_bias = %d inter_quant_bias = %d\n"</literal></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>inter_quant_bias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"timebase %d/%d not supported by MPEG 4 standard, "</literal>

<literal type="string">"the maximum admitted value for the timebase denominator "</literal>

<literal type="string">"is %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time_increment_bits</name></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_MPEG1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_MPEG1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOW_DELAY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_AMV</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_MJPEG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_MJPEG_ENCODER</name> <operator>||</operator>

<call><name>ff_mjpeg_encode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H261</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_H261_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_h261_get_picture_format</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The specified picture size of %dx%d is not valid for the "</literal>

<literal type="string">"H.261 codec.\nValid sizes are 176x144, 352x288\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H261</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_H263_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_match_2uint16</name><argument_list>(<argument><expr><name>ff_h263_format</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_h263_format</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The specified picture size of %dx%d is not valid for "</literal>

<literal type="string">"the H.263 codec.\nValid sizes are 128x96, 176x144, "</literal>

<literal type="string">"352x288, 704x576, and 1408x1152. "</literal>

<literal type="string">"Try H.263+.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H263P</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_plus</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_AC_PRED</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>modified_quant</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOOP_FILTER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>obmc</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>umvplus</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_FLV1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_flv</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_RV10</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_RV20</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>modified_quant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_plus</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MSMPEG4V2</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MSMPEG4V3</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_WMV1</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_WMV2</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <init>= <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>progressive_frame</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>progressive_sequence</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_CODEC_FLAG_INTERLACED_DCT</name> <operator>|</operator>

<name>AV_CODEC_FLAG_INTERLACED_ME</name><operator>)</operator> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_idct_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_mpv_common_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_fdctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_me_cmp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpegvideoencdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_pixblockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_qpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_stats</name></name></expr></argument>,

<argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>

<operator>(</operator><name>MAX_RUN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name></name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix</name></name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name></name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix16</name></name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name></name></expr></argument>,

<argument><expr><name>MAX_PICTURE_COUNT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Picture</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name></name></expr></argument>,

<argument><expr><name>MAX_PICTURE_COUNT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Picture</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dct_offset</name></name></expr></argument>,

<argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dct_encode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>CONFIG_H263P_ENCODER</name> <operator>||</operator> <name>CONFIG_RV20_ENCODER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>modified_quant</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale_table</name></name> <operator>=</operator> <name>ff_h263_chroma_qscale_table</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rtp_mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_slice_structured</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant_precision</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_skip_threshold</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_threshold</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_factor</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_skip_factor</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_factor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_exp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_skip_exp</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_exp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_cmp</name></name> <operator>!=</operator> <name>FF_CMP_DCTMAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_skip_cmp</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_skip_cmp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>ildct_cmp</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>frame_skip_cmp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_skip_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H261_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h261_encode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_encode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MSMPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_msmpeg4_encode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>CONFIG_MPEG1VIDEO_ENCODER</name> <operator>||</operator> <name>CONFIG_MPEG2VIDEO_ENCODER</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg1_encode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_mpeg4_default_intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_mpeg4_default_non_intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_mpeg1_default_non_intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_mpeg1_default_intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_mpeg1_default_non_intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>inter_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>!=</operator> <name>FMT_MJPEG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_convert_matrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></argument>,

<argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_convert_matrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix16</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>inter_quant_bias</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></argument>,

<argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_rate_control_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>brd_scale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>brd_scale</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>brd_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>format</name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>brd_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>height</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>brd_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cpb_props</name> <operator>=</operator> <call><name>ff_add_cpb_side_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpb_props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>max_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>min_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>avg_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_mpv_encode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_mpv_encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_rate_control_uninit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MJPEG_ENCODER</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MJPEG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ac_stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>input_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dct_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_sae</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>acc</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>acc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_intra_count</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sad</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>NULL</name>, <name>src</name> <operator>+</operator> <name>offset</name>, <name>ref</name> <operator>+</operator> <name>offset</name>,

<name>stride</name>, <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mean</name> <init>= <expr><operator>(</operator><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>pix_sum</name></name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sae</name> <init>= <expr><call><name>get_sae</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>mean</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name>sae</name> <operator>+</operator> <literal type="number">500</literal> <operator>&lt;</operator> <name>sad</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>acc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_picture</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shared</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ff_alloc_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sc</name></name></expr></argument>, <argument><expr><name>shared</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_input_picture</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic_arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>display_picture_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>encoding_delay</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flush_offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>direct</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name><name>pic_arg</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>display_picture_number</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture_number</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_specified_pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>user_specified_pts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>&lt;=</operator> <name>last</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid pts (%"</literal><name>PRId64</name><literal type="string">") &lt;= last (%"</literal><name>PRId64</name><literal type="string">")\n"</literal></expr></argument>,

<argument><expr><name>pts</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>&amp;&amp;</operator> <name>display_picture_number</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dts_delta</name></name> <operator>=</operator> <name>pts</name> <operator>-</operator> <name>last</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>user_specified_pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>user_specified_pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>user_specified_pts</name></name> <operator>=</operator>

<name>pts</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>user_specified_pts</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"Warning: AVFrame.pts=? trying to guess (%"</literal><name>PRId64</name><literal type="string">")\n"</literal></expr></argument>,

<argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <name>display_picture_number</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic_arg</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<name><name>pic_arg</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>||</operator>

<name><name>pic_arg</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>||</operator>

<name><name>pic_arg</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name><name>pic_arg</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>STRIDE_ALIGN</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>&amp;</operator> <operator>(</operator><name>STRIDE_ALIGN</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>direct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%d %d %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>pic_arg</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pic_arg</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ff_find_unused_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><name>direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>pic_arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>alloc_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direct</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>INPLACE_OFFSET</name> <operator>==</operator> <name><name>pic_arg</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>INPLACE_OFFSET</name> <operator>==</operator> <name><name>pic_arg</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>INPLACE_OFFSET</name> <operator>==</operator> <name><name>pic_arg</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h_chroma_shift</name></decl>, <decl><type ref="prev"/><name>v_chroma_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h_chroma_shift</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>src_stride</name> <init>= <expr><name><name>pic_arg</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_stride</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h_shift</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>h_chroma_shift</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v_shift</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>v_chroma_shift</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name>h_shift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name>v_shift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>pic_arg</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vpad</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>progressive_sequence</name></name>

<operator>&amp;&amp;</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vpad</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>INPLACE_OFFSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src_stride</name> <operator>==</operator> <name>dst_stride</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h2</name> <init>= <expr><name>h</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>h2</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <operator>(</operator><name>vpad</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>draw_edges</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>h_shift</name></expr></argument>,

<argument><expr><name>vpad</name> <operator>&gt;&gt;</operator> <name>v_shift</name></expr></argument>,

<argument><expr><name>EDGE_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>pic_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>display_picture_number</name></name> <operator>=</operator> <name>display_picture_number</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>flush_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>flush_offset</name> <operator>&lt;</operator> <name>encoding_delay</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>flush_offset</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>flush_offset</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>flush_offset</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flush_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>encoding_delay</name> <operator>=</operator> <name>encoding_delay</name> <operator>-</operator> <name>flush_offset</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>flush_offset</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name> <operator>-</operator> <name>flush_offset</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>encoding_delay</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Picture</name><operator>*</operator><operator>)</operator> <name>pic</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_check</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>score64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bw</name> <init>= <expr><ternary><condition><expr><name>plane</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <name>bw</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name>bw</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>shared</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dptr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name><operator>)</operator> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rptr</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>frame_skip_cmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>s</name>, <name>dptr</name>, <name>rptr</name>, <name>stride</name>, <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_skip_exp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>score64</name> <operator>+=</operator> <name>v</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>v</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>score64</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>v</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>v</name> <operator>*</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>score64</name> <operator>+=</operator> <operator>(</operator><name>v</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>v</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>v</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>v</name><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score64</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_skip_exp</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score64</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>score64</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1.0</literal><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>frame_skip_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>score64</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_skip_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>score64</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_skip_factor</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_send_frame</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_receive_packet</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>pkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_best_b_count</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><call><name>avcodec_find_encoder</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scale</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>brd_scale</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name>scale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name>scale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>out_size</name></decl>, <decl><type ref="prev"/><name>p_lambda</name></decl>, <decl><type ref="prev"/><name>b_lambda</name></decl>, <decl><type ref="prev"/><name>lambda2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>best_rd</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_b_count</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scale</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_lambda</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_lambda_for</name><index>[<expr><name>AV_PICTURE_TYPE_P</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_lambda</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_lambda_for</name><index>[<expr><name>AV_PICTURE_TYPE_B</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_lambda</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>b_lambda</name> <operator>=</operator> <name>p_lambda</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lambda2</name> <operator>=</operator> <operator>(</operator><name>b_lambda</name> <operator>*</operator> <name>b_lambda</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FF_LAMBDA_SHIFT</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator>

<name>FF_LAMBDA_SHIFT</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Picture</name></type> <name>pre_input</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pre_input_ptr</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pre_input_ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>i</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pre_input</name> <operator>=</operator> <operator>*</operator><name>pre_input_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pre_input_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pre_input</name><operator>.</operator><name>shared</name></name> <operator>&amp;&amp;</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>INPLACE_OFFSET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>INPLACE_OFFSET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>INPLACE_OFFSET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>shrink</name><index>[<expr><name>scale</name></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<name><name>pre_input</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<name>width</name><operator>,</operator> <name>height</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>shrink</name><index>[<expr><name>scale</name></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name><name>pre_input</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>,</operator> <name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>shrink</name><index>[<expr><name>scale</name></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>

<name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>

<name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>

<name><name>pre_input</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>

<name>width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>,</operator> <name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>rd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AV_CODEC_FLAG_QSCALE</name> <operator>|</operator> <name>AV_CODEC_FLAG_PSNR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QPEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mb_cmp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>me_sub_cmp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>me_sub_cmp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>quality</name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_size</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>out_size</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_p</name> <init>= <expr><name>i</name> <operator>%</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>j</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>pict_type</name> <operator>=</operator> <ternary><condition><expr><name>is_p</name></expr> ?</condition><then>

<expr><name>AV_PICTURE_TYPE_P</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_B</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>quality</name> <operator>=</operator> <ternary><condition><expr><name>is_p</name></expr> ?</condition><then> <expr><name>p_lambda</name></expr> </then><else>: <expr><name>b_lambda</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>out_size</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_frames</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>out_size</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rd</name> <operator>+=</operator> <operator>(</operator><name>out_size</name> <operator>*</operator> <name>lambda2</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>out_size</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>out_size</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rd</name> <operator>+=</operator> <operator>(</operator><name>out_size</name> <operator>*</operator> <name>lambda2</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rd</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>error</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rd</name> <operator>&lt;</operator> <name>best_rd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_rd</name> <operator>=</operator> <name>rd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_b_count</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>best_b_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_input_picture</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><name>MAX_PICTURE_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_skip_threshold</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_skip_factor</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_in_gop_number</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>&amp;&amp;</operator>

<call><name>skip_check</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vbv_update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>no_output_pic</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(

<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_only</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>coded_picture_number</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pict_num</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>display_picture_number</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pict_num</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>rc_context</name><operator>.</operator><name>num_entries</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc_context</name><operator>.</operator><name>entry</name><index>[<expr><name>pict_num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>new_pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>rc_context</name><operator>.</operator><name>entry</name><index>[<expr><name>pict_num</name></expr>]</index></name><operator>.</operator><name>new_pict_type</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b_frames</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>b_frames</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>b_frames</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_frames</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_frame_score</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_frame_score</name> <operator>=</operator>

<call><name>get_intra_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr> ]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_frame_score</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator>

<name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>b_sensitivity</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>b_frames</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>b_frames</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_frame_score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b_frames</name> <operator>=</operator> <call><name>estimate_best_b_count</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_frames</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>b_frames</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>b_frames</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_frames</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>b_frames</name></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator>

<name>b_frames</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"warning, too many B-frames in a row\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_in_gop_number</name></name> <operator>+</operator> <name>b_frames</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>gop_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_STRICT_GOP</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_in_gop_number</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b_frames</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_in_gop_number</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_CLOSED_GOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>b_frames</name></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_CLOSED_GOP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>b_frames</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>b_frames</name></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_frames</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>b_frames</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>coded_picture_number</name></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>b_frames</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator>

<name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>coded_picture_number</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>no_output_pic</name>:</label>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reference</name> <operator>=</operator>

<ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator>

<name>AV_PICTURE_TYPE_B</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>shared</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>ff_find_unused_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>reference</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>alloc_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>shared</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>reordered_input_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>INPLACE_OFFSET</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>display_picture_number</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>frame_end</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>reference</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>intra_only</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hshift</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vshift</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>draw_edges</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name></expr></argument>,

<argument><expr><name>EDGE_WIDTH</name></expr></argument>, <argument><expr><name>EDGE_WIDTH</name></expr></argument>,

<argument><expr><name>EDGE_TOP</name> <operator>|</operator> <name>EDGE_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>draw_edges</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>hshift</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>vshift</name></expr></argument>,

<argument><expr><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <name>hshift</name></expr></argument>,

<argument><expr><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <name>vshift</name></expr></argument>,

<argument><expr><name>EDGE_TOP</name> <operator>|</operator> <name>EDGE_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>draw_edges</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>hshift</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>vshift</name></expr></argument>,

<argument><expr><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <name>hshift</name></expr></argument>,

<argument><expr><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <name>vshift</name></expr></argument>,

<argument><expr><name>EDGE_TOP</name> <operator>|</operator> <name>EDGE_BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_lambda_for</name> <index>[<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_non_b_pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_copy_props</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ERROR_FRAME</name></expr></cpp:if>

<name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>encoding_error</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>encoding_error</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_noise_reduction</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>intra</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>intra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>intra</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>intra</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dct_count</name><index>[<expr><name>intra</name></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name><index>[<expr><name>intra</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_count</name><index>[<expr><name>intra</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_offset</name><index>[<expr><name>intra</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>*</operator>

<name><name>s</name><operator>-&gt;</operator><name>dct_count</name><index>[<expr><name>intra</name></expr>]</index></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name><index>[<expr><name>intra</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name><index>[<expr><name>intra</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>frame_start</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>droppable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name><operator>!=</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_intra</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_inter</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_intra</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_inter</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_intra</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg1_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg1_inter</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_noise_reduction</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpv_encode_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic_arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>stuffing_count</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>context_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_ignore_qmax</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_in_gop_number</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>load_input_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pic_arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>select_input_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>growing_buffer</name> <init>= <expr><name>context_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>data_partitioning</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pkt_size</name> <init>= <expr><ternary><condition><expr><name>growing_buffer</name></expr> ?</condition><then> <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>*</operator><literal type="number">64</literal><operator>+</operator><literal type="number">10000</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer_size</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>

</then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>*</operator><operator>(</operator><name>MAX_MB_BYTES</name><operator>+</operator><literal type="number">100</literal><operator>)</operator><operator>+</operator><literal type="number">10000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pkt_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_info</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_info_ptr</name></name> <operator>=</operator> <call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_H263_MB_INFO</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>*</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_mb_info</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_mb_info</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_info_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_mb_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator> <name>end_mb_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>*</operator> <name>start_y</name> <operator>/</operator> <name>h</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>*</operator> <name>end_y</name> <operator>/</operator> <name>h</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pb</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<label><name>vbv_retry</name>:</label>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>growing_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STAT_BITS</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>header_bits</name></name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>header_bits</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>mv_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>misc_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>misc_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_tex_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_tex_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>p_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>i_count</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>skip_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>skip_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>skip_count</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MJPEG_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MJPEG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_picture_trailer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_size</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_available_vbv_use</name></name></expr></argument>, <argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>-</operator> <literal type="number">500</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hq</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>==</operator> <name>FF_MB_DECISION_RD</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_step</name> <init>= <expr><ternary><condition><expr><name>hq</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">139</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_size</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lmax</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_lambda</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>+</operator> <name>min_step</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>adaptive_quant</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>min_step</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>

<name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263P</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_time_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_non_b_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pb</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buf_end</name></name> <operator>-</operator> <name><name>pb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_ignore_qmax</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"reencoding frame due to VBV\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>vbv_retry</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_write_pass1_stats</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>encoding_error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>encoding_error</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>encoding_error</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>encoding_error</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>AV_CODEC_FLAG_PSNR</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>header_bits</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_bits</name></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>misc_bits</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>p_tex_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stuffing_count</name> <operator>=</operator> <call><name>ff_vbv_update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stuffing_bits</name></name> <operator>=</operator> <literal type="number">8</literal><operator>*</operator><name>stuffing_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stuffing_count</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>-</operator> <operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator>

<name>stuffing_count</name> <operator>+</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"stuffing too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<while>while <condition>(<expr><name>stuffing_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x1C3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stuffing_count</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>stuffing_count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vbv buffer overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name> <operator>&amp;&amp;</operator>

<literal type="number">90000LL</literal> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>*</operator> <literal type="number">0xFFFFLL</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>props_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vbv_delay</name></decl>, <decl><type ref="prev"/><name>min_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>inbits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>*</operator>

<call><name>av_q2d</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minbits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>vbv_delay_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rc_context</name><operator>.</operator><name>buffer_index</name></name> <operator>+</operator> <name>minbits</name> <operator>-</operator> <name>inbits</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Internal error, negative bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>repeat_first_field</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vbv_delay</name> <operator>=</operator> <name>bits</name> <operator>*</operator> <literal type="number">90000</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_delay</name> <operator>=</operator> <operator>(</operator><name>minbits</name> <operator>*</operator> <literal type="number">90000LL</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vbv_delay</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>vbv_delay</name></expr></argument>, <argument><expr><name>min_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>vbv_delay</name> <operator>&lt;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_delay_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xF8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_delay_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>vbv_delay</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_delay_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vbv_delay</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_delay_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_delay_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>vbv_delay</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>av_cpb_properties_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>props_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>props</name><operator>-&gt;</operator><name>vbv_delay</name></name> <operator>=</operator> <name>vbv_delay</name> <operator>*</operator> <literal type="number">300</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_add_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_CPB_PROPERTIES</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>props</name></expr></argument>, <argument><expr><name>props_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_VBV_DELAY</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>vbv_delay</name></name> <init>= <expr><name>vbv_delay</name> <operator>*</operator> <literal type="number">300</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_STAT_BITS</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>frame_bits</name></name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>coded_picture_number</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>dts_delta</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>reordered_pts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reordered_pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_shrink_side_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_H263_MB_INFO</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_info_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dct_single_coeff_elimination</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>tab</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last_index</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_dc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>threshold</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip_dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold</name> <operator>=</operator> <operator>-</operator><name>threshold</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>skip_dc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_index</name> <operator>&lt;=</operator> <name>skip_dc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>level</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>skip_dc</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>tab</name><index>[<expr><name>run</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;=</operator> <name>threshold</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>skip_dc</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>clip_coeffs</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>last_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxlevel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>max_qcoeff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>minlevel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>min_qcoeff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name>maxlevel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>maxlevel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overflow</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>minlevel</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>minlevel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overflow</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>overflow</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>==</operator> <name>FF_MB_DECISION_SIMPLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"warning, clipping %d dct coefficients to %d..%d\n"</literal></expr></argument>,

<argument><expr><name>overflow</name></expr></argument>, <argument><expr><name>minlevel</name></expr></argument>, <argument><expr><name>maxlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_visual_weight</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>weight</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sqr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y2</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>y2</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x2</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x2</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>x2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>ptr</name><index>[<expr><name>x2</name> <operator>+</operator> <name>y2</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sqr</name> <operator>+=</operator> <name>v</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>weight</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>y</name></expr>]</index></name><operator>=</operator> <operator>(</operator><literal type="number">36</literal> <operator>*</operator> <call><name>ff_sqrt</name><argument_list>(<argument><expr><name>count</name> <operator>*</operator> <name>sqr</name> <operator>-</operator> <name>sum</name> <operator>*</operator> <name>sum</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>encode_mb_internal</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_block_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_block_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_block_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>weight</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>orig</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_x</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>skip_dct</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct_offset</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>uv_dct_offset</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_cr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>wrap_y</name></decl>, <decl><type ref="prev"/><name>wrap_c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>skipdct</name></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>adaptive_quant</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last_qp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_QP_RD</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dquant</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>-</operator> <name>last_qp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dquant</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dquant</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dquant</name></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIRECT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dquant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>==</operator> <name>MV_TYPE_8X8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dquant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_set_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>last_qp</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>dquant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_QP_RD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_set_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>dquant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wrap_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wrap_c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name>wrap_y</name><operator>)</operator> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>mb_y</name> <operator>*</operator> <name>mb_block_height</name> <operator>*</operator> <name>wrap_c</name><operator>)</operator> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <name>mb_block_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>mb_y</name> <operator>*</operator> <name>mb_block_height</name> <operator>*</operator> <name>wrap_c</name><operator>)</operator> <operator>+</operator> <name>mb_x</name> <operator>*</operator> <name>mb_block_width</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>mb_x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>mb_y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_AMV</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ebuf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">38</literal> <operator>*</operator> <name>wrap_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cw</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>,

<argument><expr><name>wrap_y</name></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>,

<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mb_x</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <name>ebuf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>ebuf</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>wrap_y</name></expr></argument>, <argument><expr><name>ptr_cb</name></expr></argument>,

<argument><expr><name>wrap_c</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>,

<argument><expr><name>mb_block_width</name></expr></argument>, <argument><expr><name>mb_block_height</name></expr></argument>,

<argument><expr><name>mb_x</name> <operator>*</operator> <name>mb_block_width</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>*</operator> <name>mb_block_height</name></expr></argument>,

<argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cb</name> <operator>=</operator> <name>ebuf</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>wrap_y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>ebuf</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>wrap_y</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>ptr_cr</name></expr></argument>,

<argument><expr><name>wrap_c</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>,

<argument><expr><name>mb_block_width</name></expr></argument>, <argument><expr><name>mb_block_height</name></expr></argument>,

<argument><expr><name>mb_x</name> <operator>*</operator> <name>mb_block_width</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>*</operator> <name>mb_block_height</name></expr></argument>,

<argument><expr><name>cw</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cr</name> <operator>=</operator> <name>ebuf</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>wrap_y</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>progressive_score</name></decl>, <decl><type ref="prev"/><name>interlaced_score</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>progressive_score</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name>ptr_y</name><operator>,</operator> <name>NULL</name><operator>,</operator> <name>wrap_y</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name>ptr_y</name> <operator>+</operator> <name>wrap_y</name> <operator>*</operator> <literal type="number">8</literal><operator>,</operator>

<name>NULL</name><operator>,</operator> <name>wrap_y</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">400</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progressive_score</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>interlaced_score</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name>ptr_y</name><operator>,</operator>

<name>NULL</name><operator>,</operator> <name>wrap_y</name> <operator>*</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name>ptr_y</name> <operator>+</operator> <name>wrap_y</name><operator>,</operator>

<name>NULL</name><operator>,</operator> <name>wrap_y</name> <operator>*</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progressive_score</name> <operator>&gt;</operator> <name>interlaced_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_offset</name> <operator>=</operator> <name>wrap_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uv_dct_offset</name> <operator>=</operator> <name>wrap_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wrap_y</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_422</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_444</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wrap_c</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name> <operator>+</operator> <name>uv_dct_offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name> <operator>+</operator> <name>uv_dct_offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>op_pix</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qpel_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>op_qpix</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name><operator>)</operator> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>op_pix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>op_qpix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>put_qpel_pixels_tab</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>op_pix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>op_qpix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>put_no_rnd_qpel_pixels_tab</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name>op_pix</name></expr></argument>, <argument><expr><name>op_qpix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op_pix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>avg_pixels_tab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>op_qpix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qdsp</name><operator>.</operator><name>avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_BACKWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name>op_pix</name></expr></argument>, <argument><expr><name>op_qpix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>progressive_score</name></decl>, <decl><type ref="prev"/><name>interlaced_score</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>progressive_score</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name>dest_y</name><operator>,</operator> <name>ptr_y</name><operator>,</operator> <name>wrap_y</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name>dest_y</name> <operator>+</operator> <name>wrap_y</name> <operator>*</operator> <literal type="number">8</literal><operator>,</operator>

<name>ptr_y</name> <operator>+</operator> <name>wrap_y</name> <operator>*</operator> <literal type="number">8</literal><operator>,</operator>

<name>wrap_y</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">400</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>ildct_cmp</name></name> <operator>==</operator> <name>FF_CMP_VSSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>progressive_score</name> <operator>-=</operator> <literal type="number">400</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>progressive_score</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>interlaced_score</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name>dest_y</name><operator>,</operator> <name>ptr_y</name><operator>,</operator>

<name>wrap_y</name> <operator>*</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name>dest_y</name> <operator>+</operator> <name>wrap_y</name><operator>,</operator>

<name>ptr_y</name> <operator>+</operator> <name>wrap_y</name><operator>,</operator>

<name>wrap_y</name> <operator>*</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>progressive_score</name> <operator>&gt;</operator> <name>interlaced_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_offset</name> <operator>=</operator> <name>wrap_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uv_dct_offset</name> <operator>=</operator> <name>wrap_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wrap_y</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_422</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wrap_c</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument>,

<argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>,

<argument><expr><name>dest_cb</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>,

<argument><expr><name>dest_cr</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>, <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_y</name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>&lt;</operator>

<literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>ptr_y</name><operator>,</operator> <name>dest_y</name><operator>,</operator> <name>wrap_y</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>ptr_y</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>dest_y</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>wrap_y</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>ptr_y</name> <operator>+</operator> <name>dct_offset</name><operator>,</operator> <name>dest_y</name> <operator>+</operator> <name>dct_offset</name><operator>,</operator>

<name>wrap_y</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>ptr_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>dest_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator>

<name>wrap_y</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>ptr_cb</name><operator>,</operator> <name>dest_cb</name><operator>,</operator> <name>wrap_c</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>ptr_cr</name><operator>,</operator> <name>dest_cr</name><operator>,</operator> <name>wrap_c</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>ptr_cb</name> <operator>+</operator> <name>uv_dct_offset</name><operator>,</operator>

<name>dest_cb</name> <operator>+</operator> <name>uv_dct_offset</name><operator>,</operator>

<name>wrap_c</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>ptr_cr</name> <operator>+</operator> <name>uv_dct_offset</name><operator>,</operator>

<name>dest_cr</name> <operator>+</operator> <name>uv_dct_offset</name><operator>,</operator>

<name>wrap_c</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>skip_dct</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quantizer_noise_shaping</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_visual_weight</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument> , <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_visual_weight</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_visual_weight</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument> , <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_visual_weight</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>wrap_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_visual_weight</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name></expr></argument> , <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_visual_weight</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name></expr></argument> , <argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_visual_weight</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cb</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>,

<argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_visual_weight</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ptr_cr</name> <operator>+</operator> <name>uv_dct_offset</name></expr></argument>,

<argument><expr><name>wrap_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>orig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>mb_block_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>!=</operator> <name>FMT_MJPEG</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>dct_quantize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_coeffs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quantizer_noise_shaping</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>skip_dct</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>dct_quantize_refine</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>orig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>luma_elim_threshold</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dct_single_coeff_elimination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>luma_elim_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_elim_threshold</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dct_single_coeff_elimination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_elim_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_CBP_RD</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_score</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1024</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">6</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_quantize</name></name> <operator>!=</operator> <name>ff_dct_quantize_c</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mb_block_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition><block>{<block_content> 

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG1VIDEO_ENCODER</name> <operator>||</operator> <name>CONFIG_MPEG2VIDEO_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg1_encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG4_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg4_encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MSMPEG4V2</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MSMPEG4V3</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_WMV1</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MSMPEG4_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_msmpeg4_encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_WMV2</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_WMV2_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_wmv2_encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H261</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H261_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h261_encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_H263P</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_FLV1</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_RV10</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_RV20</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_AMV</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MJPEG_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>encode_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_420</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>encode_mb_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_422</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>encode_mb_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>encode_mb_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_context_before_encode</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>last_mv</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mb_skip_run</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_skip_run</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mv_bits</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>i_tex_bits</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_tex_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p_tex_bits</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_tex_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>i_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>f_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>f_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>b_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>skip_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>skip_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>misc_bits</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>misc_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>last_bits</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mb_skipped</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>qscale</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>dquant</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dquant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>esc3_level_length</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>esc3_level_length</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_context_after_encode</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>last_mv</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mb_skip_run</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_skip_run</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mv_bits</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>i_tex_bits</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_tex_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p_tex_bits</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_tex_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>i_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>f_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>f_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>b_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>skip_count</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>skip_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>misc_bits</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>misc_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mb_skipped</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mv_type</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>mv_dir</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pb</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_partitioning</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>pb2</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>tex_pb</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tex_pb</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>block</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>interlaced_dct</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>qscale</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>esc3_level_length</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>esc3_level_length</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>encode_mb_hq</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>backup</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>best</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name></type> <name><name>pb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name></type> <name><name>pb2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name></type> <name><name>tex_pb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dmin</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>next_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dest_backup</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_context_before_encode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>backup</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><operator>*</operator><name>next_block</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name><operator>=</operator> <name><name>pb</name><index>[<expr><operator>*</operator><name>next_block</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_partitioning</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb2</name></name> <operator>=</operator> <name><name>pb2</name> <index>[<expr><operator>*</operator><name>next_block</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tex_pb</name></name><operator>=</operator> <name><name>tex_pb</name><index>[<expr><operator>*</operator><name>next_block</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>next_block</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest_backup</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name><operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_partitioning</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name><operator>+=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name><operator>+=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tex_pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>==</operator> <name>FF_MB_DECISION_RD</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_reconstruct_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name>sse_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>FF_LAMBDA_SHIFT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>next_block</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name>dest_backup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name><operator>&lt;</operator><operator>*</operator><name>dmin</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dmin</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>next_block</name><operator>^=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_context_after_encode</name><argument_list>(<argument><expr><name>best</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sse</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sq</name> <init>= <expr><name>ff_square_tab</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>h</name><operator>==</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>src1</name><operator>,</operator> <name>src2</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>h</name><operator>==</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>src1</name><operator>,</operator> <name>src2</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>acc</name><operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>src1</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>acc</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>acc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sse_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>w</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>h</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>h</name><operator>==</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_cmp</name></name> <operator>==</operator> <name>FF_CMP_NSSE</name></expr>)</condition><block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>nsse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">16</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>,</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>nsse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <literal type="number">8</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>nsse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>s</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <literal type="number">8</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">16</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>,</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <literal type="number">8</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <literal type="number">8</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>sse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>*</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call>

<operator>+</operator><call><name>sse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>*</operator><literal type="number">8</literal></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call>

<operator>+</operator><call><name>sse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>*</operator><literal type="number">8</literal></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pre_estimate_motion_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name><init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>pre_pass</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>dia_size</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pre_dia_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr>;</condition> <incr><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator><literal type="number">0</literal></expr> ;</condition><incr><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_pre_estimate_p_frame_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>pre_pass</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_motion_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name><init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_check_alignment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>dia_size</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>dia_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name></expr>;</condition> <incr><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_init_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_estimate_b_frame_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_estimate_p_frame_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mb_var_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name><init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_check_alignment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>mb_y</name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>mb_x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><name>mb_x</name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><name>mb_y</name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>yy</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator> <operator>+</operator> <name>xx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>varc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>pix_sum</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>varc</name> <operator>=</operator> <operator>(</operator><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>pix_norm1</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <name>sum</name> <operator>*</operator> <name>sum</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">500</literal> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_var</name> <index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_y</name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <name>varc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_mean</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name>mb_y</name> <operator>+</operator> <name>mb_x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sum</name><operator>+</operator><literal type="number">128</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>mb_var_sum_temp</name></name> <operator>+=</operator> <name>varc</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_slice_end</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_MPEG4</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg4_merge_partitions</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg4_stuffing</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>CONFIG_MJPEG_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MJPEG</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_stuffing</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_align_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>misc_bits</name></name><operator>+=</operator> <call><name>get_bits_diff</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_mb_info</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_info_ptr</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_info_size</name></name> <operator>-</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mba</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>gob_index</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gobn</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>gob_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred_x</name></decl>, <decl><type ref="prev"/><name>pred_y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_pred_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pred_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pred_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>gobn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>mba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>pred_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>pred_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_mb_info</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_mb_info</name></name><operator>*</operator><literal type="number">8</literal> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_info</name></name><operator>*</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_info_size</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_mb_info</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_mb_info</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_mb_info</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_mb_info</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_info_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_info_size</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_mb_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpv_reallocate_putbitbuffer</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>threshold</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_increase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>-</operator> <operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>threshold</name>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lastgob_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vbv_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vbv_delay_ptr</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>new_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_buffer_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer_size</name></name> <operator>+</operator> <name>size_increase</name><operator>)</operator> <operator>&gt;=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot reallocate putbit buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_buffer_size</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer_size</name></name> <operator>+</operator> <name>size_increase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_buffer</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer</name></name> <operator>=</operator> <name>new_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer_size</name></name> <operator>=</operator> <name>new_buffer_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rebase_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>new_buffer</name></expr></argument>, <argument><expr><name>new_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>lastgob_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vbv_delay_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>vbv_pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>-</operator> <operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>threshold</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name><init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chr_h</name><init>= <expr><literal type="number">16</literal><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name></type> <name>best_s</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>backup_s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bit_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAX_MB_BYTES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bit_buf2</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAX_MB_BYTES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bit_buf_tex</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAX_MB_BYTES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name><name>pb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pb2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tex_pb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_check_alignment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pb</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bit_buf</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_MB_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pb2</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bit_buf2</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_MB_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tex_pb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bit_buf_tex</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_MB_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bits</name></name><operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bits</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>misc_bits</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_tex_bits</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_tex_bits</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_count</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_count</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_count</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_count</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>encoding_error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_AMV</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">8</literal><operator>/</operator><literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">8</literal><operator>/</operator><literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal><operator>*</operator><literal type="number">8</literal><operator>/</operator><literal type="number">14</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_skip_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv_dir</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_H263P</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_FLV1</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gob_index</name></name> <operator>=</operator> <call><name>H263_GOB_HEIGHT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg4_init_partitions</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>mb_y</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>=</operator> <name>mb_y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>mb_x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xy</name><init>= <expr><name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name>mb_x</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_type</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dmin</name><init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_increase</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>byte_buffer_size</name></name><operator>/</operator><literal type="number">4</literal>

<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name><operator>*</operator><name>MAX_MB_BYTES</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mpv_reallocate_putbitbuffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>MAX_MB_BYTES</name></expr></argument>, <argument><expr><name>size_increase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name> <operator>-</operator> <operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>MAX_MB_BYTES</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"encoded frame too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_partitioning</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>pb2</name> <operator>.</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb2</name> <operator>.</operator><name>buf</name></name> <operator>-</operator> <operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator> <name>pb2</name></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>MAX_MB_BYTES</name>

<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>tex_pb</name><operator>.</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>tex_pb</name><operator>.</operator><name>buf</name></name> <operator>-</operator> <operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tex_pb</name></name></expr></argument> )</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>MAX_MB_BYTES</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"encoded partitioned frame too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name>mb_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name>mb_y</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_update_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CONFIG_H261_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H261</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_h261_reorder_mb_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xy</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_type</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rtp_mode</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>current_packet_size</name></decl>, <decl><type ref="prev"/><name>is_gob_start</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current_packet_size</name><operator>=</operator> <operator>(</operator><operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>is_gob_start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp_payload_size</name></name> <operator>&amp;&amp;</operator>

<name>current_packet_size</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>rtp_payload_size</name></name> <operator>&amp;&amp;</operator>

<name>mb_y</name> <operator>+</operator> <name>mb_x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>==</operator> <name>mb_y</name> <operator>&amp;&amp;</operator> <name>mb_y</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mb_x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_gob_start</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_H263P</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_slice_structured</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>%</operator><name><name>s</name><operator>-&gt;</operator><name>gob_index</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_gob_start</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_gob_start</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_skip_run</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_gob_start</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_gob_start</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>is_gob_start</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>!=</operator> <name>mb_y</name> <operator>||</operator> <name>mb_x</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>write_slice_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg4_init_partitions</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_packet_size</name><operator>=</operator> <call><name>put_bits_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>error_rate</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name><init>= <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">100</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>error_rate</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>r</name> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>current_packet_size</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_ptr</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_RTP_CALLBACK</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rtp_callback</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>number_mb</name> <init>= <expr><operator>(</operator><name>mb_y</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name>mb_x</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rtp_callback</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name></expr></argument>, <argument><expr><name>current_packet_size</name></expr></argument>, <argument><expr><name>number_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>update_mb_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG4_ENCODER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg4_encode_video_packet_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg4_clean_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG1VIDEO_ENCODER</name> <operator>||</operator> <name>CONFIG_MPEG2VIDEO_ENCODER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg1_encode_slice_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg1_clean_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_H263P</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_encode_gob_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name><init>= <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>misc_bits</name></name><operator>+=</operator> <name>bits</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bits</name></name><operator>=</operator> <name>bits</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name> <operator>+=</operator> <name>current_packet_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name><operator>=</operator><name>mb_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name><operator>=</operator><name>mb_y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dquant</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>update_mb_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_type</name> <operator>&amp;</operator> <operator>(</operator><name>mb_type</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_QP_RD</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>next_block</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pb_bits_count</name></decl>, <decl><type ref="prev"/><name>pb2_bits_count</name></decl>, <decl><type ref="prev"/><name>tex_pb_bits_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>copy_context_before_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backup_s</name><operator>.</operator><name>pb</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_s</name><operator>.</operator><name>data_partitioning</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data_partitioning</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_s</name><operator>.</operator><name>partitioned_frame</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_partitioning</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>backup_s</name><operator>.</operator><name>pb2</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backup_s</name><operator>.</operator><name>tex_pb</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tex_pb</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_INTER</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_INTER_I</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>j</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_field_select_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER_I</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_SKIPPED</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_SKIPPED</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_INTER4V</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_8X8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER4V</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_FORWARD</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_FORWARD</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_BACKWARD</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BACKWARD</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_BIDIR</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name> <operator>|</operator> <name>MV_DIR_BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BIDIR</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_FORWARD_I</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>j</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_FORWARD_I</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_BACKWARD_I</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>j</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BACKWARD_I</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_BIDIR_I</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name> <operator>|</operator> <name>MV_DIR_BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>dir</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>j</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BIDIR_I</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_INTRA</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTRA</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>best_s</name><operator>.</operator><name>mb_intra</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_clean_intra_table_entries</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_QP_RD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dmin</name> <operator>&lt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>best_s</name><operator>.</operator><name>mv_type</name></name><operator>==</operator><name>MV_TYPE_16X16</name></expr>)</condition><block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last_qp</name><init>= <expr><name><name>backup_s</name><operator>.</operator><name>qscale</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qpi</name></decl>, <decl><type ref="prev"/><name>qp</name></decl>, <decl><type ref="prev"/><name><name>dc</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>ac</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mvdir</name><init>= <expr><ternary><condition><expr><operator>(</operator><name><name>best_s</name><operator>.</operator><name>mv_dir</name></name><operator>&amp;</operator><name>MV_DIR_BACKWARD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dquant_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>storecoefs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>backup_s</name><operator>.</operator><name>dquant</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name><operator>=</operator> <name><name>best_s</name><operator>.</operator><name>mv_dir</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <name><name>best_s</name><operator>.</operator><name>mb_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>best_s</name><operator>.</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>best_s</name><operator>.</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>best_s</name><operator>.</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>best_s</name><operator>.</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qpi</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>qpi</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>qpi</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dquant</name><init>= <expr><name><name>dquant_tab</name><index>[<expr><name>qpi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>qp</name><operator>=</operator> <name>last_qp</name> <operator>+</operator> <name>dquant</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>qp</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>||</operator> <name>qp</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>backup_s</name><operator>.</operator><name>dquant</name></name><operator>=</operator> <name>dquant</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>storecoefs</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dc</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER</name></expr></argument> , <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>mvdir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>mvdir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>best_s</name><operator>.</operator><name>qscale</name></name> <operator>!=</operator> <name>qp</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>storecoefs</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name><operator>=</operator> <name><name>dc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_DIRECT</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>backup_s</name><operator>.</operator><name>dquant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name> <operator>|</operator> <name>MV_DIR_BACKWARD</name> <operator>|</operator> <name>MV_DIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg4_set_direct_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_DIRECT</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name>mb_type</name><operator>&amp;</operator><name>CANDIDATE_MB_TYPE_DIRECT0</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>backup_s</name><operator>.</operator><name>dquant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name> <operator>|</operator> <name>MV_DIR_BACKWARD</name> <operator>|</operator> <name>MV_DIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg4_set_direct_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_DIRECT</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>best_s</name><operator>.</operator><name>mb_intra</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_SKIP_RD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coded</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>coded</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name>coded</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>,<decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>, <argument><expr><name><name>best_s</name><operator>.</operator><name>mv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>best_s</name><operator>.</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIRECT</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mx</name><operator>=</operator><name>my</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_mpeg4_set_direct_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>best_s</name><operator>.</operator><name>mv_dir</name></name><operator>&amp;</operator><name>MV_DIR_BACKWARD</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mx</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>mx</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name><operator>=</operator> <name><name>best_s</name><operator>.</operator><name>mv_dir</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name><name>best_s</name><operator>.</operator><name>mv_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backup_s</name><operator>.</operator><name>dquant</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skipdct</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_mb_hq</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER</name></expr></argument> , <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pb2</name></expr></argument>, <argument><expr><name>tex_pb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_block</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skipdct</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>xy</name></expr>]</index></name> <operator>=</operator> <name><name>best_s</name><operator>.</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_context_after_encode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>best_s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pb_bits_count</name><operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_copy_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backup_s</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>bit_buf</name><index>[<expr><name>next_block</name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pb_bits_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name></name><operator>=</operator> <name><name>backup_s</name><operator>.</operator><name>pb</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_partitioning</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>pb2_bits_count</name><operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_copy_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backup_s</name><operator>.</operator><name>pb2</name></name></expr></argument>, <argument><expr><name><name>bit_buf2</name><index>[<expr><name>next_block</name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pb2_bits_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb2</name></name><operator>=</operator> <name><name>backup_s</name><operator>.</operator><name>pb2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tex_pb_bits_count</name><operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tex_pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tex_pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_copy_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>backup_s</name><operator>.</operator><name>tex_pb</name></name></expr></argument>, <argument><expr><name><name>bit_buf_tex</name><index>[<expr><name>next_block</name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tex_pb_bits_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tex_pb</name></name><operator>=</operator> <name><name>backup_s</name><operator>.</operator><name>tex_pb</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bits</name></name><operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>!=</operator><name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_update_motion_val</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>next_block</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name> <operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>,</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>==</operator> <name>FF_MB_DECISION_BITS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpv_reconstruct_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>motion_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>motion_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name><operator>=</operator><name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>mb_type</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>CANDIDATE_MB_TYPE_INTRA</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_x</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_y</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_INTER</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_x</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_y</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_INTER_I</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>j</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_field_select_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_INTER4V</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_8X8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_DIRECT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG4_ENCODER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name><operator>|</operator><name>MV_DIR_BACKWARD</name><operator>|</operator><name>MV_DIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_x</name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_y</name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg4_set_direct_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_DIRECT0</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG4_ENCODER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name><operator>|</operator><name>MV_DIR_BACKWARD</name><operator>|</operator><name>MV_DIRECT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg4_set_direct_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_BIDIR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name> <operator>|</operator> <name>MV_DIR_BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_BACKWARD</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_x</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_y</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_FORWARD</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_x</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_y</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_FORWARD_I</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>j</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_BACKWARD_I</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>j</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>CANDIDATE_MB_TYPE_BIDIR_I</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name> <operator>|</operator> <name>MV_DIR_BACKWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>dir</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>j</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal MB type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>encode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>motion_x</name></expr></argument>, <argument><expr><name>motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_mv_dir</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>!=</operator><name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_update_motion_val</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpv_reconstruct_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr> )</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PSNR</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>w</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>h</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>encoding_error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>sse</name><argument_list>(

<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>*</operator><literal type="number">16</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>encoding_error</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>sse</name><argument_list>(

<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>*</operator><name>chr_h</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>encoding_error</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>sse</name><argument_list>(

<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>*</operator><name>chr_h</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>CONFIG_H263_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_loop_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"MB %d %d bits\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MSMPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&lt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_msmpeg4_encode_ext_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_slice_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_RTP_CALLBACK</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rtp_callback</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>number_mb</name> <init>= <expr><operator>(</operator><name>mb_y</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name><operator>)</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pdif</name> <init>= <expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rtp_callback</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ptr_lastgob</name></name></expr></argument>, <argument><expr><name>pdif</name></expr></argument>, <argument><expr><name>number_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst-&gt;field += src-&gt;field; src-&gt;field=0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_context_after_me</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>scene_change_score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>mc_mb_var_sum_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>mb_var_sum_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_context_after_encode</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>dct_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>dct_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>mv_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_tex_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>p_tex_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>i_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>f_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>b_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>skip_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>misc_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>er</name><operator>.</operator><name>error_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name>padding_bug_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>current_picture</name><operator>.</operator><name>encoding_error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>current_picture</name><operator>.</operator><name>encoding_error</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>current_picture</name><operator>.</operator><name>encoding_error</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>dct_error_sum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MERGE</name><argument_list>(<argument><expr><name><name>dct_error_sum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_copy_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_qp</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dry_run</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_lambda</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_lambda</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dry_run</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_lambda</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_qscale</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>quality</name> <init>= <expr><call><name>ff_rate_estimate_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name>quality</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>adaptive_quant</name></name></expr>)</condition><block>{<block_content>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MPEG4</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG4_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_clean_mpeg4_qscales</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H263</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_H263P</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_FLV1</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H263_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_clean_h263_qscales</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ff_init_qscale_tab</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>update_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_frame_distances</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_B</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_non_b_time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_non_b_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_non_b_time</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_picture</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>picture_number</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>context_count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name> <operator>=</operator> <name>picture_number</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>mb_var_sum_temp</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>mc_mb_var_sum_temp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_frame_distances</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_set_mpeg4_time</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>scene_change_score</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_I</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>!=</operator><name>AV_PICTURE_TYPE_B</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flipflop_rounding</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263P</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>estimate_qp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_get_2pass_fcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_lambda_for</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_lambda_for</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>last_non_b_pict_type</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>update_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_AMV</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MJPEG</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_update_duplicate_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><call><name>ff_init_me</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>me_penalty_compensation</name></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>me_penalty_compensation</name></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>me_pre</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_non_b_pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>me_pre</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>pre_estimate_motion_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>context_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>estimate_motion_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>context_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>CANDIDATE_MB_TYPE_INTRA</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_qscale</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>mb_var_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>context_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>merge_context_after_me</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var_sum</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>mc_mb_var_sum_temp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator> <name>mb_var_sum</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator> <name>mb_var_sum</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator> <name>mb_var_sum_temp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>scene_change_score</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>scenechange_threshold</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>CANDIDATE_MB_TYPE_INTRA</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Scene change detected, encoding as I Frame %"</literal><name>PRId64</name><literal type="string">" %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_var_sum</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var_sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>umvplus</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_P</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_S</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name><operator>=</operator> <call><name>ff_get_best_fcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <call><name>ff_get_best_fcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>b</name><operator>=</operator> <call><name>ff_get_best_fcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name><operator>=</operator> <call><name>FFMAX3</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_fix_long_p_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>intra_penalty</name></name></expr> ?</condition><then> <expr><name>CANDIDATE_MB_TYPE_INTER</name></expr> </then><else>: <expr><name>CANDIDATE_MB_TYPE_INTRA</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fix_long_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>intra_penalty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_fix_long_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_select_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_INTER_I</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>intra_penalty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_B</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ff_get_best_fcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_FORWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>ff_get_best_fcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BIDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ff_get_best_fcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BACKWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>ff_get_best_fcode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BIDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fix_long_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_FORWARD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fix_long_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BACKWARD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fix_long_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BIDIR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fix_long_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name></expr></argument>, <argument><expr><name>CANDIDATE_MB_TYPE_BIDIR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>dir</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name><init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><operator>(</operator><name>CANDIDATE_MB_TYPE_BACKWARD_I</name><operator>|</operator><name>CANDIDATE_MB_TYPE_BIDIR_I</name><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name>CANDIDATE_MB_TYPE_FORWARD_I</name> <operator>|</operator><name>CANDIDATE_MB_TYPE_BIDIR_I</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fix_long_mvs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>estimate_qp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_qcoeff</name></name> <operator>&lt;=</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name><operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MJPEG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type> <name>luma_matrix</name> <init>= <expr><name>ff_mpeg1_default_intra_matrix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>chroma_matrix</name> <init>= <expr><name>ff_mpeg1_default_intra_matrix</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chroma_matrix</name> <operator>=</operator>

<name>luma_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chroma_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name><name>chroma_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator> <name>intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator> <name><name>luma_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name><operator>=</operator> <name><name>ff_mpeg2_dc_scale_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_mpeg2_dc_scale_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_convert_matrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_convert_matrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name><operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AMV</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>y</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">13</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sp5x_quant_table</name><index>[<expr><literal type="number">5</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sp5x_quant_table</name><index>[<expr><literal type="number">5</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name><operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name><operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_convert_matrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix16</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_convert_matrix</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix16</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name><operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_in_gop_number</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bits</name></name><operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FMT_MJPEG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MJPEG_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>huffman</name></name> <operator>!=</operator> <name>HUFFMAN_TABLE_OPTIMAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_picture_header</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>FMT_H261</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_H261_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h261_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>FMT_H263</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_WMV2_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMV2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_wmv2_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>CONFIG_MSMPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_msmpeg4_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>CONFIG_MPEG4_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mpeg4_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_RV10_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV10</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_rv10_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>CONFIG_RV20_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV20</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_rv20_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>CONFIG_FLV_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FLV1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_flv_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>CONFIG_H263_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>FMT_MPEG1</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>CONFIG_MPEG1VIDEO_ENCODER</name> <operator>||</operator> <name>CONFIG_MPEG2VIDEO_ENCODER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg1_encode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>bits</name><operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header_bits</name></name><operator>=</operator> <name>bits</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_bits</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>update_duplicate_context_after_me</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>encode_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>context_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf_end</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>pb</name><operator>.</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_put_bits_buffer_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>pb</name><operator>.</operator><name>buf_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name><operator>/</operator><literal type="number">8</literal><operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>merge_context_after_encode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>denoise_dct_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>intra</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_count</name><index>[<expr><name>intra</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name><init>= <expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name><index>[<expr><name>intra</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_offset</name><index>[<expr><name>intra</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name><index>[<expr><name>intra</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_offset</name><index>[<expr><name>intra</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dct_quantize_trellis_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>qmat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>perm_scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>threshold1</name></decl>, <decl><type ref="prev"/><name>threshold2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bias</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>run_tab</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>level_tab</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>score_tab</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>survivor</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>survivor_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_run</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_level</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_score</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>coeff_count</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>, <decl><type ref="prev"/><name>start_i</name></decl>, <decl><type ref="prev"/><name>last_non_zero</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>esc_length</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ac_esc_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>last_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lambda</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mpeg2_qscale</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>.</operator><name>fdct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>denoise_dct</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>qmul</name><operator>=</operator> <name>qscale</name><operator>*</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd</name><operator>=</operator> <operator>(</operator><operator>(</operator><name>qscale</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mpeg2_qscale</name> <operator>=</operator> <name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>mpeg2_qscale</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>scantable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>perm_scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>q</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>q</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmat</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>matrix</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_intra_matrix</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MJPEG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bias</name><operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>QMAT_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_length</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_last_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_length</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_last_length</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>scantable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>perm_scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>permutated</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_ac_vlc_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_length</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_ac_vlc_last_length</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>last_i</name><operator>=</operator> <name>start_i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold1</name><operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>QMAT_SHIFT</name><operator>)</operator> <operator>-</operator> <name>bias</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold2</name><operator>=</operator> <operator>(</operator><name>threshold1</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">63</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><name>start_i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>qmat</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>level</name><operator>+</operator><name>threshold1</name><operator>)</operator><operator>)</operator><operator>&gt;</operator><name>threshold2</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>start_i</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>last_non_zero</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>qmat</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>level</name><operator>+</operator><name>threshold1</name><operator>)</operator><operator>)</operator><operator>&gt;</operator><name>threshold2</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>level</name><operator>=</operator> <operator>(</operator><name>bias</name> <operator>+</operator> <name>level</name><operator>)</operator><operator>&gt;&gt;</operator><name>QMAT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>level</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>level</name><operator>=</operator> <operator>(</operator><name>bias</name> <operator>-</operator> <name>level</name><operator>)</operator><operator>&gt;&gt;</operator><name>QMAT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>-</operator><name>level</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>coeff_count</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>coeff_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>|=</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>level</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff_count</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>overflow</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_qcoeff</name></name> <operator>&lt;</operator> <name>max</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name>last_non_zero</name> <operator>&lt;</operator> <name>start_i</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>start_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">64</literal><operator>-</operator><name>start_i</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>last_non_zero</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>score_tab</name><index>[<expr><name>start_i</name></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>survivor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>start_i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>survivor_count</name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>start_i</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>last_non_zero</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level_index</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>zero_distortion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct_coeff</name><init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>block</name><index>[ <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_score</name><init>=<expr><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">120</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>.</operator><name>fdct</name></name> <operator>==</operator> <name>ff_fdct_ifast</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dct_coeff</name><operator>=</operator> <operator>(</operator><name>dct_coeff</name><operator>*</operator><name><name>ff_inv_aanscales</name><index>[ <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>zero_distortion</name><operator>=</operator> <name>dct_coeff</name><operator>*</operator><name>dct_coeff</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>level_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level_index</name> <operator>&lt;</operator> <name><name>coeff_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>level_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>distortion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name><init>= <expr><name><name>coeff</name><index>[<expr><name>level_index</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alevel</name><init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unquant_coeff</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>unquant_coeff</name><operator>=</operator> <name>alevel</name><operator>*</operator><name>qmul</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MJPEG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>unquant_coeff</name> <operator>=</operator> <name>alevel</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>unquant_coeff</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name>alevel</name> <operator>*</operator> <name>mpeg2_qscale</name> <operator>*</operator> <name><name>matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>unquant_coeff</name> <operator>=</operator> <operator>(</operator><name>unquant_coeff</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>unquant_coeff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator> <name>alevel</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>mpeg2_qscale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>unquant_coeff</name> <operator>=</operator> <operator>(</operator><name>unquant_coeff</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>unquant_coeff</name><operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>distortion</name><operator>=</operator> <operator>(</operator><name>unquant_coeff</name> <operator>-</operator> <name>dct_coeff</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>unquant_coeff</name> <operator>-</operator> <name>dct_coeff</name><operator>)</operator> <operator>-</operator> <name>zero_distortion</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name><operator>+=</operator><literal type="number">64</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>level</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>survivor_count</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name><init>= <expr><name>i</name> <operator>-</operator> <name><name>survivor</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name><init>= <expr><name>distortion</name> <operator>+</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>*</operator><name>lambda</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>score_tab</name><index>[<expr><name>i</name><operator>-</operator><name>run</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&lt;</operator> <name>best_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>best_score</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_tab</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level_tab</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>level</name><operator>-</operator><literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>survivor_count</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name><init>= <expr><name>i</name> <operator>-</operator> <name><name>survivor</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name><init>= <expr><name>distortion</name> <operator>+</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>*</operator><name>lambda</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>score_tab</name><index>[<expr><name>i</name><operator>-</operator><name>run</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&lt;</operator> <name>last_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>last_score</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_run</name><operator>=</operator> <name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_level</name><operator>=</operator> <name>level</name><operator>-</operator><literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_i</name><operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>distortion</name> <operator>+=</operator> <name>esc_length</name><operator>*</operator><name>lambda</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>survivor_count</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name><init>= <expr><name>i</name> <operator>-</operator> <name><name>survivor</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name><init>= <expr><name>distortion</name> <operator>+</operator> <name><name>score_tab</name><index>[<expr><name>i</name><operator>-</operator><name>run</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&lt;</operator> <name>best_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>best_score</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>run_tab</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level_tab</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>level</name><operator>-</operator><literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>survivor_count</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name><init>= <expr><name>i</name> <operator>-</operator> <name><name>survivor</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name><init>= <expr><name>distortion</name> <operator>+</operator> <name><name>score_tab</name><index>[<expr><name>i</name><operator>-</operator><name>run</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&lt;</operator> <name>last_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>last_score</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_run</name><operator>=</operator> <name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_level</name><operator>=</operator> <name>level</name><operator>-</operator><literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_i</name><operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>score_tab</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>best_score</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>last_non_zero</name> <operator>&lt;=</operator> <literal type="number">27</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init>;</init> <condition><expr><name>survivor_count</name></expr>;</condition> <incr><expr><name>survivor_count</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>score_tab</name><index>[ <expr><name><name>survivor</name><index>[<expr><name>survivor_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> ]</index></name> <operator>&lt;=</operator> <name>best_score</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init>;</init> <condition><expr><name>survivor_count</name></expr>;</condition> <incr><expr><name>survivor_count</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>score_tab</name><index>[ <expr><name><name>survivor</name><index>[<expr><name>survivor_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> ]</index></name> <operator>&lt;=</operator> <name>best_score</name> <operator>+</operator> <name>lambda</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>survivor</name><index>[ <expr><name>survivor_count</name><operator>++</operator></expr> ]</index></name><operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>!=</operator> <name>FMT_H263</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>!=</operator> <name>FMT_H261</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>last_score</name><operator>=</operator> <literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><literal type="number">120</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <name><name>survivor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>last_non_zero</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score</name><init>= <expr><name><name>score_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>lambda</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&lt;</operator> <name>last_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>last_score</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_i</name><operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_level</name><operator>=</operator> <name><name>level_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_run</name><operator>=</operator> <name><name>run_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_score</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>last_score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name><operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_non_zero</name><operator>=</operator> <name>last_i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>start_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">64</literal><operator>-</operator><name>start_i</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>last_non_zero</name> <operator>&lt;</operator> <name>start_i</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>last_non_zero</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>last_non_zero</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>start_i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>best_level</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_score</name><init>= <expr><name>dc</name> <operator>*</operator> <name>dc</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>coeff_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>level</name><init>= <expr><name><name>coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alevel</name><init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unquant_coeff</name></decl>, <decl><type ref="prev"/><name>score</name></decl>, <decl><type ref="prev"/><name>distortion</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>unquant_coeff</name><operator>=</operator> <operator>(</operator><name>alevel</name><operator>*</operator><name>qmul</name> <operator>+</operator> <name>qadd</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block>{<block_content> 

<expr_stmt><expr><name>unquant_coeff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator> <name>alevel</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>mpeg2_qscale</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>unquant_coeff</name> <operator>=</operator> <operator>(</operator><name>unquant_coeff</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>unquant_coeff</name> <operator>=</operator> <operator>(</operator><name>unquant_coeff</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>unquant_coeff</name><operator>&lt;&lt;=</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>distortion</name><operator>=</operator> <operator>(</operator><name>unquant_coeff</name> <operator>-</operator> <name>dc</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>unquant_coeff</name> <operator>-</operator> <name>dc</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name><operator>+=</operator><literal type="number">64</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>level</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>score</name><operator>=</operator> <name>distortion</name> <operator>+</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>*</operator><name>lambda</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>score</name><operator>=</operator> <name>distortion</name> <operator>+</operator> <name>esc_length</name><operator>*</operator><name>lambda</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name> <operator>&lt;</operator> <name>best_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>best_score</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_level</name><operator>=</operator> <name>level</name> <operator>-</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>best_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_score</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>best_score</name> <operator>-</operator> <name>dc</name><operator>*</operator><name>dc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>best_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>last_non_zero</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>=</operator> <name>last_i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>last_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[ <expr><name><name>perm_scantable</name><index>[<expr><name>last_non_zero</name></expr>]</index></name></expr> ]</index></name><operator>=</operator> <name>last_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>last_run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&gt;</operator><name>start_i</name></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <name><name>run_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[ <expr><name><name>perm_scantable</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> ]</index></name><operator>=</operator> <name><name>level_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>last_non_zero</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int16_t</name></type> <name><name>basis</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_basis</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>perm</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>s</name><init>= <expr><literal type="number">0.25</literal><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>BASIS_SHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name><init>= <expr><literal type="number">8</literal><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>perm_index</name><init>= <expr><name><name>perm</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>*=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>*=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>basis</name><index>[<expr><name>perm_index</name></expr>]</index><index>[<expr><literal type="number">8</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>y</name></expr>]</index></name><operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>s</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>M_PI</name><operator>/</operator><literal type="number">8.0</literal><operator>)</operator><operator>*</operator><name>i</name><operator>*</operator><operator>(</operator><name>x</name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>M_PI</name><operator>/</operator><literal type="number">8.0</literal><operator>)</operator><operator>*</operator><name>j</name><operator>*</operator><operator>(</operator><name>y</name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dct_quantize_refine</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>weight</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>rem</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>perm_scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>run_tab</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_run</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_level</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>, <decl><type ref="prev"/><name>start_i</name></decl>, <decl><type ref="prev"/><name>last_non_zero</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>last_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lambda</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rle_index</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>basis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>build_basis</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>qmul</name><operator>=</operator> <name>qscale</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd</name><operator>=</operator> <operator>(</operator><name>qscale</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>scantable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>perm_scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>q</name> <operator>&lt;&lt;=</operator> <name>RECON_SHIFT</name><operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name><operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_length</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_length</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_last_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_length</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_last_length</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>scantable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>perm_scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>permutated</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_ac_vlc_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_length</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_ac_vlc_last_length</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RECON_SHIFT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>rem</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dc</name> <operator>-</operator> <operator>(</operator><name><name>orig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>RECON_SHIFT</name><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>one</name><init>= <expr><literal type="number">36</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qns</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name><operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>qns</name><operator>*</operator><name>one</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name><operator>=</operator> <literal type="number">15</literal> <operator>+</operator> <operator>(</operator><literal type="number">48</literal><operator>*</operator><name>qns</name><operator>*</operator><name>one</name> <operator>+</operator> <name>w</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><name>w</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>w</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>w</name><operator>&lt;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>w</name><operator>*</operator><name>w</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>lambda</name><operator>=</operator> <name>sum</name><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>lambda2</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>FF_LAMBDA_SHIFT</name> <operator>-</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_index</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>start_i</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>last_non_zero</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>perm_scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>level</name><init>= <expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coeff</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>coeff</name><operator>=</operator> <name>qmul</name><operator>*</operator><name>level</name> <operator>-</operator> <name>qadd</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>coeff</name><operator>=</operator> <name>qmul</name><operator>*</operator><name>level</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>run_tab</name><index>[<expr><name>rle_index</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>add_8x8basis</name></name><argument_list>(<argument><expr><name>rem</name></expr></argument>, <argument><expr><name><name>basis</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>best_score</name> <init>= <expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>try_8x8basis</name></name><argument_list>(<argument><expr><name>rem</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>, <argument><expr><name><name>basis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_coeff</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_change</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run2</name></decl>, <decl><type ref="prev"/><name>best_unquant_change</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>analyze_gradient</name></decl>;</decl_stmt>

<expr_stmt><expr><name>analyze_gradient</name> <operator>=</operator> <name>last_non_zero</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>quantizer_noise_shaping</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>analyze_gradient</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>rem</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>w</name><operator>*</operator><name>w</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>RECON_SHIFT</name><operator>+</operator><literal type="number">12</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>RECON_SHIFT</name><operator>+</operator><literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>.</operator><name>fdct</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>start_i</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>level</name><init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>change</name></decl>, <decl><type ref="prev"/><name>old_coeff</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_coeff</name><operator>=</operator> <name>q</name><operator>*</operator><name>level</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>change</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>change</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>change</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_level</name><init>= <expr><name>level</name> <operator>+</operator> <name>change</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>, <decl><type ref="prev"/><name>new_coeff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_coeff</name><operator>=</operator> <name>q</name><operator>*</operator><name>new_level</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>new_coeff</name> <operator>&gt;=</operator> <literal type="number">2048</literal> <operator>||</operator> <name>new_coeff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>try_8x8basis</name></name><argument_list>(<argument><expr><name>rem</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>, <argument><expr><name><name>basis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>new_coeff</name> <operator>-</operator> <name>old_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name><operator>&lt;</operator><name>best_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>best_score</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_coeff</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>best_change</name><operator>=</operator> <name>change</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_unquant_change</name><operator>=</operator> <name>new_coeff</name> <operator>-</operator> <name>old_coeff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>run</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_index</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>run2</name><operator>=</operator> <name><name>run_tab</name><index>[<expr><name>rle_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_level</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_run</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>start_i</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>perm_scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>level</name><init>= <expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>change</name></decl>, <decl><type ref="prev"/><name>old_coeff</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quantizer_noise_shaping</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <name>last_non_zero</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>old_coeff</name><operator>=</operator> <name>qmul</name><operator>*</operator><name>level</name> <operator>-</operator> <name>qadd</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>old_coeff</name><operator>=</operator> <name>qmul</name><operator>*</operator><name>level</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>run2</name><operator>=</operator> <name><name>run_tab</name><index>[<expr><name>rle_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>old_coeff</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>run2</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>run2</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>last_non_zero</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>change</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>change</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>change</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_level</name><init>= <expr><name>level</name> <operator>+</operator> <name>change</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>, <decl><type ref="prev"/><name>new_coeff</name></decl>, <decl><type ref="prev"/><name>unquant_change</name></decl>;</decl_stmt>

<expr_stmt><expr><name>score</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quantizer_noise_shaping</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>new_level</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>new_level</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>new_level</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>new_coeff</name><operator>=</operator> <name>qmul</name><operator>*</operator><name>new_level</name> <operator>-</operator> <name>qadd</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>new_coeff</name><operator>=</operator> <name>qmul</name><operator>*</operator><name>new_level</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>new_coeff</name> <operator>&gt;=</operator> <literal type="number">2048</literal> <operator>||</operator> <name>new_coeff</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">2048</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">63</literal> <operator>&amp;&amp;</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">63</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>last_non_zero</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>new_level</name><operator>+</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>new_level</name><operator>+</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>new_level</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>analyze_gradient</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>g</name><init>= <expr><name><name>d1</name><index>[ <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>g</name><operator>^</operator><name>new_level</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>last_non_zero</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next_i</name><init>= <expr><name>i</name> <operator>+</operator> <name>run2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_level</name><init>= <expr><name><name>block</name><index>[ <expr><name><name>perm_scantable</name><index>[<expr><name>next_i</name></expr>]</index></name></expr> ]</index></name> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>next_level</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_level</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>next_i</name> <operator>&lt;</operator> <name>last_non_zero</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>+</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run2</name></expr></argument>, <argument><expr><name>next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name> <operator>+</operator> <name>run2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>next_level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>+</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run2</name></expr></argument>, <argument><expr><name>next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name> <operator>+</operator> <name>run2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>next_level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>prev_level</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>prev_run</name></expr></argument>, <argument><expr><name>prev_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>prev_run</name></expr></argument>, <argument><expr><name>prev_level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>new_coeff</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>last_non_zero</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next_i</name><init>= <expr><name>i</name> <operator>+</operator> <name>run2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_level</name><init>= <expr><name><name>block</name><index>[ <expr><name><name>perm_scantable</name><index>[<expr><name>next_i</name></expr>]</index></name></expr> ]</index></name> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>next_level</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_level</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>next_i</name> <operator>&lt;</operator> <name>last_non_zero</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name> <operator>+</operator> <name>run2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run2</name></expr></argument>, <argument><expr><name>next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name> <operator>+</operator> <name>run2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run2</name></expr></argument>, <argument><expr><name>next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <operator>-</operator><name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>prev_level</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>prev_run</name></expr></argument>, <argument><expr><name>prev_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

<operator>-</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>prev_run</name></expr></argument>, <argument><expr><name>prev_level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>score</name> <operator>*=</operator> <name>lambda</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unquant_change</name><operator>=</operator> <name>new_coeff</name> <operator>-</operator> <name>old_coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name><name>score</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">100</literal><operator>*</operator><name>lambda</name> <operator>&amp;&amp;</operator> <name>score</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">100</literal><operator>*</operator><name>lambda</name><operator>)</operator> <operator>||</operator> <name>lambda</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>try_8x8basis</name></name><argument_list>(<argument><expr><name>rem</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>, <argument><expr><name><name>basis</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name>unquant_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>score</name><operator>&lt;</operator><name>best_score</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>best_score</name><operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_coeff</name><operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_change</name><operator>=</operator> <name>change</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_unquant_change</name><operator>=</operator> <name>unquant_change</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>level</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>prev_level</name><operator>=</operator> <name>level</name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>prev_level</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_level</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev_run</name><operator>=</operator> <name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>best_change</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>perm_scantable</name><index>[ <expr><name>best_coeff</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>best_change</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>best_coeff</name> <operator>&gt;</operator> <name>last_non_zero</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>last_non_zero</name><operator>=</operator> <name>best_coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init>;</init> <condition><expr><name>last_non_zero</name><operator>&gt;=</operator><name>start_i</name></expr>;</condition> <incr><expr><name>last_non_zero</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>block</name><index>[<expr><name><name>perm_scantable</name><index>[<expr><name>last_non_zero</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>run</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rle_index</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>start_i</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>last_non_zero</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>perm_scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>level</name><init>= <expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>run_tab</name><index>[<expr><name>rle_index</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mpvencdsp</name><operator>.</operator><name>add_8x8basis</name></name><argument_list>(<argument><expr><name>rem</name></expr></argument>, <argument><expr><name><name>basis</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>best_unquant_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>last_non_zero</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_block_permute</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>permutation</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>perm_j</name> <init>= <expr><name><name>permutation</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>perm_j</name></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dct_quantize_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>last_non_zero</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>start_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>qmat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>threshold1</name></decl>, <decl><type ref="prev"/><name>threshold2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>.</operator><name>fdct</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>denoise_dct</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>scantable</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>q</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>q</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmat</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>q_intra_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>q_chroma_intra_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>bias</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_quant_bias</name></name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>QMAT_SHIFT</name> <operator>-</operator> <name>QUANT_BIAS_SHIFT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>scantable</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>scantable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmat</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>q_inter_matrix</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bias</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_quant_bias</name></name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>QMAT_SHIFT</name> <operator>-</operator> <name>QUANT_BIAS_SHIFT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>threshold1</name><operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>QMAT_SHIFT</name><operator>)</operator> <operator>-</operator> <name>bias</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>threshold2</name><operator>=</operator> <operator>(</operator><name>threshold1</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">63</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><name>start_i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>qmat</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>level</name><operator>+</operator><name>threshold1</name><operator>)</operator><operator>)</operator><operator>&gt;</operator><name>threshold2</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>last_non_zero</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>start_i</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>last_non_zero</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>qmat</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>level</name><operator>+</operator><name>threshold1</name><operator>)</operator><operator>)</operator><operator>&gt;</operator><name>threshold2</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>level</name><operator>=</operator> <operator>(</operator><name>bias</name> <operator>+</operator> <name>level</name><operator>)</operator><operator>&gt;&gt;</operator><name>QMAT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>level</name><operator>=</operator> <operator>(</operator><name>bias</name> <operator>-</operator> <name>level</name><operator>)</operator><operator>&gt;&gt;</operator><name>QMAT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>max</name> <operator>|=</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>overflow</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_qcoeff</name></name> <operator>&lt;</operator> <name>max</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>perm_type</name></name> <operator>!=</operator> <name>FF_IDCT_PERM_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_block_permute</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>,

<argument><expr><name>scantable</name></expr></argument>, <argument><expr><name>last_non_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>last_non_zero</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MpegEncContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>h263_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"obmc"</literal></expr>, <expr><literal type="string">"use overlapped block motion compensation."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mb_info"</literal></expr>, <expr><literal type="string">"emit macroblock info for RFC 2190 packetization, the parameter value is the maximum payload size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mb_info</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><name>FF_MPV_COMMON_OPTS</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>h263_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"H.263 encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>h263_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_h263_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h263"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"H.263 / H.263-1996"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H263</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mpv_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>ff_mpv_encode_picture</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mpv_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name><operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>h263_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>h263p_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"umv"</literal></expr>, <expr><literal type="string">"Use unlimited motion vectors."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>umvplus</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aiv"</literal></expr>, <expr><literal type="string">"Use alternative inter VLC."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>alt_inter_vlc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"obmc"</literal></expr>, <expr><literal type="string">"use overlapped block motion compensation."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"structured_slices"</literal></expr>, <expr><literal type="string">"Write slice start position at every GOB header instead of just GOB number."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>h263_slice_structured</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><name>FF_MPV_COMMON_OPTS</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>h263p_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"H.263p encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>h263p_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_h263p_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h263p"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"H.263+ / H.263-1998 / H.263 version 2"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H263P</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mpv_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>ff_mpv_encode_picture</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mpv_encode_end</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>h263p_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>msmpeg4v2_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"msmpeg4v2 encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>ff_mpv_generic_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_msmpeg4v2_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"msmpeg4v2"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-4 part 2 Microsoft variant version 2"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MSMPEG4V2</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mpv_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>ff_mpv_encode_picture</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mpv_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>msmpeg4v2_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>msmpeg4v3_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"msmpeg4v3 encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>ff_mpv_generic_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_msmpeg4v3_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"msmpeg4"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-4 part 2 Microsoft variant version 3"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MSMPEG4V3</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mpv_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>ff_mpv_encode_picture</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mpv_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>msmpeg4v3_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>wmv1_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"wmv1 encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>ff_mpv_generic_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wmv1_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmv1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Video 7"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMV1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mpv_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>ff_mpv_encode_picture</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mpv_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>wmv1_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
