<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vaapi_hevc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_dec_hevc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_hevc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h265_profile_level.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>VAAPIDecodePictureHEVC</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>VAPictureParameterBufferHEVCExtension</name></type> <name>pic_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASliceParameterBufferHEVCExtension</name></type> <name>last_slice_param</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>VAPictureParameterBufferHEVC</name></type> <name>pic_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASliceParameterBufferHEVC</name></type> <name>last_slice_param</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>last_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>last_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name></type> <name>pic</name></decl>;</decl_stmt>

}</block></struct></type> <name>VAAPIDecodePictureHEVC</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_vaapi_pic</name><parameter_list>(<parameter><decl><type><name>VAPictureHEVC</name> <modifier>*</modifier></type><name>va_pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>picture_id</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>VA_PICTURE_HEVC_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_vaapi_pic</name><parameter_list>(<parameter><decl><type><name>VAPictureHEVC</name> <modifier>*</modifier></type><name>va_pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rps_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>picture_id</name></name> <operator>=</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>rps_type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEVC_FRAME_FLAG_LONG_REF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>VA_PICTURE_HEVC_LONG_TERM_REFERENCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>VA_PICTURE_HEVC_FIELD_PIC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>va_pic</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>VA_PICTURE_HEVC_BOTTOM_FIELD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_frame_rps_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>pic_surf</name> <init>= <expr><call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pic_surf</name> <operator>==</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VA_PICTURE_HEVC_RPS_ST_CURR_BEFORE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pic_surf</name> <operator>==</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VA_PICTURE_HEVC_RPS_ST_CURR_AFTER</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pic_surf</name> <operator>==</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VA_PICTURE_HEVC_RPS_LT_CURR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_vaapi_reference_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>VAPictureParameterBufferHEVC</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>rps_type</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>ReferenceFrames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>DPB</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>current_picture</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HEVC_FRAME_FLAG_LONG_REF</name> <operator>|</operator> <name>HEVC_FRAME_FLAG_SHORT_REF</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>init_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>ReferenceFrames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rps_type</name> <operator>=</operator> <call><name>find_frame_rps_type</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>ReferenceFrames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>rps_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_hevc_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePictureHEVC</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ScalingList</name> <modifier>*</modifier></type><name>scaling_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_param_size</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAPictureParameterBufferHEVC</name> <modifier>*</modifier></type><name>pic_param</name> <init>= <expr><operator>(</operator><name>VAPictureParameterBufferHEVC</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic_param</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>output_surface</name></name> <operator>=</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pic_param</name> <operator>=</operator> <operator>(</operator><name>VAPictureParameterBufferHEVC</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>pic_width_in_luma_samples</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>pic_height_in_luma_samples</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr>,

<expr><operator>.</operator><name>log2_min_luma_coding_block_size_minus3</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>sps_max_dec_pic_buffering_minus1</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>log2_diff_max_min_luma_coding_block_size</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name></expr>,

<expr><operator>.</operator><name>log2_min_transform_block_size_minus2</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>log2_diff_max_min_transform_block_size</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_trafo_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>,

<expr><operator>.</operator><name>max_transform_hierarchy_depth_inter</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name></expr>,

<expr><operator>.</operator><name>max_transform_hierarchy_depth_intra</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name></expr>,

<expr><operator>.</operator><name>num_short_term_ref_pic_sets</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>,

<expr><operator>.</operator><name>num_long_term_ref_pic_sps</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr>,

<expr><operator>.</operator><name>num_ref_idx_l0_default_active_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>num_ref_idx_l1_default_active_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>init_qp_minus26</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name></expr>,

<expr><operator>.</operator><name>pps_cb_qp_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name></expr>,

<expr><operator>.</operator><name>pps_cr_qp_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name></expr>,

<expr><operator>.</operator><name>pcm_sample_bit_depth_luma_minus1</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>pcm_sample_bit_depth_chroma_minus1</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>log2_min_pcm_luma_coding_block_size_minus3</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>log2_diff_max_min_pcm_luma_coding_block_size</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_max_pcm_cb_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name></expr>,

<expr><operator>.</operator><name>diff_cu_qp_delta_depth</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name></expr>,

<expr><operator>.</operator><name>pps_beta_offset_div2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>beta_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>pps_tc_offset_div2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>tc_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>log2_parallel_merge_level_minus2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_parallel_merge_level</name></name> <operator>-</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>bit_depth_luma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>bit_depth_chroma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>log2_max_pic_order_cnt_lsb_minus4</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>num_extra_slice_header_bits</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name></expr>,

<expr><operator>.</operator><name><name>pic_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>chroma_format_idc</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>,

<expr><operator>.</operator><name>tiles_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>separate_colour_plane_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr>,

<expr><operator>.</operator><name>pcm_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>scaling_list_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name></expr>,

<expr><operator>.</operator><name>transform_skip_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>amp_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>strong_intra_smoothing_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_strong_intra_smoothing_enable_flag</name></name></expr>,

<expr><operator>.</operator><name>sign_data_hiding_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>sign_data_hiding_flag</name></name></expr>,

<expr><operator>.</operator><name>constrained_intra_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name></expr>,

<expr><operator>.</operator><name>cu_qp_delta_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>weighted_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name></expr>,

<expr><operator>.</operator><name>weighted_bipred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name></expr>,

<expr><operator>.</operator><name>transquant_bypass_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name></expr>,

<expr><operator>.</operator><name>entropy_coding_sync_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>pps_loop_filter_across_slices_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>seq_loop_filter_across_slices_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>loop_filter_across_tiles_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>pcm_loop_filter_disabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>loop_filter_disable_flag</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name><name>slice_parsing_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>lists_modification_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>lists_modification_present_flag</name></name></expr>,

<expr><operator>.</operator><name>long_term_ref_pics_present_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name></expr>,

<expr><operator>.</operator><name>sps_temporal_mvp_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>cabac_init_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cabac_init_present_flag</name></name></expr>,

<expr><operator>.</operator><name>output_flag_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name></expr>,

<expr><operator>.</operator><name>dependent_slice_segments_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>pps_slice_chroma_qp_offsets_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_slice_level_chroma_qp_offsets_present_flag</name></name></expr>,

<expr><operator>.</operator><name>sample_adaptive_offset_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sao_enabled</name></name></expr>,

<expr><operator>.</operator><name>deblocking_filter_override_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_override_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>pps_disable_deblocking_filter_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>disable_dbf</name></name></expr>,

<expr><operator>.</operator><name>slice_segment_header_extension_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>slice_header_extension_present_flag</name></name></expr>,

<expr><operator>.</operator><name>RapPicFlag</name> <operator>=</operator> <call><name>IS_IRAP</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>IdrPicFlag</name> <operator>=</operator> <call><name>IS_IDR</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>IntraPicFlag</name> <operator>=</operator> <call><name>IS_IRAP</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vaapi_pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_param</name><operator>-&gt;</operator><name>CurrPic</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_vaapi_reference_frames</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>pic_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic_param</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_param</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic_param</name><operator>-&gt;</operator><name>column_width_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic_param</name><operator>-&gt;</operator><name>row_height_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_ref_pic_set_sps_flag</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_rps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic_param</name><operator>-&gt;</operator><name>st_rps_bits</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_ref_pic_set_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pic_param</name><operator>-&gt;</operator><name>st_rps_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_REXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pic_param</name><operator>.</operator><name>rext</name></name> <operator>=</operator> <operator>(</operator><name>VAPictureParameterBufferHEVCRext</name><operator>)</operator> <block>{

<expr><operator>.</operator><name><name>range_extension_pic_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>transform_skip_rotation_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>transform_skip_rotation_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>transform_skip_context_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>transform_skip_context_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>implicit_rdpcm_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>implicit_rdpcm_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>explicit_rdpcm_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>explicit_rdpcm_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>extended_precision_processing_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>extended_precision_processing_flag</name></name></expr>,

<expr><operator>.</operator><name>intra_smoothing_disabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>intra_smoothing_disabled_flag</name></name></expr>,

<expr><operator>.</operator><name>high_precision_offsets_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>high_precision_offsets_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>persistent_rice_adaptation_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>cabac_bypass_alignment_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>cabac_bypass_alignment_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>cross_component_prediction_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cross_component_prediction_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>chroma_qp_offset_list_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_enabled_flag</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>diff_cu_chroma_qp_offset_depth</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>diff_cu_chroma_qp_offset_depth</name></name></expr>,

<expr><operator>.</operator><name>chroma_qp_offset_list_len_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name></expr>,

<expr><operator>.</operator><name>log2_sao_offset_scale_luma</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_luma</name></name></expr>,

<expr><operator>.</operator><name>log2_sao_offset_scale_chroma</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_chroma</name></name></expr>,

<expr><operator>.</operator><name>log2_max_transform_skip_block_size_minus2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_max_transform_skip_block_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>,

}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pic_param</name><operator>.</operator><name>rext</name><operator>.</operator><name>cb_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pic_param</name><operator>.</operator><name>rext</name><operator>.</operator><name>cr_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pic_param_size</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_REXT</name></expr> ?</condition><then>

<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>pic_param</name></name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VAPictureParameterBufferHEVC</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>,

<argument><expr><name>VAPictureParameterBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic_param</name></name></expr></argument>, <argument><expr><name>pic_param_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scaling_list</name> <operator>=</operator> <operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scaling_list</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scaling_list</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VAIQMatrixBufferHEVC</name></type> <name>iq_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList4x4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>scaling_list</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList8x8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>scaling_list</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList16x16</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>scaling_list</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingList32x32</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>scaling_list</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingListDC16x16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>scaling_list</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iq_matrix</name><operator>.</operator><name>ScalingListDC32x32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>scaling_list</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>,

<argument><expr><name>VAIQMatrixBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>iq_matrix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iq_matrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_hevc_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePictureHEVC</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASliceParameterBufferHEVC</name> <modifier>*</modifier></type><name>last_slice_param</name> <init>= <expr><operator>(</operator><name>VASliceParameterBufferHEVC</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_param_size</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_REXT</name></expr> ?</condition><then>

<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name></name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VASliceParameterBufferHEVC</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>last_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>last_slice_param</name><operator>-&gt;</operator><name>LongSliceFlags</name><operator>.</operator><name>fields</name><operator>.</operator><name>LastSliceOfPic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_slice_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name></name></expr></argument>, <argument><expr><name>slice_param_size</name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_buffer</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vaapi_decode_issue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_pred_weight_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>SliceHeader</name> <modifier>*</modifier></type><name>sh</name></decl></parameter>,

<parameter><decl><type><name>VASliceParameterBufferHEVC</name> <modifier>*</modifier></type><name>slice_param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_luma_weight_l0</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_luma_weight_l0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_luma_weight_l1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_luma_weight_l1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>luma_offset_l0</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>luma_offset_l0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>luma_offset_l1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>luma_offset_l1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_weight_l0</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_weight_l0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_weight_l1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_weight_l1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>ChromaOffsetL0</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>ChromaOffsetL0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>ChromaOffsetL1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice_param</name><operator>-&gt;</operator><name>ChromaOffsetL1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_log2_weight_denom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_I</name> <operator>||</operator>

<operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_log2_weight_denom</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name> <operator>-</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>nb_refs</name><index>[<expr><name>L0</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_luma_weight_l0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_weight_l0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>luma_offset_l0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_offset_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_weight_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_weight_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_weight_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_weight_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>ChromaOffsetL0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_offset_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>ChromaOffsetL0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_offset_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>nb_refs</name><index>[<expr><name>L1</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_luma_weight_l1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_weight_l1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>luma_offset_l1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>luma_offset_l1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_weight_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_weight_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>delta_chroma_weight_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_weight_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>ChromaOffsetL1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_offset_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice_param</name><operator>-&gt;</operator><name>ChromaOffsetL1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>chroma_offset_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>get_ref_pic_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIDecodePictureHEVC</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAPictureParameterBufferHEVC</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>(</operator><name>VAPictureParameterBufferHEVC</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic_param</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0xff</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>ReferenceFrames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VASurfaceID</name></type> <name>pid</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>ReferenceFrames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picture_id</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poc</name> <init>= <expr><name><name>pp</name><operator>-&gt;</operator><name>ReferenceFrames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pic_order_cnt</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <name>VA_INVALID_ID</name> <operator>&amp;&amp;</operator> <name>pid</name> <operator>==</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>poc</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>poc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0xff</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_hevc_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SliceHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sh</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePictureHEVC</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASliceParameterBufferHEVC</name> <modifier>*</modifier></type><name>last_slice_param</name> <init>= <expr><operator>(</operator><name>VASliceParameterBufferHEVC</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_param_size</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_REXT</name></expr> ?</condition><then>

<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name></name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VASliceParameterBufferHEVC</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_list</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_B</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_I</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>list_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sh</name><operator>-&gt;</operator><name>first_slice_in_pic_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_slice_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name></name></expr></argument>, <argument><expr><name>slice_param_size</name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_buffer</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>last_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>last_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last_slice_param</name> <operator>=</operator> <operator>(</operator><name>VASliceParameterBufferHEVC</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>slice_data_size</name> <operator>=</operator> <name>size</name></expr>,

<expr><operator>.</operator><name>slice_data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>slice_data_flag</name> <operator>=</operator> <name>VA_SLICE_DATA_FLAG_ALL</name></expr>,

<expr><operator>.</operator><name>slice_data_byte_offset</name> <operator>=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>HEVClc</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>slice_segment_address</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_segment_addr</name></name></expr>,

<expr><operator>.</operator><name>slice_qp_delta</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name></expr>,

<expr><operator>.</operator><name>slice_cb_qp_offset</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_cb_qp_offset</name></name></expr>,

<expr><operator>.</operator><name>slice_cr_qp_offset</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_cr_qp_offset</name></name></expr>,

<expr><operator>.</operator><name>slice_beta_offset_div2</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>beta_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>slice_tc_offset_div2</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>tc_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>collocated_ref_idx</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_temporal_mvp_enabled_flag</name></name> <operator>?</operator> <name><name>sh</name><operator>-&gt;</operator><name>collocated_ref_idx</name></name> <operator>:</operator> <literal type="number">0xFF</literal></expr>,

<expr><operator>.</operator><name>five_minus_max_num_merge_cand</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>HEVC_SLICE_I</name> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="number">5</literal> <operator>-</operator> <name><name>sh</name><operator>-&gt;</operator><name>max_num_merge_cand</name></name></expr>,

<expr><operator>.</operator><name>num_ref_idx_l0_active_minus1</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>nb_refs</name><index>[<expr><name>L0</name></expr>]</index></name> <operator>?</operator> <name><name>sh</name><operator>-&gt;</operator><name>nb_refs</name><index>[<expr><name>L0</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>num_ref_idx_l1_active_minus1</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>nb_refs</name><index>[<expr><name>L1</name></expr>]</index></name> <operator>?</operator> <name><name>sh</name><operator>-&gt;</operator><name>nb_refs</name><index>[<expr><name>L1</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name><name>LongSliceFlags</name><operator>.</operator><name>fields</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>dependent_slice_segment_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>dependent_slice_segment_flag</name></name></expr>,

<expr><operator>.</operator><name>slice_type</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name></expr>,

<expr><operator>.</operator><name>color_plane_id</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>colour_plane_id</name></name></expr>,

<expr><operator>.</operator><name>mvd_l1_zero_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>mvd_l1_zero_flag</name></name></expr>,

<expr><operator>.</operator><name>cabac_init_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>cabac_init_flag</name></name></expr>,

<expr><operator>.</operator><name>slice_temporal_mvp_enabled_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_temporal_mvp_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>slice_deblocking_filter_disabled_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>disable_deblocking_filter_flag</name></name></expr>,

<expr><operator>.</operator><name>collocated_from_l0_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>collocated_list</name></name> <operator>==</operator> <name>L0</name> <operator>?</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>slice_loop_filter_across_slices_enabled_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_loop_filter_across_slices_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>slice_sao_luma_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_sample_adaptive_offset_flag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>slice_sao_chroma_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_sample_adaptive_offset_flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

}</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>last_slice_param</name><operator>-&gt;</operator><name>RefPicList</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>last_slice_param</name><operator>-&gt;</operator><name>RefPicList</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>list_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list_idx</name> <operator>&lt;</operator> <name>nb_list</name></expr>;</condition> <incr><expr><name>list_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RefPicList</name> <modifier>*</modifier></type><name>rpl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>refPicList</name><index>[<expr><name>list_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rpl</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>last_slice_param</name><operator>-&gt;</operator><name>RefPicList</name><index>[<expr><name>list_idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_ref_pic_index</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>rpl</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fill_pred_weight_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><name>last_slice_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_REXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>rext</name></name> <operator>=</operator> <operator>(</operator><name>VASliceParameterBufferHEVCRext</name><operator>)</operator> <block>{

<expr><operator>.</operator><name><name>slice_ext_flags</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>cu_chroma_qp_offset_enabled_flag</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>cu_chroma_qp_offset_enabled_flag</name></name></expr>,

}</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>rext</name><operator>.</operator><name>luma_offset_l0</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>base</name><operator>.</operator><name>luma_offset_l0</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>base</name><operator>.</operator><name>luma_offset_l0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>rext</name><operator>.</operator><name>luma_offset_l1</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>base</name><operator>.</operator><name>luma_offset_l1</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>base</name><operator>.</operator><name>luma_offset_l1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>rext</name><operator>.</operator><name>ChromaOffsetL0</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>base</name><operator>.</operator><name>ChromaOffsetL0</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>base</name><operator>.</operator><name>ChromaOffsetL0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>rext</name><operator>.</operator><name>ChromaOffsetL1</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>base</name><operator>.</operator><name>ChromaOffsetL1</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>last_slice_param</name><operator>.</operator><name>base</name><operator>.</operator><name>ChromaOffsetL1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>last_buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>last_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ptl_convert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PTLCommon</name> <modifier>*</modifier></type><name>general_ptl</name></decl></parameter>, <parameter><decl><type><name>H265RawProfileTierLevel</name> <modifier>*</modifier></type><name>h265_raw_ptl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h265_raw_ptl</name><operator>-&gt;</operator><name>general_profile_space</name></name> <operator>=</operator> <name><name>general_ptl</name><operator>-&gt;</operator><name>profile_space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h265_raw_ptl</name><operator>-&gt;</operator><name>general_tier_flag</name></name> <operator>=</operator> <name><name>general_ptl</name><operator>-&gt;</operator><name>tier_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h265_raw_ptl</name><operator>-&gt;</operator><name>general_profile_idc</name></name> <operator>=</operator> <name><name>general_ptl</name><operator>-&gt;</operator><name>profile_idc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h265_raw_ptl</name><operator>-&gt;</operator><name>general_profile_compatibility_flag</name></name></expr></argument>,

<argument><expr><name><name>general_ptl</name><operator>-&gt;</operator><name>profile_compatibility_flag</name></name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_field</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>h265_raw_ptl-&gt;general_ ##name = general_ptl-&gt;name</cpp:value></cpp:define>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>progressive_source_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>interlaced_source_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>non_packed_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>frame_only_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>max_12bit_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>max_10bit_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>max_422chroma_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>max_420chroma_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>max_monochrome_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>intra_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>one_picture_only_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>lower_bit_rate_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>max_14bit_constraint_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>inbld_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_field</name><argument_list>(<argument><expr><name>level_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>copy_field</name></cpp:undef>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>VAProfile</name></type> <name>ff_vaapi_parse_hevc_rext_profile</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PTL</name> <modifier>*</modifier></type><name>ptl</name> <init>= <expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>ptl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PTLCommon</name> <modifier>*</modifier></type><name>general_ptl</name> <init>= <expr><operator>&amp;</operator><name><name>ptl</name><operator>-&gt;</operator><name>general_ptl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265ProfileDescriptor</name> <modifier>*</modifier></type><name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H265RawProfileTierLevel</name></type> <name>h265_raw_ptl</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ptl_convert</name><argument_list>(<argument><expr><name>general_ptl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h265_raw_ptl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <call><name>ff_h265_get_profile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h265_raw_ptl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>profile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"HEVC profile is not found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"HEVC profile %s is found.\n"</literal></expr></argument>, <argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Main 4:2:2 10"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Main 4:2:2 10 Intra"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VAProfileHEVCMain422_10</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Main 4:4:4"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Main 4:4:4 Intra"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VAProfileHEVCMain444</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Main 4:4:4 10"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Main 4:4:4 10 Intra"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VAProfileHEVCMain444_10</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"HEVC profile %s is "</literal>

<literal type="string">"not supported with this VA version.\n"</literal></expr></argument>, <argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_flags</name></name> <operator>&amp;</operator> <name>AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VAProfileHEVCMain</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>VAProfileNone</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_hevc_vaapi_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_vaapi"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>vaapi_hevc_start_frame</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>vaapi_hevc_end_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>vaapi_hevc_decode_slice</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodePictureHEVC</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_vaapi_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_vaapi_decode_uninit</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_vaapi_common_frame_params</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
