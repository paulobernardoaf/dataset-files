<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\codec2utils.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/codec2utils.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>avpriv_codec2_mode_bit_rate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><call><name>avpriv_codec2_mode_frame_size</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_align</name> <init>= <expr><call><name>avpriv_codec2_mode_block_align</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>block_align</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">8000</literal> <operator>*</operator> <name>block_align</name> <operator>/</operator> <name>frame_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_codec2_mode_frame_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>frame_size_table</name><index>[<expr><name>AVPRIV_CODEC2_MODE_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">160</literal></expr>, 

<expr><literal type="number">160</literal></expr>, 

<expr><literal type="number">320</literal></expr>, 

<expr><literal type="number">320</literal></expr>, 

<expr><literal type="number">320</literal></expr>, 

<expr><literal type="number">320</literal></expr>, 

<expr><literal type="number">320</literal></expr>, 

<expr><literal type="number">320</literal></expr>, 

<expr><literal type="number">320</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mode</name></expr></argument> &gt;</argument_list></name> <name>AVPRIV_CODEC2_MODE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown codec2 mode %i, can't find frame_size\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>frame_size_table</name><index>[<expr><name>mode</name></expr>]</index></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_codec2_mode_block_align</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>block_align_table</name><index>[<expr><name>AVPRIV_CODEC2_MODE_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">8</literal></expr>, 

<expr><literal type="number">6</literal></expr>, 

<expr><literal type="number">8</literal></expr>, 

<expr><literal type="number">7</literal></expr>, 

<expr><literal type="number">7</literal></expr>, 

<expr><literal type="number">6</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mode</name></expr></argument> &gt;</argument_list></name> <name>AVPRIV_CODEC2_MODE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown codec2 mode %i, can't find block_align\n"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>block_align_table</name><index>[<expr><name>mode</name></expr>]</index></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
