<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264_parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_h264_pred_weight_table</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ref_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_type_nos</name></decl></parameter>,

<parameter><decl><type><name>H264PredWeightTable</name> <modifier>*</modifier></type><name>pwt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>picture_structure</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>luma_def</name></decl>, <decl><type ref="prev"/><name>chroma_def</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>use_weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>use_weight_chroma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name> <operator>&gt;</operator> <literal type="number">7U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"luma_log2_weight_denom %d is out of range\n"</literal></expr></argument>, <argument><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>luma_def</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pwt</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name> <operator>&gt;</operator> <literal type="number">7U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"chroma_log2_weight_denom %d is out of range\n"</literal></expr></argument>, <argument><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chroma_def</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>pwt</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>luma_weight_flag</name></decl>, <decl><type ref="prev"/><name>chroma_weight_flag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>luma_weight_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>luma_weight_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int8_t</name><operator>)</operator><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<operator>(</operator><name>int8_t</name><operator>)</operator><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out_range_weight</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>luma_def</name> <operator>||</operator>

<name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>use_weight</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>luma_def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chroma_weight_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_weight_flag</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int8_t</name><operator>)</operator><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<operator>(</operator><name>int8_t</name><operator>)</operator><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>chroma_def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>out_range_weight</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>chroma_def</name> <operator>||</operator>

<name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>use_weight_chroma</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>chroma_def</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_structure</name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>slice_type_nos</name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pwt</name><operator>-&gt;</operator><name>use_weight</name></name> <operator>=</operator> <name><name>pwt</name><operator>-&gt;</operator><name>use_weight</name></name> <operator>||</operator> <name><name>pwt</name><operator>-&gt;</operator><name>use_weight_chroma</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>out_range_weight</name>:</label>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><literal type="string">"Out of range weight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_check_intra4x4_pred_mode</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>pred_mode_cache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>top_samples_available</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left_samples_available</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>top</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LEFT_DC_PRED</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>left</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>TOP_DC_PRED</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>DC_128_PRED</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>top_samples_available</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name><name>top</name><index>[<expr><name><name>pred_mode_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"top block unavailable for requested intra mode %d\n"</literal></expr></argument>,

<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pred_mode_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>left_samples_available</name> <operator>&amp;</operator> <literal type="number">0x8888</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x8888</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mask</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x8000</literal></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x20</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>left_samples_available</name> <operator>&amp;</operator> <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name><name>left</name><index>[<expr><name><name>pred_mode_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"left block unavailable for requested intra4x4 mode %d\n"</literal></expr></argument>,

<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pred_mode_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_check_intra_pred_mode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_samples_available</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>left_samples_available</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>LEFT_DC_PRED8x8</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>left</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>TOP_DC_PRED8x8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>DC_128_PRED8x8</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;</operator> <literal type="number">3U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"out of range intra chroma pred mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>top_samples_available</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>top</name><index>[<expr><name>mode</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"top block unavailable for requested intra mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>left_samples_available</name> <operator>&amp;</operator> <literal type="number">0x8080</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x8080</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>left</name><index>[<expr><name>mode</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"left block unavailable for requested intra mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_chroma</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>left_samples_available</name> <operator>&amp;</operator> <literal type="number">0x8080</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>ALZHEIMER_DC_L0T_PRED8x8</name> <operator>+</operator>

<operator>(</operator><operator>!</operator><operator>(</operator><name>left_samples_available</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator><operator>)</operator> <operator>+</operator>

<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>mode</name> <operator>==</operator> <name>DC_128_PRED8x8</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mode</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_parse_ref_count</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>plist_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>ref_count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slice_type_nos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>picture_structure</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>list_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_ref_idx_active_override_flag</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type_nos</name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>picture_structure</name> <operator>==</operator> <name>PICT_FRAME</name></expr> ?</condition><then> <expr><literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">31</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>num_ref_idx_active_override_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_ref_idx_active_override_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type_nos</name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type_nos</name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>list_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>list_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>list_count</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"reference overflow %u &gt; %u or %u &gt; %u\n"</literal></expr></argument>,

<argument><expr><name><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>plist_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"reference overflow %u &gt; %u \n"</literal></expr></argument>,

<argument><expr><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>list_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>plist_count</name> <operator>=</operator> <name>list_count</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><operator>*</operator><name>plist_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_init_poc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>pic_field_poc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pic_poc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>, <parameter><decl><type><name>H264POCContext</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>picture_structure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nal_ref_idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_frame_num</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>field_poc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_num_offset</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>prev_frame_num_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&lt;</operator> <name><name>pc</name><operator>-&gt;</operator><name>prev_frame_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>frame_num_offset</name></name> <operator>+=</operator> <name>max_frame_num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_poc_lsb</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>prev_poc_lsb</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>prev_poc_lsb</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>poc_lsb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>poc_lsb</name></name> <operator>&lt;</operator> <name><name>pc</name><operator>-&gt;</operator><name>prev_poc_lsb</name></name> <operator>&amp;&amp;</operator>

<name><name>pc</name><operator>-&gt;</operator><name>prev_poc_lsb</name></name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>poc_lsb</name></name> <operator>&gt;=</operator> <name>max_poc_lsb</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>poc_msb</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>prev_poc_msb</name></name> <operator>+</operator> <name>max_poc_lsb</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>poc_lsb</name></name> <operator>&gt;</operator> <name><name>pc</name><operator>-&gt;</operator><name>prev_poc_lsb</name></name> <operator>&amp;&amp;</operator>

<name><name>pc</name><operator>-&gt;</operator><name>prev_poc_lsb</name></name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>poc_lsb</name></name> <operator>&lt;</operator> <operator>-</operator><name>max_poc_lsb</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>poc_msb</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>prev_poc_msb</name></name> <operator>-</operator> <name>max_poc_lsb</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>poc_msb</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>prev_poc_msb</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>poc_msb</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>poc_lsb</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_structure</name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>pc</name><operator>-&gt;</operator><name>delta_poc_bottom</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>abs_frame_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>expected_delta_per_poc_cycle</name></decl>, <decl><type ref="prev"/><name>expectedpoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_cycle_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abs_frame_num</name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>frame_num_offset</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>frame_num</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>abs_frame_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_ref_idc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>abs_frame_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abs_frame_num</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>expected_delta_per_poc_cycle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>poc_cycle_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>expected_delta_per_poc_cycle</name> <operator>+=</operator> <name><name>sps</name><operator>-&gt;</operator><name>offset_for_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>abs_frame_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>poc_cycle_cnt</name> <init>= <expr><operator>(</operator><name>abs_frame_num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>sps</name><operator>-&gt;</operator><name>poc_cycle_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_num_in_poc_cycle</name> <init>= <expr><operator>(</operator><name>abs_frame_num</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>sps</name><operator>-&gt;</operator><name>poc_cycle_length</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>expectedpoc</name> <operator>=</operator> <name>poc_cycle_cnt</name> <operator>*</operator> <name>expected_delta_per_poc_cycle</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>frame_num_in_poc_cycle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>expectedpoc</name> <operator>=</operator> <name>expectedpoc</name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>offset_for_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>expectedpoc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_ref_idc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expectedpoc</name> <operator>=</operator> <name>expectedpoc</name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>offset_for_non_ref_pic</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>expectedpoc</name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>offset_for_top_to_bottom_field</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_structure</name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>pc</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>poc</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>frame_num_offset</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>frame_num</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nal_ref_idc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>poc</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>poc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>poc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>||</operator> <name><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_structure</name> <operator>!=</operator> <name>PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic_field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_structure</name> <operator>!=</operator> <name>PICT_TOP_FIELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic_field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pic_poc</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>pic_field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pic_field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_extradata_ps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>is_avc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H2645Packet</name></type> <name>pkt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h2645_packet_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>is_avc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>.</operator><name>nb_nals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name> <init>= <expr><operator>&amp;</operator><name><name>pkt</name><operator>.</operator><name>nals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_NAL_SPS</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>tmp_gb</name> <init>= <expr><name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_seq_parameter_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_gb</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"SPS decoding failure, trying again with the complete NAL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_gb</name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>raw_data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>raw_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_seq_parameter_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_gb</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_seq_parameter_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>H264_NAL_PPS</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_picture_parameter_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>,

<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>size_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Ignoring NAL type %d in extradata\n"</literal></expr></argument>,

<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_h2645_packet_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_extradata_ps_mp4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>err_recognition</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_extradata_ps</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>err_recognition</name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>escaped_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>escaped_buf_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"SPS decoding failure, trying again after escaping the NAL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <operator>(</operator><name>INT16_MAX</name> <operator>-</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>escaped_buf_size</name> <operator>=</operator> <name>buf_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>escaped_buf</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>escaped_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>escaped_buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>escaped_buf</name></expr></argument>, <argument><expr><name>escaped_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<call><name>bytestream2_peek_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>escaped_buf_size</name> <operator>=</operator> <call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>escaped_buf</name></expr></argument>, <argument><expr><name>escaped_buf_size</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>decode_extradata_ps</name><argument_list>(<argument><expr><name>escaped_buf</name></expr></argument>, <argument><expr><name>escaped_buf_size</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>escaped_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_decode_extradata</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_avc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nal_length_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>err_recognition</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>nalsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>is_avc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"avcC %d too short\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>nalsize</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nalsize</name> <operator>&gt;</operator> <name>size</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_extradata_ps_mp4</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nalsize</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>err_recognition</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Decoding sps %d from avcC failed\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nalsize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>nalsize</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nalsize</name> <operator>&gt;</operator> <name>size</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_extradata_ps_mp4</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nalsize</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>err_recognition</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Decoding pps %d from avcC failed\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>nalsize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>nal_length_size</name> <operator>=</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_avc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_extradata_ps</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_get_profile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_H264_BASELINE</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FF_PROFILE_H264_CONSTRAINED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_H264_HIGH_10</name></expr>:</case>

<case>case <expr><name>FF_PROFILE_H264_HIGH_422</name></expr>:</case>

<case>case <expr><name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FF_PROFILE_H264_INTRA</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>profile</name></expr>;</return>

</block_content>}</block></function>

</unit>
