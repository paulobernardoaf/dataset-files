<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacpsdata.c"><decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_iid_df1_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>huff_iid_df1_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01FEB4</literal></expr>, <expr><literal type="number">0x01FEB5</literal></expr>, <expr><literal type="number">0x01FD76</literal></expr>, <expr><literal type="number">0x01FD77</literal></expr>, <expr><literal type="number">0x01FD74</literal></expr>, <expr><literal type="number">0x01FD75</literal></expr>, <expr><literal type="number">0x01FE8A</literal></expr>,

<expr><literal type="number">0x01FE8B</literal></expr>, <expr><literal type="number">0x01FE88</literal></expr>, <expr><literal type="number">0x00FE80</literal></expr>, <expr><literal type="number">0x01FEB6</literal></expr>, <expr><literal type="number">0x00FE82</literal></expr>, <expr><literal type="number">0x00FEB8</literal></expr>, <expr><literal type="number">0x007F42</literal></expr>,

<expr><literal type="number">0x007FAE</literal></expr>, <expr><literal type="number">0x003FAF</literal></expr>, <expr><literal type="number">0x001FD1</literal></expr>, <expr><literal type="number">0x001FE9</literal></expr>, <expr><literal type="number">0x000FE9</literal></expr>, <expr><literal type="number">0x0007EA</literal></expr>, <expr><literal type="number">0x0007FB</literal></expr>,

<expr><literal type="number">0x0003FB</literal></expr>, <expr><literal type="number">0x0001FB</literal></expr>, <expr><literal type="number">0x0001FF</literal></expr>, <expr><literal type="number">0x00007C</literal></expr>, <expr><literal type="number">0x00003C</literal></expr>, <expr><literal type="number">0x00001C</literal></expr>, <expr><literal type="number">0x00000C</literal></expr>,

<expr><literal type="number">0x000000</literal></expr>, <expr><literal type="number">0x000001</literal></expr>, <expr><literal type="number">0x000001</literal></expr>, <expr><literal type="number">0x000002</literal></expr>, <expr><literal type="number">0x000001</literal></expr>, <expr><literal type="number">0x00000D</literal></expr>, <expr><literal type="number">0x00001D</literal></expr>,

<expr><literal type="number">0x00003D</literal></expr>, <expr><literal type="number">0x00007D</literal></expr>, <expr><literal type="number">0x0000FC</literal></expr>, <expr><literal type="number">0x0001FC</literal></expr>, <expr><literal type="number">0x0003FC</literal></expr>, <expr><literal type="number">0x0003F4</literal></expr>, <expr><literal type="number">0x0007EB</literal></expr>,

<expr><literal type="number">0x000FEA</literal></expr>, <expr><literal type="number">0x001FEA</literal></expr>, <expr><literal type="number">0x001FD6</literal></expr>, <expr><literal type="number">0x003FD0</literal></expr>, <expr><literal type="number">0x007FAF</literal></expr>, <expr><literal type="number">0x007F43</literal></expr>, <expr><literal type="number">0x00FEB9</literal></expr>,

<expr><literal type="number">0x00FE83</literal></expr>, <expr><literal type="number">0x01FEB7</literal></expr>, <expr><literal type="number">0x00FE81</literal></expr>, <expr><literal type="number">0x01FE89</literal></expr>, <expr><literal type="number">0x01FE8E</literal></expr>, <expr><literal type="number">0x01FE8F</literal></expr>, <expr><literal type="number">0x01FE8C</literal></expr>,

<expr><literal type="number">0x01FE8D</literal></expr>, <expr><literal type="number">0x01FEB2</literal></expr>, <expr><literal type="number">0x01FEB3</literal></expr>, <expr><literal type="number">0x01FEB0</literal></expr>, <expr><literal type="number">0x01FEB1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_iid_dt1_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>huff_iid_dt1_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x004ED4</literal></expr>, <expr><literal type="number">0x004ED5</literal></expr>, <expr><literal type="number">0x004ECE</literal></expr>, <expr><literal type="number">0x004ECF</literal></expr>, <expr><literal type="number">0x004ECC</literal></expr>, <expr><literal type="number">0x004ED6</literal></expr>, <expr><literal type="number">0x004ED8</literal></expr>,

<expr><literal type="number">0x004F46</literal></expr>, <expr><literal type="number">0x004F60</literal></expr>, <expr><literal type="number">0x002718</literal></expr>, <expr><literal type="number">0x002719</literal></expr>, <expr><literal type="number">0x002764</literal></expr>, <expr><literal type="number">0x002765</literal></expr>, <expr><literal type="number">0x00276D</literal></expr>,

<expr><literal type="number">0x0027B1</literal></expr>, <expr><literal type="number">0x0013B7</literal></expr>, <expr><literal type="number">0x0013D6</literal></expr>, <expr><literal type="number">0x0009C7</literal></expr>, <expr><literal type="number">0x0009E9</literal></expr>, <expr><literal type="number">0x0009ED</literal></expr>, <expr><literal type="number">0x0004EE</literal></expr>,

<expr><literal type="number">0x0004F7</literal></expr>, <expr><literal type="number">0x000278</literal></expr>, <expr><literal type="number">0x000139</literal></expr>, <expr><literal type="number">0x00009A</literal></expr>, <expr><literal type="number">0x00009F</literal></expr>, <expr><literal type="number">0x000020</literal></expr>, <expr><literal type="number">0x000011</literal></expr>,

<expr><literal type="number">0x00000A</literal></expr>, <expr><literal type="number">0x000003</literal></expr>, <expr><literal type="number">0x000001</literal></expr>, <expr><literal type="number">0x000000</literal></expr>, <expr><literal type="number">0x00000B</literal></expr>, <expr><literal type="number">0x000012</literal></expr>, <expr><literal type="number">0x000021</literal></expr>,

<expr><literal type="number">0x00004C</literal></expr>, <expr><literal type="number">0x00009B</literal></expr>, <expr><literal type="number">0x00013A</literal></expr>, <expr><literal type="number">0x000279</literal></expr>, <expr><literal type="number">0x000270</literal></expr>, <expr><literal type="number">0x0004EF</literal></expr>, <expr><literal type="number">0x0004E2</literal></expr>,

<expr><literal type="number">0x0009EA</literal></expr>, <expr><literal type="number">0x0009D8</literal></expr>, <expr><literal type="number">0x0013D7</literal></expr>, <expr><literal type="number">0x0013D0</literal></expr>, <expr><literal type="number">0x0027B2</literal></expr>, <expr><literal type="number">0x0027A2</literal></expr>, <expr><literal type="number">0x00271A</literal></expr>,

<expr><literal type="number">0x00271B</literal></expr>, <expr><literal type="number">0x004F66</literal></expr>, <expr><literal type="number">0x004F67</literal></expr>, <expr><literal type="number">0x004F61</literal></expr>, <expr><literal type="number">0x004F47</literal></expr>, <expr><literal type="number">0x004ED9</literal></expr>, <expr><literal type="number">0x004ED7</literal></expr>,

<expr><literal type="number">0x004ECD</literal></expr>, <expr><literal type="number">0x004ED2</literal></expr>, <expr><literal type="number">0x004ED3</literal></expr>, <expr><literal type="number">0x004ED0</literal></expr>, <expr><literal type="number">0x004ED1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_iid_df0_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>huff_iid_df0_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01FFFB</literal></expr>, <expr><literal type="number">0x01FFFC</literal></expr>, <expr><literal type="number">0x01FFFD</literal></expr>, <expr><literal type="number">0x01FFFA</literal></expr>, <expr><literal type="number">0x00FFFC</literal></expr>, <expr><literal type="number">0x007FFC</literal></expr>, <expr><literal type="number">0x001FFD</literal></expr>,

<expr><literal type="number">0x0003FE</literal></expr>, <expr><literal type="number">0x0001FE</literal></expr>, <expr><literal type="number">0x00007E</literal></expr>, <expr><literal type="number">0x00003C</literal></expr>, <expr><literal type="number">0x00001D</literal></expr>, <expr><literal type="number">0x00000D</literal></expr>, <expr><literal type="number">0x000005</literal></expr>,

<expr><literal type="number">0x000000</literal></expr>, <expr><literal type="number">0x000004</literal></expr>, <expr><literal type="number">0x00000C</literal></expr>, <expr><literal type="number">0x00001C</literal></expr>, <expr><literal type="number">0x00003D</literal></expr>, <expr><literal type="number">0x00003E</literal></expr>, <expr><literal type="number">0x0000FE</literal></expr>,

<expr><literal type="number">0x0007FE</literal></expr>, <expr><literal type="number">0x001FFC</literal></expr>, <expr><literal type="number">0x003FFC</literal></expr>, <expr><literal type="number">0x003FFD</literal></expr>, <expr><literal type="number">0x007FFD</literal></expr>, <expr><literal type="number">0x01FFFE</literal></expr>, <expr><literal type="number">0x03FFFE</literal></expr>,

<expr><literal type="number">0x03FFFF</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_iid_dt0_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>huff_iid_dt0_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x07FFF9</literal></expr>, <expr><literal type="number">0x07FFFA</literal></expr>, <expr><literal type="number">0x07FFFB</literal></expr>, <expr><literal type="number">0x0FFFF8</literal></expr>, <expr><literal type="number">0x0FFFF9</literal></expr>, <expr><literal type="number">0x0FFFFA</literal></expr>, <expr><literal type="number">0x01FFFD</literal></expr>,

<expr><literal type="number">0x007FFE</literal></expr>, <expr><literal type="number">0x000FFE</literal></expr>, <expr><literal type="number">0x0003FE</literal></expr>, <expr><literal type="number">0x0000FE</literal></expr>, <expr><literal type="number">0x00003E</literal></expr>, <expr><literal type="number">0x00000E</literal></expr>, <expr><literal type="number">0x000002</literal></expr>,

<expr><literal type="number">0x000000</literal></expr>, <expr><literal type="number">0x000006</literal></expr>, <expr><literal type="number">0x00001E</literal></expr>, <expr><literal type="number">0x00007E</literal></expr>, <expr><literal type="number">0x0001FE</literal></expr>, <expr><literal type="number">0x0007FE</literal></expr>, <expr><literal type="number">0x001FFE</literal></expr>,

<expr><literal type="number">0x003FFE</literal></expr>, <expr><literal type="number">0x01FFFC</literal></expr>, <expr><literal type="number">0x07FFF8</literal></expr>, <expr><literal type="number">0x0FFFFB</literal></expr>, <expr><literal type="number">0x0FFFFC</literal></expr>, <expr><literal type="number">0x0FFFFD</literal></expr>, <expr><literal type="number">0x0FFFFE</literal></expr>,

<expr><literal type="number">0x0FFFFF</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_icc_df_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>huff_icc_df_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x3FFF</literal></expr>, <expr><literal type="number">0x3FFE</literal></expr>, <expr><literal type="number">0x0FFE</literal></expr>, <expr><literal type="number">0x03FE</literal></expr>, <expr><literal type="number">0x007E</literal></expr>, <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">0x003E</literal></expr>, <expr><literal type="number">0x00FE</literal></expr>, <expr><literal type="number">0x01FE</literal></expr>, <expr><literal type="number">0x07FE</literal></expr>, <expr><literal type="number">0x1FFE</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_icc_dt_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>huff_icc_dt_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x3FFE</literal></expr>, <expr><literal type="number">0x1FFE</literal></expr>, <expr><literal type="number">0x07FE</literal></expr>, <expr><literal type="number">0x01FE</literal></expr>, <expr><literal type="number">0x007E</literal></expr>, <expr><literal type="number">0x001E</literal></expr>, <expr><literal type="number">0x0006</literal></expr>, <expr><literal type="number">0x0000</literal></expr>,

<expr><literal type="number">0x0002</literal></expr>, <expr><literal type="number">0x000E</literal></expr>, <expr><literal type="number">0x003E</literal></expr>, <expr><literal type="number">0x00FE</literal></expr>, <expr><literal type="number">0x03FE</literal></expr>, <expr><literal type="number">0x0FFE</literal></expr>, <expr><literal type="number">0x3FFF</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_ipd_df_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_ipd_df_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_ipd_dt_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_ipd_dt_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_opd_df_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_opd_df_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_opd_dt_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>huff_opd_dt_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>huff_offset</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>k_to_i_20</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>,

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>,

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>k_to_i_34</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>,

<expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>,

<expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>,

<expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>g1_Q2</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.01899487526049f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.07293139167538f</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.30596630545168f</literal></expr></argument>)</argument_list></call></expr>, <macro><name>Q31</name><argument_list>(<argument><literal type="number">0.5f</literal></argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

</unit>
