<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\sbc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSBC_BLOCKS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_FREQ_16000</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_FREQ_32000</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_FREQ_44100</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_FREQ_48000</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_BLK_4</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_BLK_8</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_BLK_12</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_BLK_16</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_MODE_MONO</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_MODE_DUAL_CHANNEL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_MODE_STEREO</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_MODE_JOINT_STEREO</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_AM_LOUDNESS</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_AM_SNR</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_SB_4</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_SB_8</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_SYNCWORD</name></cpp:macro> <cpp:value>0x9C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSBC_SYNCWORD</name></cpp:macro> <cpp:value>0xAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBCDEC_FIXED_EXTRA_BITS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_ALIGN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<struct>struct <name>sbc_frame</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>frequency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>blocks</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>MONO</name> <init>= <expr><name>SBC_MODE_MONO</name></expr></init></decl>,

<decl><name>DUAL_CHANNEL</name> <init>= <expr><name>SBC_MODE_DUAL_CHANNEL</name></expr></init></decl>,

<decl><name>STEREO</name> <init>= <expr><name>SBC_MODE_STEREO</name></expr></init></decl>,

<decl><name>JOINT_STEREO</name> <init>= <expr><name>SBC_MODE_JOINT_STEREO</name></expr></init></decl>

}</block> <decl><name>mode</name></decl>;</enum>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>channels</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>LOUDNESS</name> <init>= <expr><name>SBC_AM_LOUDNESS</name></expr></init></decl>,

<decl><name>SNR</name> <init>= <expr><name>SBC_AM_SNR</name></expr></init></decl>

}</block> <decl><name>allocation</name></decl>;</enum>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>subbands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitpool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>codesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>joint</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>scale_factor</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>sb_sample_f</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>sb_sample</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crc_ctx</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>uint8_t</name></type> <name>ff_sbc_crc8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crc_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>ff_sbc_calculate_bits</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sbc_frame</name> <operator>*</operator><name>frame</name></expr></argument>, <argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>bits</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
