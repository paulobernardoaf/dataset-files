<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aaccoder_twoloop.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenctab.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOISE_LOW_LIMIT</name></cpp:macro> <cpp:value>4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sclip</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip(x,60,218)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_pns_bits</name><parameter_list>(<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">9</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_for_quantizers_twoloop</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>recomprd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>destbits</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">1024.0</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name>

<operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2.0f</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></else></ternary><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>lambda</name> <operator>/</operator> <literal type="number">120.f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refbits</name> <init>= <expr><name>destbits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>toomanybits</name></decl>, <decl><type ref="prev"/><name>toofewbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>nzs</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nextband</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>maxsf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>minsf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>dists</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>qenergies</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>uplims</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>euplims</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>energies</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>maxvals</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>spread_thr_r</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>min_spread_thr_r</name></decl>, <decl><type ref="prev"/><name>max_spread_thr_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rdlambda</name> <init>= <expr><call><name>av_clipf</name><argument_list>(<argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <literal type="number">120.f</literal> <operator>/</operator> <name>lambda</name></expr></argument>, <argument><expr><literal type="number">0.0625f</literal></expr></argument>, <argument><expr><literal type="number">16.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>nzslope</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rdmin</name> <init>= <expr><literal type="number">0.03125f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rdmax</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sfoffs</name> <init>= <expr><call><name>av_clipf</name><argument_list>(<argument><expr><call><name>log2f</name><argument_list>(<argument><expr><literal type="number">120.0f</literal> <operator>/</operator> <name>lambda</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fflag</name></decl>, <decl><type ref="prev"/><name>minscaler</name></decl>, <decl><type ref="prev"/><name>maxscaler</name></decl>, <decl><type ref="prev"/><name>nminscaler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>its</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxits</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cutoff</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pns_start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>zeroscale</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lambda</name> <operator>&gt;</operator> <literal type="number">120.f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>zeroscale</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><call><name>powf</name><argument_list>(<argument><expr><literal type="number">120.f</literal> <operator>/</operator> <name>lambda</name></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0625f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>zeroscale</name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>bitres</name><operator>.</operator><name>alloc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>destbits</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>bitres</name><operator>.</operator><name>alloc</name></name>

<operator>*</operator> <operator>(</operator><name>lambda</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> </then><else>: <expr><literal type="number">120</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>mid_side</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_type</name></name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>destbits</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>toomanybits</name> <operator>=</operator> <literal type="number">5800</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>toofewbits</name> <operator>=</operator> <name>destbits</name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sfoffs</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rdlambda</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>rdlambda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxits</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>toomanybits</name> <operator>=</operator> <name>destbits</name> <operator>+</operator> <name>destbits</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>toofewbits</name> <operator>=</operator> <name>destbits</name> <operator>-</operator> <name>destbits</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sfoffs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rdlambda</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>rdlambda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><literal type="number">1024</literal> <operator>/</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bandwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rate_bandwidth_multiplier</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bit_rate</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>refbits</name> <operator>*</operator> <name>rate_bandwidth_multiplier</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pns</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>intensity_stereo</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame_bit_rate</name> <operator>*=</operator> <literal type="number">1.15f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bandwidth</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><call><name>AAC_CUTOFF_FROM_BITRATE</name><argument_list>(<argument><expr><name>frame_bit_rate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>cutoff</name></name> <operator>=</operator> <name>bandwidth</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name>bandwidth</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>wlen</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pns_start_pos</name> <operator>=</operator> <name>NOISE_LOW_LIMIT</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>wlen</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>destbits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>destbits</name></expr></argument>, <argument><expr><literal type="number">5800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>toomanybits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>toomanybits</name></expr></argument>, <argument><expr><literal type="number">5800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>toofewbits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>toofewbits</name></expr></argument>, <argument><expr><literal type="number">5800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_spread_thr_r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_spread_thr_r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name><operator>++</operator></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>uplim</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>energy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>spread</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>cutoff</name> <operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>*</operator> <name>zeroscale</name><operator>)</operator> <operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uplim</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyBand</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>ch</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index></name><operator>.</operator><name><name>psy_bands</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>energy</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>*</operator> <name>zeroscale</name><operator>)</operator> <operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>uplim</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>threshold</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>energy</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>energy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>spread</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>spread</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>uplim</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>energies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>energy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nzs</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name>nz</name></expr>;</expr_stmt>

<expr_stmt><expr><name>allz</name> <operator>|=</operator> <name>nz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nz</name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spread_thr_r</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>energy</name> <operator>*</operator> <name>nz</name> <operator>/</operator> <operator>(</operator><name>uplim</name> <operator>*</operator> <name>spread</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min_spread_thr_r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_spread_thr_r</name> <operator>=</operator> <name>max_spread_thr_r</name> <operator>=</operator> <name><name>spread_thr_r</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>min_spread_thr_r</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>min_spread_thr_r</name></expr></argument>, <argument><expr><name><name>spread_thr_r</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_spread_thr_r</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_spread_thr_r</name></expr></argument>, <argument><expr><name><name>spread_thr_r</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>SCALE_ONE_POS</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(

<argument><expr><name>SCALE_ONE_POS</name>

<operator>+</operator> <literal type="number">1.75</literal><operator>*</operator><call><name>log2f</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.00125f</literal></expr></argument>,<argument><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>+</operator> <name>sfoffs</name></expr></argument>,

<argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>minscaler</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minscaler</name></expr></argument>, <argument><expr><name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>minscaler</name></expr></argument>, <argument><expr><name>minscaler</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allz</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_quantize_band_cost_cache_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>minsf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>minsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>minsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minsfidx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>find_max_val</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>scaled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>minsfidx</name> <operator>=</operator> <call><name>coef2minsf</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>minsf</name><index>[<expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>minsfidx</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>euplims</name></expr></argument>, <argument><expr><name>uplims</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>euplims</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>de_psy_factor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8.0f</literal> <operator>/</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nzs</name><index>[<expr><name>g</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>cleanup_factor</name> <init>= <expr><call><name>ff_sqrf</name><argument_list>(<argument><expr><call><name>av_clipf</name><argument_list>(<argument><expr><name>start</name> <operator>/</operator> <operator>(</operator><name>cutoff</name> <operator>*</operator> <literal type="number">0.75f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>energy2uplim</name> <init>= <expr><call><name>find_form_factor</name><argument_list>(

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name><name>nzs</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>w</name></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>+</operator> <name>start</name></expr></argument>,

<argument><expr><name>nzslope</name> <operator>*</operator> <name>cleanup_factor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>energy2uplim</name> <operator>*=</operator> <name>de_psy_factor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>energy2uplim</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>energy2uplim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>energy2uplim</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.015625f</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>energy2uplim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>*=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>rdlambda</name> <operator>*</operator> <name>energy2uplim</name></expr></argument>, <argument><expr><name>rdmin</name></expr></argument>, <argument><expr><name>rdmax</name></expr></argument>)</argument_list></call>

<operator>*</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>energy2uplim</name> <operator>=</operator> <call><name>find_form_factor</name><argument_list>(

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name><name>nzs</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>w</name></expr>]</index></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>+</operator> <name>start</name></expr></argument>,

<argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>energy2uplim</name> <operator>*=</operator> <name>de_psy_factor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>energy2uplim</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>energy2uplim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>energy2uplim</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.015625f</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>energy2uplim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>*=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>rdlambda</name> <operator>*</operator> <name>energy2uplim</name> <operator>*</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>maxsf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>maxsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>maxsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SCALE_MAX_POS</name></expr>;</expr_stmt></block_content></block></for>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>overdist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qstep</name> <init>= <expr><ternary><condition><expr><name>its</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>recomprd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scoefs</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>||</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">218</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tbits</name> <operator>+=</operator> <call><name>ff_pns_bits</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sqenergy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <call><name>quantize_band_cost_cached</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>coefs</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name>scaled</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>cb</name></expr></argument>,

<argument><expr><literal type="number">1.0f</literal></expr></argument>,

<argument><expr><name>INFINITY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqenergy</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>sqenergy</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>dist</name> <operator>-</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qenergies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfdiff</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>-</operator> <name>prev</name> <operator>+</operator> <name>SCALE_DIFF_ZERO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>ff_aac_scalefactor_bits</name><index>[<expr><name>sfdiff</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tbits</name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tbits</name> <operator>&gt;</operator> <name>toomanybits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>recomprd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>SCALE_MAX_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxsf_i</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tbits</name> <operator>&gt;</operator> <literal type="number">5800</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SCALE_MAX_POS</name></expr> </then><else>: <expr><name><name>maxsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_sf</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>maxsf_i</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>qstep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_sf</name> <operator>!=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>new_sf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tbits</name> <operator>&lt;</operator> <name>toofewbits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>recomprd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>SCALE_ONE_POS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_sf</name> <init>= <expr><call><name>FFMAX3</name><argument_list>(<argument><expr><name><name>minsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SCALE_ONE_POS</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>qstep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_sf</name> <operator>!=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>new_sf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qstep</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qstep</name> <operator>&amp;&amp;</operator> <name>tbits</name> <operator>&gt;</operator> <name>toomanybits</name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">217</literal> <operator>&amp;&amp;</operator> <name>changed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qstep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>qstep</name></expr>)</condition>;</do>

<expr_stmt><expr><name>overdist</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fflag</name> <operator>=</operator> <name>tbits</name> <operator>&lt;</operator> <name>toofewbits</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>overdist</name> <operator>||</operator> <name>recomprd</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>recomprd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>||</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">218</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tbits</name> <operator>+=</operator> <call><name>ff_pns_bits</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sqenergy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <call><name>quantize_band_cost_cached</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>coefs</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name>scaled</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name>cb</name></expr></argument>,

<argument><expr><literal type="number">1.0f</literal></expr></argument>,

<argument><expr><name>INFINITY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqenergy</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>sqenergy</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>dist</name> <operator>-</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qenergies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfdiff</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>-</operator> <name>prev</name> <operator>+</operator> <name>SCALE_DIFF_ZERO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>ff_aac_scalefactor_bits</name><index>[<expr><name>sfdiff</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tbits</name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pns</name></name> <operator>&amp;&amp;</operator> <name>its</name> <operator>&gt;</operator> <name>maxits</name><operator>/</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>tbits</name> <operator>&gt;</operator> <name>toofewbits</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>maxoverdist</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ovrfactor</name> <init>= <expr><literal type="number">1.f</literal><operator>+</operator><operator>(</operator><name>maxits</name><operator>-</operator><name>its</name><operator>)</operator><operator>*</operator><literal type="number">16.f</literal><operator>/</operator><name>maxits</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>overdist</name> <operator>=</operator> <name>recomprd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name><operator>++</operator></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <name>SCALE_ONE_POS</name> <operator>&amp;&amp;</operator> <name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>*</operator><name>ovrfactor</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ovrdist</name> <init>= <expr><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>maxoverdist</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxoverdist</name></expr></argument>, <argument><expr><name>ovrdist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>overdist</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>overdist</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>minspread</name> <init>= <expr><name>max_spread_thr_r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>maxspread</name> <init>= <expr><name>min_spread_thr_r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>zspread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zeroable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zeroed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxzeroed</name></decl>, <decl><type ref="prev"/><name>zloop</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name><operator>++</operator></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>pns_start_pos</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>minspread</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>minspread</name></expr></argument>, <argument><expr><name><name>spread_thr_r</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxspread</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxspread</name></expr></argument>, <argument><expr><name><name>spread_thr_r</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zeroable</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>zspread</name> <operator>=</operator> <operator>(</operator><name>maxspread</name><operator>-</operator><name>minspread</name><operator>)</operator> <operator>*</operator> <literal type="number">0.0125f</literal> <operator>+</operator> <name>minspread</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zspread</name> <operator>=</operator> <call><name>FFMIN3</name><argument_list>(<argument><expr><name>min_spread_thr_r</name> <operator>*</operator> <literal type="number">8.f</literal></expr></argument>, <argument><expr><name>zspread</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>toomanybits</name> <operator>-</operator> <name>tbits</name><operator>)</operator> <operator>*</operator> <name>min_spread_thr_r</name> <operator>+</operator> <operator>(</operator><name>tbits</name> <operator>-</operator> <name>toofewbits</name><operator>)</operator> <operator>*</operator> <name>max_spread_thr_r</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>toomanybits</name> <operator>-</operator> <name>toofewbits</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxzeroed</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>zeroable</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>zeroable</name> <operator>*</operator> <name>its</name> <operator>+</operator> <name>maxits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>maxits</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>zloop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>zloop</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>zloop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>loopovrfactor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>zloop</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><name>ovrfactor</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>loopminsf</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>zloop</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name><operator>)</operator></expr> </then><else>: <expr><name>SCALE_ONE_POS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mcb</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>g</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zeroed</name> <operator>&lt;</operator> <name>maxzeroed</name></expr>;</condition> <incr><expr><name>g</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>pns_start_pos</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>can_pns</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>spread_thr_r</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;=</operator> <name>zspread</name>

<operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <name>loopminsf</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <name>loopovrfactor</name><operator>*</operator><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>mcb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>mcb</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>zeroed</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>zeroed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>recomprd</name> <operator>=</operator> <name>fflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>overdist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <name>SCALE_MAX_POS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>maxscaler</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>minscaler</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxscaler</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxscaler</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>minscaler</name> <operator>=</operator> <name>nminscaler</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>minscaler</name></expr></argument>, <argument><expr><name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>, <argument><expr><name>SCALE_MAX_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>its</name> <operator>&gt;</operator> <name>maxits</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>its</name> <operator>&gt;</operator> <name>maxits</name><operator>*</operator><literal type="number">2</literal><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edepth</name> <init>= <expr><name>depth</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>uplmax</name> <init>= <expr><name>its</name> <operator>/</operator> <operator>(</operator><name>maxits</name><operator>*</operator><literal type="number">0.25f</literal><operator>)</operator> <operator>+</operator> <literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>uplmax</name> <operator>*=</operator> <ternary><condition><expr><operator>(</operator><name>tbits</name> <operator>&gt;</operator> <name>destbits</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>tbits</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>destbits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prevsc</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coefs</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmb</name> <init>= <expr><call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mindeltasf</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prev</name> <operator>-</operator> <name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxdeltasf</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>SCALE_MAX_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>, <argument><expr><name>prev</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>cmb</name> <operator>||</operator> <name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mindeltasf</name></expr></argument>, <argument><expr><name><name>minsf</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>edepth</name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument> &gt;</argument_list></name> <name>mindeltasf</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>qenergy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>qenergy</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>maxsf</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>maxsf</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>depth</name> <operator>&amp;&amp;</operator> <name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>maxsf</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>maxsf</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sqenergy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <call><name>quantize_band_cost_cached</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>coefs</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name>scaled</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>cb</name></expr></argument>,

<argument><expr><literal type="number">1.0f</literal></expr></argument>,

<argument><expr><name>INFINITY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqenergy</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>sqenergy</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>dist</name> <operator>-</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qenergies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>mindeltasf</name> <operator>||</operator> <operator>(</operator>

<operator>(</operator><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>uplmax</name><operator>*</operator><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>fabsf</name><argument_list>(<argument><expr><name><name>qenergies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>-</operator><name><name>energies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>)</operator>

<operator>)</operator> <operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tbits</name> <operator>&gt;</operator> <name>toofewbits</name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>maxdeltasf</name></expr></argument>, <argument><expr><name><name>maxsf</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>fabsf</name><argument_list>(<argument><expr><name><name>qenergies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>-</operator><name><name>energies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>)</operator></expr>

)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>maxdeltasf</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>qenergy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>qenergy</name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sqenergy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>+=</operator> <call><name>quantize_band_cost_cached</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <name>w2</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>coefs</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name>scaled</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>cb</name></expr></argument>,

<argument><expr><literal type="number">1.0f</literal></expr></argument>,

<argument><expr><name>INFINITY</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqenergy</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>sqenergy</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dist</name> <operator>-=</operator> <name>bits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>euplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>uplims</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dists</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qenergies</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>maxsf</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>maxsf</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>mindeltasf</name></expr></argument>, <argument><expr><name>maxdeltasf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>!=</operator> <name>prevsc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nminscaler</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nminscaler</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prevsf</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>prevsf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name>prev</name> <operator>-</operator> <name>SCALE_MAX_DIFF</name></expr></argument>, <argument><expr><name>prev</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fflag</name> <operator>&amp;&amp;</operator> <name>prevsf</name> <operator>!=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fflag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>its</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>fflag</name> <operator>&amp;&amp;</operator> <name>its</name> <operator>&lt;</operator> <name>maxits</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>ff_init_nextband_map</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name>nextband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <call><name>find_min_book</name><argument_list>(<argument><expr><name><name>maxvals</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_sfdelta_can_remove_band</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name>nextband</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>av_unused</name> <name>int</name></type> <name>sfdiff</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>-</operator> <name>prev</name> <operator>+</operator> <name>SCALE_DIFF_ZERO</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>sfdiff</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sfdiff</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>SCALE_MAX_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
