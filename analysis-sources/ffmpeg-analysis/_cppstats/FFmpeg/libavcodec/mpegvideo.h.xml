<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegvideo.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_resilience.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"motion_est.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegpicture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideoencdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideodata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixblockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ratecontrol.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"videodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timecode.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_THREADS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_B_FRAMES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQ_END_CODE</name></cpp:macro> <cpp:value>0x000001b7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQ_START_CODE</name></cpp:macro> <cpp:value>0x000001b3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOP_START_CODE</name></cpp:macro> <cpp:value>0x000001b8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICTURE_START_CODE</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_MIN_START_CODE</name></cpp:macro> <cpp:value>0x00000101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_MAX_START_CODE</name></cpp:macro> <cpp:value>0x000001af</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXT_START_CODE</name></cpp:macro> <cpp:value>0x000001b5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_START_CODE</name></cpp:macro> <cpp:value>0x000001b2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_START_CODE</name></cpp:macro> <cpp:value>0x000001b7</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MpegEncContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_dc_scale</name></decl>, <name>c_dc_scale</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ac_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>block_last_index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h263_aic</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ScanTable</name></type> <name>inter_scantable</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ScanTable</name></type> <name>intra_scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScanTable</name></type> <name>intra_h_scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScanTable</name></type> <name>intra_v_scantable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gop_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intra_only</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>bit_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>OutputFormat</name></name></type> <name>out_format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h263_pred</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pb_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h263_plus</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h263_flv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fixed_qscale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>encoding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_b_frames</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>luma_elim_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_elim_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>strict_std_compliance</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>workaround_bugs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>codec_tag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>context_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>input_picture_number</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>coded_picture_number</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>picture_number</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>picture_in_gop_number</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>, <name>mb_height</name>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_stride</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b8_stride</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h_edge_pos</name></decl>, <name>v_edge_pos</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>uvlinesize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>picture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier><modifier>*</modifier></type><name>input_picture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier><modifier>*</modifier></type><name>reordered_input_picture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>user_specified_pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>dts_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>reordered_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_mb_y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>end_mb_y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name><name>thread_context</name><index>[<expr><name>MAX_THREADS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_context_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Picture</name></type> <name>last_picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name></type> <name>next_picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name></type> <name>new_picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name></type> <name>current_picture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>last_picture_ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>next_picture_ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>current_picture_ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>last_dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dc_val_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>dc_val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>y_dc_scale_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c_dc_scale_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>chroma_qscale_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>coded_block_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>coded_block</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>ac_val_base</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>ac_val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_skipped</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mbskip_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mbintra_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cbp_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pred_dir_table</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ScratchpadContext</name></type> <name>sc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chroma_qscale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lambda</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lambda2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lambda_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>adaptive_quant</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dquant</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>closed_gop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pict_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vbv_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_pict_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>last_non_b_pict_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>droppable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_rate_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>mpeg2_frame_rate_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>last_lambda_for</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>skipdct</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>unrestricted_mv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h263_long_vectors</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FDCTDSPContext</name></type> <name>fdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264ChromaContext</name></type> <name>h264chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HpelDSPContext</name></type> <name>hdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MECmpContext</name></type> <name>mecc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegVideoDSPContext</name></type> <name>mdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegvideoEncDSPContext</name></type> <name>mpvencdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PixblockDSPContext</name></type> <name>pdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QpelDSPContext</name></type> <name>qdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VideoDSPContext</name></type> <name>vdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H263DSPContext</name></type> <name>h263dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>f_code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b_code</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p_mv_table_base</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_forw_mv_table_base</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_back_mv_table_base</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_bidir_forw_mv_table_base</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_bidir_back_mv_table_base</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_direct_mv_table_base</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>p_field_mv_table_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>b_field_mv_table_base</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p_mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_forw_mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_back_mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_bidir_forw_mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_bidir_back_mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>b_direct_mv_table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>p_field_mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>b_field_mv_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>p_field_select_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>b_field_select_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_est</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>me_penalty_compensation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_pre</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mv_dir</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_DIR_FORWARD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_DIR_BACKWARD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_DIRECT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>mv_type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_TYPE_16X16</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_TYPE_8X8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_TYPE_16X8</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_TYPE_FIELD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MV_TYPE_DMV</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>field_select</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>last_mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fcode_tab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>direct_scale_mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MotionEstContext</name></type> <name>me</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_rounding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <name>mb_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_skip_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_intra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>mb_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>block_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>block_wrap</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_index2xy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>chroma_intra_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>inter_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>chroma_inter_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force_duplicated_matrix</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>intra_quant_bias</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>inter_quant_bias</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>min_qcoeff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_qcoeff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ac_esc_length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>intra_ac_vlc_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>intra_ac_vlc_last_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>intra_chroma_ac_vlc_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>intra_chroma_ac_vlc_last_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inter_ac_vlc_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>inter_ac_vlc_last_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>luma_dc_vlc_length</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNI_AC_ENC_INDEX</name><parameter_list>(<parameter><type><name>run</name></type></parameter>,<parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((run)*128 + (level))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>coded_score</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>q_intra_matrix</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>q_chroma_intra_matrix</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>q_inter_matrix</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>q_intra_matrix16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>q_chroma_intra_matrix16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>q_inter_matrix16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>dct_error_sum</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dct_count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>dct_offset</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>total_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>stuffing_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_lambda</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>RateControlContext</name></type> <name>rc_context</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mv_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tex_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_tex_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>f_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>misc_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>last_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>resync_mb_x</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>resync_mb_y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>last_resync_gb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_num_left</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>next_p_frame_damaged</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ParseContext</name></type> <name>parse_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gob_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>obmc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mb_info</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prev_mb_info</name></decl>, <name>last_mb_info</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mb_info_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_info_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ehc_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_strategy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>umvplus</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h263_aic_dir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>h263_slice_structured</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alt_inter_vlc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>modified_quant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>loop_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>custom_pcf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>studio_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct_precision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time_increment_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_time_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time_base</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_non_b_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pp_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pb_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pp_field_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>pb_field_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>real_sprite_warping_points</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sprite_offset</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>sprite_delta</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mcsel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_precision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quarter_sample</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>aspect_ratio_info</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sprite_warping_accuracy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_partitioning</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>partitioned_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>low_delay</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vo_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>tex_pb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mpeg_quant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padding_bug_score</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>divx_packed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitstream_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bitstream_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>allocated_bitstream_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv10_version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>rv10_first_dc_coded</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>MJpegContext</name></name> <modifier>*</modifier></type><name>mjpeg_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>esc_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>huffman</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_table_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rl_table_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rl_chroma_table_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc_table_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_skip_mb_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>first_slice_line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flipflop_rounding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msmpeg4_version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>per_mb_rl_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>esc3_level_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>esc3_run_length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>ac_stats</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAX_LEVEL</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>MAX_RUN</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inter_intra_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mspel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gop_picture_number</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>last_mv_dir</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vbv_delay_ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>progressive_sequence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mpeg_f_code</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a53_cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>picture_structure</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timecode_frame_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>intra_dc_precision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_pred_frame_dct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top_field_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>concealment_motion_vectors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q_scale_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>brd_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intra_vlc_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alternate_scan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seq_disp_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_format</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_FORMAT_COMPONENT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_FORMAT_PAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_FORMAT_NTSC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_FORMAT_SECAM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_FORMAT_MAC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDEO_FORMAT_UNSPECIFIED</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>repeat_first_field</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_420_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_format</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_420</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_422</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_444</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_x_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_y_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>progressive_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>full_pel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interlaced_dct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_field</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>drop_frame_timecode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scan_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rtp_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rtp_payload_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tc_opt_str</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVTimecode</name></type> <name>tc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr_lastgob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>swap_uv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pack_pblocks</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>pblocks</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>blocks</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt> 

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode_mb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl> 

<expr_stmt><expr><call><name>int32_t</name> <argument_list>(<argument><expr><operator>*</operator><name>block32</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpcm_direction</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>dpcm_macroblock</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_ERROR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_END</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLICE_NOEND</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dct_unquantize_mpeg1_intra</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dct_unquantize_mpeg1_inter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dct_unquantize_mpeg2_intra</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dct_unquantize_mpeg2_inter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dct_unquantize_h263_intra</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dct_unquantize_h263_inter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dct_unquantize_intra</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dct_unquantize_inter</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>dct_quantize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fast_dct_quantize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>denoise_dct</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MpegEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>mpv_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>quantizer_noise_shaping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rc_qsquish</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rc_qmod_amp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_qmod_freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rc_initial_cplx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rc_buffer_aggressivity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>border_masking</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lmin</name></decl>, <name>lmax</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vbv_ignore_qmax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rc_eq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>cplx_tab</name></decl>, <modifier>*</modifier><name>bits_tab</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>context_reinit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ERContext</name></type> <name>er</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name><name>tmp_frames</name><index>[<expr><name>MAX_B_FRAMES</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_frame_strategy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_sensitivity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_skip_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_skip_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_skip_exp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_skip_cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scenechange_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noise_reduction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intra_penalty</name></decl>;</decl_stmt>

}</block></struct></type> <name>MpegEncContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_FLAG_SKIP_RD</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_FLAG_STRICT_GOP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_FLAG_QP_RD</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_FLAG_CBP_RD</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_FLAG_NAQ</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_FLAG_MV0</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_OPT_CMP_FUNC</name></cpp:macro> <cpp:value>{ "sad", "Sum of absolute differences, fast", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_SAD }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "sse", "Sum of squared errors", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_SSE }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "satd", "Sum of absolute Hadamard transformed differences", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_SATD }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "dct", "Sum of absolute DCT transformed differences", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_DCT }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "psnr", "Sum of squared quantization errors, low quality", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_PSNR }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "bit", "Number of bits needed for the block", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_BIT }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "rd", "Rate distortion optimal, slow", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_RD }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "zero", "Zero", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_ZERO }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "vsad", "Sum of absolute vertical differences", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_VSAD }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "vsse", "Sum of squared vertical differences", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_VSSE }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "nsse", "Noise preserving sum of squared differences", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_NSSE }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "dct264", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_DCT264 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "dctmax", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_DCTMAX }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "chroma", NULL, 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_CHROMA }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, { "msad", "Sum of absolute differences, median predicted", 0, AV_OPT_TYPE_CONST, {.i64 = FF_CMP_MEDIAN_SAD }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FF_MPV_OFFSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MpegEncContext, x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_OPT_FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_MPV_COMMON_OPTS</name></cpp:macro> <cpp:value>FF_MPV_OPT_CMP_FUNC, { "mpv_flags", "Flags common for all mpegvideo-based encoders.", FF_MPV_OFFSET(mpv_flags), AV_OPT_TYPE_FLAGS, { .i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "mpv_flags" },{ "skip_rd", "RD optimal MB level residual skipping", 0, AV_OPT_TYPE_CONST, { .i64 = FF_MPV_FLAG_SKIP_RD }, 0, 0, FF_MPV_OPT_FLAGS, "mpv_flags" },{ "strict_gop", "Strictly enforce gop size", 0, AV_OPT_TYPE_CONST, { .i64 = FF_MPV_FLAG_STRICT_GOP }, 0, 0, FF_MPV_OPT_FLAGS, "mpv_flags" },{ "qp_rd", "Use rate distortion optimization for qp selection", 0, AV_OPT_TYPE_CONST, { .i64 = FF_MPV_FLAG_QP_RD }, 0, 0, FF_MPV_OPT_FLAGS, "mpv_flags" },{ "cbp_rd", "use rate distortion optimization for CBP", 0, AV_OPT_TYPE_CONST, { .i64 = FF_MPV_FLAG_CBP_RD }, 0, 0, FF_MPV_OPT_FLAGS, "mpv_flags" },{ "naq", "normalize adaptive quantization", 0, AV_OPT_TYPE_CONST, { .i64 = FF_MPV_FLAG_NAQ }, 0, 0, FF_MPV_OPT_FLAGS, "mpv_flags" },{ "mv0", "always try a mb with mv=&lt;0,0&gt;", 0, AV_OPT_TYPE_CONST, { .i64 = FF_MPV_FLAG_MV0 }, 0, 0, FF_MPV_OPT_FLAGS, "mpv_flags" },{ "luma_elim_threshold", "single coefficient elimination threshold for luminance (negative values also consider dc coefficient)",FF_MPV_OFFSET(luma_elim_threshold), AV_OPT_TYPE_INT, { .i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS },{ "chroma_elim_threshold", "single coefficient elimination threshold for chrominance (negative values also consider dc coefficient)",FF_MPV_OFFSET(chroma_elim_threshold), AV_OPT_TYPE_INT, { .i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS },{ "quantizer_noise_shaping", NULL, FF_MPV_OFFSET(quantizer_noise_shaping), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, FF_MPV_OPT_FLAGS },{ "error_rate", "Simulate errors in the bitstream to test error concealment.", FF_MPV_OFFSET(error_rate), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, FF_MPV_OPT_FLAGS },{"qsquish", "how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)", FF_MPV_OFFSET(rc_qsquish), AV_OPT_TYPE_FLOAT, {.dbl = 0 }, 0, 99, FF_MPV_OPT_FLAGS}, {"rc_qmod_amp", "experimental quantizer modulation", FF_MPV_OFFSET(rc_qmod_amp), AV_OPT_TYPE_FLOAT, {.dbl = 0 }, -FLT_MAX, FLT_MAX, FF_MPV_OPT_FLAGS}, {"rc_qmod_freq", "experimental quantizer modulation", FF_MPV_OFFSET(rc_qmod_freq), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS}, {"rc_eq", "Set rate control equation. When computing the expression, besides the standard functions " "defined in the section 'Expression Evaluation', the following functions are available: " "bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv " "fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.", FF_MPV_OFFSET(rc_eq), AV_OPT_TYPE_STRING, .flags = FF_MPV_OPT_FLAGS }, {"rc_init_cplx", "initial complexity for 1-pass encoding", FF_MPV_OFFSET(rc_initial_cplx), AV_OPT_TYPE_FLOAT, {.dbl = 0 }, -FLT_MAX, FLT_MAX, FF_MPV_OPT_FLAGS}, {"rc_buf_aggressivity", "currently useless", FF_MPV_OFFSET(rc_buffer_aggressivity), AV_OPT_TYPE_FLOAT, {.dbl = 1.0 }, -FLT_MAX, FLT_MAX, FF_MPV_OPT_FLAGS}, {"border_mask", "increase the quantizer for macroblocks close to borders", FF_MPV_OFFSET(border_masking), AV_OPT_TYPE_FLOAT, {.dbl = 0 }, -FLT_MAX, FLT_MAX, FF_MPV_OPT_FLAGS}, {"lmin", "minimum Lagrange factor (VBR)", FF_MPV_OFFSET(lmin), AV_OPT_TYPE_INT, {.i64 = 2*FF_QP2LAMBDA }, 0, INT_MAX, FF_MPV_OPT_FLAGS }, {"lmax", "maximum Lagrange factor (VBR)", FF_MPV_OFFSET(lmax), AV_OPT_TYPE_INT, {.i64 = 31*FF_QP2LAMBDA }, 0, INT_MAX, FF_MPV_OPT_FLAGS }, {"ibias", "intra quant bias", FF_MPV_OFFSET(intra_quant_bias), AV_OPT_TYPE_INT, {.i64 = FF_DEFAULT_QUANT_BIAS }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"pbias", "inter quant bias", FF_MPV_OFFSET(inter_quant_bias), AV_OPT_TYPE_INT, {.i64 = FF_DEFAULT_QUANT_BIAS }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"rc_strategy", "ratecontrol method", FF_MPV_OFFSET(rc_strategy), AV_OPT_TYPE_INT, {.i64 = 0 }, 0, 1, FF_MPV_OPT_FLAGS | AV_OPT_FLAG_DEPRECATED, "rc_strategy" }, { "ffmpeg", "deprecated, does nothing", 0, AV_OPT_TYPE_CONST, { .i64 = 0 }, 0, 0, FF_MPV_OPT_FLAGS | AV_OPT_FLAG_DEPRECATED, "rc_strategy" }, { "xvid", "deprecated, does nothing", 0, AV_OPT_TYPE_CONST, { .i64 = 0 }, 0, 0, FF_MPV_OPT_FLAGS | AV_OPT_FLAG_DEPRECATED, "rc_strategy" }, {"motion_est", "motion estimation algorithm", FF_MPV_OFFSET(motion_est), AV_OPT_TYPE_INT, {.i64 = FF_ME_EPZS }, FF_ME_ZERO, FF_ME_XONE, FF_MPV_OPT_FLAGS, "motion_est" }, { "zero", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = FF_ME_ZERO }, 0, 0, FF_MPV_OPT_FLAGS, "motion_est" }, { "epzs", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = FF_ME_EPZS }, 0, 0, FF_MPV_OPT_FLAGS, "motion_est" }, { "xone", NULL, 0, AV_OPT_TYPE_CONST, { .i64 = FF_ME_XONE }, 0, 0, FF_MPV_OPT_FLAGS, "motion_est" }, { "force_duplicated_matrix", "Always write luma and chroma matrix for mjpeg, useful for rtp streaming.", FF_MPV_OFFSET(force_duplicated_matrix), AV_OPT_TYPE_BOOL, {.i64 = 0 }, 0, 1, FF_MPV_OPT_FLAGS }, {"b_strategy", "Strategy to choose between I/P/B-frames", FF_MPV_OFFSET(b_frame_strategy), AV_OPT_TYPE_INT, {.i64 = 0 }, 0, 2, FF_MPV_OPT_FLAGS }, {"b_sensitivity", "Adjust sensitivity of b_frame_strategy 1", FF_MPV_OFFSET(b_sensitivity), AV_OPT_TYPE_INT, {.i64 = 40 }, 1, INT_MAX, FF_MPV_OPT_FLAGS }, {"brd_scale", "Downscale frames for dynamic B-frame decision", FF_MPV_OFFSET(brd_scale), AV_OPT_TYPE_INT, {.i64 = 0 }, 0, 3, FF_MPV_OPT_FLAGS }, {"skip_threshold", "Frame skip threshold", FF_MPV_OFFSET(frame_skip_threshold), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"skip_factor", "Frame skip factor", FF_MPV_OFFSET(frame_skip_factor), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"skip_exp", "Frame skip exponent", FF_MPV_OFFSET(frame_skip_exp), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"skip_cmp", "Frame skip compare function", FF_MPV_OFFSET(frame_skip_cmp), AV_OPT_TYPE_INT, {.i64 = FF_CMP_DCTMAX }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS, "cmp_func" }, {"sc_threshold", "Scene change threshold", FF_MPV_OFFSET(scenechange_threshold), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"noise_reduction", "Noise reduction", FF_MPV_OFFSET(noise_reduction), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"mpeg_quant", "Use MPEG quantizers instead of H.263", FF_MPV_OFFSET(mpeg_quant), AV_OPT_TYPE_INT, {.i64 = 0 }, 0, 1, FF_MPV_OPT_FLAGS }, {"ps", "RTP payload size in bytes", FF_MPV_OFFSET(rtp_payload_size), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"mepc", "Motion estimation bitrate penalty compensation (1.0 = 256)", FF_MPV_OFFSET(me_penalty_compensation), AV_OPT_TYPE_INT, {.i64 = 256 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"mepre", "pre motion estimation", FF_MPV_OFFSET(me_pre), AV_OPT_TYPE_INT, {.i64 = 0 }, INT_MIN, INT_MAX, FF_MPV_OPT_FLAGS }, {"intra_penalty", "Penalty for intra blocks in block decision", FF_MPV_OFFSET(intra_penalty), AV_OPT_TYPE_INT, {.i64 = 0 }, 0, INT_MAX/2, FF_MPV_OPT_FLAGS }, {"a53cc", "Use A53 Closed Captions (if available)", FF_MPV_OFFSET(a53_cc), AV_OPT_TYPE_BOOL, {.i64 = 1}, 0, 1, FF_MPV_OPT_FLAGS },</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>ff_mpv_generic_options</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ff_mpv_common_defaults</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_dct_encode_init_x86</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpv_common_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_common_init_arm</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_common_init_axp</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_common_init_neon</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_common_init_ppc</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_common_init_x86</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_common_init_mips</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpv_common_frame_size_change</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_common_end</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_decode_defaults</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_decode_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_reconstruct_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_report_decode_progress</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpv_frame_start</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_frame_end</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpv_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_encode_init_x86</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpv_encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpv_encode_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpv_reallocate_putbitbuffer</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>threshold</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size_increase</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_clean_intra_table_entries</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpeg_draw_horiz_band</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpeg_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_print_debug_info</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpv_export_qp_table</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qp_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_write_quant_matrix</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_update_duplicate_context</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpeg_update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_set_qscale</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpv_idct_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dct_encode_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>ff_convert_matrix</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>qmat</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>, <argument><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>qmat16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><name>quant_matrix</name></expr></argument>, <argument><expr><name>int</name> <name>bias</name></expr></argument>, <argument><expr><name>int</name> <name>qmin</name></expr></argument>, <argument><expr><name>int</name> <name>qmax</name></expr></argument>, <argument><expr><name>int</name> <name>intra</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ff_dct_quantize_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_block_permute</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>permutation</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_init_block_index</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>ff_mpv_motion</name><argument_list>(<argument><expr><name>MpegEncContext</name> <operator>*</operator><name>s</name></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_y</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cb</name></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><name>dest_cr</name></expr></argument>, <argument><expr><name>int</name> <name>dir</name></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><operator>*</operator><name>ref_picture</name></expr></argument>,

<argument><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>pix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>qpel_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>qpix_op</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_update_block_index</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bytes_per_pixel</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name><init>= <expr><operator>(</operator><literal type="number">8</literal><operator>*</operator><name>bytes_per_pixel</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name><operator>)</operator> <operator>*</operator> <name>block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name><operator>)</operator> <operator>*</operator> <name>block_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_bits_diff</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bits</name><init>= <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>last</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>last_bits</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<return>return <expr><name>bits</name> <operator>-</operator> <name>last</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>mpeg_get_qscale</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qscale</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

</unit>
