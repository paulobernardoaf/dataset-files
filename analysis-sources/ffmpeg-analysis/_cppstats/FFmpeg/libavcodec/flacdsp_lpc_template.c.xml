<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\flacdsp_lpc_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sum_type</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MUL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLIP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FSUF</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_JOIN(n ##_, SAMPLE_SIZE)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SAMPLE_SIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sum_type</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL64(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clipl_int32(x)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sum_type</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) * (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPC1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int c = coefs[(x)-1]; p0 += MUL(c, s); s = smp[i-(x)+1]; p1 += MUL(c, s); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name> <name>FUNC</name></type>(<name>lpc_encode_unrolled</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>smp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>big</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>smp</name><index>[<expr><name>i</name><operator>-</operator><name>order</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sum_type</name></type> <name>p0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>big</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">32</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">31</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">31</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">30</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">30</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">29</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">29</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">28</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">28</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">27</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">27</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">26</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">26</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">25</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">25</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">24</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">24</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">23</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">23</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">22</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">22</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">21</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">21</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">20</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">20</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">19</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">19</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">18</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">18</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">17</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">17</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">16</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">15</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">15</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">14</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">14</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">13</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">13</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">12</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">11</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">11</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">10</literal></expr>:</case> <macro><name>LPC1</name><argument_list>(<argument><literal type="number">10</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">9</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">9</literal></argument>)</argument_list></macro>

<macro><name>LPC1</name><argument_list>( <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>LPC1</name><argument_list>( <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<macro><name>LPC1</name><argument_list>( <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<macro><name>LPC1</name><argument_list>( <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>LPC1</name><argument_list>( <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>LPC1</name><argument_list>( <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>LPC1</name><argument_list>( <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>LPC1</name><argument_list>( <argument><literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">7</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">7</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">6</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">6</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">5</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">4</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">3</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">2</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<case>case <expr><literal type="number">1</literal></expr>:</case> <macro><name>LPC1</name><argument_list>( <argument><literal type="number">1</literal></argument>)</argument_list></macro>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>-</operator> <call><name>CLIP</name><argument_list>(<argument><expr><name>p0</name> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>CLIP</name><argument_list>(<argument><expr><name>p1</name> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>flac_lpc_encode_c</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>smp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>smp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sum_type</name></type> <name>p0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>coefs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>+=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>+=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>-</operator> <call><name>CLIP</name><argument_list>(<argument><expr><name>p0</name> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>CLIP</name><argument_list>(<argument><expr><name>p1</name> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<switch>switch <condition>(<expr><name>order</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lpc_encode_unrolled</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
