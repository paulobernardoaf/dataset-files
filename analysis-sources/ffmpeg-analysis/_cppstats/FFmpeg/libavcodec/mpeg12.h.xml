<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpeg12.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12vlc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>uint8_t</name></type> <name><name>ff_mpeg12_static_rl_table_store</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>MAX_RUN</name> <operator>+</operator> <name>MAX_LEVEL</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ff_mpeg12_common_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_2D_VLC_RL</name><parameter_list>(<parameter><type><name>rl</name></type></parameter>, <parameter><type><name>static_size</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{static RL_VLC_ELEM rl_vlc_table[static_size];rl.rl_vlc[0] = rl_vlc_table;ff_init_2d_vlc_rl(&amp;rl, static_size, flags);}</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>ff_init_2d_vlc_rl</name><parameter_list>(<parameter><decl><type><name>RLTable</name> <modifier>*</modifier></type><name>rl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>static_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decode_dc</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>component</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>component</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_dc_lum_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ff_dc_chroma_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid dc code at\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0xffff</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>get_xbits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>diff</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_mpeg1_decode_block_intra</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>scantable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>last_dc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpeg1_clean_buffers</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_mpeg1_find_frame_end</name><parameter_list>(<parameter><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpeg1_encode_picture_header</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>picture_number</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpeg1_encode_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpeg1_encode_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpeg1_encode_slice_header</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mpeg12_find_best_frame_rate</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ext_n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ext_d</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nonstandard</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
