<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\amrwbdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_pitch_delay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMR_USE_16BIT_TABLES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amrwbdata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mips/amrwbdec_mips.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AMRWBContext</name> <block>{

<decl_stmt><decl><type><name>AMRWBFrame</name></type> <name>frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>Mode</name></name></type> <name>fr_cur_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fr_quality</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>isf_cur</name><index>[<expr><name>LP_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>isf_q_past</name><index>[<expr><name>LP_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>isf_past_final</name><index>[<expr><name>LP_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>isp</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>LP_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>isp_sub4_past</name><index>[<expr><name>LP_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>lp_coef</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>LP_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>base_pitch_lag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pitch_lag_int</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>excitation_buf</name><index>[<expr><name>AMRWB_P_DELAY_MAX</name> <operator>+</operator> <name>LP_ORDER</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>pitch_vector</name><index>[<expr><name>AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>fixed_vector</name><index>[<expr><name>AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>prediction_error</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>pitch_gain</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>fixed_gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>tilt_coef</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>prev_sparse_fixed_gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>prev_ir_filter_nr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>prev_tr_gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>samples_az</name><index>[<expr><name>LP_ORDER</name> <operator>+</operator> <name>AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>samples_up</name><index>[<expr><name>UPS_MEM_SIZE</name> <operator>+</operator> <name>AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>samples_hb</name><index>[<expr><name>LP_ORDER_16k</name> <operator>+</operator> <name>AMRWB_SFR_SIZE_16k</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>hpf_31_mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <name><name>hpf_400_mem</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>demph_mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>bpf_6_7_mem</name><index>[<expr><name>HB_FIR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>lpf_7_mem</name><index>[<expr><name>HB_FIR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>first_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ACELPFContext</name></type> <name>acelpf_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ACELPVContext</name></type> <name>acelpv_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CELPFContext</name></type> <name>celpf_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CELPMContext</name></type> <name>celpm_ctx</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AMRWBContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>amrwb_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"multi-channel AMR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">16000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>excitation_buf</name><index>[<expr><name>AMRWB_P_DELAY_MAX</name> <operator>+</operator> <name>LP_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_past_final</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>isf_init</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prediction_error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>MIN_ENERGY</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_acelp_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>acelpf_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_vectors_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>acelpv_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>celpf_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_math_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>celpm_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_mime_header</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_quality</name></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_isf_indices_36b</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ind</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>isf_q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dico1_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>dico2_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dico21_isf_36b</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name><name>dico22_isf_36b</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <name><name>dico23_isf_36b</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_isf_indices_46b</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ind</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>isf_q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dico1_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>dico2_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dico21_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>dico22_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name><name>dico23_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <name><name>dico24_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>+=</operator> <name><name>dico25_isf</name><index>[<expr><name><name>ind</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>isf_add_mean_and_past</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>isf_q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>isf_past</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>isf_q</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>isf_mean</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>isf_q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>PRED_FACTOR</name> <operator>*</operator> <name><name>isf_past</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>isf_past</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>interpolate_isp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name><name>isp_q</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>LP_ORDER</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>isp4_past</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><name><name>isfp_inter</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isp_q</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>c</name><operator>)</operator> <operator>*</operator> <name><name>isp4_past</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>isp_q</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_pitch_lag_high</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lag_int</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lag_frac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_index</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>base_lag_int</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subframe</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>subframe</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pitch_index</name> <operator>&lt;</operator> <literal type="number">376</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>+</operator> <literal type="number">137</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <name>pitch_index</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>lag_int</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">136</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pitch_index</name> <operator>&lt;</operator> <literal type="number">440</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>+</operator> <literal type="number">257</literal> <operator>-</operator> <literal type="number">376</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>lag_int</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">256</literal> <operator>-</operator> <literal type="number">376</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <name>pitch_index</name> <operator>-</operator> <literal type="number">280</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>base_lag_int</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>*</operator><name>lag_int</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><operator>*</operator><name>lag_frac</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><name>AMRWB_P_DELAY_MIN</name></expr></argument>, <argument><expr><name>AMRWB_P_DELAY_MAX</name> <operator>-</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <name>pitch_index</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>lag_int</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>+=</operator> <operator>*</operator><name>base_lag_int</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_pitch_lag_low</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lag_int</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lag_frac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_index</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>base_lag_int</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subframe</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>Mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>subframe</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>subframe</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>MODE_6k60</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pitch_index</name> <operator>&lt;</operator> <literal type="number">116</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>+</operator> <literal type="number">69</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>lag_int</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">68</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <name>pitch_index</name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>base_lag_int</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>*</operator><name>lag_int</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><operator>*</operator><name>lag_frac</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><name>AMRWB_P_DELAY_MIN</name></expr></argument>, <argument><expr><name>AMRWB_P_DELAY_MAX</name> <operator>-</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_frac</name> <operator>=</operator> <operator>(</operator><name>pitch_index</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>lag_int</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lag_int</name> <operator>+=</operator> <operator>*</operator><name>base_lag_int</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_pitch_vector</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AMRWBSubFrame</name> <modifier>*</modifier></type><name>amr_subframe</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>subframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pitch_lag_int</name></decl>, <decl><type ref="prev"/><name>pitch_lag_frac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>exc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>Mode</name></name></type> <name>mode</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;=</operator> <name>MODE_8k85</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_pitch_lag_low</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pitch_lag_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch_lag_frac</name></expr></argument>, <argument><expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>adap</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>base_pitch_lag</name></name></expr></argument>, <argument><expr><name>subframe</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_pitch_lag_high</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pitch_lag_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pitch_lag_frac</name></expr></argument>, <argument><expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>adap</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>base_pitch_lag</name></name></expr></argument>, <argument><expr><name>subframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_lag_int</name></name> <operator>=</operator> <name>pitch_lag_int</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pitch_lag_int</name> <operator>+=</operator> <name>pitch_lag_frac</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>acelpf_ctx</name><operator>.</operator><name>acelp_interpolatef</name></name><argument_list>(<argument><expr><name>exc</name></expr></argument>,

<argument><expr><name>exc</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>pitch_lag_int</name></expr></argument>,

<argument><expr><name>ac_inter</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>pitch_lag_frac</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>pitch_lag_frac</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>LP_ORDER</name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>amr_subframe</name><operator>-&gt;</operator><name>ltp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_vector</name></name></expr></argument>, <argument><expr><name>exc</name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.18</literal> <operator>*</operator> <name><name>exc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.64</literal> <operator>*</operator> <name><name>exc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<literal type="number">0.18</literal> <operator>*</operator> <name><name>exc</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_vector</name></name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>lsb</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_mod_uintp2((x) &gt;&gt; (lsb), (len))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_POS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; (p)) &amp; 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_1p_track</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>BIT_POS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>pos</name></expr> </then><else>: <expr><name>pos</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_2p_track</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos0</name> <init>= <expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos1</name> <init>= <expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>BIT_POS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>pos0</name></expr> </then><else>: <expr><name>pos0</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>BIT_POS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>pos1</name></expr> </then><else>: <expr><name>pos1</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>pos0</name> <operator>&gt;</operator> <name>pos1</name></expr> ?</condition><then> <expr><operator>-</operator><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_3p_track</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>half_2p</name> <init>= <expr><call><name>BIT_POS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_2p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_1p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name></expr></argument>, <argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_4p_track</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>half_4p</name></decl>, <decl><type ref="prev"/><name>subhalf_2p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name>half_4p</name> <operator>=</operator> <call><name>BIT_POS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>subhalf_2p</name> <operator>=</operator> <call><name>BIT_POS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_4p</name> <operator>+</operator> <name>subhalf_2p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_4p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><call><name>decode_1p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_3p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>b_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>b_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><call><name>decode_3p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_1p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>b_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_5p_track</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>half_3p</name> <init>= <expr><call><name>BIT_POS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_3p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_3p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_6p_track</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b_offset</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>half_more</name> <init>= <expr><call><name>BIT_POS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">6</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>half_other</name> <init>= <expr><name>b_offset</name> <operator>-</operator> <name>half_more</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">6</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><call><name>decode_1p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_5p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><call><name>decode_1p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_5p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_4p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>half_more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><call><name>decode_3p_track</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_3p_track</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>BIT_STR</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>b_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_fixed_vector</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>fixed_vector</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>pulse_hi</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>pulse_lo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>Mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>sig_pos</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spacing</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>MODE_6k60</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_6k60</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_1p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>MODE_8k85</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_1p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>MODE_12k65</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>MODE_14k25</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_3p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_2p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>MODE_15k85</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_3p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>MODE_18k25</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_4p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>pulse_hi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>MODE_19k85</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_5p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>pulse_hi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_4p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>pulse_hi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>MODE_23k05</name></expr>:</case>

<case>case <expr><name>MODE_23k85</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_6p_track</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pulse_lo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>pulse_hi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fixed_vector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pulses_nb_per_mode_tr</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>spacing</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fixed_vector</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+=</operator> <ternary><condition><expr><name><name>sig_pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_gains</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>vq_gain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>Mode</name></name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>fixed_gain_factor</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pitch_gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>gains</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>mode</name> <operator>&lt;=</operator> <name>MODE_8k85</name></expr> ?</condition><then> <expr><name><name>qua_gain_6b</name><index>[<expr><name>vq_gain</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>qua_gain_7b</name><index>[<expr><name>vq_gain</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pitch_gain</name> <operator>=</operator> <name><name>gains</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fixed_gain_factor</name> <operator>=</operator> <name><name>gains</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pitch_sharpening</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>fixed_vector</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>AMRWB_SFR_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fixed_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>fixed_vector</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tilt_coef</name></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pitch_lag_int</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fixed_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>fixed_vector</name><index>[<expr><name>i</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pitch_lag_int</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">0.85</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>voice_factor</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>p_vector</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>p_gain</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f_vector</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_gain</name></decl></parameter>,

<parameter><decl><type><name>CELPMContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>p_ener</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>p_vector</name></expr></argument>, <argument><expr><name>p_vector</name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call> <operator>*</operator>

<name>p_gain</name> <operator>*</operator> <name>p_gain</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_ener</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>f_vector</name></expr></argument>, <argument><expr><name>f_vector</name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call> <operator>*</operator>

<name>f_gain</name> <operator>*</operator> <name>f_gain</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>p_ener</name> <operator>-</operator> <name>f_ener</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>p_ener</name> <operator>+</operator> <name>f_ener</name> <operator>+</operator> <literal type="number">0.01</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>anti_sparseness</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>fixed_vector</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ir_filter_nr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>&gt;</operator> <name>MODE_8k85</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>fixed_vector</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">3.0</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ir_filter_nr</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ir_filter_nr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ir_filter_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ir_filter_nr</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prev_ir_filter_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ir_filter_nr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_ir_filter_nr</name></name> <operator>=</operator> <name>ir_filter_nr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ir_filter_nr</name> <operator>+=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>==</operator> <name>MODE_8k85</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ir_filter_nr</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coef</name> <init>= <expr><name><name>ir_filters_lookup</name><index>[<expr><name>ir_filter_nr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>fixed_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_celp_circ_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>fixed_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>fixed_vector</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fixed_vector</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stability_factor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>isf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>isf_past</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>acc</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>acc</name> <operator>+=</operator> <operator>(</operator><name><name>isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>isf_past</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>isf_past</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.25</literal> <operator>-</operator> <name>acc</name> <operator>*</operator> <literal type="number">0.8</literal> <operator>*</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>noise_enhancer</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>fixed_gain</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>prev_tr_gain</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>voice_fac</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>stab_fac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sm_fac</name> <init>= <expr><literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>voice_fac</name><operator>)</operator> <operator>*</operator> <name>stab_fac</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>g0</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fixed_gain</name> <operator>&lt;</operator> <operator>*</operator><name>prev_tr_gain</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g0</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>*</operator><name>prev_tr_gain</name></expr></argument>, <argument><expr><name>fixed_gain</name> <operator>+</operator> <name>fixed_gain</name> <operator>*</operator>

<operator>(</operator><literal type="number">6226</literal> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>g0</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>*</operator><name>prev_tr_gain</name></expr></argument>, <argument><expr><name>fixed_gain</name> <operator>*</operator>

<operator>(</operator><literal type="number">27536</literal> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><operator>*</operator><name>prev_tr_gain</name> <operator>=</operator> <name>g0</name></expr>;</expr_stmt> 

<return>return <expr><name>sm_fac</name> <operator>*</operator> <name>g0</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>sm_fac</name><operator>)</operator> <operator>*</operator> <name>fixed_gain</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pitch_enhancer</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>fixed_vector</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>voice_fac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cpe</name> <init>= <expr><literal type="number">0.125</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>voice_fac</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>last</name> <init>= <expr><name><name>fixed_vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>fixed_vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name>cpe</name> <operator>*</operator> <name><name>fixed_vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>cur</name> <init>= <expr><name><name>fixed_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fixed_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>cpe</name> <operator>*</operator> <operator>(</operator><name>last</name> <operator>+</operator> <name><name>fixed_vector</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fixed_vector</name><index>[<expr><name>AMRWB_SFR_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>cpe</name> <operator>*</operator> <name>last</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>synthesis</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>fixed_gain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>fixed_vector</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>acelpv_ctx</name><operator>.</operator><name>weighted_vector_sumf</name></name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_vector</name></name></expr></argument>, <argument><expr><name>fixed_vector</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fixed_gain</name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0.5</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>&lt;=</operator> <name>MODE_8k85</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>energy</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pitch_factor</name> <init>= <expr><literal type="number">0.25</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>pitch_factor</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pitch_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_scale_vector_to_given_sum_of_squares</name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>,

<argument><expr><name>energy</name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>celpf_ctx</name><operator>.</operator><name>celp_lp_synthesis_filterf</name></name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>, <argument><expr><name>LP_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>de_emphasis</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>mem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>m</name> <operator>*</operator> <name><name>mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>m</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>AMRWB_SFR_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upsample_5_4</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>o_size</name></decl></parameter>, <parameter><decl><type><name>CELPMContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in0</name> <init>= <expr><name>in</name> <operator>-</operator> <name>UPS_FIR_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>int_part</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>frac_part</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>o_size</name> <operator>/</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>int_part</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frac_part</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>in0</name> <operator>+</operator> <name>int_part</name></expr></argument>,

<argument><expr><name><name>upsample_fir</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <name>frac_part</name></expr>]</index></name></expr></argument>,

<argument><expr><name>UPS_MEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>int_part</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>frac_part</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>find_hb_gain</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>synth</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>hb_idx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>vad</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wsp</name> <init>= <expr><operator>(</operator><name>vad</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tilt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>==</operator> <name>MODE_23k85</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>qua_hb_gain</name><index>[<expr><name>hb_idx</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>synth</name></expr></argument>, <argument><expr><name>synth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tilt</name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>synth</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tilt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>tilt</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.25</literal> <operator>-</operator> <literal type="number">0.25</literal> <operator>*</operator> <name>wsp</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scaled_hb_excitation</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hb_exc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>synth_exc</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>hb_gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>energy</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name>synth_exc</name></expr></argument>, <argument><expr><name>synth_exc</name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hb_exc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">32768.0</literal> <operator>-</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>prng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_scale_vector_to_given_sum_of_squares</name><argument_list>(<argument><expr><name>hb_exc</name></expr></argument>, <argument><expr><name>hb_exc</name></expr></argument>,

<argument><expr><name>energy</name> <operator>*</operator> <name>hb_gain</name> <operator>*</operator> <name>hb_gain</name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>auto_correlation</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>diff_isf</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mean</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>prod</name> <init>= <expr><operator>(</operator><name><name>diff_isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>mean</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>diff_isf</name><index>[<expr><name>i</name> <operator>-</operator> <name>lag</name></expr>]</index></name> <operator>-</operator> <name>mean</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>prod</name> <operator>*</operator> <name>prod</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extrapolate_isf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>isf</name><index>[<expr><name>LP_ORDER_16k</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>diff_isf</name><index>[<expr><name>LP_ORDER</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>diff_mean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>corr_lag</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>est</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i_max_corr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>isf</name><index>[<expr><name>LP_ORDER_16k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>isf</name><index>[<expr><name>LP_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>diff_isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>isf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>isf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>diff_mean</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>diff_mean</name> <operator>+=</operator> <name><name>diff_isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>LP_ORDER</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i_max_corr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>corr_lag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>auto_correlation</name><argument_list>(<argument><expr><name>diff_isf</name></expr></argument>, <argument><expr><name>diff_mean</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>corr_lag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>corr_lag</name><index>[<expr><name>i_max_corr</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_corr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_max_corr</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LP_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER_16k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_max_corr</name></expr>]</index></name>

<operator>-</operator> <name><name>isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>i_max_corr</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>est</name> <operator>=</operator> <literal type="number">7965</literal> <operator>+</operator> <operator>(</operator><name><name>isf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>isf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>isf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>est</name></expr></argument>, <argument><expr><literal type="number">7600</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>isf</name><index>[<expr><name>LP_ORDER</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator>

<operator>(</operator><name><name>isf</name><index>[<expr><name>LP_ORDER_16k</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>isf</name><index>[<expr><name>LP_ORDER</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LP_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER_16k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>diff_isf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>scale</name> <operator>*</operator> <operator>(</operator><name><name>isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER_16k</name> <operator>-</operator> <name>LP_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>diff_isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>diff_isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">5.0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>diff_isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>diff_isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>diff_isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5.0</literal> <operator>-</operator> <name><name>diff_isf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>diff_isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">5.0</literal> <operator>-</operator> <name><name>diff_isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LP_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER_16k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>isf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>diff_isf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_ORDER_16k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>isf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">0.8</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lpc_weighting</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>fac</name> <init>= <expr><name>gamma</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>fac</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fac</name> <operator>*=</operator> <name>gamma</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hb_synthesis</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subframe</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>isf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>isf_past</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>hb_lpc</name><index>[<expr><name>LP_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>Mode</name></name></type> <name>mode</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MODE_6k60</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>e_isf</name><index>[<expr><name>LP_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name><name>e_isp</name><index>[<expr><name>LP_ORDER_16k</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>acelpv_ctx</name><operator>.</operator><name>weighted_vector_sumf</name></name><argument_list>(<argument><expr><name>e_isf</name></expr></argument>, <argument><expr><name>isf_past</name></expr></argument>, <argument><expr><name>isf</name></expr></argument>, <argument><expr><name><name>isfp_inter</name><index>[<expr><name>subframe</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name><name>isfp_inter</name><index>[<expr><name>subframe</name></expr>]</index></name></expr></argument>, <argument><expr><name>LP_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>extrapolate_isf</name><argument_list>(<argument><expr><name>e_isf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e_isf</name><index>[<expr><name>LP_ORDER_16k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_lsf2lspd</name><argument_list>(<argument><expr><name>e_isp</name></expr></argument>, <argument><expr><name>e_isf</name></expr></argument>, <argument><expr><name>LP_ORDER_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_amrwb_lsp2lpc</name><argument_list>(<argument><expr><name>e_isp</name></expr></argument>, <argument><expr><name>hb_lpc</name></expr></argument>, <argument><expr><name>LP_ORDER_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpc_weighting</name><argument_list>(<argument><expr><name>hb_lpc</name></expr></argument>, <argument><expr><name>hb_lpc</name></expr></argument>, <argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><name>LP_ORDER_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lpc_weighting</name><argument_list>(<argument><expr><name>hb_lpc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lp_coef</name><index>[<expr><name>subframe</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.6</literal></expr></argument>, <argument><expr><name>LP_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>celpf_ctx</name><operator>.</operator><name>celp_lp_synthesis_filterf</name></name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>hb_lpc</name></expr></argument>, <argument><expr><name>exc</name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE_16k</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>MODE_6k60</name><operator>)</operator></expr> ?</condition><then> <expr><name>LP_ORDER_16k</name></expr> </then><else>: <expr><name>LP_ORDER</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>hb_fir_filter</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hb_fir_filter</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>fir_coef</name><index>[<expr><name>HB_FIR_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name><name>mem</name><index>[<expr><name>HB_FIR_SIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>data</name><index>[<expr><name>AMRWB_SFR_SIZE_16k</name> <operator>+</operator> <name>HB_FIR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>HB_FIR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>HB_FIR_SIZE</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>HB_FIR_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>*</operator> <name><name>fir_coef</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>AMRWB_SFR_SIZE_16k</name></expr></argument>, <argument><expr><name>HB_FIR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_sub_state</name><parameter_list>(<parameter><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>excitation_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>excitation_buf</name><index>[<expr><name>AMRWB_SFR_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>AMRWB_P_DELAY_MAX</name> <operator>+</operator> <name>LP_ORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_az</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_az</name><index>[<expr><name>AMRWB_SFR_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LP_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_up</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_up</name><index>[<expr><name>AMRWB_SFR_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><name>UPS_MEM_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_hb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_hb</name><index>[<expr><name>AMRWB_SFR_SIZE_16k</name></expr>]</index></name></expr></argument>,

<argument><expr><name>LP_ORDER_16k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amrwb_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMRWBContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMRWBFrame</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>expected_fr_size</name></decl>, <decl><type ref="prev"/><name>header_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>spare_vector</name><index>[<expr><name>AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>fixed_gain_factor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>synth_fixed_vector</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>synth_fixed_gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>voice_fac</name></decl>, <decl><type ref="prev"/><name>stab_fac</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>synth_exc</name><index>[<expr><name>AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>hb_exc</name><index>[<expr><name>AMRWB_SFR_SIZE_16k</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>hb_samples</name><index>[<expr><name>AMRWB_SFR_SIZE_16k</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>hb_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>AMRWB_SFR_SIZE_16k</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_out</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <call><name>decode_mime_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>&gt;</operator> <name>MODE_SID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid mode %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expected_fr_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>cf_sizes_wb</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>expected_fr_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Frame too small (%d bytes). Truncated file?\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>fr_quality</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>&gt;</operator> <name>MODE_SID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encountered a bad or corrupted frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>==</operator> <name>MODE_SID</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"SID mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_amr_bit_reorder</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AMRWBFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>buf</name> <operator>+</operator> <name>header_size</name></expr></argument>, <argument><expr><name><name>amr_bit_orderings_by_mode</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>==</operator> <name>MODE_6k60</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_isf_indices_36b</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>isp_id</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>decode_isf_indices_46b</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>isp_id</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>isf_add_mean_and_past</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_q_past</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_min_dist_lsf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name></name></expr></argument>, <argument><expr><name>MIN_ISF_SPACING</name></expr></argument>, <argument><expr><name>LP_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stab_fac</name> <operator>=</operator> <call><name>stability_factor</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_past_final</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name><index>[<expr><name>LP_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_lsf2lspd</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name></name></expr></argument>, <argument><expr><name>LP_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>first_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp_sub4_past</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LP_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>interpolate_isp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp_sub4_past</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sub</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sub</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_amrwb_lsp2lpc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lp_coef</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>, <argument><expr><name>LP_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sub</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sub</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AMRWBSubFrame</name> <modifier>*</modifier></type><name>cur_subframe</name> <init>= <expr><operator>&amp;</operator><name><name>cf</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>sub</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>sub_buf</name> <init>= <expr><name>buf_out</name> <operator>+</operator> <name>sub</name> <operator>*</operator> <name>AMRWB_SFR_SIZE_16k</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_pitch_vector</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur_subframe</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_fixed_vector</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>, <argument><expr><name><name>cur_subframe</name><operator>-&gt;</operator><name>pul_ih</name></name></expr></argument>,

<argument><expr><name><name>cur_subframe</name><operator>-&gt;</operator><name>pul_il</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pitch_sharpening</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_gains</name><argument_list>(<argument><expr><name><name>cur_subframe</name><operator>-&gt;</operator><name>vq_gain</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fixed_gain_factor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>ff_amr_set_fixed_gain</name><argument_list>(<argument><expr><name>fixed_gain_factor</name></expr></argument>,

<argument><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>celpm_ctx</name><operator>.</operator><name>dot_productf</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call> <operator>/</operator>

<name>AMRWB_SFR_SIZE</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prediction_error</name></name></expr></argument>,

<argument><expr><name>ENERGY_MEAN</name></expr></argument>, <argument><expr><name>energy_pred_fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>voice_fac</name> <operator>=</operator> <call><name>voice_factor</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_vector</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>celpm_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tilt_coef</name></name> <operator>=</operator> <name>voice_fac</name> <operator>*</operator> <literal type="number">0.25</literal> <operator>+</operator> <literal type="number">0.25</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pitch_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fixed_vector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>truncf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synth_fixed_gain</name> <operator>=</operator> <call><name>noise_enhancer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>prev_tr_gain</name></name></expr></argument>,

<argument><expr><name>voice_fac</name></expr></argument>, <argument><expr><name>stab_fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>synth_fixed_vector</name> <operator>=</operator> <call><name>anti_sparseness</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fixed_vector</name></name></expr></argument>,

<argument><expr><name>spare_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pitch_enhancer</name><argument_list>(<argument><expr><name>synth_fixed_vector</name></expr></argument>, <argument><expr><name>voice_fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>synthesis</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lp_coef</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>, <argument><expr><name>synth_exc</name></expr></argument>, <argument><expr><name>synth_fixed_gain</name></expr></argument>,

<argument><expr><name>synth_fixed_vector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_az</name><index>[<expr><name>LP_ORDER</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>de_emphasis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_up</name><index>[<expr><name>UPS_MEM_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_az</name><index>[<expr><name>LP_ORDER</name></expr>]</index></name></expr></argument>, <argument><expr><name>PREEMPH_FAC</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>demph_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>acelpf_ctx</name><operator>.</operator><name>acelp_apply_order_2_transfer_function</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_up</name><index>[<expr><name>UPS_MEM_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_up</name><index>[<expr><name>UPS_MEM_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>hpf_zeros</name></expr></argument>, <argument><expr><name>hpf_31_poles</name></expr></argument>,

<argument><expr><name>hpf_31_gain</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hpf_31_mem</name></name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>upsample_5_4</name><argument_list>(<argument><expr><name>sub_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_up</name><index>[<expr><name>UPS_FIR_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><name>AMRWB_SFR_SIZE_16k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>celpm_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>acelpf_ctx</name><operator>.</operator><name>acelp_apply_order_2_transfer_function</name></name><argument_list>(<argument><expr><name>hb_samples</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_up</name><index>[<expr><name>UPS_MEM_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>hpf_zeros</name></expr></argument>, <argument><expr><name>hpf_400_poles</name></expr></argument>,

<argument><expr><name>hpf_400_gain</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hpf_400_mem</name></name></expr></argument>, <argument><expr><name>AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hb_gain</name> <operator>=</operator> <call><name>find_hb_gain</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hb_samples</name></expr></argument>,

<argument><expr><name><name>cur_subframe</name><operator>-&gt;</operator><name>hb_gain</name></name></expr></argument>, <argument><expr><name><name>cf</name><operator>-&gt;</operator><name>vad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scaled_hb_excitation</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hb_exc</name></expr></argument>, <argument><expr><name>synth_exc</name></expr></argument>, <argument><expr><name>hb_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hb_synthesis</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_hb</name><index>[<expr><name>LP_ORDER_16k</name></expr>]</index></name></expr></argument>,

<argument><expr><name>hb_exc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_past_final</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hb_fir_filter</name><argument_list>(<argument><expr><name>hb_samples</name></expr></argument>, <argument><expr><name>bpf_6_7_coef</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bpf_6_7_mem</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples_hb</name><index>[<expr><name>LP_ORDER_16k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_cur_mode</name></name> <operator>==</operator> <name>MODE_23k85</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hb_fir_filter</name><argument_list>(<argument><expr><name>hb_samples</name></expr></argument>, <argument><expr><name>lpf_7_coef</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lpf_7_mem</name></name></expr></argument>,

<argument><expr><name>hb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AMRWB_SFR_SIZE_16k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sub_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>hb_samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>update_sub_state</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp_sub4_past</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LP_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_past_final</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>isf_cur</name></name></expr></argument>, <argument><expr><name>LP_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>expected_fr_size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_amrwb_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"amrwb"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AMR-WB (Adaptive Multi-Rate WideBand)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AMR_WB</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AMRWBContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>amrwb_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>amrwb_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_FLT</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
