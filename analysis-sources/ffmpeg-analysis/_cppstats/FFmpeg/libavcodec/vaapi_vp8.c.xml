<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vaapi_vp8.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_dec_vp8.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>VASurfaceID</name></type> <name>vaapi_vp8_surface_id</name><parameter_list>(<parameter><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>vf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>vf</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VA_INVALID_SURFACE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vp8_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAPictureParameterBufferVP8</name></type> <name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProbabilityDataBufferVP8</name></type> <name>prob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAIQMatrixBufferVP8</name></type> <name>quant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_surface</name></name> <operator>=</operator> <call><name>vaapi_vp8_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>VAPictureParameterBufferVP8</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>frame_width</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>frame_height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>,

<expr><operator>.</operator><name>last_ref_frame</name> <operator>=</operator> <call><name>vaapi_vp8_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_PREVIOUS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>golden_ref_frame</name> <operator>=</operator> <call><name>vaapi_vp8_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>alt_ref_frame</name> <operator>=</operator> <call><name>vaapi_vp8_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>out_of_loop_frame</name> <operator>=</operator> <name>VA_INVALID_SURFACE</name></expr>,

<expr><operator>.</operator><name><name>pic_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>key_frame</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>profile</name></name></expr>,

<expr><operator>.</operator><name>segmentation_enabled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>,

<expr><operator>.</operator><name>update_mb_segmentation_map</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr>,

<expr><operator>.</operator><name>update_segment_feature_data</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>update_feature_data</name></name></expr>,

<expr><operator>.</operator><name>filter_type</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>simple</name></name></expr>,

<expr><operator>.</operator><name>sharpness_level</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>sharpness</name></name></expr>,

<expr><operator>.</operator><name>loop_filter_adj_enable</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>enabled</name></name></expr>,

<expr><operator>.</operator><name>mode_ref_lf_delta_update</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>update</name></name></expr>,

<expr><operator>.</operator><name>sign_bias_golden</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sign_bias</name><index>[<expr><name>VP56_FRAME_GOLDEN</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>sign_bias_alternate</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sign_bias</name><index>[<expr><name>VP56_FRAME_GOLDEN2</name></expr>]</index></name></expr>,

<expr><operator>.</operator><name>mb_no_coeff_skip</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mbskip_enabled</name></name></expr>,

<expr><operator>.</operator><name>loop_filter_disable</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>,

}</block></expr>,

<expr><operator>.</operator><name>prob_skip_false</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mbskip</name></name></expr>,

<expr><operator>.</operator><name>prob_intra</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>intra</name></name></expr>,

<expr><operator>.</operator><name>prob_last</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>last</name></name></expr>,

<expr><operator>.</operator><name>prob_gf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>golden</name></name></expr>,

}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>mb_segment_tree_probs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>segmentid</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>loop_filter_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>filter_level</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>loop_filter_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>loop_filter_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>loop_filter_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>loop_filter_level</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>loop_filter_deltas_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>loop_filter_deltas_mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>keyframe_y_mode_probs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">145</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">128</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>keyframe_uv_mode_probs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">142</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">183</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>y_mode_probs</name></name></expr></argument>, <argument><expr><name>keyframe_y_mode_probs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pp</name><operator>.</operator><name>uv_mode_probs</name></name></expr></argument>, <argument><expr><name>keyframe_uv_mode_probs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>y_mode_probs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>uv_mode_probs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>pred8x8c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>mv_probs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>mvc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>bool_coder_ctx</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>bool_coder_ctx</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>.</operator><name>bool_coder_ctx</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>bit_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAPictureParameterBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>coeff_bands_inverse</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coeff_pos</name> <init>= <expr><name><name>coeff_bands_inverse</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>prob</name><operator>.</operator><name>dct_coeff_probs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>-&gt;</operator><name>token</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>coeff_pos</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAProbabilityBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>prob</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>base_qi</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>base_quant</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>base_qi</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>yac_qi</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>quant</name><operator>.</operator><name>quantization_index</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant</name><operator>.</operator><name>quantization_index</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>ydc_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant</name><operator>.</operator><name>quantization_index</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>y2dc_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant</name><operator>.</operator><name>quantization_index</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>y2ac_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant</name><operator>.</operator><name>quantization_index</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>uvdc_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant</name><operator>.</operator><name>quantization_index</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>base_qi</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>quant</name><operator>.</operator><name>uvac_delta</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAIQMatrixBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>quant</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>quant</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vp8_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_vaapi_decode_issue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vp8_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VP8Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>framep</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASliceParameterBufferVP8</name></type> <name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>header_size</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>buffer</name> <operator>+</operator> <name>header_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_size</name> <init>= <expr><name>size</name> <operator>-</operator> <name>header_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>VASliceParameterBufferVP8</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>slice_data_size</name> <operator>=</operator> <name>data_size</name></expr>,

<expr><operator>.</operator><name>slice_data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>slice_data_flag</name> <operator>=</operator> <name>VA_SLICE_DATA_FLAG_ALL</name></expr>,

<expr><operator>.</operator><name>macroblock_offset</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>input</name></name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>coder_state_at_header_end</name><operator>.</operator><name>bit_count</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>,

<expr><operator>.</operator><name>num_of_partitions</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_coeff_partitions</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>partition_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>header_partition_size</name></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>sp</name><operator>.</operator><name>macroblock_offset</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>partition_size</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coeff_partition_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_slice_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vp8_vaapi_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp8_vaapi"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP8</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vp8_start_frame</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vp8_end_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vp8_decode_slice</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodePicture</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_decode_uninit</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_common_frame_params</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
