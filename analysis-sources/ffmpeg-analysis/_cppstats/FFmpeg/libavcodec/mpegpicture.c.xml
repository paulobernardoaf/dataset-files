<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegpicture.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"motion_est.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegpicture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_tables_writable</name><parameter_list>(<parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_WRITABLE</name><parameter_list>(<parameter><type><name>table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (pic-&gt;table &amp;&amp;(ret = av_buffer_make_writable(&amp;pic-&gt;table)) &lt; 0)return ret;} while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>MAKE_WRITABLE</name><argument_list>(<argument><expr><name>mb_var_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAKE_WRITABLE</name><argument_list>(<argument><expr><name>mc_mb_var_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAKE_WRITABLE</name><argument_list>(<argument><expr><name>mb_mean_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAKE_WRITABLE</name><argument_list>(<argument><expr><name>mbskip_table_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAKE_WRITABLE</name><argument_list>(<argument><expr><name>qscale_table_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAKE_WRITABLE</name><argument_list>(<argument><expr><name>mb_type_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>MAKE_WRITABLE</name><argument_list>(<argument><expr><name><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAKE_WRITABLE</name><argument_list>(<argument><expr><name><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpeg_framesize_alloc</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>MotionEstContext</name> <modifier>*</modifier></type><name>me</name></decl></parameter>,

<parameter><decl><type><name>ScratchpadContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMU_EDGE_HEIGHT</name></cpp:macro> <cpp:value>(4 * 70)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>alloc_size</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>linesize</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Image too small, temporary buffers cannot function\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size2</name><argument_list>(<argument><expr><name>alloc_size</name></expr></argument>, <argument><expr><name>EMU_EDGE_HEIGHT</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>, <argument><expr><name>EMU_EDGE_HEIGHT</name></expr></argument>,

<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument>avctx</argument>, <argument>me-&gt;scratchpad</argument>, <argument>alloc_size</argument>, <argument><literal type="number">4</literal> * <literal type="number">16</literal> * <literal type="number">2</literal></argument>,

<argument>fail</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>temp</name></name> <operator>=</operator> <name><name>me</name><operator>-&gt;</operator><name>scratchpad</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>rd_scratchpad</name></name> <operator>=</operator> <name><name>me</name><operator>-&gt;</operator><name>scratchpad</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>b_scratchpad</name></name> <operator>=</operator> <name><name>me</name><operator>-&gt;</operator><name>scratchpad</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>obmc_scratchpad</name></name> <operator>=</operator> <name><name>me</name><operator>-&gt;</operator><name>scratchpad</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_frame_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>MotionEstContext</name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>ScratchpadContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>chroma_x_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_y_shift</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvlinesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>edges_needed</name> <init>= <expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_VC1IMAGE</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MSS2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>edges_needed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>EDGE_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>EDGE_WIDTH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name></expr> ?</condition><then> <expr><name>AV_GET_BUFFER_FLAG_REF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>avcodec_default_get_buffer2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"get_buffer() failed (%d %p)\n"</literal></expr></argument>,

<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edges_needed</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>chroma_y_shift</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>*</operator>

<name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>chroma_x_shift</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>frame_priv_data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>frame_priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"alloc_frame_buffer() failed (hwaccel private data allocation)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>linesize</name> <operator>&amp;&amp;</operator> <name>linesize</name> <operator>!=</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>uvlinesize</name> <operator>&amp;&amp;</operator> <name>uvlinesize</name> <operator>!=</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"get_buffer() failed (stride changed: linesize=%d/%d uvlinesize=%d/%d)\n"</literal></expr></argument>,

<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_pix_fmt_count_planes</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"get_buffer() failed (uv stride mismatch)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_framesize_alloc</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"get_buffer() failed to allocate context scratch buffers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_picture_tables</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_format</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b8_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>big_mb_num</name> <init>= <expr><name>mb_stride</name> <operator>*</operator> <operator>(</operator><name>mb_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_array_size</name> <init>= <expr><name>mb_stride</name> <operator>*</operator> <name>mb_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b8_array_size</name> <init>= <expr><name>b8_stride</name> <operator>*</operator> <name>mb_height</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mbskip_table_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>mb_array_size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>big_mb_num</name> <operator>+</operator> <name>mb_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_type_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><operator>(</operator><name>big_mb_num</name> <operator>+</operator> <name>mb_stride</name><operator>)</operator> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>mbskip_table_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_type_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_var_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>mb_array_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>mb_array_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_mean_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>mb_array_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_var_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_mean_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_format</name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name>encoding</name> <operator>||</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_DEBUG_MV</name></expr></cpp:if>

<name><name>avctx</name><operator>-&gt;</operator><name>debug_mv</name></name> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>export_side_data</name></name> <operator>&amp;</operator> <name>AV_CODEC_EXPORT_DATA_MVS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mv_size</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>b8_array_size</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_index_size</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>mb_array_size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mv_size</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>mv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>ref_index_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>alloc_mb_width</name></name> <operator>=</operator> <name>mb_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>alloc_mb_height</name></name> <operator>=</operator> <name>mb_height</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_alloc_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>MotionEstContext</name> <modifier>*</modifier></type><name>me</name></decl></parameter>,

<parameter><decl><type><name>ScratchpadContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shared</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>chroma_x_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_y_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_format</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b8_stride</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name> <modifier>*</modifier></type><name>linesize</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name> <modifier>*</modifier></type><name>uvlinesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>( <expr><name><name>pic</name><operator>-&gt;</operator><name>alloc_mb_width</name></name> <operator>!=</operator> <name>mb_width</name>

<operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>alloc_mb_height</name></name> <operator>!=</operator> <name>mb_height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shared</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>shared</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>alloc_frame_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>,

<argument><expr><name>chroma_x_shift</name></expr></argument>, <argument><expr><name>chroma_y_shift</name></expr></argument>,

<argument><expr><operator>*</operator><name>linesize</name></expr></argument>, <argument><expr><operator>*</operator><name>uvlinesize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>linesize</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>uvlinesize</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>alloc_picture_tables</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>out_format</name></expr></argument>,

<argument><expr><name>mb_stride</name></expr></argument>, <argument><expr><name>mb_width</name></expr></argument>, <argument><expr><name>mb_height</name></expr></argument>, <argument><expr><name>b8_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>make_tables_writable</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_var</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_var_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_mean</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>mb_mean_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mbskip_table</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>mbskip_table_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>qscale_table</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>mb_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_type_buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>mb_stride</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>ref_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating a picture.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpeg_unref_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>Picture</name></expr></argument>, <argument><expr><name>mb_mean</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_mean</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_WMV3IMAGE</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_VC1IMAGE</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MSS2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>needs_realloc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pic</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_update_picture_tables</name><parameter_list>(<parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_TABLE</name><parameter_list>(<parameter><type><name>table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (src-&gt;table &amp;&amp; (!dst-&gt;table || dst-&gt;table-&gt;buffer != src-&gt;table-&gt;buffer)) { av_buffer_unref(&amp;dst-&gt;table); dst-&gt;table = av_buffer_ref(src-&gt;table); if (!dst-&gt;table) { ff_free_picture_tables(dst); return AVERROR(ENOMEM); } } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>UPDATE_TABLE</name><argument_list>(<argument><expr><name>mb_var_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_TABLE</name><argument_list>(<argument><expr><name>mc_mb_var_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_TABLE</name><argument_list>(<argument><expr><name>mb_mean_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_TABLE</name><argument_list>(<argument><expr><name>mbskip_table_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_TABLE</name><argument_list>(<argument><expr><name>qscale_table_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_TABLE</name><argument_list>(<argument><expr><name>mb_type_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>UPDATE_TABLE</name><argument_list>(<argument><expr><name><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_TABLE</name><argument_list>(<argument><expr><name><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mb_var</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mb_var</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mc_mb_var</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mc_mb_var</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mb_mean</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mb_mean</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mbskip_table</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mbskip_table</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>qscale_table</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>qscale_table</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mb_type</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ref_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>ref_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>alloc_mb_width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>alloc_mb_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>alloc_mb_height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>alloc_mb_height</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpeg_ref_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_update_picture_tables</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>field_picture</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>field_picture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mb_var_sum</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mb_var_sum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>b_frame_score</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>b_frame_score</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>needs_realloc</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>needs_realloc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>reference</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>shared</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>shared</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>encoding_error</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>encoding_error</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>encoding_error</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>pic_is_unused</name><parameter_list>(<parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>needs_realloc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>DELAYED_PIC_REF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_unused_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shared</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>shared</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pic_is_unused</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>,

<argument><expr><literal type="string">"Internal error, picture buffer overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_find_unused_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shared</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>find_unused_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><name>shared</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>picture</name><index>[<expr><name>ret</name></expr>]</index></name><operator>.</operator><name>needs_realloc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>picture</name><index>[<expr><name>ret</name></expr>]</index></name><operator>.</operator><name>needs_realloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>picture</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>picture</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_free_picture_tables</name><parameter_list>(<parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>alloc_mb_width</name></name> <operator>=</operator>

<name><name>pic</name><operator>-&gt;</operator><name>alloc_mb_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_var_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_mean_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>mbskip_table_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_type_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
