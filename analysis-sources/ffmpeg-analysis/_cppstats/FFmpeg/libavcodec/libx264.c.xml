<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libx264.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/stereo3d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X264_API_IMPORTS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;x264.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>X264Opaque</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>reordered_opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>wallclock</name></decl>;</decl_stmt>

}</block></struct></type> <name>X264Opaque</name>;</typedef>

<typedef>typedef <type><struct>struct <name>X264Context</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>x264_param_t</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>x264_t</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>x264_picture_t</name></type> <name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sei_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>preset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tune</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fastfirstpass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wpredp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x264opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>crf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>crf_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cqp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aq_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>aq_strength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psy_rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>psy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_lookahead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>weightp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>weightb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ssim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intra_refresh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bluray_compat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_bias</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_pyramid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mixed_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct8x8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fast_pskip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbtree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>deblock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cplxblur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>partitions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>direct_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_max_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nal_hrd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>avcintra_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_est</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>forced_idr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a53_cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_frame_strategy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scenechange_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noise_reduction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>x264_params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_reordered_opaque</name></decl>, <name>next_reordered_opaque</name>;</decl_stmt>

<decl_stmt><decl><type><name>X264Opaque</name> <modifier>*</modifier></type><name>reordered_opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>roi_warned</name></decl>;</decl_stmt>

}</block></struct></type> <name>X264Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>X264_log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>level_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>X264_LOG_ERROR</name></expr>]</index> <operator>=</operator> <name>AV_LOG_ERROR</name></expr>,

<expr><index>[<expr><name>X264_LOG_WARNING</name></expr>]</index> <operator>=</operator> <name>AV_LOG_WARNING</name></expr>,

<expr><index>[<expr><name>X264_LOG_INFO</name></expr>]</index> <operator>=</operator> <name>AV_LOG_INFO</name></expr>,

<expr><index>[<expr><name>X264_LOG_DEBUG</name></expr>]</index> <operator>=</operator> <name>AV_LOG_DEBUG</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>level</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>level</name></expr></argument> &gt;</argument_list></name> <name>X264_LOG_DEBUG</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_vlog</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>level_map</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_nals</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>x264_nal_t</name> <modifier>*</modifier></type><name>nals</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nnal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X264Context</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nnal</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>nals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nnal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: nal buffer is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_payload</name></expr></argument>, <argument><expr><name><name>nals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>nals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>avfmt2_num_planes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>avfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>avfmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P9</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<return>return <expr><literal type="number">3</literal></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGR0</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY10</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reconfig_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X264Context</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>avcintra_class</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_interlaced</name></name> <operator>&amp;&amp;</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_tff</name></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_tff</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_height</name></name><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>*</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_buffer_size</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>/</operator> <literal type="number">1000</literal> <operator>||</operator>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_max_bitrate</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_buffer_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_max_bitrate</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>==</operator> <name>X264_RC_ABR</name> <operator>&amp;&amp;</operator>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_bitrate</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>==</operator> <name>X264_RC_CRF</name> <operator>&amp;&amp;</operator>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant</name></name> <operator>!=</operator> <name><name>x4</name><operator>-&gt;</operator><name>crf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>crf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>==</operator> <name>X264_RC_CQP</name> <operator>&amp;&amp;</operator>

<name><name>x4</name><operator>-&gt;</operator><name>cqp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_constant</name></name> <operator>!=</operator> <name><name>x4</name><operator>-&gt;</operator><name>cqp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_constant</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>cqp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>crf_max</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant_max</name></name> <operator>!=</operator> <name><name>x4</name><operator>-&gt;</operator><name>crf_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant_max</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>crf_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_STEREO3D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>side_data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVStereo3D</name> <modifier>*</modifier></type><name>stereo</name> <init>= <expr><operator>(</operator><name>AVStereo3D</name> <operator>*</operator><operator>)</operator><name><name>side_data</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fpa_type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_STEREO3D_CHECKERBOARD</name></expr>:</case>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_COLUMNS</name></expr>:</case>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_LINES</name></expr>:</case>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_SIDEBYSIDE</name></expr>:</case>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_TOPBOTTOM</name></expr>:</case>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_STEREO3D_FRAMESEQUENCE</name></expr>:</case>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;=</operator> <literal type="number">145</literal></expr></cpp:if>

<case>case <expr><name>AV_STEREO3D_2D</name></expr>:</case>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_STEREO3D_FLAG_INVERT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Ignoring unsupported inverted stereo value %d\n"</literal></expr></argument>, <argument><expr><name>fpa_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fpa_type</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fpa_type</name> <operator>!=</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_frame_packing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_frame_packing</name></name> <operator>=</operator> <name>fpa_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_encoder_reconfig</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>X264_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X264Context</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nnal</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>x264_picture_t</name></type> <name>pic_out</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pict_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>wallclock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X264Opaque</name> <modifier>*</modifier></type><name>out_opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>x264_picture_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>pic</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;=</operator> <literal type="number">153</literal></expr></cpp:if>

<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bitdepth</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>bit_depth</name> <operator>=</operator> <name>x264_bit_depth</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_csp</name></name> <operator>|=</operator> <name>X264_CSP_HIGH_DEPTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_plane</name></name> <operator>=</operator> <call><name>avfmt2_num_planes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_plane</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>plane</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>img</name><operator>.</operator><name>i_stride</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>i_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name><index>[<expr><name><name>x4</name><operator>-&gt;</operator><name>next_reordered_opaque</name></name></expr>]</index></name><operator>.</operator><name>reordered_opaque</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name><index>[<expr><name><name>x4</name><operator>-&gt;</operator><name>next_reordered_opaque</name></name></expr>]</index></name><operator>.</operator><name>wallclock</name> <operator>=</operator> <name>wallclock</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>export_side_data</name></name> <operator>&amp;</operator> <name>AV_CODEC_EXPORT_DATA_PRFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name><index>[<expr><name><name>x4</name><operator>-&gt;</operator><name>next_reordered_opaque</name></name></expr>]</index></name><operator>.</operator><name>wallclock</name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name><index>[<expr><name><name>x4</name><operator>-&gt;</operator><name>next_reordered_opaque</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>next_reordered_opaque</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>next_reordered_opaque</name></name> <operator>%=</operator> <name><name>x4</name><operator>-&gt;</operator><name>nb_reordered_opaque</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>x4</name><operator>-&gt;</operator><name>forced_idr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>X264_TYPE_IDR</name></expr>

</then><else>: <expr><name>X264_TYPE_KEYFRAME</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>X264_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>X264_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>X264_TYPE_AUTO</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>reconfig_encoder</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>a53_cc</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sei_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sei_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_a53_sei</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sei_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sei_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory for closed captions, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sei_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>extra_sei</name><operator>.</operator><name>payloads</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>extra_sei</name><operator>.</operator><name>payloads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>extra_sei</name><operator>.</operator><name>payloads</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory for closed captions, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sei_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>extra_sei</name><operator>.</operator><name>sei_free</name></name> <operator>=</operator> <name>av_free</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>extra_sei</name><operator>.</operator><name>payloads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>payload_size</name> <operator>=</operator> <name>sei_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>extra_sei</name><operator>.</operator><name>payloads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>payload</name> <operator>=</operator> <name>sei_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>extra_sei</name><operator>.</operator><name>num_payloads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>extra_sei</name><operator>.</operator><name>payloads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_aq_mode</name></name> <operator>==</operator> <name>X264_AQ_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x4</name><operator>-&gt;</operator><name>roi_warned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>roi_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Adaptive quantization must be enabled to use ROI encoding, skipping ROI.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mbx</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>MB_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>MB_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mby</name> <init>= <expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name>MB_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>MB_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_range</name> <init>= <expr><literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name>bit_depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_rois</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVRegionOfInterest</name> <modifier>*</modifier></type><name>roi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>roi_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>qoffsets</name></decl>;</decl_stmt>

<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>roi_size</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>self_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>roi_size</name> <operator>||</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <name>roi_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid AVRegionOfInterest.self_size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_rois</name> <operator>=</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>roi_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qoffsets</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>mbx</name> <operator>*</operator> <name>mby</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qoffsets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qoffsets</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>nb_rois</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>startx</name></decl>, <decl><type ref="prev"/><name>endx</name></decl>, <decl><type ref="prev"/><name>starty</name></decl>, <decl><type ref="prev"/><name>endy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>qoffset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>roi_size</name> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>starty</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mby</name></expr></argument>, <argument><expr><name><name>roi</name><operator>-&gt;</operator><name>top</name></name> <operator>/</operator> <name>MB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endy</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mby</name></expr></argument>, <argument><expr><operator>(</operator><name><name>roi</name><operator>-&gt;</operator><name>bottom</name></name> <operator>+</operator> <name>MB_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator> <name>MB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>startx</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mbx</name></expr></argument>, <argument><expr><name><name>roi</name><operator>-&gt;</operator><name>left</name></name> <operator>/</operator> <name>MB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endx</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mbx</name></expr></argument>, <argument><expr><operator>(</operator><name><name>roi</name><operator>-&gt;</operator><name>right</name></name> <operator>+</operator> <name>MB_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator> <name>MB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>den</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>qoffsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AVRegionOfInterest.qoffset.den must not be zero.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qoffset</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>num</name></name> <operator>*</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qoffset</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>qoffset</name> <operator>*</operator> <name>qp_range</name></expr></argument>, <argument><expr><operator>-</operator><name>qp_range</name></expr></argument>, <argument><expr><operator>+</operator><name>qp_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>starty</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>endy</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>startx</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>endx</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>qoffsets</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>mbx</name></expr>]</index></name> <operator>=</operator> <name>qoffset</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>prop</name><operator>.</operator><name>quant_offsets</name></name> <operator>=</operator> <name>qoffsets</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>pic</name><operator>.</operator><name>prop</name><operator>.</operator><name>quant_offsets_free</name></name> <operator>=</operator> <name>av_free</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x4</name><operator>-&gt;</operator><name>roi_warned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>roi_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"interlaced_frame not supported for ROI encoding yet, skipping ROI.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>x264_encoder_encode</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nnal</name></expr></argument>, <argument><expr><ternary><condition><expr><name>frame</name></expr>?</condition><then> <expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>pic</name></name></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_out</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_nals</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>nal</name></expr></argument>, <argument><expr><name>nnal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <call><name>x264_encoder_delayed_frames</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pic_out</name><operator>.</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pic_out</name><operator>.</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_opaque</name> <operator>=</operator> <name><name>pic_out</name><operator>.</operator><name>opaque</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_opaque</name> <operator>&gt;=</operator> <name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>&amp;&amp;</operator>

<name>out_opaque</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name><index>[<expr><name><name>x4</name><operator>-&gt;</operator><name>nb_reordered_opaque</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>=</operator> <name><name>out_opaque</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wallclock</name> <operator>=</operator> <name><name>out_opaque</name><operator>-&gt;</operator><name>wallclock</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>pic_out</name><operator>.</operator><name>i_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>X264_TYPE_IDR</name></expr>:</case>

<case>case <expr><name>X264_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X264_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>X264_TYPE_B</name></expr>:</case>

<case>case <expr><name>X264_TYPE_BREF</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>ctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>pict_type</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name><operator>*</operator><name><name>pic_out</name><operator>.</operator><name>b_keyframe</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pic_out</name><operator>.</operator><name>i_qpplus1</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wallclock</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_side_data_set_prft</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>wallclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>ctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>quality</name></name> <init>= <expr><operator>(</operator><name><name>pic_out</name><operator>.</operator><name>i_qpplus1</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>X264_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X264Context</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>x264_encoder_close</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_STR</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>, <parameter><type><name>param</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int ret; if ((ret = x264_param_parse(&amp;x4-&gt;params, opt, param)) &lt; 0) { if(ret == X264_PARAM_BAD_NAME) av_log(avctx, AV_LOG_ERROR, "bad option '%s': '%s'\n", opt, param); else av_log(avctx, AV_LOG_ERROR, "bad value for '%s': '%s'\n", opt, param); return -1; } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_pix_fmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>pix_fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P9</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case> <return>return <expr><name>X264_CSP_I420</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case> <return>return <expr><name>X264_CSP_I422</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P9</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case> <return>return <expr><name>X264_CSP_I444</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBX264RGB_ENCODER</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_BGR0</name></expr>:</case>

<return>return <expr><name>X264_CSP_BGRA</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<return>return <expr><name>X264_CSP_BGR</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<return>return <expr><name>X264_CSP_RGB</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case> <return>return <expr><name>X264_CSP_NV12</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_NV16</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_NV20</name></expr>:</case> <return>return <expr><name>X264_CSP_NV16</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X264_CSP_NV21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_NV21</name></expr>:</case> <return>return <expr><name>X264_CSP_NV21</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X264_CSP_I400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GRAY10</name></expr>:</case> <return>return <expr><name>X264_CSP_I400</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_X264_OPT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if (x4-&gt;var &amp;&amp; x264_param_parse(&amp;x4-&gt;params, name, x4-&gt;var) &lt; 0) {av_log(avctx, AV_LOG_ERROR, "Error parsing option '%s' with value '%s'.\n", name, x4-&gt;var);return AVERROR(EINVAL);}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>X264_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X264Context</name> <modifier>*</modifier></type><name>x4</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>cpb_props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sw</name></decl>,<decl><type ref="prev"/><name>sh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"-qscale is ignored, -crf is recommended.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBX262_ENCODER</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_mpeg2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x264_param_default_mpeg2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>x264_param_default</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_deblocking_filter</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOOP_FILTER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>preset</name></name> <operator>||</operator> <name><name>x4</name><operator>-&gt;</operator><name>tune</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>x264_param_default_preset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>preset</name></name></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>tune</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting preset/tune %s/%s.\n"</literal></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>preset</name></name></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>tune</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Possible presets:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>x264_preset_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>x264_preset_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Possible tunes:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>x264_tune_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>x264_tune_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_level_idc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>pf_log</name></name> <operator>=</operator> <name>X264_log</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>p_log_private</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_log_level</name></name> <operator>=</operator> <name>X264_LOG_DEBUG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_csp</name></name> <operator>=</operator> <call><name>convert_pix_fmt</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;=</operator> <literal type="number">153</literal></expr></cpp:if>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bitdepth</name></name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PARSE_X264_OPT</name><argument_list>(<argument><expr><literal type="string">"weightp"</literal></expr></argument>, <argument><expr><name>wpredp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <literal type="number">1000</literal> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bit_rate and rc_max_rate &gt; %d000 not supported by libx264\n"</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>X264_RC_ABR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_buffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_max_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_stat_write</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_stat_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>crf</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>X264_RC_CRF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>crf</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>cqp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_rc_method</name></name> <operator>=</operator> <name>X264_RC_CQP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_constant</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>cqp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>crf_max</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_rf_constant_max</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>crf_max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>&lt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_vbv_buffer_init</name></name> <operator>=</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PARSE_X264_OPT</name><argument_list>(<argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_ip_factor</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_pb_factor</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>chromaoffset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>chroma_offset</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>chromaoffset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>chroma_offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_chroma_qp_offset</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>chroma_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_max</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>scenechange_threshold</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>scenechange_threshold</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>scenechange_threshold</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_scenecut_threshold</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>scenechange_threshold</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_min</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_max</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_qdiff</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_qp_step</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_qdiff</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qblur</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_qblur</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qblur</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qcompress</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_qcompress</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qcompress</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_frame_reference</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbn</name> <init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><ternary><condition><expr><name>X264_BUILD</name> <operator>&lt;</operator> <literal type="number">129</literal></expr> ?</condition><then> <expr><literal type="number">384</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><literal type="string">"1b"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level_id</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>level_id</name> <operator>=</operator> <call><name>av_strtod</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level_id</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse level\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>x264_levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level_idc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>x264_levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level_idc</name> <operator>==</operator> <name>level_id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_frame_reference</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>x264_levels</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpb</name> <operator>/</operator> <name>mbn</name> <operator>/</operator> <name>scale</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_frame_reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_trellis</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_range</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>noise_reduction</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_noise_reduction</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>me_subpel_quality</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_subpel_refine</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>me_subpel_quality</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_frame_strategy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_keyint_min</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODER_TYPE</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coder_type</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coder_type</name></name> <operator>==</operator> <name>FF_CODER_TYPE_AC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_chroma_me</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>me_cmp</name></name> <operator>&amp;</operator> <name>FF_CMP_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>aq_mode</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_aq_mode</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>aq_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>aq_strength</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_aq_strength</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>aq_strength</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PARSE_X264_OPT</name><argument_list>(<argument><expr><literal type="string">"psy-rd"</literal></expr></argument>, <argument><expr><name>psy_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_X264_OPT</name><argument_list>(<argument><expr><literal type="string">"deblock"</literal></expr></argument>, <argument><expr><name>deblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_X264_OPT</name><argument_list>(<argument><expr><literal type="string">"partitions"</literal></expr></argument>, <argument><expr><name>partitions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PARSE_X264_OPT</name><argument_list>(<argument><expr><literal type="string">"stats"</literal></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>psy</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_psy</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>psy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>rc_lookahead</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_lookahead</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>rc_lookahead</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>weightp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_weighted_pred</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>weightp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>weightb</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_weighted_bipred</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>weightb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>cplxblur</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>f_complexity_blur</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>cplxblur</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>ssim</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_ssim</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>ssim</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>intra_refresh</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_intra_refresh</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>intra_refresh</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>bluray_compat</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_bluray_compat</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>bluray_compat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_vfr_input</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>avcintra_class</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;=</operator> <literal type="number">142</literal></expr></cpp:if>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_avcintra_class</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>avcintra_class</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"x264 too old for AVC Intra, at least version 142 needed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>b_bias</name></name> <operator>!=</operator> <name>INT_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe_bias</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>b_bias</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>b_pyramid</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe_pyramid</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>b_pyramid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>mixed_refs</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_mixed_references</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>mixed_refs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>dct8x8</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_transform_8x8</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>dct8x8</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>fast_pskip</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_fast_pskip</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>fast_pskip</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>aud</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_aud</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>aud</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>mbtree</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>b_mb_tree</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>mbtree</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>direct_pred</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_direct_mv_pred</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>direct_pred</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>slice_max_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_slice_max_size</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>slice_max_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>fastfirstpass</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>x264_param_apply_fastfirstpass</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_H264_BASELINE</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"baseline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_H264_HIGH</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"high"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_H264_HIGH_10</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"high10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_H264_HIGH_422</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"high422"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_H264_HIGH_444</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"high444"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_H264_MAIN</name></expr>:</case>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>nal_hrd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_nal_hrd</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>nal_hrd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>motion_est</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>i_me_method</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>motion_est</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>coder</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_cabac</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>coder</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe_adaptive</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>b_frame_strategy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>x264_param_apply_profile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting profile %s.\n"</literal></expr></argument>, <argument><expr><name><name>x4</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Possible profiles:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>x264_profile_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>x264_profile_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sh</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_width</name></name> <operator>=</operator> <name>sw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_sar_height</name></name> <operator>=</operator> <name>sh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_timebase_den</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_timebase_num</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_fps_num</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_fps_den</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_fps_num</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_fps_den</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>analyse</name><operator>.</operator><name>b_psnr</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PSNR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_threads</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_sliced_threads</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_interlaced</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_open_gop</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_CLOSED_GOP</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_slice_count</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>b_fullrange</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ420P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ422P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ444P</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colmatrix</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_colorprim</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>vui</name><operator>.</operator><name>i_transfer</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>b_repeat_headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>x4</name><operator>-&gt;</operator><name>x264opts</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name><init>= <expr><name><name>x4</name><operator>-&gt;</operator><name>x264opts</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>p</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>param</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>val</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%4095[^:=]=%4095[^:]"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>OPT_STR</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OPT_STR</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name><operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>+=</operator><operator>!</operator><operator>!</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>en</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>en</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>x264_params</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>en</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>x264_param_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Error parsing option '%s = %s'.\n"</literal></expr></argument>,

<argument><expr><name><name>en</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <ternary><condition><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe</name></name></expr> ?</condition><then>

<expr><ternary><condition><expr><name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>i_bframe_pyramid</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_bitrate</name></name><operator>*</operator><literal type="number">1000LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name> <operator>=</operator> <call><name>x264_encoder_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>x4</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>x264_nal_t</name> <modifier>*</modifier></type><name>nal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nnal</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>x264_encoder_headers</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nnal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nnal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>==</operator> <name>NAL_SEI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_payload</name><operator>+</operator><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name> <operator>=</operator> <name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>sei_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_payload</name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_payload</name></expr></argument>, <argument><expr><name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>nal</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_payload</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cpb_props</name> <operator>=</operator> <call><name>ff_add_cpb_side_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpb_props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_buffer_size</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>max_bitrate</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_vbv_max_bitrate</name></name> <operator>*</operator> <literal type="number">1000LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>avg_bitrate</name></name> <operator>=</operator> <name><name>x4</name><operator>-&gt;</operator><name>params</name><operator>.</operator><name>rc</name><operator>.</operator><name>i_bitrate</name></name> <operator>*</operator> <literal type="number">1000LL</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>nb_reordered_opaque</name></name> <operator>=</operator> <call><name>x264_encoder_maximum_delayed_frames</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>enc</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>x4</name><operator>-&gt;</operator><name>nb_reordered_opaque</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x4</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_8bit</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_NV16</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X264_CSP_NV21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>AV_PIX_FMT_NV21</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_9bit</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P9</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P9</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_10bit</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_NV20</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_all</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUVJ444P</name></expr>,

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_NV16</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X264_CSP_NV21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>AV_PIX_FMT_NV21</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_NV20</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X264_CSP_I400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>AV_PIX_FMT_GRAY8</name></expr>,

<expr><name>AV_PIX_FMT_GRAY10</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBX264RGB_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_8bit_rgb</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_BGR0</name></expr>,

<expr><name>AV_PIX_FMT_BGR24</name></expr>,

<expr><name>AV_PIX_FMT_RGB24</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>X264_init_static</name><parameter_list>(<parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&lt;</operator> <literal type="number">153</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>x264_bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>pix_fmts_8bit</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x264_bit_depth</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>pix_fmts_9bit</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x264_bit_depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>pix_fmts_10bit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>pix_fmts_all</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(X264Context, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"preset"</literal></expr>, <expr><literal type="string">"Set the encoding preset (cf. x264 --fullhelp)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>preset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"medium"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"tune"</literal></expr>, <expr><literal type="string">"Tune the encoding params (cf. x264 --fullhelp)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tune</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"Set profile restrictions (cf. x264 --fullhelp) "</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fastfirstpass"</literal></expr>, <expr><literal type="string">"Use fast settings when encoding first pass"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fastfirstpass</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Specify level (as defined by Annex A)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"passlogfile"</literal></expr>, <expr><literal type="string">"Filename for 2 pass stats"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wpredp"</literal></expr>, <expr><literal type="string">"Weighted prediction for P-frames"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>wpredp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"a53cc"</literal></expr>, <expr><literal type="string">"Use A53 Closed Captions (if available)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>a53_cc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"x264opts"</literal></expr>, <expr><literal type="string">"x264 options"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x264opts</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"crf"</literal></expr>, <expr><literal type="string">"Select the quality for constant quality mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crf</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"crf_max"</literal></expr>, <expr><literal type="string">"In CRF mode, prevents VBV from lowering quality beyond this point."</literal></expr>,<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>crf_max</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"Constant quantization parameter rate control method"</literal></expr>,<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cqp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aq-mode"</literal></expr>, <expr><literal type="string">"AQ method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aq_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_AQ_NONE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"variance"</literal></expr>, <expr><literal type="string">"Variance AQ (complexity mask)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_AQ_VARIANCE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"autovariance"</literal></expr>, <expr><literal type="string">"Auto-variance AQ"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_AQ_AUTOVARIANCE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;=</operator> <literal type="number">144</literal></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"autovariance-biased"</literal></expr>, <expr><literal type="string">"Auto-variance AQ with bias to dark scenes"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_AQ_AUTOVARIANCE_BIASED</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"aq_mode"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"aq-strength"</literal></expr>, <expr><literal type="string">"AQ strength. Reduces blocking and blurring in flat and textured areas."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aq_strength</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"psy"</literal></expr>, <expr><literal type="string">"Use psychovisual optimizations."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>psy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"psy-rd"</literal></expr>, <expr><literal type="string">"Strength of psychovisual optimization, in &lt;psy-rd&gt;:&lt;psy-trellis&gt; format."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>psy_rd</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"rc-lookahead"</literal></expr>, <expr><literal type="string">"Number of frames to look ahead for frametype and ratecontrol"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rc_lookahead</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"weightb"</literal></expr>, <expr><literal type="string">"Weighted prediction for B-frames."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>weightb</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"weightp"</literal></expr>, <expr><literal type="string">"Weighted prediction analysis method."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>weightp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"weightp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_WEIGHTP_NONE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"weightp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"simple"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_WEIGHTP_SIMPLE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"weightp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smart"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_WEIGHTP_SMART</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"weightp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ssim"</literal></expr>, <expr><literal type="string">"Calculate and print SSIM stats."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>ssim</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"intra-refresh"</literal></expr>, <expr><literal type="string">"Use Periodic Intra Refresh instead of IDR frames."</literal></expr>,<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>intra_refresh</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bluray-compat"</literal></expr>, <expr><literal type="string">"Bluray compatibility workarounds."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bluray_compat</name></expr></argument>)</argument_list></call></expr> ,<expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b-bias"</literal></expr>, <expr><literal type="string">"Influences how often B-frames are used"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b_bias</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INT_MIN</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b-pyramid"</literal></expr>, <expr><literal type="string">"Keep some B-frames as references."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b_pyramid</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"b_pyramid"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_B_PYRAMID_NONE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"b_pyramid"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strict"</literal></expr>, <expr><literal type="string">"Strictly hierarchical pyramid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_B_PYRAMID_STRICT</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"b_pyramid"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"normal"</literal></expr>, <expr><literal type="string">"Non-strict (not Blu-ray compatible)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_B_PYRAMID_NORMAL</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"b_pyramid"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mixed-refs"</literal></expr>, <expr><literal type="string">"One reference per partition, as opposed to one reference per macroblock"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mixed_refs</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"8x8dct"</literal></expr>, <expr><literal type="string">"High profile 8x8 transform."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dct8x8</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"fast-pskip"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>fast_pskip</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"Use access unit delimiters."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aud</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"mbtree"</literal></expr>, <expr><literal type="string">"Use macroblock tree ratecontrol."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>mbtree</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"deblock"</literal></expr>, <expr><literal type="string">"Loop filter parameters, in &lt;alpha:beta&gt; form."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>deblock</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"cplxblur"</literal></expr>, <expr><literal type="string">"Reduce fluctuations in QP (before curve compression)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>cplxblur</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{<expr><operator>.</operator><name>dbl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"partitions"</literal></expr>, <expr><literal type="string">"A comma-separated list of partitions to consider. "</literal>

<literal type="string">"Possible values: p8x8, p4x4, b8x8, i8x8, i4x4, none, all"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"direct-pred"</literal></expr>, <expr><literal type="string">"Direct MV prediction mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>direct_pred</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_DIRECT_PRED_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"spatial"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_DIRECT_PRED_SPATIAL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"temporal"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_DIRECT_PRED_TEMPORAL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_DIRECT_PRED_AUTO</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"direct-pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slice-max-size"</literal></expr>,<expr><literal type="string">"Limit the size of each slice in bytes"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>slice_max_size</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stats"</literal></expr>, <expr><literal type="string">"Filename for 2 pass stats"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nal-hrd"</literal></expr>, <expr><literal type="string">"Signal HRD information (requires vbv-bufsize; "</literal>

<literal type="string">"cbr not allowed in .mp4)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>nal_hrd</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"nal-hrd"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_NAL_HRD_NONE</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"nal-hrd"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vbr"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_NAL_HRD_VBR</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"nal-hrd"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cbr"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_NAL_HRD_CBR</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"nal-hrd"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"avcintra-class"</literal></expr>,<expr><literal type="string">"AVC-Intra class 50/100/200"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>avcintra_class</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">200</literal></expr> , <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"me_method"</literal></expr>, <expr><literal type="string">"Set motion estimation method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>motion_est</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>X264_ME_TESA</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"motion-est"</literal></expr>, <expr><literal type="string">"Set motion estimation method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>motion_est</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>X264_ME_TESA</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"dia"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_ME_DIA</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hex"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_ME_HEX</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"umh"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_ME_UMH</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"esa"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_ME_ESA</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tesa"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>X264_ME_TESA</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"motion-est"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"forced-idr"</literal></expr>, <expr><literal type="string">"If forcing keyframes, force them as IDR frames."</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>forced_idr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"coder"</literal></expr>, <expr><literal type="string">"Coder type"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>coder</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cavlc"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cabac"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vlc"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ac"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b_strategy"</literal></expr>, <expr><literal type="string">"Strategy to choose between I/P/B-frames"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>b_frame_strategy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chromaoffset"</literal></expr>, <expr><literal type="string">"QP difference between chroma and luma"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_offset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sc_threshold"</literal></expr>, <expr><literal type="string">"Scene change threshold"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>scenechange_threshold</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"noise_reduction"</literal></expr>, <expr><literal type="string">"Noise reduction"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>noise_reduction</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"x264-params"</literal></expr>, <expr><literal type="string">"Override the x264 configuration using a :-separated list of key=value parameters"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x264_params</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DICT</name></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>x264_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flags2"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"i_qfactor"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b_qfactor"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qdiff"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qblur"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qcomp"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"refs"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"sc_threshold"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"trellis"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"nr"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"me_range"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subq"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"b_strategy"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"keyint_min"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODER_TYPE</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"coder"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"cmp"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"threads"</literal></expr>, <macro><name>AV_STRINGIFY</name><argument_list>(<argument>X264_THREADS_AUTO</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"thread_type"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"+cgop"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rc_init_occupancy"</literal></expr>,<expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBX264_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>x264_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libx264"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libx264_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libx264"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>X264Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>X264_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>X264_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>X264_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_ENCODER_REORDERED_OPAQUE</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>x264_class</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>x264_defaults</name></expr>,

<expr><operator>.</operator><name>init_static_data</name> <operator>=</operator> <name>X264_init_static</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;=</operator> <literal type="number">158</literal></expr></cpp:if>

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libx264"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBX264RGB_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>rgbclass</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libx264rgb"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libx264rgb_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libx264rgb"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 RGB"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>X264Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>X264_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>X264_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>X264_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_ENCODER_REORDERED_OPAQUE</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>rgbclass</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>x264_defaults</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <name>pix_fmts_8bit_rgb</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X264_BUILD</name> <operator>&gt;=</operator> <literal type="number">158</literal></expr></cpp:if>

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libx264"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBX262_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>X262_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libx262"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libx262_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libx262"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libx262 MPEG2VIDEO"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>X264Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>X264_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>X264_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>X264_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_ENCODER_REORDERED_OPAQUE</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>X262_class</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>x264_defaults</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <name>pix_fmts_8bit</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libx264"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
