<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libzvbi-teletextdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/ass.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dvbtxt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libzvbi.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_MAXSZ</name></cpp:macro> <cpp:value>(25 * (56 + 1) * 4 + 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBI_NB_COLORS</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBI_TRANSPARENT_BLACK</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGBA</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &lt;&lt; 24) | ((r) &lt;&lt; 16) | ((g) &lt;&lt; 8) | (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBI_R</name><parameter_list>(<parameter><type><name>rgba</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((rgba) &gt;&gt; 0) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBI_G</name><parameter_list>(<parameter><type><name>rgba</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((rgba) &gt;&gt; 8) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBI_B</name><parameter_list>(<parameter><type><name>rgba</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((rgba) &gt;&gt; 16) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBI_A</name><parameter_list>(<parameter><type><name>rgba</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((rgba) &gt;&gt; 24) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUFFERED_PAGES</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_CHAR_WIDTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_CHAR_HEIGHT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SLICES</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>TeletextPage</name>

<block>{

<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>sub_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pgno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>TeletextPage</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TeletextContext</name>

<block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pgno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>default_region</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>format_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>chop_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub_duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>transparent_bg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chop_spaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lines_processed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TeletextPage</name> <modifier>*</modifier></type><name>pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>handler_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_decoder</name> <modifier>*</modifier></type> <name>vbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_sliced</name></type> <name><name>sliced</name><index>[<expr><name>MAX_SLICES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>readorder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>subtitle_map</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_pgno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_p5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_ass_alignment</name></decl>;</decl_stmt>

}</block></struct></type> <name>TeletextContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>my_ass_subtitle_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_ass_subtitle_header_default</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>event_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>event_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n[Events]\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event_pos</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_header</name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%.*s%s%s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>event_pos</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>,

<argument><expr><literal type="string">"Style: "</literal>

<literal type="string">"Teletext,"</literal> 

<literal type="string">"Monospace,11,"</literal> 

<literal type="string">"&amp;Hffffff,&amp;Hffffff,&amp;H0,&amp;H0,"</literal> 

<literal type="string">"0,0,0,0,"</literal> 

<literal type="string">"160,100,"</literal> 

<literal type="string">"0,0,"</literal> 

<literal type="string">"3,0.1,0,"</literal> 

<literal type="string">"5,1,1,1,"</literal> 

<literal type="string">"0\r\n"</literal> 

<literal type="string">"Style: "</literal>

<literal type="string">"Subtitle,"</literal> 

<literal type="string">"Monospace,16,"</literal> 

<literal type="string">"&amp;Hffffff,&amp;Hffffff,&amp;H0,&amp;H0,"</literal> 

<literal type="string">"0,0,0,0,"</literal> 

<literal type="string">"100,100,"</literal> 

<literal type="string">"0,0,"</literal> 

<literal type="string">"1,1,1,"</literal> 

<literal type="string">"8,48,48,20,"</literal> 

<literal type="string">"0\r\n"</literal></expr></argument> 

, <argument><expr><name>event_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_header</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name> <operator>=</operator> <name>new_header</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header_size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>new_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chop_spaces_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>--</operator><name>t</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>(</operator><name>len</name><operator>-</operator><literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>t</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subtitle_rect_free</name><parameter_list>(<parameter><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier><modifier>*</modifier></type><name>sub_rect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>sub_rect</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>sub_rect</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>sub_rect</name><operator>)</operator><operator>-&gt;</operator><name>ass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>sub_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>create_ass_text</name><parameter_list>(<parameter><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_ass_bprint_text_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>ff_ass_get_dialog</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>readorder</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dialog</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gen_sub_text</name><parameter_list>(<parameter><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>sub_rect</name></decl></parameter>, <parameter><decl><type><name>vbi_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chop_top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vbi_text</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>TEXT_MAXSZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vbi_text</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>vbi_print_page_region</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>vbi_text</name></expr></argument>, <argument><expr><name>TEXT_MAXSZ</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>chop_top</name></expr></argument>,

<argument><expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>rows</name></name><operator>-</operator><name>chop_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vbi_print error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>vbi_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vbi_text</name><index>[<expr><name>sz</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <name>vbi_text</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TEXT_MAXSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chop_spaces</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nl</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">" \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>nl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>in</name><index>[<expr><name>nl</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>nl</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><name>nl</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nl</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>in</name><index>[<expr><name>nl</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>in</name><index>[<expr><name>nl</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>chop_spaces_utf8</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>nl</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>vbi_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>vbi_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SUBTITLE_ASS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>ass</name></name> <operator>=</operator> <call><name>create_ass_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>ass</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"subtext:%s:txetbus\n"</literal></expr></argument>, <argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>ass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SUBTITLE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bprint_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>vbi_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ci</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>VBI_R</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>color_map</name><index>[<expr><name>ci</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>VBI_G</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>color_map</name><index>[<expr><name>ci</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>VBI_B</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>color_map</name><index>[<expr><name>ci</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\%s&amp;H%02X%02X%02X&amp;}"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TXT_SPACE</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ch).unicode &lt; 0x0020 || (ch).unicode &gt;= 0xe000 || (ch).unicode == 0x00a0 ||(ch).size &gt; VBI_DOUBLE_SIZE || (ch).opacity == VBI_TRANSPARENT_SPACE)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_trim_info</name><parameter_list>(<parameter><decl><type><name>vbi_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>leading</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>trailing</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>char_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>leading</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>out</name> <init>= <expr><ternary><condition><expr><call><name>IS_TXT_SPACE</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unicode</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>char_seen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>leading</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>out</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>char_seen</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <name>i</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>leading</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>trailing</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name> <operator>-</operator> <operator>*</operator><name>leading</name> <operator>-</operator> <name>len</name></expr> </then><else>: <expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_string</name><parameter_list>(<parameter><decl><type><name>vbi_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>vbi_color</name> <modifier>*</modifier></type><name>cur_color</name></decl></parameter>, <parameter><decl><type><name>vbi_color</name> <modifier>*</modifier></type><name>cur_back_color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>out</name> <init>= <expr><ternary><condition><expr><call><name>IS_TXT_SPACE</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>unicode</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur_color</name> <operator>!=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>foreground</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprint_color</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>foreground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur_color</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>foreground</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cur_back_color</name> <operator>!=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>background</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bprint_color</name><argument_list>(<argument><expr><literal type="string">"3c"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cur_back_color</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>background</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>out</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <name>out</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>tmp</name></decl>;</decl_stmt>

<macro><name>PUT_UTF8</name><argument_list>(<argument>out</argument>, <argument>tmp</argument>, <argument>av_bprint_chars(buf, tmp, <literal type="number">1</literal>);</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gen_sub_ass</name><parameter_list>(<parameter><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>sub_rect</name></decl></parameter>, <parameter><decl><type><name>vbi_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chop_top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leading</name></decl>, <decl><type ref="prev"/><name>trailing</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_trailing</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_leading</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_trailing</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>, <decl><type ref="prev"/><name>min_leading</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alignment</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical_align</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>can_align_left</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>can_align_right</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>can_align_center</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_subtitle_page</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>subtitle_map</name><index>[<expr><name><name>page</name><operator>-&gt;</operator><name>pgno</name></name> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_color</name></type> <name>cur_color</name> <init>= <expr><name>VBI_WHITE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_color</name></type> <name>cur_back_color</name> <init>= <expr><name>VBI_BLACK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>chop_top</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>page</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>text</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_trim_info</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leading</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_leading</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>last_leading</name> <operator>!=</operator> <name>leading</name> <operator>||</operator> <name>leading</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>can_align_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_trailing</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>last_trailing</name> <operator>!=</operator> <name>trailing</name> <operator>||</operator> <name>trailing</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>can_align_right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_trailing</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>trailing</name> <operator>-</operator> <name>leading</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>last_trailing</name> <operator>-</operator> <name>last_leading</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>trailing</name> <operator>-</operator> <name>leading</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>can_align_center</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_leading</name> <operator>=</operator> <name>leading</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_trailing</name> <operator>=</operator> <name>trailing</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_leading</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>leading</name></expr></argument>, <argument><expr><name>min_leading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_trailing</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>trailing</name></expr></argument>, <argument><expr><name>min_trailing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_align_right</name> <operator>&amp;&amp;</operator> <name>can_align_left</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>can_align_center</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name> <operator>=</operator> <name>alignment</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>can_align_right</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>can_align_left</name> <operator>&amp;&amp;</operator> <name>can_align_center</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name> <operator>=</operator> <name>alignment</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>can_align_right</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>can_align_left</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>can_align_center</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name> <operator>=</operator> <name>alignment</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>can_align_left</name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>can_align_center</name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>can_align_right</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>alignment</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>chop_top</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>page</name><operator>-&gt;</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>text</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_transparent_line</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>opacity</name> <operator>!=</operator> <name>VBI_TRANSPARENT_SPACE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>is_transparent_line</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>==</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>is_transparent_line</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>leading</name> <operator>=</operator> <name>trailing</name> <operator>=</operator> <ternary><condition><expr><name>is_transparent_line</name></expr> ?</condition><then> <expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_subtitle_page</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_transparent_line</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_trim_info</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>leading</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical_align</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vertical_align</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><call><name>av_clip</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\an%d}"</literal></expr></argument>, <argument><expr><name>alignment</name> <operator>+</operator> <name>vertical_align</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical_align</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>empty_lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name>empty_lines</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>empty_lines</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>empty_lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>empty_lines</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" \\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alignment</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>alignment</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>can_align_center</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>leading</name> <operator>=</operator> <name>min_leading</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alignment</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>alignment</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>can_align_center</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>trailing</name> <operator>=</operator> <name>min_trailing</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>||</operator> <operator>!</operator><name>is_subtitle_page</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_string</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>leading</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name> <operator>-</operator> <name>trailing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_back_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" \\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>empty_lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>empty_lines</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vertical_align</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>empty_lines</name> <operator>=</operator> <operator>(</operator><name>empty_lines</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>empty_lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>empty_lines</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" \\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SUBTITLE_ASS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>ass</name></name> <operator>=</operator> <call><name>ff_ass_get_dialog</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>readorder</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>is_subtitle_page</name></expr> ?</condition><then> <expr><literal type="string">"Subtitle"</literal></expr> </then><else>: <expr><literal type="string">"Teletext"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>ass</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"subtext:%s:txetbus\n"</literal></expr></argument>, <argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>ass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SUBTITLE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fix_transparency</name><parameter_list>(<parameter><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>sub_rect</name></decl></parameter>, <parameter><decl><type><name>vbi_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>chop_top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>iy</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>iy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iy</name> <operator>&lt;</operator> <name>resy</name></expr>;</condition> <incr><expr><name>iy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixel</name> <init>= <expr><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>iy</name> <operator>*</operator> <name><name>sub_rect</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>vc</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>text</name></name> <operator>+</operator> <operator>(</operator><name>iy</name> <operator>/</operator> <name>BITMAP_CHAR_HEIGHT</name> <operator>+</operator> <name>chop_top</name><operator>)</operator> <operator>*</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>vcnext</name> <init>= <expr><name>vc</name> <operator>+</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>vc</name> <operator>&lt;</operator> <name>vcnext</name></expr>;</condition> <incr><expr><name>vc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixelnext</name> <init>= <expr><name>pixel</name> <operator>+</operator> <name>BITMAP_CHAR_WIDTH</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>opacity</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VBI_TRANSPARENT_SPACE</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>, <argument><expr><name>VBI_TRANSPARENT_BLACK</name></expr></argument>, <argument><expr><name>BITMAP_CHAR_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VBI_OPAQUE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>transparent_bg</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><name>VBI_SEMI_TRANSPARENT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opacity</name></name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init>;</init> <condition><expr><name>pixel</name> <operator>&lt;</operator> <name>pixelnext</name></expr>;</condition> <incr><expr><name>pixel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pixel</name> <operator>==</operator> <name><name>vc</name><operator>-&gt;</operator><name>background</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pixel</name> <operator>+=</operator> <name>VBI_NB_COLORS</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>VBI_TRANSPARENT_FULL</name></expr>:</case>

<for>for<control>(<init>;</init> <condition><expr><name>pixel</name> <operator>&lt;</operator> <name>pixelnext</name></expr>;</condition> <incr><expr><name>pixel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pixel</name> <operator>==</operator> <name><name>vc</name><operator>-&gt;</operator><name>background</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pixel</name> <operator>=</operator> <name>VBI_TRANSPARENT_BLACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <name>pixelnext</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gen_sub_bitmap</name><parameter_list>(<parameter><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>sub_rect</name></decl></parameter>, <parameter><decl><type><name>vbi_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chop_top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>resx</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name> <operator>*</operator> <name>BITMAP_CHAR_WIDTH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>resy</name> <init>= <expr><operator>(</operator><name><name>page</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>chop_top</name><operator>)</operator> <operator>*</operator> <name>BITMAP_CHAR_HEIGHT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ci</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>vc</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>text</name></name> <operator>+</operator> <operator>(</operator><name>chop_top</name> <operator>*</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_char</name> <modifier>*</modifier></type><name>vcend</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>text</name></name> <operator>+</operator> <operator>(</operator><name><name>page</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>page</name><operator>-&gt;</operator><name>columns</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>vc</name> <operator>&lt;</operator> <name>vcend</name></expr>;</condition> <incr><expr><name>vc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vc</name><operator>-&gt;</operator><name>opacity</name></name> <operator>!=</operator> <name>VBI_TRANSPARENT_SPACE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vc</name> <operator>&gt;=</operator> <name>vcend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"dropping empty page %3x\n"</literal></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SUBTITLE_NONE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>resx</name> <operator>*</operator> <name>resy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>resx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vbi_draw_vt_page_region</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>VBI_PIXFMT_PAL8</name></expr></argument>,

<argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>chop_top</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>chop_top</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fix_transparency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sub_rect</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>chop_top</name></expr></argument>, <argument><expr><name>resx</name></expr></argument>, <argument><expr><name>resy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>x_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_offset</name></name> <operator>+</operator> <name>chop_top</name> <operator>*</operator> <name>BITMAP_CHAR_HEIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>resx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>resy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>nb_colors</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>opacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opacity</name></name> <operator>&lt;</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>VBI_NB_COLORS</name></expr> </then><else>: <expr><name>VBI_NB_COLORS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ci</name> <operator>&lt;</operator> <name>VBI_NB_COLORS</name></expr>;</condition> <incr><expr><name>ci</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>VBI_R</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>color_map</name><index>[<expr><name>ci</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>VBI_G</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>color_map</name><index>[<expr><name>ci</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>VBI_B</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>color_map</name><index>[<expr><name>ci</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>VBI_A</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>color_map</name><index>[<expr><name>ci</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>ci</name></expr>]</index> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>ci</name> <operator>+</operator> <name>VBI_NB_COLORS</name></expr>]</index> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>opacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"palette %0x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>ci</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>VBI_TRANSPARENT_BLACK</name></expr>]</index> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>sub_rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>VBI_TRANSPARENT_BLACK</name> <operator>+</operator> <name>VBI_NB_COLORS</name></expr>]</index> <operator>=</operator> <call><name>RGBA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub_rect</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SUBTITLE_BITMAP</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handler</name><parameter_list>(<parameter><decl><type><name>vbi_event</name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TeletextPage</name> <modifier>*</modifier></type><name>new_pages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vbi_page</name></type> <name>page</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>pgno_str</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chop_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_subtitle_page</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>subtitle_map</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>pgno</name></name> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pgno_str</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pgno_str</name></sizeof></expr></argument>, <argument><expr><literal type="string">"%03x"</literal></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>pgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"decoded page %s.%02x\n"</literal></expr></argument>,

<argument><expr><name>pgno_str</name></expr></argument>, <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>subno</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>, <argument><expr><literal type="string">"subtitle"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>is_subtitle_page</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>, <argument><expr><name>pgno_str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>handler_ret</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vbi_fetch_vt_page</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>,

<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>pgno</name></name></expr></argument>,

<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>subno</name></name></expr></argument>,

<argument><expr><name>VBI_WST_LEVEL_3p5</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chop_top</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chop_top</name></name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>page</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>is_subtitle_page</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%d x %d page chop:%d\n"</literal></expr></argument>,

<argument><expr><name><name>page</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>page</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>chop_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name> <operator>&lt;</operator> <name>MAX_BUFFERED_PAGES</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_pages</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TeletextPage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>TeletextPage</name> <modifier>*</modifier></type><name>cur_page</name> <init>= <expr><name>new_pages</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pages</name></name> <operator>=</operator> <name>new_pages</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_page</name><operator>-&gt;</operator><name>sub_rect</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cur_page</name><operator>-&gt;</operator><name>sub_rect</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_page</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_page</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>pgno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_page</name><operator>-&gt;</operator><name>subno</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>ev</name><operator>.</operator><name>ttx_page</name><operator>.</operator><name>subno</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_page</name><operator>-&gt;</operator><name>sub_rect</name></name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>gen_sub_bitmap</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>cur_page</name><operator>-&gt;</operator><name>sub_rect</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>, <argument><expr><name>chop_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>gen_sub_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>cur_page</name><operator>-&gt;</operator><name>sub_rect</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>, <argument><expr><name>chop_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>gen_sub_ass</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>cur_page</name><operator>-&gt;</operator><name>sub_rect</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>, <argument><expr><name>chop_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_page</name><operator>-&gt;</operator><name>sub_rect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>handler_ret</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cur_page</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>handler_ret</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>handler_ret</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffered too many pages, dropping page %s.\n"</literal></expr></argument>, <argument><expr><name>pgno_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>handler_ret</name></name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vbi_unref_page</name><argument_list>(<argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice_to_vbi_lines</name><parameter_list>(<parameter><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>lines</name> <operator>&lt;</operator> <name>MAX_SLICES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>data_unit_id</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_unit_length</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data_unit_length</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_data_unit_id_is_teletext</name><argument_list>(<argument><expr><name>data_unit_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>data_unit_length</name> <operator>!=</operator> <literal type="number">0x2c</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>line_offset</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>field_parity</name> <init>= <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>sliced</name><index>[<expr><name>lines</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pmag</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sliced</name><index>[<expr><name>lines</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>VBI_SLICED_TELETEXT_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sliced</name><index>[<expr><name>lines</name></expr>]</index></name><operator>.</operator><name>line</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>line_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>line_offset</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>field_parity</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">313</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">42</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vbi_rev8</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>pmag</name> <operator>=</operator> <call><name>vbi_unham16p</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pmag</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pmag</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>page</name> <init>= <expr><call><name>vbi_unham16p</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags1</name> <init>= <expr><call><name>vbi_unham16p</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags2</name> <init>= <expr><call><name>vbi_unham16p</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>page</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>flags1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>flags2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pgno</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pmag</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>page</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>subtitle_map</name><index>[<expr><name>pgno</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>flags1</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>flags1</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>flags2</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subtitle_map</name><index>[<expr><name>pgno</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pgno</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>last_pgno</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_byte9</name> <init>= <expr><call><name>vbi_unham8</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_p5</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last_byte9</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>last_byte9</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>byte9</name> <init>= <expr><call><name>vbi_unham8</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>byte9</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>vbi_ham8</name><argument_list>(<argument><expr><name>byte9</name> <operator>|</operator> <literal type="number">0x8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_pgno</name></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_p5</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lines</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>data_unit_length</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>data_unit_length</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%d bytes remained after slicing data\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>lines</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>teletext_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name> <operator>=</operator> <call><name>vbi_decoder_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>default_region</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Setting default zvbi region to %i\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>default_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vbi_teletext_set_default_region</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>default_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vbi_event_handler_register</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>, <argument><expr><name>VBI_EVENT_TTX_PAGE</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vbi_decoder_delete</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>full_pes_size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">45</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>full_pes_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">184</literal> <operator>||</operator> <name>full_pes_size</name></expr></argument> &gt;</argument_list></name> <literal type="number">65504</literal> <operator>||</operator> <name>full_pes_size</name> <operator>%</operator> <literal type="number">184</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>handler_ret</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_data_identifier_is_teletext</name><argument_list>(<argument><expr><operator>*</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lines</name> <operator>=</operator> <call><name>slice_to_vbi_lines</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>lines</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ctx=%p buf_size=%d lines=%u pkt_pts=%7.3f\n"</literal></expr></argument>,

<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name><operator>/</operator><literal type="number">90000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vbi_decode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sliced</name></name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lines_processed</name></name> <operator>+=</operator> <name>lines</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>handler_ret</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>format_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>start_display_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sub_duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pages</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pages</name><operator>-&gt;</operator><name>sub_rect</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>SUBTITLE_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pages</name><operator>-&gt;</operator><name>sub_rect</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>pict</name><operator>.</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>pict</name><operator>.</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sending empty sub\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>subtitle_rect_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pages</name><operator>-&gt;</operator><name>sub_rect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>teletext_init_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maj</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>rev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vbi_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>maj</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>min</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>min</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>rev</name> <operator>&gt;=</operator> <literal type="number">26</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decoder needs zvbi version &gt;= 0.2.26.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">41</literal> <operator>*</operator> <name>BITMAP_CHAR_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">25</literal> <operator>*</operator> <name>BITMAP_CHAR_HEIGHT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_pgno</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opacity</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opacity</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>transparent_bg</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"page filter: %s\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>format_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><call><name>ff_ass_subtitle_header_default</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><call><name>my_ass_subtitle_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>teletext_close_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TeletextContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"lines_total=%u\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lines_processed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>subtitle_rect_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pages</name><index>[<expr><operator>--</operator><name><name>ctx</name><operator>-&gt;</operator><name>nb_pages</name></name></expr>]</index></name><operator>.</operator><name>sub_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vbi_decoder_delete</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vbi</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_pgno</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_ass_alignment</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>subtitle_map</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>subtitle_map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_RO_FLUSH_NOOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>readorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>teletext_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>teletext_close_decoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TeletextContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_SUBTITLE_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"txt_page"</literal></expr>, <expr><literal type="string">"page numbers to decode, subtitle for subtitles, * for all"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{<expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"*"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_default_region"</literal></expr>, <expr><literal type="string">"default G0 character set used for decoding"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>default_region</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_chop_top"</literal></expr>, <expr><literal type="string">"discards the top teletext line"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chop_top</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_format"</literal></expr>, <expr><literal type="string">"format of the subtitles (bitmap or text or ass)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>format_id</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>SD</name></expr>, <expr><literal type="string">"txt_format"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bitmap"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SD</name></expr>, <expr><literal type="string">"txt_format"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"text"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SD</name></expr>, <expr><literal type="string">"txt_format"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ass"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SD</name></expr>, <expr><literal type="string">"txt_format"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_left"</literal></expr>, <expr><literal type="string">"x offset of generated bitmaps"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>x_offset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_top"</literal></expr>, <expr><literal type="string">"y offset of generated bitmaps"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>y_offset</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_chop_spaces"</literal></expr>, <expr><literal type="string">"chops leading and trailing spaces from text"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chop_spaces</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_duration"</literal></expr>, <expr><literal type="string">"display duration of teletext pages in msecs"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sub_duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">86400000</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_transparent"</literal></expr>, <expr><literal type="string">"force transparent background of the teletext"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>transparent_bg</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"txt_opacity"</literal></expr>, <expr><literal type="string">"set opacity of the transparent background"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>opacity</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>SD</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>teletext_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libzvbi_teletextdec"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libzvbi_teletext_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libzvbi_teletextdec"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Libzvbi DVB teletext decoder"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DVB_TELETEXT</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TeletextContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>teletext_init_decoder</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>teletext_close_decoder</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>teletext_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>teletext_flush</name></expr>,

<expr><operator>.</operator><name>priv_class</name><operator>=</operator> <operator>&amp;</operator><name>teletext_class</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libzvbi"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
