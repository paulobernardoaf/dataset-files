<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ac3.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_MAX_CODED_FRAME_SIZE</name></cpp:macro> <cpp:value>3840</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAC3_MAX_CHANNELS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_MAX_CHANNELS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPL_CH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_MAX_COEFS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_BLOCK_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_MAX_BLOCKS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_FRAME_SIZE</name></cpp:macro> <cpp:value>(AC3_MAX_BLOCKS * 256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_WINDOW_SIZE</name></cpp:macro> <cpp:value>(AC3_BLOCK_SIZE * 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_CRITICAL_BANDS</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_MAX_CPL_BANDS</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3tab.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXP_REUSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXP_NEW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXP_D15</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXP_D25</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXP_D45</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIXED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FIXED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FLOAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((a) * 0 + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXR12</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((a) * 4096 + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXR15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((a) * 32768 + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND15</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) + 16384) &gt;&gt; 15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_fixed</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_NORM</name><parameter_list>(<parameter><type><name>norm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1&lt;&lt;24)/(norm)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_MUL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((int64_t) (a)) * (b))&gt;&gt;12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_RANGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)|(((x)&amp;128)&lt;&lt;1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_HEAVY_RANGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_DYNAMIC_RANGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_SPX_BLEND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_DYNAMIC_RANGE1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>INTFLOAT</name>;</typedef>

<typedef>typedef <type><name>int16_t</name></type> <name>SHORTFLOAT</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXR12</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXR15</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND15</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_NORM</name><parameter_list>(<parameter><type><name>norm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1.0f/(norm))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_MUL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) * (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_RANGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dynamic_range_tab[(x)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_HEAVY_RANGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_ac3_heavy_dynamic_range_tab[(x)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_DYNAMIC_RANGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(powf(x, s-&gt;drc_scale))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_SPX_BLEND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)* (1.0f/32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_DYNAMIC_RANGE1</name></cpp:macro> <cpp:value>1.0f</cpp:value></cpp:define>

<typedef>typedef <type><name>float</name></type> <name>INTFLOAT</name>;</typedef>

<typedef>typedef <type><name>float</name></type> <name>SHORTFLOAT</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_LEVEL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ROUND15((x) * FIXR15(M_SQRT1_2))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_PLUS_3DB</name></cpp:macro> <cpp:value>M_SQRT2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_PLUS_1POINT5DB</name></cpp:macro> <cpp:value>1.1892071150027209</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_MINUS_1POINT5DB</name></cpp:macro> <cpp:value>0.8408964152537145</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_MINUS_3DB</name></cpp:macro> <cpp:value>M_SQRT1_2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_MINUS_4POINT5DB</name></cpp:macro> <cpp:value>0.5946035575013605</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_MINUS_6DB</name></cpp:macro> <cpp:value>0.5000000000000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_MINUS_9DB</name></cpp:macro> <cpp:value>0.3535533905932738</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_ZERO</name></cpp:macro> <cpp:value>0.0000000000000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL_ONE</name></cpp:macro> <cpp:value>1.0000000000000000</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>DBA_REUSE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>DBA_NEW</name></decl>,

<decl><name>DBA_NONE</name></decl>,

<decl><name>DBA_RESERVED</name></decl>

}</block></enum></type> <name>AC3DeltaStrategy</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>AC3_CHMODE_DUALMONO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AC3_CHMODE_MONO</name></decl>,

<decl><name>AC3_CHMODE_STEREO</name></decl>,

<decl><name>AC3_CHMODE_3F</name></decl>,

<decl><name>AC3_CHMODE_2F1R</name></decl>,

<decl><name>AC3_CHMODE_3F1R</name></decl>,

<decl><name>AC3_CHMODE_2F2R</name></decl>,

<decl><name>AC3_CHMODE_3F2R</name></decl>

}</block></enum></type> <name>AC3ChannelMode</name>;</typedef>

<typedef>typedef <type><enum>enum <name>AC3DolbySurroundMode</name> <block>{

<decl><name>AC3_DSURMOD_NOTINDICATED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AC3_DSURMOD_OFF</name></decl>,

<decl><name>AC3_DSURMOD_ON</name></decl>,

<decl><name>AC3_DSURMOD_RESERVED</name></decl>

}</block></enum></type> <name>AC3DolbySurroundMode</name>;</typedef>

<typedef>typedef <type><enum>enum <name>AC3DolbySurroundEXMode</name> <block>{

<decl><name>AC3_DSUREXMOD_NOTINDICATED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AC3_DSUREXMOD_OFF</name></decl>,

<decl><name>AC3_DSUREXMOD_ON</name></decl>,

<decl><name>AC3_DSUREXMOD_PLIIZ</name></decl>

}</block></enum></type> <name>AC3DolbySurroundEXMode</name>;</typedef>

<typedef>typedef <type><enum>enum <name>AC3DolbyHeadphoneMode</name> <block>{

<decl><name>AC3_DHEADPHONMOD_NOTINDICATED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AC3_DHEADPHONMOD_OFF</name></decl>,

<decl><name>AC3_DHEADPHONMOD_ON</name></decl>,

<decl><name>AC3_DHEADPHONMOD_RESERVED</name></decl>

}</block></enum></type> <name>AC3DolbyHeadphoneMode</name>;</typedef>

<typedef>typedef <type><enum>enum <name>AC3PreferredStereoDownmixMode</name> <block>{

<decl><name>AC3_DMIXMOD_NOTINDICATED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AC3_DMIXMOD_LTRT</name></decl>,

<decl><name>AC3_DMIXMOD_LORO</name></decl>,

<decl><name>AC3_DMIXMOD_DPLII</name></decl> 

}</block></enum></type> <name>AC3PreferredStereoDownmixMode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AC3BitAllocParameters</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>sr_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sr_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slow_gain</name></decl>, <name>slow_decay</name>, <name>fast_decay</name>, <name>db_per_bit</name>, <name>floor</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpl_fast_leak</name></decl>, <name>cpl_slow_leak</name>;</decl_stmt>

}</block></struct></type> <name>AC3BitAllocParameters</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AC3HeaderInfo</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>sync_word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>crc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sr_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitstream_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitstream_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>channel_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>lfe_on</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>substreamid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>center_mix_level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>surround_mix_level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>channel_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dolby_surround_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sr_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>

}</block></struct></type> <name>AC3HeaderInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>EAC3_FRAME_TYPE_INDEPENDENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>EAC3_FRAME_TYPE_DEPENDENT</name></decl>,

<decl><name>EAC3_FRAME_TYPE_AC3_CONVERT</name></decl>,

<decl><name>EAC3_FRAME_TYPE_RESERVED</name></decl>

}</block></enum></type> <name>EAC3FrameType</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_ac3_common_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_bit_alloc_calc_psd</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>psd</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>band_psd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ac3_bit_alloc_calc_mask</name><parameter_list>(<parameter><decl><type><name>AC3BitAllocParameters</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>band_psd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fast_gain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_lfe</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dba_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dba_nsegs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dba_offsets</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dba_lengths</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dba_values</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
