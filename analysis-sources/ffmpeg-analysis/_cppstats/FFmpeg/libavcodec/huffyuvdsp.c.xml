<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\huffyuvdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"huffyuvdsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pw_1</name></cpp:macro> <cpp:value>(ULONG_MAX / UINT16_MAX)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_int16_c</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pw_lsb</name> <init>= <expr><operator>(</operator><name>mask</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>pw_1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pw_msb</name> <init>= <expr><name>pw_lsb</name> <operator>+</operator> <name>pw_1</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>w</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name><operator>+</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name><operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name><operator>+</operator><name>i</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name><operator>&amp;</operator><name>pw_lsb</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name><operator>&amp;</operator><name>pw_lsb</name><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator><operator>&amp;</operator><name>pw_msb</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_hfyu_median_pred_int16_c</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>diff</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>left_top</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>lt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>*</operator><name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lt</name> <operator>=</operator> <operator>*</operator><name>left_top</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><call><name>mid_pred</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>l</name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>lt</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>diff</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lt</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>left_top</name> <operator>=</operator> <name>lt</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_hfyu_left_pred_bgr32_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>intptr_t</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name> <init>= <expr><name><name>left</name><index>[<expr><name>R</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><name><name>left</name><index>[<expr><name>G</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>left</name><index>[<expr><name>B</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>a</name> <init>= <expr><name><name>left</name><index>[<expr><name>A</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>B</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>G</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>R</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>A</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>B</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>G</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>R</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>A</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>B</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>G</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>R</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>A</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_huffyuvdsp_init</name><parameter_list>(<parameter><decl><type><name>HuffYUVDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_int16</name></name> <operator>=</operator> <name>add_int16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_hfyu_median_pred_int16</name></name> <operator>=</operator> <name>add_hfyu_median_pred_int16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_hfyu_left_pred_bgr32</name></name> <operator>=</operator> <name>add_hfyu_left_pred_bgr32_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_huffyuvdsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
