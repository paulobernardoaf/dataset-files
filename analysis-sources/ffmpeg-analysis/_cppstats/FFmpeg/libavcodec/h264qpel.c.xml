<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264qpel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixeltmp</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pixeltmp</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixeltmp</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264qpel_init</name><parameter_list>(<parameter><decl><type><name>H264QpelContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNCC</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCC</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f ##_ ##depth ##_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dspfunc2</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>NUM</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;PFX ##_pixels_tab[IDX][ 0] = FUNCC(PFX ##NUM ##_mc00, depth); c-&gt;PFX ##_pixels_tab[IDX][ 1] = FUNCC(PFX ##NUM ##_mc10, depth); c-&gt;PFX ##_pixels_tab[IDX][ 2] = FUNCC(PFX ##NUM ##_mc20, depth); c-&gt;PFX ##_pixels_tab[IDX][ 3] = FUNCC(PFX ##NUM ##_mc30, depth); c-&gt;PFX ##_pixels_tab[IDX][ 4] = FUNCC(PFX ##NUM ##_mc01, depth); c-&gt;PFX ##_pixels_tab[IDX][ 5] = FUNCC(PFX ##NUM ##_mc11, depth); c-&gt;PFX ##_pixels_tab[IDX][ 6] = FUNCC(PFX ##NUM ##_mc21, depth); c-&gt;PFX ##_pixels_tab[IDX][ 7] = FUNCC(PFX ##NUM ##_mc31, depth); c-&gt;PFX ##_pixels_tab[IDX][ 8] = FUNCC(PFX ##NUM ##_mc02, depth); c-&gt;PFX ##_pixels_tab[IDX][ 9] = FUNCC(PFX ##NUM ##_mc12, depth); c-&gt;PFX ##_pixels_tab[IDX][10] = FUNCC(PFX ##NUM ##_mc22, depth); c-&gt;PFX ##_pixels_tab[IDX][11] = FUNCC(PFX ##NUM ##_mc32, depth); c-&gt;PFX ##_pixels_tab[IDX][12] = FUNCC(PFX ##NUM ##_mc03, depth); c-&gt;PFX ##_pixels_tab[IDX][13] = FUNCC(PFX ##NUM ##_mc13, depth); c-&gt;PFX ##_pixels_tab[IDX][14] = FUNCC(PFX ##NUM ##_mc23, depth); c-&gt;PFX ##_pixels_tab[IDX][15] = FUNCC(PFX ##NUM ##_mc33, depth)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_QPEL</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dspfunc2(put_h264_qpel, 0, 16, depth); dspfunc2(put_h264_qpel, 1, 8, depth); dspfunc2(put_h264_qpel, 2, 4, depth); dspfunc2(put_h264_qpel, 3, 2, depth); dspfunc2(avg_h264_qpel, 0, 16, depth); dspfunc2(avg_h264_qpel, 1, 8, depth); dspfunc2(avg_h264_qpel, 2, 4, depth)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>bit_depth</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<expr_stmt><expr><call><name>SET_QPEL</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><call><name>SET_QPEL</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><call><name>SET_QPEL</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><call><name>SET_QPEL</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<expr_stmt><expr><call><name>SET_QPEL</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264qpel_init_aarch64</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264qpel_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264qpel_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264qpel_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264qpel_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
