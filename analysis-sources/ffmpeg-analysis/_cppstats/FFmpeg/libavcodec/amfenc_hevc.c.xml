<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\amfenc_hevc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amfenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AmfContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"usage"</literal></expr>, <expr><literal type="string">"Set the encoding usage"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_USAGE_TRANSCONDING</name></expr> }</block></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_USAGE_TRANSCONDING</name></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_USAGE_WEBCAM</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"usage"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"transcoding"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_USAGE_TRANSCONDING</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"usage"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ultralowlatency"</literal></expr>,<expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_USAGE_ULTRA_LOW_LATENCY</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"usage"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lowlatency"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_USAGE_LOW_LATENCY</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"usage"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"webcam"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_USAGE_WEBCAM</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"usage"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"Set the profile (default main)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN</name></expr> }</block></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN</name></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"profile_tier"</literal></expr>, <expr><literal type="string">"Set the profile tier (default main)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tier</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_TIER_MAIN</name></expr> }</block></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_TIER_MAIN</name></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_TIER_HIGH</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"tier"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_TIER_MAIN</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"tier"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"high"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_TIER_HIGH</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"tier"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Set the encoding level (default auto)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AMF_LEVEL_6_2</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_1</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_2</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.1"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_2_1</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3.0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_3</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3.1"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_3_1</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4.0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_4</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4.1"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_4_1</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_5</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.1"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_5_1</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.2"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_5_2</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"6.0"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_6</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"6.1"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_6_1</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"6.2"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_LEVEL_6_2</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"Set the encoding quality"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_QUALITY_PRESET_SPEED</name></expr> }</block></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_QUALITY_PRESET_QUALITY</name></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_QUALITY_PRESET_SPEED</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quality"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"balanced"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_QUALITY_PRESET_BALANCED</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quality"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"speed"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_QUALITY_PRESET_SPEED</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quality"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_QUALITY_PRESET_QUALITY</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"quality"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rc"</literal></expr>, <expr><literal type="string">"Set the rate control mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rate_control_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_UNKNOWN</name></expr> }</block></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_UNKNOWN</name></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_CBR</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"rc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cqp"</literal></expr>, <expr><literal type="string">"Constant Quantization Parameter"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_CONSTANT_QP</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"rc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cbr"</literal></expr>, <expr><literal type="string">"Constant Bitrate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_CBR</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"rc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vbr_peak"</literal></expr>, <expr><literal type="string">"Peak Contrained Variable Bitrate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_PEAK_CONSTRAINED_VBR</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"rc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vbr_latency"</literal></expr>, <expr><literal type="string">"Latency Constrained Variable Bitrate"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_LATENCY_CONSTRAINED_VBR</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"rc"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"header_insertion_mode"</literal></expr>, <expr><literal type="string">"Set header insertion mode"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>header_insertion_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_HEADER_INSERTION_MODE_NONE</name></expr> }</block></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_HEADER_INSERTION_MODE_NONE</name></expr>, <expr><name>AMF_VIDEO_ENCODER_HEVC_HEADER_INSERTION_MODE_IDR_ALIGNED</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"hdrmode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_HEADER_INSERTION_MODE_NONE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"hdrmode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gop"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_HEADER_INSERTION_MODE_GOP_ALIGNED</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"hdrmode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"idr"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_HEADER_INSERTION_MODE_IDR_ALIGNED</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"hdrmode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gops_per_idr"</literal></expr>, <expr><literal type="string">"GOPs per IDR 0-no IDR will be inserted"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>gops_per_idr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">60</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"preanalysis"</literal></expr>, <expr><literal type="string">"Enable preanalysis"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>preanalysis</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"vbaq"</literal></expr>, <expr><literal type="string">"Enable VBAQ"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>enable_vbaq</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"enforce_hrd"</literal></expr>, <expr><literal type="string">"Enforce HRD"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>enforce_hrd</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"filler_data"</literal></expr>, <expr><literal type="string">"Filler Data Enable"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>filler_data</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"max_au_size"</literal></expr>, <expr><literal type="string">"Maximum Access Unit Size for rate control (in bits)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_au_size</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"min_qp_i"</literal></expr>, <expr><literal type="string">"min quantization parameter for I-frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>min_qp_i</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_qp_i"</literal></expr>, <expr><literal type="string">"max quantization parameter for I-frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_qp_i</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"min_qp_p"</literal></expr>, <expr><literal type="string">"min quantization parameter for P-frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>min_qp_p</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_qp_p"</literal></expr>, <expr><literal type="string">"max quantization parameter for P-frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>max_qp_p</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qp_p"</literal></expr>, <expr><literal type="string">"quantization parameter for P-frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp_p</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qp_i"</literal></expr>, <expr><literal type="string">"quantization parameter for I-frame"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp_i</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"skip_frame"</literal></expr>, <expr><literal type="string">"Rate Control Based Frame Skip"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>skip_frame</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"me_half_pel"</literal></expr>, <expr><literal type="string">"Enable ME Half Pixel"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>me_half_pel</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"me_quarter_pel"</literal></expr>, <expr><literal type="string">"Enable ME Quarter Pixel "</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>me_quarter_pel</name></expr></argument>)</argument_list></call></expr>,<expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"Inserts AU Delimiter NAL unit"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aud</name></expr></argument>)</argument_list></call></expr> ,<expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log_to_dbg"</literal></expr>, <expr><literal type="string">"Enable AMF logging to debug output"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>log_to_dbg</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>amf_encode_init_hevc</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name> <init>= <expr><name>AMF_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFVariantStruct</name></type> <name>var</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amf_int64</name></type> <name>profile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amf_int64</name></type> <name>profile_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFGuid</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFRate</name></type> <name>framerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFSize</name></type> <name>framesize</name> <init>= <expr><call><name>AMFConstructSize</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deblocking_filter</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_LOOP_FILTER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>framerate</name> <operator>=</operator> <call><name>AMFConstructRate</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>framerate</name> <operator>=</operator> <call><name>AMFConstructRate</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_amf_encode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_USAGE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>usage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_SIZE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_FRAMESIZE</name></expr></argument>, <argument><expr><name>framesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_RATE</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_FRAMERATE</name></expr></argument>, <argument><expr><name>framerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_HEVC_MAIN</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_PROFILE_MAIN</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_PROFILE</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_TIER</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>profile_level</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>profile_level</name> <operator>==</operator> <name>FF_LEVEL_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>profile_level</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>profile_level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_PROFILE_LEVEL</name></expr></argument>, <argument><expr><name>profile_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_QUALITY_PRESET</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MAX_NUM_REFRAMES</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AMFRatio</name></type> <name>ratio</name> <init>= <expr><call><name>AMFConstructRatio</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_RATIO</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_ASPECT_RATIO</name></expr></argument>, <argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_NUM_GOPS_PER_IDR</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gops_per_idr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_GOP_SIZE</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_SLICES_PER_FRAME</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_DE_BLOCKING_FILTER_DISABLE</name></expr></argument>, <argument><expr><name>deblocking_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_HEADER_INSERTION_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>header_insertion_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rate_control_mode</name></name> <operator>==</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>min_qp_i</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_qp_i</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>min_qp_p</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_qp_p</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>qp_i</name></name> <operator>!=</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>qp_p</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rate_control_mode</name></name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_CONSTANT_QP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Rate control turned to CQP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rate_control_mode</name></name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_PEAK_CONSTRAINED_VBR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Rate control turned to Peak VBR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rate_control_mode</name></name> <operator>=</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_CBR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Rate control turned to CBR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rate_control_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_VBV_BUFFER_SIZE</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>amf_buffer_fullness</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>*</operator> <literal type="number">64</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>amf_buffer_fullness</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>amf_buffer_fullness</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_INITIAL_VBV_BUFFER_FULLNESS</name></expr></argument>, <argument><expr><name>amf_buffer_fullness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_PREANALYSIS_ENABLE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>preanalysis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rate_control_mode</name></name> <operator>==</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_CONSTANT_QP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_ENABLE_VBAQ</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>enable_vbaq</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"VBAQ is not supported by cqp Rate Control Method, automatically disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_ENABLE_VBAQ</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>enable_vbaq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MOTION_HALF_PIXEL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>me_half_pel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MOTION_QUARTERPIXEL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>me_quarter_pel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>max_au_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>enforce_hrd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_ENFORCE_HRD</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>enforce_hrd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_FILLER_DATA_ENABLE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filler_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_TARGET_BITRATE</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rate_control_mode</name></name> <operator>==</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_CBR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_PEAK_BITRATE</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_PEAK_BITRATE</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rate_control_mode</name></name> <operator>==</operator> <name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_METHOD_PEAK_CONSTRAINED_VBR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"rate control mode is PEAK_CONSTRAINED_VBR but rc_max_rate is not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Init</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_BUG</name></expr></argument>, <argument><expr><literal type="string">"encoder-&gt;Init() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MAX_AU_SIZE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_au_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>min_qp_i</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MIN_QP_I</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>min_qp_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qval</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;</operator> <literal type="number">51</literal></expr> ?</condition><then> <expr><literal type="number">51</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MIN_QP_I</name></expr></argument>, <argument><expr><name>qval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>max_qp_i</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MAX_QP_I</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_qp_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qval</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;</operator> <literal type="number">51</literal></expr> ?</condition><then> <expr><literal type="number">51</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MAX_QP_I</name></expr></argument>, <argument><expr><name>qval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>min_qp_p</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MIN_QP_P</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>min_qp_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qval</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;</operator> <literal type="number">51</literal></expr> ?</condition><then> <expr><literal type="number">51</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MIN_QP_P</name></expr></argument>, <argument><expr><name>qval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>max_qp_p</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MAX_QP_P</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_qp_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qval</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;</operator> <literal type="number">51</literal></expr> ?</condition><then> <expr><literal type="number">51</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_MAX_QP_P</name></expr></argument>, <argument><expr><name>qval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>qp_p</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_QP_P</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qp_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>qp_i</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_QP_I</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>qp_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_RATE_CONTROL_SKIP_FRAME_ENABLE</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>skip_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AMFVariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_BUG</name></expr></argument>, <argument><expr><literal type="string">"AMFVariantInit() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetProperty</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_EXTRADATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_BUG</name></expr></argument>, <argument><expr><literal type="string">"GetProperty(AMF_VIDEO_ENCODER_EXTRADATA) failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>var</name><operator>.</operator><name>pInterface</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>AVERROR_BUG</name></expr></argument>, <argument><expr><literal type="string">"GetProperty(AMF_VIDEO_ENCODER_EXTRADATA) returned NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>guid</name> <operator>=</operator> <call><name>IID_AMFBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>var</name><operator>.</operator><name>pInterface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name><name>var</name><operator>.</operator><name>pInterface</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>var</name><operator>.</operator><name>pInterface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name><name>var</name><operator>.</operator><name>pInterface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_BUG</name></expr></argument>, <argument><expr><literal type="string">"QueryInterface(IID_AMFBuffer) failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetSize</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>var</name><operator>.</operator><name>pInterface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name><name>var</name><operator>.</operator><name>pInterface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetNative</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>var</name><operator>.</operator><name>pInterface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name><name>var</name><operator>.</operator><name>pInterface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"refs"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aspect"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"2M"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"250"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"slices"</literal></expr>, <expr><literal type="string">"1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>hevc_amf_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"hevc_amf"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_hevc_amf_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_amf"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AMD AMF HEVC encoder"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>amf_encode_init_hevc</name></expr>,

<expr><operator>.</operator><name>send_frame</name> <operator>=</operator> <name>ff_amf_send_frame</name></expr>,

<expr><operator>.</operator><name>receive_packet</name> <operator>=</operator> <name>ff_amf_receive_packet</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_amf_encode_close</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AmfContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>hevc_amf_class</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_HARDWARE</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <name>ff_amf_pix_fmts</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"amf"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
