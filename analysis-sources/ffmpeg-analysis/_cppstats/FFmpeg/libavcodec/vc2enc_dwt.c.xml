<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vc2enc_dwt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc2enc_dwt.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>deinterleave</name><parameter_list>(<parameter><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>linell</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>synthl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>synthw</name> <init>= <expr><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>linehl</name> <init>= <expr><name>linell</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>linelh</name> <init>= <expr><name>linell</name> <operator>+</operator> <name>height</name><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>linehh</name> <init>= <expr><name>linelh</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>linell</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>synthl</name><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linehl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>synthl</name><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linelh</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>synthl</name><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>synthw</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linehh</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>synthl</name><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>synthw</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <name>synthw</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>linell</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>linelh</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>linehl</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>linehh</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc2_subband_dwt_97</name><parameter_list>(<parameter><decl><type><name>VC2TransformContext</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>datal</name> <init>= <expr><name>data</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>synth</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>synthl</name> <init>= <expr><name>synth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>synth_width</name> <init>= <expr><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>synth_height</name> <init>= <expr><name>height</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>synth_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>datal</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <name>synth_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>datal</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>synth_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><name><name>synthl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>synthl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>synthl</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">9</literal><operator>*</operator><name><name>synthl</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>synthl</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>synthl</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>-</operator>

<name><name>synthl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">17</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator>

<name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<literal type="number">9</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>-</operator>

<name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <name>synth_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <name>synth_width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>-</operator>

<name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <operator>(</operator><name>synth_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">9</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator>

<literal type="number">9</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>synth_width</name></expr>]</index></name> <operator>-</operator>

<name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>synth_width</name></expr>]</index></name> <operator>-</operator>

<name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <name>synth_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <operator>(</operator><name>synth_height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>synth_width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">17</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <name>synth_width</name></expr>]</index></name> <operator>-</operator>

<name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>synth_width</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">9</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>synth_width</name></expr>]</index></name> <operator>+</operator>

<literal type="number">8</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>*</operator><name>synth_width</name></expr>]</index></name> <operator>-</operator> <name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <operator>(</operator><name>synth_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <name>synth_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <operator>(</operator><name>synth_height</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>synth_width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>deinterleave</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc2_subband_dwt_53</name><parameter_list>(<parameter><decl><type><name>VC2TransformContext</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>synth</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>synthl</name> <init>= <expr><name>synth</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>datal</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>synth_width</name> <init>= <expr><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>synth_height</name> <init>= <expr><name>height</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>synth_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>datal</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <name>synth_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>datal</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>synth_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>synthl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <name>synth_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <name>synth_width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <operator>(</operator><name>synth_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <operator>(</operator><name>synth_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <operator>(</operator><name>synth_height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>synth_width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>synthl</name><index>[<expr><name>synth_width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <operator>(</operator><name>synth_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>synthl</name> <operator>+=</operator> <operator>(</operator><name>synth_width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>synthl</name> <operator>=</operator> <name>synth</name> <operator>+</operator> <operator>(</operator><name>synth_height</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><name>synth_width</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>synthl</name><index>[<expr><name>x</name> <operator>-</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <name><name>synthl</name><index>[<expr><name>x</name> <operator>+</operator> <name>synth_width</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>deinterleave</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>dwt_haar</name><parameter_list>(<parameter><decl><type><name>VC2TransformContext</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>synth</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>synthl</name> <init>= <expr><name>synth</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>datal</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>synth_width</name> <init>= <expr><name>width</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>synth_height</name> <init>= <expr><name>height</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>synth_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>y</name><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>datal</name><index>[<expr><name>y</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>-</operator>

<operator>(</operator><name><name>datal</name><index>[<expr><name>y</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>y</name><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>datal</name><index>[<expr><name>y</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>s</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name><name>synthl</name><index>[<expr><name>y</name><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>synth_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>synth_height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>synthl</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>-</operator>

<name><name>synthl</name><index>[<expr><name>y</name><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>synthl</name><index>[<expr><name>y</name><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>synthl</name><index>[<expr><name>y</name><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name><name>synthl</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>synth_width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>deinterleave</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>synth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc2_subband_dwt_haar</name><parameter_list>(<parameter><decl><type><name>VC2TransformContext</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dwt_haar</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc2_subband_dwt_haar_shift</name><parameter_list>(<parameter><decl><type><name>VC2TransformContext</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>dwtcoef</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dwt_haar</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vc2enc_init_transforms</name><parameter_list>(<parameter><decl><type><name>VC2TransformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>p_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vc2_subband_dwt</name><index>[<expr><name>VC2_TRANSFORM_9_7</name></expr>]</index></name> <operator>=</operator> <name>vc2_subband_dwt_97</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vc2_subband_dwt</name><index>[<expr><name>VC2_TRANSFORM_5_3</name></expr>]</index></name> <operator>=</operator> <name>vc2_subband_dwt_53</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vc2_subband_dwt</name><index>[<expr><name>VC2_TRANSFORM_HAAR</name></expr>]</index></name> <operator>=</operator> <name>vc2_subband_dwt_haar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vc2_subband_dwt</name><index>[<expr><name>VC2_TRANSFORM_HAAR_S</name></expr>]</index></name> <operator>=</operator> <name>vc2_subband_dwt_haar_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><operator>(</operator><name>p_stride</name> <operator>+</operator> <name>slice_w</name><operator>)</operator><operator>*</operator><operator>(</operator><name>p_height</name> <operator>+</operator> <name>slice_h</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dwtcoef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <operator>(</operator><name>slice_h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>p_stride</name> <operator>+</operator> <operator>(</operator><name>slice_w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>padding</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vc2enc_free_transforms</name><parameter_list>(<parameter><decl><type><name>VC2TransformContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
