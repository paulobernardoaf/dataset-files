<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\g723_1enc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g723_1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_WRITER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g723_1_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G723_1_Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">8000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only 8000Hz sample rate supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only mono supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>==</operator> <literal type="number">6300</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name> <operator>=</operator> <name>RATE_6300</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>==</operator> <literal type="number">5300</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Use bitrate 6300 instead of 5300.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Bitrate 5300"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bitrate not supported, use 6300\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">240</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name>dc_lsp</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>highpass_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>fir</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>iir</name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><operator>*</operator><name>fir</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <call><name>MULL2</name><argument_list>(<argument><expr><operator>*</operator><name>iir</name></expr></argument>, <argument><expr><literal type="number">0x7f00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fir</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>*</operator><name>iir</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>comp_autocorr</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>autocorr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>vector</name><index>[<expr><name>LPC_FRAME</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_g723_1_scale_vector</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LPC_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>hamming_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>, <argument><expr><name>LPC_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name>temp</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>autocorr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <name>scale</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>autocorr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>autocorr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>LPC_FRAME</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>MULL2</name><argument_list>(<argument><expr><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <name>scale</name><operator>)</operator></expr></argument>, <argument><expr><name><name>binomial_window</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>autocorr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>temp</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>levinson_durbin</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>autocorr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>vector</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>partial_corr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lpc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>-=</operator> <name><name>lpc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>autocorr</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>autocorr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>+</operator> <name>temp</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>error</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>partial_corr</name> <operator>=</operator> <name>temp</name> <operator>/</operator> <operator>(</operator><name>error</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name>partial_corr</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>MULL2</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>partial_corr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name>error</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>temp</name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>partial_corr</name> <operator>*</operator> <name><name>vector</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name><name>lpc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>temp</name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>comp_lpc_coeff</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>autocorr</name><index>[<expr><operator>(</operator><name>LPC_ORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SUBFRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>autocorr_ptr</name> <init>= <expr><name>autocorr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc_ptr</name> <init>= <expr><name>lpc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>comp_autocorr</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>autocorr_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>levinson_durbin</name><argument_list>(<argument><expr><name>lpc_ptr</name></expr></argument>, <argument><expr><name>autocorr_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>autocorr_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lpc_ptr</name> <operator>+=</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>autocorr_ptr</name> <operator>+=</operator> <name>LPC_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lpc2lsp</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>prev_lsp</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>LPC_ORDER</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>cur_val</name></decl>, <decl><type ref="prev"/><name>prev_val</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>bandwidth_expand</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>f</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>lsp</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>lsp</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><name>LPC_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>LPC_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>f</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>cos_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>prev_val</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COS_TBL_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>LPC_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <name>p</name></expr>]</index></name> <operator>*</operator> <name><name>cos_tab</name><index>[<expr><name>i</name> <operator>*</operator> <name>j</name> <operator>%</operator> <name>COS_TBL_SIZE</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>cur_val</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cur_val</name> <operator>^</operator> <name>prev_val</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>abs_cur</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>cur_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abs_prev</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name>prev_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name>abs_cur</name> <operator>+</operator> <name>abs_prev</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_prev</name> <operator>=</operator> <name>abs_prev</name> <operator>&lt;&lt;</operator> <name>shift</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>abs_prev</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>LPC_ORDER</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>LPC_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <name>p</name></expr>]</index></name> <operator>*</operator>

<name><name>cos_tab</name><index>[<expr><name>i</name> <operator>*</operator> <name>j</name> <operator>%</operator> <name>COS_TBL_SIZE</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>cur_val</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_val</name> <operator>=</operator> <name>cur_val</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name>LPC_ORDER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>prev_lsp</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_index</name><parameter_list>(<parameter><type><name>num</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int error, max = -1; int16_t temp[4]; int i, j; for (i = 0; i &lt; LSP_CB_SIZE; i++) { for (j = 0; j &lt; size; j++){ temp[j] = (weight[j + (offset)] * lsp_band##num[i][j] + (1 &lt;&lt; 14)) &gt;&gt; 15; } error = ff_g723_1_dot_product(lsp + (offset), temp, size) &lt;&lt; 1; error -= ff_g723_1_dot_product(lsp_band##num[i], temp, size); if (error &gt; max) { max = error; lsp_index[num] = i; } } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsp_quantize</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lsp_index</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>prev_lsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>weight</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>weight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>weight</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>/</operator>

<operator>(</operator><name><name>lsp</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>lsp</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>lsp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lsp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>/</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>dc_lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name><name>prev_lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>dc_lsp</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">12288</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>get_index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_index</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_index</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iir_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>fir_coef</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>iir_coef</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>filter</name> <operator>-=</operator> <name><name>fir_coef</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>src</name><index>[<expr><name>m</name> <operator>-</operator> <name>n</name></expr>]</index></name> <operator>-</operator>

<name><name>iir_coef</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dest</name><index>[<expr><name>m</name> <operator>-</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name><name>src</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>filter</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>perceptual_filter</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>flt_coef</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>unq_lpc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>vector</name><index>[<expr><name>FRAME_LEN</name> <operator>+</operator> <name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iir_mem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fir_mem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>LPC_ORDER</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>flt_coef</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>l</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>unq_lpc</name><index>[<expr><name>k</name> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>*</operator> <name><name>percept_flt_tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flt_coef</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>l</name> <operator>+</operator> <name>LPC_ORDER</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>unq_lpc</name><index>[<expr><name>k</name> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>*</operator>

<name><name>percept_flt_tbl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>iir_filter</name><argument_list>(<argument><expr><name>flt_coef</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>l</name></expr></argument>, <argument><expr><name>flt_coef</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>l</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>,

<argument><expr><name>vector</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iir_mem</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>FRAME_LEN</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fir_mem</name></name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>FRAME_LEN</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_pitch</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_exp</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_ccr</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_eng</name> <init>= <expr><literal type="number">0x7fff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>PITCH_MIN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>start</name> <operator>-</operator> <name>PITCH_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ccr</name></decl>, <decl><type ref="prev"/><name>eng</name></decl>, <decl><type ref="prev"/><name>orig_eng</name></decl>, <decl><type ref="prev"/><name>ccr_eng</name></decl>, <decl><type ref="prev"/><name>exp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>orig_eng</name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>HALF_FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>PITCH_MIN</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>PITCH_MAX</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>offset</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_eng</name> <operator>+=</operator> <name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>*</operator> <name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>-</operator>

<name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <name>HALF_FRAME_LEN</name></expr>]</index></name> <operator>*</operator> <name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <name>HALF_FRAME_LEN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>HALF_FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ccr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>ccr</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name>ccr</name> <operator>&lt;&lt;</operator> <name>exp</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>exp</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>*=</operator> <name>ccr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>ccr</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <name>ccr</name> <operator>&lt;&lt;</operator> <name>temp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>exp</name> <operator>+=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>orig_eng</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eng</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name>orig_eng</name> <operator>&lt;&lt;</operator> <name>temp</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>exp</name> <operator>-=</operator> <name>temp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ccr</name> <operator>&gt;=</operator> <name>eng</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exp</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;</operator> <name>max_exp</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>max_exp</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>update</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>max_exp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>max_ccr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>max_ccr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ccr_eng</name> <operator>=</operator> <name>ccr</name> <operator>*</operator> <name>max_eng</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>ccr_eng</name> <operator>-</operator> <name>eng</name> <operator>*</operator> <name>temp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name><name>index</name> <argument_list type="generic">&lt; <argument><expr><name>PITCH_MIN</name> <operator>||</operator> <name>diff</name></expr></argument> &gt;</argument_list></name> <name>ccr_eng</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<label><name>update</name>:</label>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_exp</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_ccr</name> <operator>=</operator> <name>ccr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_eng</name> <operator>=</operator> <name>eng</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>comp_harmonic_coeff</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>pitch_lag</name></decl></parameter>, <parameter><decl><type><name>HFParam</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ccr</name></decl>, <decl><type ref="prev"/><name>eng</name></decl>, <decl><type ref="prev"/><name>max_ccr</name></decl>, <decl><type ref="prev"/><name>max_eng</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exp</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>energy</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>pitch_lag</name> <operator>-</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>pitch_lag</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>energy</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>energy</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>energy</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>exp</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_ccr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_eng</name> <operator>=</operator> <literal type="number">0x7fff</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>eng</name> <operator>=</operator> <name><name>energy</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <name><name>energy</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ccr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <operator>(</operator><name>ccr</name> <operator>*</operator> <name>ccr</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>ccr</name> <operator>*</operator> <name>max_eng</name> <operator>-</operator> <name>eng</name> <operator>*</operator> <name>max_ccr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_ccr</name> <operator>=</operator> <name>ccr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_eng</name> <operator>=</operator> <name>eng</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>hf</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>pitch_lag</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eng</name> <operator>=</operator> <name><name>energy</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>*</operator> <name>max_eng</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eng</name> <operator>=</operator> <operator>(</operator><name>eng</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>eng</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ccr</name> <operator>=</operator> <name><name>energy</name><index>[<expr><operator>(</operator><name><name>hf</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>energy</name><index>[<expr><operator>(</operator><name><name>hf</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eng</name> <operator>&lt;</operator> <name>ccr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>eng</name> <operator>=</operator> <name><name>energy</name><index>[<expr><operator>(</operator><name><name>hf</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eng</name> <operator>&gt;=</operator> <name>max_eng</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <literal type="number">0x2800</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>eng</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <name>max_eng</name> <operator>*</operator> <literal type="number">0x2800</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hf</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>pitch_lag</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>harmonic_filter</name><parameter_list>(<parameter><decl><type><name>HFParam</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><name><name>hf</name><operator>-&gt;</operator><name>gain</name></name> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name><name>hf</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>temp</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>harmonic_noise_sub</name><parameter_list>(<parameter><decl><type><name>HFParam</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><name><name>hf</name><operator>-&gt;</operator><name>gain</name></name> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>-</operator> <name><name>hf</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>temp</name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>synth_percept_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>qnt_lpc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>perf_lpc</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>perf_fir</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>perf_iir</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>buf_16</name><index>[<expr><name>SUBFRAME_LEN</name> <operator>+</operator> <name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>buf</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>bptr_16</name> <init>= <expr><name>buf_16</name> <operator>+</operator> <name>LPC_ORDER</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf_16</name></expr></argument>, <argument><expr><name>perf_fir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> <operator>-</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>perf_iir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>-=</operator> <name><name>qnt_lpc</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>bptr_16</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bptr_16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>fir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>iir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>fir</name> <operator>-=</operator> <name><name>perf_lpc</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>bptr_16</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iir</name> <operator>+=</operator> <name><name>perf_lpc</name><index>[<expr><name>j</name> <operator>+</operator> <name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dest</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>fir</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>scale</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>iir</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>perf_fir</name></expr></argument>, <argument><expr><name>buf_16</name> <operator>+</operator> <name>SUBFRAME_LEN</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>perf_iir</name></expr></argument>, <argument><expr><name>dest</name> <operator>+</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <name>LPC_ORDER</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acb_search</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>residual</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>impulse_resp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>flt_buf</name><index>[<expr><name>PITCH_ORDER</name></expr>]</index><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>cb_tbl</name> <init>= <expr><name>adaptive_cb_gain85</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ccr_buf</name><index>[<expr><name>PITCH_ORDER</name> <operator>*</operator> <name>SUBFRAMES</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch_lag</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acb_lag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>acb_gain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>odd_frame</name> <init>= <expr><name>index</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <name>odd_frame</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tbl_size</name> <init>= <expr><literal type="number">85</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>odd_frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pitch_lag</name> <operator>==</operator> <name>PITCH_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pitch_lag</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pitch_lag</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>pitch_lag</name></expr></argument>, <argument><expr><name>PITCH_MAX</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_g723_1_get_residual</name><argument_list>(<argument><expr><name>residual</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>, <argument><expr><name>pitch_lag</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>residual</name><index>[<expr><name>PITCH_ORDER</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>impulse_resp</name><index>[<expr><name>j</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>flt_buf</name><index>[<expr><name>PITCH_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>PITCH_ORDER</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>flt_buf</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>residual</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name><name>flt_buf</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator>

<name><name>residual</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>impulse_resp</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flt_buf</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>PITCH_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>flt_buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccr_buf</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>PITCH_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ccr_buf</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name><name>flt_buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>flt_buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>PITCH_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name><name>flt_buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>flt_buf</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccr_buf</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name>iter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>ccr_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal> <operator>*</operator> <name>iter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ccr_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><name><name>ccr_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>temp</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>odd_frame</name> <operator>&amp;&amp;</operator> <name>pitch_lag</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">2</literal> <operator>||</operator>

<name>odd_frame</name> <operator>&amp;&amp;</operator> <name>pitch_lag</name> <operator>&gt;=</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cb_tbl</name> <operator>=</operator> <name>adaptive_cb_gain170</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tbl_size</name> <operator>=</operator> <literal type="number">170</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tbl_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <literal type="number">20</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>ccr_buf</name><index>[<expr><literal type="number">20</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>l</name></expr>]</index></name> <operator>*</operator> <name><name>cb_tbl</name><index>[<expr><name>k</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>acb_gain</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>acb_lag</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>odd_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pitch_lag</name> <operator>+=</operator> <name>acb_lag</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>acb_lag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pitch_lag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>ad_cb_lag</name> <operator>=</operator> <name>acb_lag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>ad_cb_gain</name> <operator>=</operator> <name>acb_gain</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sub_acb_contrib</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>residual</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>impulse_resp</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>-=</operator> <name><name>residual</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>impulse_resp</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_fcb_param</name><parameter_list>(<parameter><decl><type><name>FCBParam</name> <modifier>*</modifier></type><name>optim</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>impulse_resp</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pulse_cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_lag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FCBParam</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>impulse_r</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>temp_corr</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>impulse_corr</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ccr1</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ccr2</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>amp</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>max_amp_index</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>impulse_r</name></expr></argument>, <argument><expr><name>impulse_resp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>dirac_train</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pitch_lag</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>dirac_train</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_gen_dirac_train</name><argument_list>(<argument><expr><name>impulse_r</name></expr></argument>, <argument><expr><name>pitch_lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp_corr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>impulse_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>temp_corr</name></expr></argument>, <argument><expr><name>temp_corr</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>ff_g723_1_normalize_bits</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>impulse_corr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <name>scale</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>temp_corr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>temp_corr</name></expr></argument>,

<argument><expr><name>SUBFRAME_LEN</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>impulse_corr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <name>scale</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>scale</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>ff_g723_1_dot_product</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>impulse_r</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ccr1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>&gt;&gt;</operator> <operator>-</operator><name>scale</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ccr1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>temp</name> <operator>&lt;&lt;</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>GRID_SIZE</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>ccr1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>amp</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_amp_index</name> <operator>=</operator> <name>GAIN_LEVELS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>max_amp_index</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>fixed_cb_gain</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator>

<name><name>impulse_corr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>temp</name> <operator>-</operator> <name>amp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_amp_index</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>max_amp_index</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <name>GRID_SIZE</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>temp_corr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccr2</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ccr1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>amp_index</name></name> <operator>=</operator> <name>max_amp_index</name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>amp</name> <operator>=</operator> <name><name>fixed_cb_gain</name><index>[<expr><name><name>param</name><operator>.</operator><name>amp_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pulse_sign</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ccr2</name><index>[<expr><name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>amp</name></expr> </then><else>: <expr><name>amp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp_corr</name><index>[<expr><name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>pulse_cnt</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>l</name> <operator>+=</operator> <name>GRID_SIZE</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>temp_corr</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>impulse_corr</name><index>[<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>temp</name> <operator>*</operator>

<name><name>param</name><operator>.</operator><name>pulse_sign</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ccr2</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>ccr2</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>pulse_sign</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ccr2</name><index>[<expr><name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>

<expr><operator>-</operator><name>amp</name></expr> </then><else>: <expr><name>amp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp_corr</name><index>[<expr><name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>temp_corr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>pulse_cnt</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>temp_corr</name><index>[<expr><name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>pulse_sign</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prod</name> <init>= <expr><call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>temp_corr</name><index>[<expr><name>l</name></expr>]</index></name> <operator>*</operator>

<name><name>impulse_r</name><index>[<expr><name>k</name> <operator>-</operator> <name>l</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>temp</name> <operator>+</operator> <name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>temp_corr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>prod</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prod</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>temp_corr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>err</name> <operator>-</operator> <name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prod</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>temp_corr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>temp_corr</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>err</name> <operator>+</operator> <name>prod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <name><name>optim</name><operator>-&gt;</operator><name>min_err</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>optim</name><operator>-&gt;</operator><name>min_err</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>optim</name><operator>-&gt;</operator><name>grid_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>optim</name><operator>-&gt;</operator><name>amp_index</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>amp_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>optim</name><operator>-&gt;</operator><name>dirac_train</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>dirac_train</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>pulse_cnt</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>optim</name><operator>-&gt;</operator><name>pulse_sign</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>pulse_sign</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>optim</name><operator>-&gt;</operator><name>pulse_pos</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>pulse_pos</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pack_fcb_param</name><parameter_list>(<parameter><decl><type><name>G723_1_Subframe</name> <modifier>*</modifier></type><name>subfrm</name></decl></parameter>, <parameter><decl><type><name>FCBParam</name> <modifier>*</modifier></type><name>optim</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pulse_cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>PULSE_MAX</name> <operator>-</operator> <name>pulse_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_sign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>SUBFRAME_LEN</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>buf</name><index>[<expr><name><name>optim</name><operator>-&gt;</operator><name>grid_index</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_pos</name></name> <operator>+=</operator> <name><name>combinatorial_table</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_sign</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subfrm</name><operator>-&gt;</operator><name>pulse_sign</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>PULSE_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>subfrm</name><operator>-&gt;</operator><name>amp_index</name></name> <operator>=</operator> <name><name>optim</name><operator>-&gt;</operator><name>amp_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subfrm</name><operator>-&gt;</operator><name>grid_index</name></name> <operator>=</operator> <name><name>optim</name><operator>-&gt;</operator><name>grid_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subfrm</name><operator>-&gt;</operator><name>dirac_train</name></name> <operator>=</operator> <name><name>optim</name><operator>-&gt;</operator><name>dirac_train</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fcb_search</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>impulse_resp</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FCBParam</name></type> <name>optim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pulse_cnt</name> <init>= <expr><name><name>pulses</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>optim</name><operator>.</operator><name>min_err</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_fcb_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name>optim</name></expr></argument>, <argument><expr><name>impulse_resp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pulse_cnt</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_fcb_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name>optim</name></expr></argument>, <argument><expr><name>impulse_resp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pulse_cnt</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pulse_cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>optim</name><operator>.</operator><name>pulse_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>optim</name><operator>.</operator><name>pulse_sign</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>pack_fcb_param</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optim</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pulse_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>optim</name><operator>.</operator><name>dirac_train</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_g723_1_gen_dirac_train</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pack_bitstream</name><parameter_list>(<parameter><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>info_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>info_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>PITCH_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ad_cb_lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>PITCH_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>ad_cb_lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ad_cb_gain</name> <operator>*</operator> <name>GAIN_LEVELS</name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>amp_index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name> <operator>==</operator> <name>RATE_6300</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dirac_train</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>grid_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>grid_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>grid_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>grid_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name> <operator>==</operator> <name>RATE_6300</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">810</literal> <operator>+</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>*</operator> <literal type="number">90</literal> <operator>+</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&amp;</operator> <literal type="number">0x3fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_pos</name> <operator>&amp;</operator> <literal type="number">0x3fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>pulse_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>frame_size</name><index>[<expr><name>info_bits</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g723_1_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G723_1_Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>G723_1_ChannelContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>unq_lpc</name><index>[<expr><name>LPC_ORDER</name> <operator>*</operator> <name>SUBFRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>qnt_lpc</name><index>[<expr><name>LPC_ORDER</name> <operator>*</operator> <name>SUBFRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cur_lsp</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>weighted_lpc</name><index>[<expr><name>LPC_ORDER</name> <operator>*</operator> <name>SUBFRAMES</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>vector</name><index>[<expr><name>FRAME_LEN</name> <operator>+</operator> <name>PITCH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HFParam</name></type> <name><name>hf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>in</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>highpass_filter</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>hpf_fir_mem</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>hpf_iir_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_data</name></name></expr></argument>, <argument><expr><name>HALF_FRAME_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name> <operator>+</operator> <name>HALF_FRAME_LEN</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>FRAME_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>comp_lpc_coeff</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>unq_lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpc2lsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unq_lpc</name><index>[<expr><name>LPC_ORDER</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lsp_quantize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name></name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_data</name></name> <operator>+</operator> <name>SUBFRAME_LEN</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name> <operator>+</operator> <name>LPC_ORDER</name> <operator>+</operator> <name>SUBFRAME_LEN</name></expr></argument>, <argument><expr><name>in</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>HALF_FRAME_LEN</name> <operator>+</operator> <name>SUBFRAME_LEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_data</name></name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>HALF_FRAME_LEN</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>HALF_FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>perceptual_filter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>weighted_lpc</name></expr></argument>, <argument><expr><name>unq_lpc</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_weight_sig</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>PITCH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_scale_vector</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>, <argument><expr><name>FRAME_LEN</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>estimate_pitch</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>PITCH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>estimate_pitch</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>PITCH_MAX</name> <operator>+</operator> <name>HALF_FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>PITCH_MAX</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>comp_harmonic_coeff</name><argument_list>(<argument><expr><name>vector</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hf</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_weight_sig</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>PITCH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_weight_sig</name></name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>FRAME_LEN</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>PITCH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>harmonic_filter</name><argument_list>(<argument><expr><name>hf</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_g723_1_inverse_quant</name><argument_list>(<argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lsp_index</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_lsp_interpolate</name><argument_list>(<argument><expr><name>qnt_lpc</name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_lsp</name></name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>impulse_resp</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>residual</name><index>[<expr><name>SUBFRAME_LEN</name> <operator>+</operator> <name>PITCH_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>flt_in</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>zero</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>fir</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iir</name><index>[<expr><name>LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>PITCH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>flt_in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flt_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>synth_percept_filter</name><argument_list>(<argument><expr><name>qnt_lpc</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>weighted_lpc</name> <operator>+</operator> <operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>flt_in</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>harmonic_filter</name><argument_list>(<argument><expr><name>hf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>, <argument><expr><name>impulse_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flt_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fir</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>perf_fir_mem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iir</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>perf_iir_mem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>synth_percept_filter</name><argument_list>(<argument><expr><name>qnt_lpc</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>weighted_lpc</name> <operator>+</operator> <operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>fir</name></expr></argument>, <argument><expr><name>iir</name></expr></argument>, <argument><expr><name>flt_in</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>harmonic_mem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>PITCH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>harmonic_noise_sub</name><argument_list>(<argument><expr><name>hf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>acb_search</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>residual</name></expr></argument>, <argument><expr><name>impulse_resp</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_gen_acb_excitation</name><argument_list>(<argument><expr><name>residual</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>cur_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sub_acb_contrib</name><argument_list>(<argument><expr><name>residual</name></expr></argument>, <argument><expr><name>impulse_resp</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fcb_search</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>impulse_resp</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g723_1_gen_acb_excitation</name><argument_list>(<argument><expr><name>impulse_resp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_lag</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>subframe</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>RATE_6300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name> <operator>+</operator> <name>SUBFRAME_LEN</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>PITCH_MAX</name> <operator>-</operator> <name>SUBFRAME_LEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>impulse_resp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>prev_excitation</name></name> <operator>+</operator> <name>PITCH_MAX</name> <operator>-</operator> <name>SUBFRAME_LEN</name></expr></argument>, <argument><expr><name>in</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>synth_percept_filter</name><argument_list>(<argument><expr><name>qnt_lpc</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>weighted_lpc</name> <operator>+</operator> <operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>perf_fir_mem</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>perf_iir_mem</name></name></expr></argument>,

<argument><expr><name>in</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>harmonic_mem</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>harmonic_mem</name></name> <operator>+</operator> <name>SUBFRAME_LEN</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>PITCH_MAX</name> <operator>-</operator> <name>SUBFRAME_LEN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>harmonic_mem</name></name> <operator>+</operator> <name>PITCH_MAX</name> <operator>-</operator> <name>SUBFRAME_LEN</name></expr></argument>, <argument><expr><name>vector</name> <operator>+</operator> <name>PITCH_MAX</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SUBFRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>SUBFRAME_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>pack_bitstream</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"6300"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_g723_1_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g723_1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.723.1"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_G723_1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G723_1_Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g723_1_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>g723_1_encode_frame</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_SAMPLE_FMT_S16</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
