<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\svq1dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svq1.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>svq1_block_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>svq1_motion_component</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>svq1_intra_multistage</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>svq1_inter_multistage</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>svq1_intra_mean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>svq1_inter_mean</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>svq1_pmv_s</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

}</block></struct></type> <name>svq1_pmv</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SVQ1Context</name> <block>{

<decl_stmt><decl><type><name>HpelDSPContext</name></type> <name>hdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pkt_swapped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pkt_swapped_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nonref</name></decl>;</decl_stmt> 

}</block></struct></type> <name>SVQ1Context</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>string_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x54</literal></expr>,

<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x7D</literal></expr>,

<expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x06</literal></expr>,

<expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x2F</literal></expr>,

<expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xF0</literal></expr>,

<expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xD9</literal></expr>,

<expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,

<expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x8B</literal></expr>,

<expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xC9</literal></expr>,

<expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xE0</literal></expr>,

<expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x9B</literal></expr>,

<expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xB2</literal></expr>,

<expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x6D</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x44</literal></expr>,

<expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,

<expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xBB</literal></expr>,

<expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x92</literal></expr>,

<expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xE9</literal></expr>,

<expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xC0</literal></expr>,

<expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,

<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x36</literal></expr>,

<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x4D</literal></expr>,

<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x64</literal></expr>,

<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x26</literal></expr>,

<expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,

<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x74</literal></expr>,

<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,

<expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x82</literal></expr>,

<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xAB</literal></expr>,

<expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xD0</literal></expr>,

<expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xF9</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVQ1_PROCESS_VECTOR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>for (; level &gt; 0; i++) { if (i == m) { m = n; if (--level == 0) break; } if (!get_bits1(bitbuf)) break; list[n++] = list[i]; list[n++] = list[i] + (((level &amp; 1) ? pitch : 1) &lt;&lt; ((level &gt;&gt; 1) + 1));}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVQ1_ADD_CODEBOOK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>for (j = 0; j &lt; stages; j++) { n3 = codebook[entries[j]] ^ 0x80808080; n1 += (n3 &amp; 0xFF00FF00) &gt;&gt; 8; n2 += n3 &amp; 0x00FF00FF; } if (n1 &amp; 0xFF00FF00) { n3 = (n1 &gt;&gt; 15 &amp; 0x00010001 | 0x01000100) - 0x00010001; n1 += 0x7F007F00; n1 |= (~n1 &gt;&gt; 15 &amp; 0x00010001 | 0x01000100) - 0x00010001; n1 &amp;= n3 &amp; 0x00FF00FF; } if (n2 &amp; 0xFF00FF00) { n3 = (n2 &gt;&gt; 15 &amp; 0x00010001 | 0x01000100) - 0x00010001; n2 += 0x7F007F00; n2 |= (~n2 &gt;&gt; 15 &amp; 0x00010001 | 0x01000100) - 0x00010001; n2 &amp;= n3 &amp; 0x00FF00FF; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVQ1_CALC_CODEBOOK_ENTRIES</name><parameter_list>(<parameter><type><name>cbook</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>codebook = (const uint32_t *)cbook[level]; if (stages &gt; 0) bit_cache = get_bits(bitbuf, 4 * stages); for (j = 0; j &lt; stages; j++) { entries[j] = (((bit_cache &gt;&gt; (4 * (stages - j - 1))) &amp; 0xF) + 16 * j) &lt;&lt; (level + 1); } mean -= stages * 128; n4 = (mean &lt;&lt; 16) + mean;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svq1_decode_block_intra</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bitbuf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>list</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>codebook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>entries</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n3</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pixels</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>level</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SVQ1_PROCESS_VECTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>level</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>level</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>stages</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name><name>svq1_intra_multistage</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stages</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <operator>(</operator><name>pitch</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stages</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="string">"Error (svq1_decode_block_intra): invalid vector: stages=%i level=%i\n"</literal></expr></argument>,

<argument><expr><name>stages</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>stages</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mean</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name><name>svq1_intra_mean</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stages</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <operator>(</operator><name>pitch</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>mean</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>SVQ1_CALC_CODEBOOK_ENTRIES</name><argument_list>(<argument><expr><name>ff_svq1_intra_codebooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>codebook</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>

<macro><name>SVQ1_ADD_CODEBOOK</name><argument_list>()</argument_list></macro>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>n1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>n2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>pitch</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svq1_decode_block_non_intra</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bitbuf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bit_cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>list</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>codebook</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>entries</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n3</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pixels</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>level</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SVQ1_PROCESS_VECTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>level</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>level</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>stages</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name><name>svq1_inter_multistage</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stages</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stages</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="string">"Error (svq1_decode_block_non_intra): invalid vector: stages=%i level=%i\n"</literal></expr></argument>,

<argument><expr><name>stages</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>stages</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mean</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name><name>svq1_inter_mean</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SVQ1_CALC_CODEBOOK_ENTRIES</name><argument_list>(<argument><expr><name>ff_svq1_inter_codebooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>codebook</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n3</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>n4</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>n3</name> <operator>&amp;</operator> <literal type="number">0xFF00FF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n4</name> <operator>+</operator> <operator>(</operator><name>n3</name> <operator>&amp;</operator> <literal type="number">0x00FF00FF</literal><operator>)</operator></expr>;</expr_stmt>

<macro><name>SVQ1_ADD_CODEBOOK</name><argument_list>()</argument_list></macro>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>n1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>n2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>pitch</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svq1_decode_motion_vector</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bitbuf</name></decl></parameter>, <parameter><decl><type><name>svq1_pmv</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>,

<parameter><decl><type><name>svq1_pmv</name> <modifier>*</modifier><modifier>*</modifier></type><name>pmv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name><name>svq1_motion_component</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>diff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>diff</name> <operator>+</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name></expr></argument>, <argument><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name></expr></argument>, <argument><expr><name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>diff</name> <operator>+</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>, <argument><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>, <argument><expr><name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>svq1_skip_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>previous</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>previous</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svq1_motion_inter_block</name><parameter_list>(<parameter><decl><type><name>HpelDSPContext</name> <modifier>*</modifier></type><name>hdsp</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bitbuf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>previous</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>svq1_pmv</name> <modifier>*</modifier></type><name>motion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>svq1_pmv</name></type> <name>mv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>svq1_pmv</name> <modifier>*</modifier></type><name><name>pmv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_motion_vector</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mv</name></expr></argument>, <argument><expr><name>pmv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>motion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>mv</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>motion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>mv</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>previous</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <operator>(</operator><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdsp</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <operator>(</operator><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src</name><operator>,</operator> <name>pitch</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svq1_motion_inter_4v_block</name><parameter_list>(<parameter><decl><type><name>HpelDSPContext</name> <modifier>*</modifier></type><name>hdsp</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bitbuf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>previous</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>svq1_pmv</name> <modifier>*</modifier></type><name>motion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>svq1_pmv</name></type> <name>mv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>svq1_pmv</name> <modifier>*</modifier></type><name><name>pmv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_motion_vector</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mv</name></expr></argument>, <argument><expr><name>pmv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>mv</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_motion_vector</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>motion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pmv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_motion_vector</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>motion</name><index>[<expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pmv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>motion</name><index>[<expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_motion_vector</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name><name>pmv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pmv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mvx</name> <init>= <expr><name><name>pmv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mvy</name> <init>= <expr><name><name>pmv</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>y</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mvx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>mvx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mvy</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>mvy</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>previous</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>mvx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <operator>(</operator><name>mvy</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>pitch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdsp</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name>mvy</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mvx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>src</name><operator>,</operator> <name>pitch</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>pitch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svq1_decode_delta_block</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>HpelDSPContext</name> <modifier>*</modifier></type><name>hdsp</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bitbuf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>previous</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>svq1_pmv</name> <modifier>*</modifier></type><name>motion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>block_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>block_type</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name><name>svq1_block_type</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_type</name> <operator>==</operator> <name>SVQ1_BLOCK_SKIP</name> <operator>||</operator> <name>block_type</name> <operator>==</operator> <name>SVQ1_BLOCK_INTRA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>motion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator>

<name><name>motion</name><index>[<expr><name>x</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>block_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SVQ1_BLOCK_SKIP</name></expr>:</case>

<expr_stmt><expr><call><name>svq1_skip_block</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SVQ1_BLOCK_INTER</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_motion_inter_block</name><argument_list>(<argument><expr><name>hdsp</name></expr></argument>, <argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>,

<argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>motion</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Error in svq1_motion_inter_block %i\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_block_non_intra</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SVQ1_BLOCK_INTER_4V</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_motion_inter_4v_block</name><argument_list>(<argument><expr><name>hdsp</name></expr></argument>, <argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>,

<argument><expr><name>pitch</name></expr></argument>, <argument><expr><name>motion</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Error in svq1_motion_inter_4v_block %i\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_block_non_intra</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SVQ1_BLOCK_INTRA</name></expr>:</case>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_block_intra</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>svq1_parse_string</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bitbuf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>out</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>seed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <name><name>string_table</name><index>[<expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name>seed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <name><name>string_table</name><index>[<expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>seed</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svq1_decode_frame_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SVQ1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bitbuf</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nonref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nonref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_code</name></name> <operator>==</operator> <literal type="number">0x50</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_code</name></name> <operator>==</operator> <literal type="number">0x60</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>csum</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>csum</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_CCITT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_bswap16</name><argument_list>(<argument><expr><name>csum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bitbuf</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>bitbuf</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"%s checksum (%02x) for packet data\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>csum</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"correct"</literal></expr> </then><else>: <expr><literal type="string">"incorrect"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>csum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_code</name></name> <operator>^</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0x50</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>msg</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>svq1_parse_string</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"embedded message:\n%s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>msg</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_size_code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size_code</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>width</name> <operator>||</operator> <operator>!</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>ff_svq1_frame_size_table</name><index>[<expr><name>frame_size_code</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>ff_svq1_frame_size_table</name><index>[<expr><name>frame_size_code</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_1stop_8data_bits</name><argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>svq1_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SVQ1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>svq1_pmv</name> <modifier>*</modifier></type><name>pmv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_code</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_code</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x70</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_code</name></name> <operator>&amp;</operator> <literal type="number">0x60</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_code</name></name> <operator>!=</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Input packet too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pkt_swapped</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pkt_swapped_allocated</name></name></expr></argument>,

<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pkt_swapped</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_swapped</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pkt_swapped</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pkt_swapped</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>^</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_frame_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Error in svq1_decode_frame_header %i\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nonref</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name> <operator>&amp;&amp;</operator>

<name><name>cur</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>nonref</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pmv</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>(</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pmv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pmv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_block_intra</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,

<argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error in svq1_decode_block %i (keyframe)\n"</literal></expr></argument>,

<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>previous</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>previous</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing reference frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pmv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>width</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>svq1_pmv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>svq1_decode_delta_block</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,

<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,

<argument><expr><name>pmv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"Error in svq1_decode_delta_block %i\n"</literal></expr></argument>,

<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator>

<name><name>pmv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>nonref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pmv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>svq1_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SVQ1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_hpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>svq1_block_type</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_block_type_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_block_type_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>svq1_motion_component</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_mvtab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_mvtab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">176</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>table</name><index>[<expr><literal type="number">168</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>svq1_intra_multistage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>table</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>svq1_intra_multistage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>svq1_intra_multistage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_intra_multistage_vlc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_intra_multistage_vlc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>svq1_inter_multistage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>table</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>svq1_inter_multistage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>svq1_inter_multistage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_inter_multistage_vlc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_inter_multistage_vlc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>svq1_intra_mean</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_intra_mean_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_intra_mean_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">632</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>svq1_inter_mean</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_inter_mean_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ff_svq1_inter_mean_vlc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1434</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>svq1_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SVQ1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pkt_swapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pkt_swapped_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>svq1_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SVQ1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_svq1_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"svq1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SVQ1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SVQ1Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>svq1_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>svq1_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>svq1_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>svq1_flush</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_PIX_FMT_YUV410P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
