<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegaudio_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodecheader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/apetag.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/id3v1.h"</cpp:file></cpp:include> 

<typedef>typedef <type><struct>struct <name>MpegAudioParseContext</name> <block>{

<decl_stmt><decl><type><name>ParseContext</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_bitrate</name></decl>;</decl_stmt>

}</block></struct></type> <name>MpegAudioParseContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPA_HEADER_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAME_HEADER_MASK</name></cpp:macro> <cpp:value>(0xffe00000 | (3 &lt;&lt; 17) | (3 &lt;&lt; 10) | (3 &lt;&lt; 19))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpegaudio_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegAudioParseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>state</name><init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name><init>= <expr><name>END_NOT_FOUND</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flush</name> <init>= <expr><operator>!</operator><name>buf_size</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>buf_size</name></expr>;</condition> <incr/>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>inc</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-=</operator> <name>inc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>next</name><operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<while>while<condition>(<expr><name>i</name><operator>&lt;</operator><name>buf_size</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>sr</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>, <decl><type ref="prev"/><name>bit_rate</name></decl>, <decl><type ref="prev"/><name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>state</name><operator>=</operator> <operator>(</operator><name>state</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mpa_decode_header</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header_count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>header_threshold</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>codec_id</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>state</name><operator>&amp;</operator><name>SAME_HEADER_MASK</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>header</name></name><operator>&amp;</operator><name>SAME_HEADER_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header_count</name></name><operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header</name></name><operator>=</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>ret</name><operator>-</operator><literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>header_count</name></name> <operator>&gt;</operator> <name>header_threshold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>=</operator> <name>sr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>frame_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>codec_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>no_bitrate</name></name> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_bitrate</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>+=</operator> <operator>(</operator><name>bit_rate</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>header_count</name></name> <operator>-</operator> <name>header_threshold</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_MP3ADU</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"MP3ADU full parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>state</name></name><operator>=</operator> <name>state</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&gt;=</operator> <name>ID3v1_TAG_SIZE</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"TAG"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&gt;=</operator> <name>APE_TAG_FOOTER_BYTES</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>APE_TAG_PREAMBLE</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_mpegaudio_parser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_MP1</name></expr>, <expr><name>AV_CODEC_ID_MP2</name></expr>, <expr><name>AV_CODEC_ID_MP3</name></expr>, <expr><name>AV_CODEC_ID_MP3ADU</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegAudioParseContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>mpegaudio_parse</name></expr>,

<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>ff_parse_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
