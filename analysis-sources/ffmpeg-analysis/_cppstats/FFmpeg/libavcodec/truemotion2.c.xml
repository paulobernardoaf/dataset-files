<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\truemotion2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM2_ESCAPE</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM2_DELTAS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<enum>enum <name>TM2_STREAMS</name> <block>{

<decl><name>TM2_C_HI</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TM2_C_LO</name></decl>,

<decl><name>TM2_L_HI</name></decl>,

<decl><name>TM2_L_LO</name></decl>,

<decl><name>TM2_UPD</name></decl>,

<decl><name>TM2_MOT</name></decl>,

<decl><name>TM2_TYPE</name></decl>,

<decl><name>TM2_NUM_STREAMS</name></decl>

}</block>;</enum>

<enum>enum <name>TM2_BLOCKS</name> <block>{

<decl><name>TM2_HI_RES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TM2_MED_RES</name></decl>,

<decl><name>TM2_LOW_RES</name></decl>,

<decl><name>TM2_NULL_RES</name></decl>,

<decl><name>TM2_UPDATE</name></decl>,

<decl><name>TM2_STILL</name></decl>,

<decl><name>TM2_MOTION</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>TM2Context</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name><name>tokens</name><index>[<expr><name>TM2_NUM_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>tok_lens</name><index>[<expr><name>TM2_NUM_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>tok_ptrs</name><index>[<expr><name>TM2_NUM_STREAMS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>deltas</name><index>[<expr><name>TM2_NUM_STREAMS</name></expr>]</index><index>[<expr><name>TM2_DELTAS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>D</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>CD</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>clast</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>Y1_base</name></decl>, <modifier>*</modifier><name>U1_base</name>, <modifier>*</modifier><name>V1_base</name>, <modifier>*</modifier><name>Y2_base</name>, <modifier>*</modifier><name>U2_base</name>, <modifier>*</modifier><name>V2_base</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>Y1</name></decl>, <modifier>*</modifier><name>U1</name>, <modifier>*</modifier><name>V1</name>, <modifier>*</modifier><name>Y2</name>, <modifier>*</modifier><name>U2</name>, <modifier>*</modifier><name>V2</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_stride</name></decl>, <name>uv_stride</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>;</decl_stmt>

}</block></struct></type> <name>TM2Context</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TM2Codes</name> <block>{

<decl_stmt><decl><type><name>VLC</name></type> <name>vlc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>recode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

}</block></struct></type> <name>TM2Codes</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TM2Huff</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>val_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>min_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nodes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>nums</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lens</name></decl>;</decl_stmt> 

}</block></struct></type> <name>TM2Huff</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tm2_read_tree</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>TM2Huff</name> <modifier>*</modifier></type><name>huff</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ret2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>huff</name><operator>-&gt;</operator><name>max_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Tree exceeded its given depth (%i)\n"</literal></expr></argument>,

<argument><expr><name><name>huff</name><operator>-&gt;</operator><name>max_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>huff</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>huff</name><operator>-&gt;</operator><name>max_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Too many literals\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>nums</name><index>[<expr><name><name>huff</name><operator>-&gt;</operator><name>num</name></name></expr>]</index></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>huff</name><operator>-&gt;</operator><name>val_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name><name>huff</name><operator>-&gt;</operator><name>num</name></name></expr>]</index></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>lens</name><index>[<expr><name><name>huff</name><operator>-&gt;</operator><name>num</name></name></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>length</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret2</name> <operator>=</operator> <call><name>tm2_read_tree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>prefix</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>huff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret2</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tm2_read_tree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>prefix</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>huff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tm2_build_huff_table</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>TM2Codes</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TM2Huff</name></type> <name>huff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>val_bits</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>max_bits</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>min_bits</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>nodes</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huff</name><operator>.</operator><name>val_bits</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>huff</name><operator>.</operator><name>val_bits</name></name> <operator>&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>huff</name><operator>.</operator><name>max_bits</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>huff</name><operator>.</operator><name>max_bits</name></name> <operator>&gt;</operator> <literal type="number">25</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect tree parameters - literal "</literal>

<literal type="string">"length: %i, max code length: %i\n"</literal></expr></argument>, <argument><expr><name><name>huff</name><operator>.</operator><name>val_bits</name></name></expr></argument>, <argument><expr><name><name>huff</name><operator>.</operator><name>max_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>huff</name><operator>.</operator><name>nodes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>huff</name><operator>.</operator><name>nodes</name></name> <operator>&gt;</operator> <literal type="number">0x10000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect number of Huffman tree "</literal>

<literal type="string">"nodes: %i\n"</literal></expr></argument>, <argument><expr><name><name>huff</name><operator>.</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>huff</name><operator>.</operator><name>max_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>max_bits</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>max_num</name></name> <operator>=</operator> <operator>(</operator><name><name>huff</name><operator>.</operator><name>nodes</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>nums</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>huff</name><operator>.</operator><name>max_num</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>huff</name><operator>.</operator><name>max_num</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>.</operator><name>lens</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>huff</name><operator>.</operator><name>max_num</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>huff</name><operator>.</operator><name>nums</name></name> <operator>||</operator> <operator>!</operator><name><name>huff</name><operator>.</operator><name>bits</name></name> <operator>||</operator> <operator>!</operator><name><name>huff</name><operator>.</operator><name>lens</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>tm2_read_tree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>huff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name><name>huff</name><operator>.</operator><name>max_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Got less bits than expected: %i of %i\n"</literal></expr></argument>,

<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>huff</name><operator>.</operator><name>max_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>huff</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <name><name>huff</name><operator>.</operator><name>max_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Got less codes than expected: %i of %i\n"</literal></expr></argument>,

<argument><expr><name><name>huff</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>huff</name><operator>.</operator><name>max_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>code</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>, <argument><expr><name><name>huff</name><operator>.</operator><name>max_bits</name></name></expr></argument>, <argument><expr><name><name>huff</name><operator>.</operator><name>max_num</name></name></expr></argument>,

<argument><expr><name><name>huff</name><operator>.</operator><name>lens</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>huff</name><operator>.</operator><name>bits</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot build VLC table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name><name>huff</name><operator>.</operator><name>max_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>huff</name><operator>.</operator><name>max_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>recode</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>code</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>code</name><operator>-&gt;</operator><name>recode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>code</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>code</name><operator>-&gt;</operator><name>recode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>huff</name><operator>.</operator><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>huff</name><operator>.</operator><name>nums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>huff</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>huff</name><operator>.</operator><name>lens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tm2_free_codes</name><parameter_list>(<parameter><decl><type><name>TM2Codes</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>code</name><operator>-&gt;</operator><name>recode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>code</name><operator>-&gt;</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>code</name><operator>-&gt;</operator><name>vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>tm2_get_token</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>TM2Codes</name> <modifier>*</modifier></type><name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>code</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>code</name><operator>-&gt;</operator><name>recode</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM2_OLD_HEADER_MAGIC</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM2_NEW_HEADER_MAGIC</name></cpp:macro> <cpp:value>0x00000101</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>tm2_read_header</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>magic</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TM2_OLD_HEADER_MAGIC</name></expr>:</case>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Old TM2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>TM2_NEW_HEADER_MAGIC</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not a TM2 header: 0x%08"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tm2_read_deltas</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>mb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>mb</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>d</name> <operator>&gt;</operator> <name>TM2_DELTAS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mb</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect delta table: %i deltas x %i bits\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>mb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>-</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>mb</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TM2_DELTAS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tm2_read_stream</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>toks</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TM2Codes</name></type> <name>codes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"not enough space for len left\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument> &gt;</argument_list></name> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error, invalid stream size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>toks</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toks</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>TM2_ESCAPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>skip</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tm2_read_deltas</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>TM2_ESCAPE</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>skip</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tm2_build_huff_table</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>toks</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>toks</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>toks</name> <operator>&gt;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect number of tokens: %i\n"</literal></expr></argument>, <argument><expr><name>toks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>stream_id</name></expr>]</index></name></expr></argument>, <argument><expr><name>toks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>stream_id</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>stream_id</name></expr>]</index></name> <operator>=</operator> <name>toks</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;=</operator> <name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>skip</name> <operator>-</operator> <name>pos</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>toks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect number of tokens: %i\n"</literal></expr></argument>, <argument><expr><name>toks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tm2_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_id</name> <operator>&lt;=</operator> <name>TM2_MOT</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>TM2_DELTAS</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid delta token index %d for type %d, n=%d\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>toks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>codes</name><operator>.</operator><name>recode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_id</name> <operator>&lt;=</operator> <name>TM2_MOT</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>TM2_DELTAS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid delta token index %d for type %d, n=%d\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>stream_id</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>skip</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>tm2_free_codes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>GET_TOK</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_ptrs</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read token from stream %i out of bounds (%i&gt;=%i)\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_ptrs</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>TM2_MOT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_ptrs</name><index>[<expr><name>type</name></expr>]</index></name></expr>]</index></name> <operator>&gt;=</operator> <name>TM2_DELTAS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"token %d is too large\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_ptrs</name><index>[<expr><name>type</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>deltas</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_ptrs</name><index>[<expr><name>type</name></expr>]</index></name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_ptrs</name><index>[<expr><name>type</name></expr>]</index></name><operator>++</operator></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM2_INIT_POINTERS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>int *last, *clast; int *Y, *U, *V;int Ystride, Ustride, Vstride;Ystride = ctx-&gt;y_stride;Vstride = ctx-&gt;uv_stride;Ustride = ctx-&gt;uv_stride;Y = (ctx-&gt;cur?ctx-&gt;Y2:ctx-&gt;Y1) + by * 4 * Ystride + bx * 4;V = (ctx-&gt;cur?ctx-&gt;V2:ctx-&gt;V1) + by * 2 * Vstride + bx * 2;U = (ctx-&gt;cur?ctx-&gt;U2:ctx-&gt;U1) + by * 2 * Ustride + bx * 2;last = ctx-&gt;last + bx * 4;clast = ctx-&gt;clast + bx * 4;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM2_INIT_POINTERS_2</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>unsigned *Yo, *Uo, *Vo;int oYstride, oUstride, oVstride;TM2_INIT_POINTERS();oYstride = Ystride;oVstride = Vstride;oUstride = Ustride;Yo = (ctx-&gt;cur?ctx-&gt;Y1:ctx-&gt;Y2) + by * 4 * oYstride + bx * 4;Vo = (ctx-&gt;cur?ctx-&gt;V1:ctx-&gt;V2) + by * 2 * oVstride + bx * 2;Uo = (ctx-&gt;cur?ctx-&gt;U1:ctx-&gt;U2) + by * 2 * oUstride + bx * 2;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM2_RECALC_BLOCK</name><parameter_list>(<parameter><type><name>CHR</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>last</name></type></parameter>, <parameter><type><name>CD</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{CD[0] = (unsigned)CHR[ 1] - (unsigned)last[1];CD[1] = (unsigned)CHR[stride + 1] - (unsigned) CHR[1];last[0] = (int)CHR[stride + 0];last[1] = (int)CHR[stride + 1];}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_apply_deltas</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>deltas</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ct</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>deltas</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ct</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>ct</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_high_chroma</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>CD</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>deltas</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>CD</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>deltas</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>CD</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>last</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_low_chroma</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>clast</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>CD</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>deltas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>clast</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>CD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>CD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>prev</name> <operator>-</operator> <name><name>CD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>CD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>clast</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>CD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>CD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>CD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clast</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_high_chroma</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>clast</name></expr></argument>, <argument><expr><name>CD</name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_hi_res_block</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>deltas</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TM2_INIT_POINTERS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_C_HI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_C_HI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>tm2_high_chroma</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>Ustride</name></expr></argument>, <argument><expr><name>clast</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_high_chroma</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Vstride</name></expr></argument>, <argument><expr><name>clast</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>deltas</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_L_HI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>tm2_apply_deltas</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Ystride</name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_med_res_block</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>deltas</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TM2_INIT_POINTERS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_C_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_low_chroma</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>Ustride</name></expr></argument>, <argument><expr><name>clast</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_C_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_low_chroma</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Vstride</name></expr></argument>, <argument><expr><name>clast</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_L_HI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>tm2_apply_deltas</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Ystride</name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_low_res_block</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>deltas</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TM2_INIT_POINTERS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_C_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_low_chroma</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>Ustride</name></expr></argument>, <argument><expr><name>clast</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_C_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_low_chroma</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Vstride</name></expr></argument>, <argument><expr><name>clast</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>deltas</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_L_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_L_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_L_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_L_LO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>last</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>last</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>last</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>last</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>last</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>last</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>last</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>-</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_apply_deltas</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Ystride</name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_null_res_block</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>deltas</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TM2_INIT_POINTERS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_low_chroma</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>Ustride</name></expr></argument>, <argument><expr><name>clast</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>deltas</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tm2_low_chroma</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Vstride</name></expr></argument>, <argument><expr><name>clast</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>deltas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>last</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>ct</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>last</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>right</name> <operator>-</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left</name> <operator>+</operator> <operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>left</name> <operator>+</operator> <operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>right</name> <operator>-</operator> <operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tp</name> <init>= <expr><name>left</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tp</name> <operator>+</operator> <operator>(</operator><name>ct</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tp</name> <operator>+</operator> <operator>(</operator><name>ct</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tp</name> <operator>+</operator> <name>ct</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ct</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tp</name> <operator>+</operator> <name>ct</name><operator>)</operator> <operator>-</operator> <name>left</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>tm2_apply_deltas</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Ystride</name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_still_block</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TM2_INIT_POINTERS_2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Uo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Vo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name>Ustride</name></expr>;</expr_stmt> <expr_stmt><expr><name>V</name> <operator>+=</operator> <name>Vstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Uo</name> <operator>+=</operator> <name>oUstride</name></expr>;</expr_stmt> <expr_stmt><expr><name>Vo</name> <operator>+=</operator> <name>oVstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>-=</operator> <name>Ustride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>-=</operator> <name>Vstride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TM2_RECALC_BLOCK</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>Ustride</name></expr></argument>, <argument><expr><name>clast</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TM2_RECALC_BLOCK</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Vstride</name></expr></argument>, <argument><expr><operator>(</operator><name>clast</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>last</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name></expr>]</index></name> <operator>-</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name>Ystride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Yo</name> <operator>+=</operator> <name>oYstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_update_block</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TM2_INIT_POINTERS_2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Uo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_UPD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Vo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_UPD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name>Ustride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name>Vstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Uo</name> <operator>+=</operator> <name>oUstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Vo</name> <operator>+=</operator> <name>oVstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>-=</operator> <name>Ustride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>-=</operator> <name>Vstride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TM2_RECALC_BLOCK</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>Ustride</name></expr></argument>, <argument><expr><name>clast</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TM2_RECALC_BLOCK</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Vstride</name></expr></argument>, <argument><expr><operator>(</operator><name>clast</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>last</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name></expr>]</index></name> <operator>-</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>Yo</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>oYstride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>last</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_UPD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>last</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name>Ystride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Yo</name> <operator>+=</operator> <name>oYstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tm2_motion_block</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TM2_INIT_POINTERS_2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_MOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_MOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>bx</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>bx</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>by</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>by</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">4</literal><operator>*</operator><name>bx</name><operator>+</operator><name><name>mx</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <literal type="number">4</literal><operator>*</operator><name>by</name><operator>+</operator><name><name>my</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <literal type="number">4</literal><operator>*</operator><name>bx</name><operator>+</operator><name>mx</name><operator>+</operator><literal type="number">4</literal></expr></argument> &gt;</argument_list></name> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <literal type="number">4</literal><operator>*</operator><name>by</name><operator>+</operator><name>my</name><operator>+</operator><literal type="number">4</literal></expr></argument> &gt;</argument_list></name> <name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MV out of picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Yo</name> <operator>+=</operator> <name>my</name> <operator>*</operator> <name>oYstride</name> <operator>+</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Uo</name> <operator>+=</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>oUstride</name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>Vo</name> <operator>+=</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>oVstride</name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>U</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Uo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Vo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name>Ustride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name>Vstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Uo</name> <operator>+=</operator> <name>oUstride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Vo</name> <operator>+=</operator> <name>oVstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>U</name> <operator>-=</operator> <name>Ustride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>-=</operator> <name>Vstride</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TM2_RECALC_BLOCK</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>Ustride</name></expr></argument>, <argument><expr><name>clast</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TM2_RECALC_BLOCK</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Vstride</name></expr></argument>, <argument><expr><operator>(</operator><name>clast</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Yo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name>Ystride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Yo</name> <operator>+=</operator> <name>oYstride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Y</name> <operator>-=</operator> <name>Ystride</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>last</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>Y</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>Ystride</name></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>Y</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>Ystride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>Ystride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>Y</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>Ystride</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>Ystride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>last</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>i</name> <operator>+</operator> <name>Ystride</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tm2_decode_blocks</name><parameter_list>(<parameter><decl><type><name>TM2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>, <decl><type ref="prev"/><name>bw</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>bh</name> <init>= <expr><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>cw</name> <init>= <expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>Y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>U</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>V</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TM2_NUM_STREAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_ptrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>TM2_TYPE</name></expr>]</index></name><operator>&lt;</operator><name>bw</name><operator>*</operator><name>bh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,<argument><expr><literal type="string">"Got %i tokens for %i blocks\n"</literal></expr></argument>,<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>TM2_TYPE</name></expr>]</index></name></expr></argument>,<argument><expr><name>bw</name><operator>*</operator><name>bh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>bw</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>clast</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>bw</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>D</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>CD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bw</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>GET_TOK</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TM2_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TM2_HI_RES</name></expr>:</case>

<expr_stmt><expr><call><name>tm2_hi_res_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TM2_MED_RES</name></expr>:</case>

<expr_stmt><expr><call><name>tm2_med_res_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TM2_LOW_RES</name></expr>:</case>

<expr_stmt><expr><call><name>tm2_low_res_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TM2_NULL_RES</name></expr>:</case>

<expr_stmt><expr><call><name>tm2_null_res_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TM2_UPDATE</name></expr>:</case>

<expr_stmt><expr><call><name>tm2_update_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TM2_STILL</name></expr>:</case>

<expr_stmt><expr><call><name>tm2_still_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TM2_MOTION</name></expr>:</case>

<expr_stmt><expr><call><name>tm2_motion_block</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Skipping unknown block type %i\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr>?</condition><then><expr><name><name>ctx</name><operator>-&gt;</operator><name>Y2</name></name></expr></then><else>:<expr><name><name>ctx</name><operator>-&gt;</operator><name>Y1</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>U</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr>?</condition><then><expr><name><name>ctx</name><operator>-&gt;</operator><name>U2</name></name></expr></then><else>:<expr><name><name>ctx</name><operator>-&gt;</operator><name>U1</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr>?</condition><then><expr><name><name>ctx</name><operator>-&gt;</operator><name>V2</name></name></expr></then><else>:<expr><name><name>ctx</name><operator>-&gt;</operator><name>V1</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><name><name>U</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>V</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>Y</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>w</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>w</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>Y</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Y</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>y_stride</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>U</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>U</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>U</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>V</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>V</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>V</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>U</name><index>[<expr><name>cw</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>U</name><index>[<expr><name>cw</name></expr>]</index></name> <operator>=</operator> <name><name>U</name><index>[<expr><name>cw</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>V</name><index>[<expr><name>cw</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>V</name><index>[<expr><name>cw</name></expr>]</index></name> <operator>=</operator> <name><name>V</name><index>[<expr><name>cw</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>U</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>U</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>V</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>V</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>U</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>U</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>V</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>V</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>U</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>U</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>V</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>V</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>U</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>U</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>V</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>V</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>U</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>uv_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>keyframe</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>tm2_stream_order</name><index>[<expr><name>TM2_NUM_STREAMS</name></expr>]</index></name> <init>= <expr><block>{

<expr><name>TM2_C_HI</name></expr>, <expr><name>TM2_C_LO</name></expr>, <expr><name>TM2_L_HI</name></expr>, <expr><name>TM2_L_LO</name></expr>, <expr><name>TM2_UPD</name></expr>, <expr><name>TM2_MOT</name></expr>, <expr><name>TM2_TYPE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM2_HEADER_SIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TM2Context</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>l</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>pic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>TM2_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>l</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>l</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>,

<argument><expr><name>buf_size</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tm2_read_header</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TM2_NUM_STREAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no space for tm2_read_stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>tm2_read_stream</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>tm2_stream_order</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>buf_size</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>tm2_stream_order</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>l</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <call><name>tm2_decode_blocks</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name>buf_size</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TM2Context</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>l</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Width and height must be multiple of 4\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGR24</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>pic</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>clast</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>clast</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TM2_NUM_STREAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>tok_lens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>Y1_base</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>Y1_base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>Y2_base</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>Y2_base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>y_stride</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>U1_base</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>U1_base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>V1_base</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>V1_base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>U2_base</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>U2_base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>V2_base</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>V1_base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>uv_stride</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>Y1_base</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>Y2_base</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>U1_base</name></name> <operator>||</operator>

<operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>V1_base</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>U2_base</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>V2_base</name></name> <operator>||</operator>

<operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>last</name></name> <operator>||</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>clast</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>Y1_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>Y2_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>U1_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>U2_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>V1_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>V2_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>clast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>Y1</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>Y1_base</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>y_stride</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>Y2</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>Y2_base</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>y_stride</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>U1</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>U1_base</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>uv_stride</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>U2</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>U2_base</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>uv_stride</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>V1</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>V1_base</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>uv_stride</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>V2</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>V2_base</name></name> <operator>+</operator> <name><name>l</name><operator>-&gt;</operator><name>uv_stride</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TM2Context</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>l</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>clast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TM2_NUM_STREAMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>Y1</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>Y1_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>U1_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>V1_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>Y2_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>U2_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>V2_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_truemotion2_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"truemotion2"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Duck TrueMotion 2.0"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TRUEMOTION2</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TM2Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
