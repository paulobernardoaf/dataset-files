<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\xma_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>XMAParserContext</name><block>{

<decl_stmt><decl><type><name>int</name></type> <name>skip_packets</name></decl>;</decl_stmt>

}</block></struct></type> <name>XMAParserContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xma_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XMAParserContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>%</operator> <literal type="number">2048</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>packet</name></decl>, <decl><type ref="prev"/><name>nb_packets</name> <init>= <expr><name>buf_size</name> <operator>/</operator> <literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>packet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>packet</name> <operator>&lt;</operator> <name>nb_packets</name></expr>;</condition> <incr><expr><name>packet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>skip_packets</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>duration</name> <operator>+=</operator> <name><name>buf</name><index>[<expr><name>packet</name> <operator>*</operator> <literal type="number">2048</literal></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_packets</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>packet</name> <operator>*</operator> <literal type="number">2048</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_packets</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>duration</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_xma_parser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_XMA2</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XMAParserContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>xma_parse</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
