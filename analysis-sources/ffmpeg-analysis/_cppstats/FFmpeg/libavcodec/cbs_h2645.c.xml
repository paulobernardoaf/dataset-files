<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cbs_h2645.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h264.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h265.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_sei.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2645_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_sei.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_read_ue_golomb</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid ue-golomb code at "</literal>

<literal type="string">"%s: bitstream ended.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>k</name></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid ue-golomb code at "</literal>

<literal type="string">"%s: more than 31 zeroes.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>k</name></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>,

<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_read_se_golomb</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid se-golomb code at "</literal>

<literal type="string">"%s: bitstream ended.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>k</name></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid se-golomb code at "</literal>

<literal type="string">"%s: more than 31 zeroes.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>k</name></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>v</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>v</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>,

<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRId32</name><literal type="string">", but must be in [%"</literal><name>PRId32</name><literal type="string">",%"</literal><name>PRId32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_write_ue_golomb</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>len</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>len</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_write_se_golomb</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>uvalue</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>

<literal type="string">"%"</literal><name>PRId32</name><literal type="string">", but must be in [%"</literal><name>PRId32</name><literal type="string">",%"</literal><name>PRId32</name><literal type="string">"].\n"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>INT32_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uvalue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uvalue</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>uvalue</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>value</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>uvalue</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>len</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>uvalue</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>len</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>uvalue</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>uvalue</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ff_cbs_trace_header(ctx, name); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>call</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { err = (call); if (err &lt; 0) return err; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_NAME</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>, <parameter><type><name>codec</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cbs_ ##codec ##_ ##rw ##_ ##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_H264</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_NAME(rw, h264, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC_H265</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_NAME(rw, h265, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSCRIPTS</name><parameter_list>(<parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(subs &gt; 0 ? ((int[subs + 1]){ subs, __VA_ARGS__ }) : NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xu(width, name, current-&gt;name, range_min, range_max, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xu(width, name, current-&gt;name, 0, MAX_UINT_BITS(width), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flag</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ub(1, name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ue</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xue(name, current-&gt;name, range_min, range_max, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xi(width, name, current-&gt;name, range_min, range_max, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ib</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xi(width, name, current-&gt;name, MIN_INT_BITS(width), MAX_INT_BITS(width), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xse(name, current-&gt;name, range_min, range_max, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>us</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xu(width, name, current-&gt;name, range_min, range_max, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubs</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xu(width, name, current-&gt;name, 0, MAX_UINT_BITS(width), subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flags</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xu(1, name, current-&gt;name, 0, 1, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ues</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xue(name, current-&gt;name, range_min, range_max, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xi(width, name, current-&gt;name, range_min, range_max, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ibs</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xi(width, name, current-&gt;name, MIN_INT_BITS(width), MAX_INT_BITS(width), subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ses</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xse(name, current-&gt;name, range_min, range_max, subs, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fixed</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { av_unused uint32_t fixed_value = value; xu(width, name, fixed_value, value, value, 0); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READWRITE</name></cpp:macro> <cpp:value>read</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RWContext</name></cpp:macro> <cpp:value>GetBitContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xu</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(ff_cbs_read_unsigned(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, range_min, range_max)); var = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xue</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(cbs_read_ue_golomb(ctx, rw, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, range_min, range_max)); var = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xi</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int32_t value; CHECK(ff_cbs_read_signed(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, range_min, range_max)); var = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xse</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int32_t value; CHECK(cbs_read_se_golomb(ctx, rw, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, range_min, range_max)); var = value; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infer</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h2645_read_more_rbsp_data</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits_left</name> <init>= <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><name>bits_left</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>more_rbsp_data</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var) = cbs_h2645_read_more_rbsp_data(rw))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>byte_alignment</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(get_bits_count(rw) % 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>allocate</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { name ##_ref = av_buffer_allocz(size + AV_INPUT_BUFFER_PADDING_SIZE); if (!name ##_ref) return AVERROR(ENOMEM); name = name ##_ref-&gt;data; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_H264(READWRITE, name)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h264_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_H265(READWRITE, name)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h265_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READWRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RWContext</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xu</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xi</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xue</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xse</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>infer</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>more_rbsp_data</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>byte_alignment</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>allocate</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READWRITE</name></cpp:macro> <cpp:value>write</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RWContext</name></cpp:macro> <cpp:value>PutBitContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xu</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value = var; CHECK(ff_cbs_write_unsigned(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), value, range_min, range_max)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xue</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value = var; CHECK(cbs_write_ue_golomb(ctx, rw, #name, SUBSCRIPTS(subs, __VA_ARGS__), value, range_min, range_max)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xi</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int32_t value = var; CHECK(ff_cbs_write_signed(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), value, range_min, range_max)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xse</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int32_t value = var; CHECK(cbs_write_se_golomb(ctx, rw, #name, SUBSCRIPTS(subs, __VA_ARGS__), value, range_min, range_max)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infer</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (current-&gt;name != (value)) { av_log(ctx-&gt;log_ctx, AV_LOG_WARNING, "Warning: " "%s does not match inferred value: " "%"PRId64", but should be %"PRId64".\n", #name, (int64_t)current-&gt;name, (int64_t)(value)); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>more_rbsp_data</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(var)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>byte_alignment</name><parameter_list>(<parameter><type><name>rw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(put_bits_count(rw) % 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>allocate</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!name) { av_log(ctx-&gt;log_ctx, AV_LOG_ERROR, "%s must be set " "for writing.\n", #name); return AVERROR_INVALIDDATA; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_H264(READWRITE, name)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h264_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC_H265(READWRITE, name)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h265_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READWRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RWContext</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xu</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xi</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xue</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xse</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>u</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>i</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>flag</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ue</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>se</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>infer</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>more_rbsp_data</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>byte_alignment</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>allocate</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h264_free_pps</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>(</operator><name>H264RawPPS</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>slice_group_id_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h264_free_sei_payload</name><parameter_list>(<parameter><decl><type><name>H264RawSEIPayload</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>payload</name><operator>-&gt;</operator><name>payload_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_SEI_TYPE_BUFFERING_PERIOD</name></expr>:</case>

<case>case <expr><name>H264_SEI_TYPE_PIC_TIMING</name></expr>:</case>

<case>case <expr><name>H264_SEI_TYPE_PAN_SCAN_RECT</name></expr>:</case>

<case>case <expr><name>H264_SEI_TYPE_RECOVERY_POINT</name></expr>:</case>

<case>case <expr><name>H264_SEI_TYPE_DISPLAY_ORIENTATION</name></expr>:</case>

<case>case <expr><name>H264_SEI_TYPE_MASTERING_DISPLAY_COLOUR_VOLUME</name></expr>:</case>

<case>case <expr><name>H264_SEI_TYPE_ALTERNATIVE_TRANSFER</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_USER_DATA_REGISTERED</name></expr>:</case>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>payload</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>user_data_registered</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>:</case>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>payload</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>user_data_unregistered</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>payload</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h264_free_sei</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><operator>(</operator><name>H264RawSEI</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cbs_h264_free_sei_payload</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h264_free_slice</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>(</operator><name>H264RawSlice</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h265_free_vps</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawVPS</name> <modifier>*</modifier></type><name>vps</name> <init>= <expr><operator>(</operator><name>H265RawVPS</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vps</name><operator>-&gt;</operator><name>extension_data</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h265_free_sps</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><operator>(</operator><name>H265RawSPS</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>extension_data</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h265_free_pps</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>(</operator><name>H265RawPPS</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>extension_data</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h265_free_slice</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>(</operator><name>H265RawSlice</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h265_free_sei_payload</name><parameter_list>(<parameter><decl><type><name>H265RawSEIPayload</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>payload</name><operator>-&gt;</operator><name>payload_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEVC_SEI_TYPE_BUFFERING_PERIOD</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_PICTURE_TIMING</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_PAN_SCAN_RECT</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_RECOVERY_POINT</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_DISPLAY_ORIENTATION</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_ACTIVE_PARAMETER_SETS</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_DECODED_PICTURE_HASH</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_TIME_CODE</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_MASTERING_DISPLAY_INFO</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_CONTENT_LIGHT_LEVEL_INFO</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_ALTERNATIVE_TRANSFER_CHARACTERISTICS</name></expr>:</case>

<case>case <expr><name>HEVC_SEI_TYPE_ALPHA_CHANNEL_INFO</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>HEVC_SEI_TYPE_USER_DATA_REGISTERED_ITU_T_T35</name></expr>:</case>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>payload</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>user_data_registered</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>:</case>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>payload</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>user_data_unregistered</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>payload</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h265_free_sei</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><operator>(</operator><name>H265RawSEI</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cbs_h265_free_sei_payload</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h2645_fragment_add_nals</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H2645Packet</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>packet</name><operator>-&gt;</operator><name>nb_nals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name> <init>= <expr><operator>&amp;</operator><name><name>packet</name><operator>-&gt;</operator><name>nals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>nal</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>nuh_layer_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>nal</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>size</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Discarding empty 0 NAL unit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>nal</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>nal</name><operator>-&gt;</operator><name>raw_data</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr>

</then><else>: <expr><name><name>packet</name><operator>-&gt;</operator><name>rbsp</name><operator>.</operator><name>rbsp_buffer_ref</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>nal</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h2645_split_fragment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>codec_id</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamH2645Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header</name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>mp4</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid AVCC header: "</literal>

<literal type="string">"first byte %u.\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>nal_length_size</name></name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>count</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_h2645_packet_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_packet</name></name></expr></argument>,

<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to split AVCC SPS array.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h2645_fragment_add_nals</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>count</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_h2645_packet_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_packet</name></name></expr></argument>,

<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to split AVCC PPS array.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h2645_fragment_add_nals</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%u bytes left at end of AVCC "</literal>

<literal type="string">"header.\n"</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>header</name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nb_arrays</name></decl>, <decl><type ref="prev"/><name>nal_unit_type</name></decl>, <decl><type ref="prev"/><name>nb_nals</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>mp4</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">23</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid HVCC header: "</literal>

<literal type="string">"first byte %u.\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>nal_length_size</name></name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_arrays</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_arrays</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>nal_unit_type</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_nals</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_nals</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_h2645_packet_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_packet</name></name></expr></argument>,

<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_HEVC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to split "</literal>

<literal type="string">"HVCC array %d (%d NAL units of type %d).\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>nb_nals</name></expr></argument>, <argument><expr><name>nal_unit_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h2645_fragment_add_nals</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_h2645_packet_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_packet</name></name></expr></argument>,

<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>,

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>mp4</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>nal_length_size</name></name></expr></argument>,

<argument><expr><name>codec_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h2645_fragment_add_nals</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>read_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cbs_h2645_replace_ps</name><parameter_list>(<parameter><type><name>h26n</name></type></parameter>, <parameter><type><name>ps_name</name></type></parameter>, <parameter><type><name>ps_var</name></type></parameter>, <parameter><type><name>id_element</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int cbs_h26 ##h26n ##_replace_ ##ps_var(CodedBitstreamContext *ctx, CodedBitstreamUnit *unit) { CodedBitstreamH26 ##h26n ##Context *priv = ctx-&gt;priv_data; H26 ##h26n ##Raw ##ps_name *ps_var = unit-&gt;content; unsigned int id = ps_var-&gt;id_element; if (id &gt;= FF_ARRAY_ELEMS(priv-&gt;ps_var)) { av_log(ctx-&gt;log_ctx, AV_LOG_ERROR, "Invalid " #ps_name " id : %d.\n", id); return AVERROR_INVALIDDATA; } if (priv-&gt;ps_var[id] == priv-&gt;active_ ##ps_var) priv-&gt;active_ ##ps_var = NULL ; av_buffer_unref(&amp;priv-&gt;ps_var ##_ref[id]); if (unit-&gt;content_ref) priv-&gt;ps_var ##_ref[id] = av_buffer_ref(unit-&gt;content_ref); else priv-&gt;ps_var ##_ref[id] = av_buffer_alloc(sizeof(*ps_var)); if (!priv-&gt;ps_var ##_ref[id]) return AVERROR(ENOMEM); priv-&gt;ps_var[id] = (H26 ##h26n ##Raw ##ps_name *)priv-&gt;ps_var ##_ref[id]-&gt;data; if (!unit-&gt;content_ref) memcpy(priv-&gt;ps_var[id], ps_var, sizeof(*ps_var)); return 0; }</cpp:value></cpp:define>

<macro><name>cbs_h2645_replace_ps</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument>SPS</argument>, <argument>sps</argument>, <argument>seq_parameter_set_id</argument>)</argument_list></macro>

<macro><name>cbs_h2645_replace_ps</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument>PPS</argument>, <argument>pps</argument>, <argument>pic_parameter_set_id</argument>)</argument_list></macro>

<macro><name>cbs_h2645_replace_ps</name><argument_list>(<argument><literal type="number">5</literal></argument>, <argument>VPS</argument>, <argument>vps</argument>, <argument>vps_video_parameter_set_id</argument>)</argument_list></macro>

<macro><name>cbs_h2645_replace_ps</name><argument_list>(<argument><literal type="number">5</literal></argument>, <argument>SPS</argument>, <argument>sps</argument>, <argument>sps_seq_parameter_set_id</argument>)</argument_list></macro>

<macro><name>cbs_h2645_replace_ps</name><argument_list>(<argument><literal type="number">5</literal></argument>, <argument>PPS</argument>, <argument>pps</argument>, <argument>pps_pic_parameter_set_id</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h264_read_nal_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_NAL_SPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sps</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_read_sps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_replace_sps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_SPS_EXT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H264RawSPSExtension</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_read_sps_extension</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_PPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawPPS</name> <modifier>*</modifier></type><name>pps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pps</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h264_free_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pps</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_read_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_replace_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_SLICE</name></expr>:</case>

<case>case <expr><name>H264_NAL_IDR_SLICE</name></expr>:</case>

<case>case <expr><name>H264_NAL_AUXILIARY_SLICE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h264_free_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slice</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_read_slice_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cbs_h2645_read_more_rbsp_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>=</operator> <name>pos</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_AUD</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H264RawAUD</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_read_aud</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_SEI</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H264RawSEI</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h264_free_sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_read_sei</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_FILLER_DATA</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H264RawFiller</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_read_filler</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_END_SEQUENCE</name></expr>:</case>

<case>case <expr><name>H264_NAL_END_STREAM</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H264RawNALUnitHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_END_SEQUENCE</name></expr> ?</condition><then>

<expr><name>cbs_h264_read_end_of_sequence</name></expr> </then><else>:

<expr><name>cbs_h264_read_end_of_stream</name></expr></else></ternary><operator>)</operator><operator>(</operator><name>ctx</name><operator>,</operator> <operator>&amp;</operator><name>gbc</name><operator>,</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h265_read_nal_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawVPS</name> <modifier>*</modifier></type><name>vps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vps</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h265_free_vps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vps</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_read_vps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>vps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_replace_vps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sps</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h265_free_sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_read_sps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_replace_sps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawPPS</name> <modifier>*</modifier></type><name>pps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pps</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h265_free_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pps</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_read_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_replace_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_TRAIL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TRAIL_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TSA_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TSA_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_STSA_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_STSA_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RADL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RADL_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RASL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RASL_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_CRA_NUT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h265_free_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slice</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_read_slice_segment_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cbs_h2645_read_more_rbsp_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slice</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name> <operator>=</operator> <name>pos</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_AUD</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H265RawAUD</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_read_aud</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SEI_PREFIX</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_SEI_SUFFIX</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H265RawSEI</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h265_free_sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_read_sei</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>,

<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEVC_NAL_SEI_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h2645_write_slice_data</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_bit_start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>rest</name> <init>= <expr><name>data_size</name> <operator>-</operator> <operator>(</operator><name>data_bit_start</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>data</name> <operator>+</operator> <name>data_bit_start</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>data_bit_start</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>data_size</name> <operator>&gt;</operator> <name>data_bit_start</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rest</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>rbsp_stop_one_bit</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data_bit_start</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>-</operator> <name>data_bit_start</name> <operator>%</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>&amp;</operator> <call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>-</operator> <name>data_bit_start</name> <operator>%</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_put_bytes</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>rest</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>rest</name> <operator>-=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>rest</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>rest</name><operator>--</operator></expr><operator>,</operator> <expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<label><name>rbsp_stop_one_bit</name>:</label>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <ternary><condition><expr><name>rest</name></expr> ?</condition><then> <expr><operator>*</operator><name>pos</name></expr> </then><else>: <expr><operator>*</operator><name>pos</name> <operator>&amp;</operator> <call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>-</operator> <name>data_bit_start</name> <operator>%</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ff_ctz</name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>rest</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>i</name> <operator>-</operator> <name>data_bit_start</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>-</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h264_write_nal_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_NAL_SPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_sps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_replace_sps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_SPS_EXT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSPSExtension</name> <modifier>*</modifier></type><name>sps_ext</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_sps_extension</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>sps_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_PPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_replace_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_SLICE</name></expr>:</case>

<case>case <expr><name>H264_NAL_IDR_SLICE</name></expr>:</case>

<case>case <expr><name>H264_NAL_AUXILIARY_SLICE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_slice_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h2645_write_slice_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>,

<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_AUD</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_aud</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_SEI</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_sei</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_FILLER_DATA</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_filler</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_END_SEQUENCE</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_end_of_sequence</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_NAL_END_STREAM</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h264_write_end_of_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Write unimplemented for "</literal>

<literal type="string">"NAL unit type %"</literal><name>PRIu32</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h265_write_nal_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawVPS</name> <modifier>*</modifier></type><name>vps</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_write_vps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>vps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_replace_vps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_write_sps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_replace_sps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_write_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_replace_pps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_TRAIL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TRAIL_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TSA_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TSA_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_STSA_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_STSA_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RADL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RADL_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RASL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RASL_R</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_CRA_NUT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>H265RawSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_write_slice_segment_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h2645_write_slice_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>,

<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>data_bit_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_AUD</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_write_aud</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SEI_PREFIX</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_SEI_SUFFIX</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_h265_write_sei</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>,

<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEVC_NAL_SEI_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Write unimplemented for "</literal>

<literal type="string">"NAL unit type %"</literal><name>PRIu32</name><literal type="string">".\n"</literal></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_h2645_assemble_fragment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max_size</name></decl>, <decl><type ref="prev"/><name>dp</name></decl>, <decl><type ref="prev"/><name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>zero_run</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>max_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>max_size</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>av_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>max_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>data_bit_padding</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Probably invalid "</literal>

<literal type="string">"unaligned padding on non-final NAL unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_bit_padding</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_SPS</name> <operator>||</operator>

<name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_PPS</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEVC_NAL_VPS</name> <operator>||</operator>

<name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEVC_NAL_SPS</name> <operator>||</operator>

<name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HEVC_NAL_PPS</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>zero_run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sp</name> <operator>&lt;</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>zero_run</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>sp</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>zero_run</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>zero_run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>unit</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>sp</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zero_run</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>sp</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>sp</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>dp</name> <operator>&lt;=</operator> <name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>dp</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dp</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h264_close</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH264Context</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_h2645_packet_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h264</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>read_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h264</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h264</name><operator>-&gt;</operator><name>sps_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h264</name><operator>-&gt;</operator><name>pps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h264</name><operator>-&gt;</operator><name>pps_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_h265_close</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH265Context</name> <modifier>*</modifier></type><name>h265</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_h2645_packet_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h265</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>read_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h265</name><operator>-&gt;</operator><name>vps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h265</name><operator>-&gt;</operator><name>vps_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h265</name><operator>-&gt;</operator><name>sps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h265</name><operator>-&gt;</operator><name>sps_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h265</name><operator>-&gt;</operator><name>pps</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h265</name><operator>-&gt;</operator><name>pps_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>CodedBitstreamType</name></type> <name>ff_cbs_type_h264</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CodedBitstreamH264Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>split_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h2645_split_fragment</name></expr>,

<expr><operator>.</operator><name>read_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h264_read_nal_unit</name></expr>,

<expr><operator>.</operator><name>write_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h264_write_nal_unit</name></expr>,

<expr><operator>.</operator><name>assemble_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h2645_assemble_fragment</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h264_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CodedBitstreamType</name></type> <name>ff_cbs_type_h265</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CodedBitstreamH265Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>split_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h2645_split_fragment</name></expr>,

<expr><operator>.</operator><name>read_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h265_read_nal_unit</name></expr>,

<expr><operator>.</operator><name>write_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h265_write_nal_unit</name></expr>,

<expr><operator>.</operator><name>assemble_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h2645_assemble_fragment</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_h265_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ff_cbs_h264_add_sei_message</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIPayload</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_SEI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sei</name> <operator>=</operator> <name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>&lt;</operator> <name>H264_MAX_SEI_PAYLOADS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sei</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sei</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>sei_ref</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sei</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sei</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sei</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>=</operator> <name>H264_NAL_SEI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_ref_idc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sei_ref</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>sei</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sei</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_h264_free_sei</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sei_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_SLICE</name> <operator>||</operator>

<name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>H264_NAL_SEI</name></expr></argument>,

<argument><expr><name>sei</name></expr></argument>, <argument><expr><name>sei_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sei_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>payload</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>cbs_h264_free_sei_payload</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cbs_h264_delete_sei_message</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264RawSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><name><name>nal</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_SEI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>position</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;</operator> <name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>au</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>au</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>nal</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_cbs_delete_unit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>cbs_h264_free_sei_payload</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name></name> <operator>+</operator> <name>position</name></expr></argument>,

<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name></name> <operator>+</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>-</operator> <name>position</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sei</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
