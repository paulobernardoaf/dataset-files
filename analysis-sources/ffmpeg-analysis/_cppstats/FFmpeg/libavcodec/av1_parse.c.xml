<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\av1_parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_av1_extract_obu</name><parameter_list>(<parameter><decl><type><name>AV1OBU</name> <modifier>*</modifier></type><name>obu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>obu_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_pos</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>temporal_id</name></decl>, <decl><type ref="prev"/><name>spatial_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>parse_obu_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obu_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_pos</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temporal_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spatial_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>=</operator> <name>temporal_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>spatial_id</name></name> <operator>=</operator> <name>spatial_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>obu_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>raw_data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>raw_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"obu_type: %d, temporal_id: %d, spatial_id: %d, payload size: %d\n"</literal></expr></argument>,

<argument><expr><name><name>obu</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>temporal_id</name></name></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>spatial_id</name></name></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_av1_packet_split</name><parameter_list>(<parameter><decl><type><name>AV1Packet</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>bc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>consumed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_obus</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1OBU</name> <modifier>*</modifier></type><name>obu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>obus_allocated</name></name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>nb_obus</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>obus_allocated</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1OBU</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>obus</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>obus_allocated_size</name></name></expr></argument>, <argument><expr><name>new_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>obus</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>obus</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>obus_allocated</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pkt</name><operator>-&gt;</operator><name>obus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>obus_allocated</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obu</name> <operator>=</operator> <operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>obus</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_obus</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>ff_av1_extract_obu</name><argument_list>(<argument><expr><name>obu</name></expr></argument>, <argument><expr><name><name>bc</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>consumed</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bc</name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>obu</name><operator>-&gt;</operator><name>size_bits</name></name> <operator>=</operator> <call><name>get_obu_bit_length</name><argument_list>(<argument><expr><name><name>obu</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>size_bits</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>obu</name><operator>-&gt;</operator><name>size_bits</name></name> <operator>&amp;&amp;</operator> <name><name>obu</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV1_OBU_TEMPORAL_DELIMITER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid OBU of type %d, skipping.\n"</literal></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>nb_obus</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>obu</name><operator>-&gt;</operator><name>size_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_av1_packet_uninit</name><parameter_list>(<parameter><decl><type><name>AV1Packet</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>obus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>obus_allocated</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>obus_allocated_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
