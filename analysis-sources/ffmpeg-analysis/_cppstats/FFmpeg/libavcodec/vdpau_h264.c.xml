<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vdpau_h264.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vdpau/vdpau.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>h264_foc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>foc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>foc</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>foc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>foc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vdpau_h264_clear_rf</name><parameter_list>(<parameter><decl><type><name>VdpReferenceFrameH264</name> <modifier>*</modifier></type><name>rf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name>VDP_INVALID_HANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>is_long_term</name></name> <operator>=</operator> <name>VDP_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>top_is_reference</name></name> <operator>=</operator> <name>VDP_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>bottom_is_reference</name></name> <operator>=</operator> <name>VDP_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>field_order_cnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>field_order_cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>frame_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vdpau_h264_set_rf</name><parameter_list>(<parameter><decl><type><name>VdpReferenceFrameH264</name> <modifier>*</modifier></type><name>rf</name></decl></parameter>, <parameter><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pic_structure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name>surface</name> <init>= <expr><call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_structure</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pic_structure</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>reference</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name>surface</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>is_long_term</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>long_ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>top_is_reference</name></name> <operator>=</operator> <operator>(</operator><name>pic_structure</name> <operator>&amp;</operator> <name>PICT_TOP_FIELD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>bottom_is_reference</name></name> <operator>=</operator> <operator>(</operator><name>pic_structure</name> <operator>&amp;</operator> <name>PICT_BOTTOM_FIELD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>field_order_cnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>h264_foc</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>field_order_cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>h264_foc</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf</name><operator>-&gt;</operator><name>frame_idx</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>long_ref</name></name></expr> ?</condition><then> <expr><name><name>pic</name><operator>-&gt;</operator><name>pic_id</name></name></expr> </then><else>: <expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vdpau_h264_set_reference_frames</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpPictureInfoH264</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>h264</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpReferenceFrameH264</name> <modifier>*</modifier></type><name>rf</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>referenceFrames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_RF_COUNT</name></cpp:macro> <cpp:value>FF_ARRAY_ELEMS(info-&gt;referenceFrames)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>list</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier><modifier>*</modifier></type><name>lp</name> <init>= <expr><ternary><condition><expr><name>list</name></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name></name></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ls</name> <init>= <expr><ternary><condition><expr><name>list</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ls</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpReferenceFrameH264</name> <modifier>*</modifier></type><name>rf2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpVideoSurface</name></type> <name>surface_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_frame_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pic_frame_idx</name> <operator>=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>long_ref</name></name></expr> ?</condition><then> <expr><name><name>pic</name><operator>-&gt;</operator><name>pic_id</name></name></expr> </then><else>: <expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>surface_ref</name> <operator>=</operator> <call><name>ff_vdpau_get_surface_id</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rf2</name> <operator>=</operator> <operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>referenceFrames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>rf2</name> <operator>!=</operator> <name>rf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rf2</name><operator>-&gt;</operator><name>surface</name></name> <operator>==</operator> <name>surface_ref</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>rf2</name><operator>-&gt;</operator><name>is_long_term</name></name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>long_ref</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>rf2</name><operator>-&gt;</operator><name>frame_idx</name></name> <operator>==</operator> <name>pic_frame_idx</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>rf2</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>rf2</name> <operator>!=</operator> <name>rf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rf2</name><operator>-&gt;</operator><name>top_is_reference</name></name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>PICT_TOP_FIELD</name><operator>)</operator></expr> ?</condition><then> <expr><name>VDP_TRUE</name></expr> </then><else>: <expr><name>VDP_FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rf2</name><operator>-&gt;</operator><name>bottom_is_reference</name></name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>PICT_BOTTOM_FIELD</name><operator>)</operator></expr> ?</condition><then> <expr><name>VDP_TRUE</name></expr> </then><else>: <expr><name>VDP_FALSE</name></expr></else></ternary></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rf</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>referenceFrames</name><index>[<expr><name>H264_RF_COUNT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vdpau_h264_set_rf</name><argument_list>(<argument><expr><name>rf</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>rf</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>rf</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>referenceFrames</name><index>[<expr><name>H264_RF_COUNT</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>rf</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vdpau_h264_clear_rf</name><argument_list>(<argument><expr><name>rf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_h264_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpPictureInfoH264</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>h264</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VdpPictureInfoH264Predictive</name> <modifier>*</modifier></type><name>info2</name> <init>= <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>h264_predictive</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>field_order_cnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>h264_foc</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>field_order_cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>h264_foc</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>is_reference</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>nal_ref_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>field_pic_flag</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>bottom_field_flag</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_ref_frames</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mb_adaptive_frame_field_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>field_pic_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_pred</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>transform_8x8_mode_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>second_chroma_qp_index_offset</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_max_frame_num_minus4</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pic_order_cnt_type</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>qpprime_y_zero_transform_bypass_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>transform_bypass</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>residual_color_transform_flag</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>entropy_coding_mode_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cabac</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pic_order_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_order_present</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_parameters_present</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>redundant_pic_cnt_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>scaling_lists_4x4</name></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>scaling_lists_4x4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>scaling_lists_8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>scaling_lists_8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>scaling_lists_8x8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>scaling_lists_8x8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vdpau_h264_set_reference_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vdpau_common_start_frame</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>start_code_prefix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_h264_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_add_buffer</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>start_code_prefix</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_add_buffer</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>h264</name><operator>.</operator><name>slice_count</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_h264_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_vdpau_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h264_draw_horiz_band</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vdpau_h264_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VdpDecoderProfile</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>level</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;</operator> <operator>~</operator><name>FF_PROFILE_H264_INTRA</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_H264_BASELINE</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_H264_BASELINE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_H264_CONSTRAINED_BASELINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>FF_PROFILE_H264_MAIN</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_H264_MAIN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_H264_HIGH</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_H264_HIGH</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_H264_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>FF_PROFILE_H264_EXTENDED</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_H264_EXTENDED</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>FF_PROFILE_H264_HIGH_10</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_H264_HIGH</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>FF_PROFILE_H264_HIGH_422</name></expr>:</case>

<case>case <expr><name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>:</case>

<case>case <expr><name>FF_PROFILE_H264_CAVLC_444</name></expr>:</case>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <name>VDP_DECODER_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;</operator> <name>FF_PROFILE_H264_INTRA</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>VDP_DECODER_LEVEL_H264_1b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_vdpau_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_h264_vdpau_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_vdpau"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VDPAU</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>vdpau_h264_start_frame</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>vdpau_h264_end_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>vdpau_h264_decode_slice</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vdpau_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vdpau_h264_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_vdpau_common_uninit</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_vdpau_common_frame_params</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VDPAUContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
