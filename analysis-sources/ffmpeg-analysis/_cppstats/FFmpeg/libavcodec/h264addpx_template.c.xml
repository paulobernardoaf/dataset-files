<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264addpx_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>ff_h264_add_pixels4</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>dctcoef</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>_src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>ff_h264_add_pixels8</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>dctcoef</name> <operator>*</operator><operator>)</operator> <name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>_src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
