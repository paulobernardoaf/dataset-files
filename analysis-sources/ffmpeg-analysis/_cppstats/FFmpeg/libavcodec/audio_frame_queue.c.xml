<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\audio_frame_queue.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_frame_queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_af_queue_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AudioFrameQueue</name> <modifier>*</modifier></type><name>afq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>remaining_delay</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>remaining_samples</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_af_queue_close</name><parameter_list>(<parameter><decl><type><name>AudioFrameQueue</name> <modifier>*</modifier></type><name>afq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%d frames left in the queue on closing\n"</literal></expr></argument>, <argument><expr><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>afq</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>afq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>afq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_af_queue_add</name><parameter_list>(<parameter><decl><type><name>AudioFrameQueue</name> <modifier>*</modifier></type><name>afq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioFrame</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>afq</name><operator>-&gt;</operator><name>frame_alloc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>afq</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new</name> <operator>+=</operator> <name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>duration</name></name> <operator>+=</operator> <name><name>afq</name><operator>-&gt;</operator><name>remaining_delay</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>f-&gt;pts</argument>,

<argument>afq-&gt;avctx-&gt;time_base</argument>,

<argument>(AVRational){ <literal type="number">1</literal></argument>, <argument>afq-&gt;avctx-&gt;sample_rate }</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>pts</name></name> <operator>-=</operator> <name><name>afq</name><operator>-&gt;</operator><name>remaining_delay</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>&amp;&amp;</operator> <name><name>new</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pts</name> <operator>&gt;=</operator> <name><name>new</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Queue input is backward in time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>remaining_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>remaining_samples</name></name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_af_queue_remove</name><parameter_list>(<parameter><decl><type><name>AudioFrameQueue</name> <modifier>*</modifier></type><name>afq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pts</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>out_pts</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>removed_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>||</operator> <name><name>afq</name><operator>-&gt;</operator><name>frame_alloc</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_pts</name> <operator>=</operator> <name><name>afq</name><operator>-&gt;</operator><name>frames</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Trying to remove %d samples, but the queue is empty\n"</literal></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pts</name> <operator>=</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>out_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>nb_samples</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>duration</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>removed_samples</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>remaining_samples</name></name> <operator>-=</operator> <name>removed_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>afq</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>, <argument><expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>afq</name><operator>-&gt;</operator><name>frames</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>nb_samples</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>afq</name><operator>-&gt;</operator><name>frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>remaining_samples</name></name> <operator>==</operator> <name><name>afq</name><operator>-&gt;</operator><name>remaining_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name></name> <operator>&amp;&amp;</operator> <name><name>afq</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>afq</name><operator>-&gt;</operator><name>frames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pts</name> <operator>+=</operator> <name>nb_samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Trying to remove %d more samples than there are in the queue\n"</literal></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>duration</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>duration</name> <operator>=</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name><name>afq</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>removed_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
