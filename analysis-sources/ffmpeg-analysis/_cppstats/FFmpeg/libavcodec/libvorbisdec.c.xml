<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libvorbisdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vorbis/vorbisenc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>OggVorbisDecContext</name> <block>{

<decl_stmt><decl><type><name>vorbis_info</name></type> <name>vi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vorbis_dsp_state</name></type> <name>vd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vorbis_block</name></type> <name>vb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vorbis_comment</name></type> <name>vc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>op</name></decl>;</decl_stmt> 

}</block></struct></type> <name>OggVorbisDecContext</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>oggvorbis_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avccontext</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oggvorbis_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avccontext</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>OggVorbisDecContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>avccontext</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name><init>= <expr><name><name>avccontext</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name><name>hsizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>headers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>extradata</name> <init>= <expr><name><name>avccontext</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator> <name><name>avccontext</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>||</operator> <operator>!</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avccontext</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vorbis extradata absent\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vorbis_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_comment_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sizesum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>hsizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sizesum</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>hsizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sizesum</name> <operator>&gt;</operator> <name><name>avccontext</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avccontext</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vorbis extradata too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>headers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>hsizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sizesum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>hsizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sizesum</name> <operator>&lt;</operator> <name><name>avccontext</name><operator>-&gt;</operator><name>extradata_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hsizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sizesum</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>hsizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sizesum</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>sizesum</name> <operator>&gt;</operator> <name><name>avccontext</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avccontext</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"vorbis header sizes damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>hsizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>avccontext</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <name><name>hsizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>hsizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>offset</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

av_log(avccontext, AV_LOG_DEBUG,

"vorbis header sizes: %d, %d, %d, / extradata_len is %d \n",

hsizes[0], hsizes[1], hsizes[2], avccontext-&gt;extradata_size);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>headers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>extradata</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>extradata</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name><name>hsizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>extradata</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name><name>hsizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>hsizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avccontext</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"vorbis initial header len is wrong: %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>b_o_s</name></name><operator>=</operator> <name>i</name><operator>==</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>hsizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name><name>headers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vorbis_synthesis_headerin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avccontext</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d. vorbis header damaged\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>avccontext</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>vi</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avccontext</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>vi</name><operator>.</operator><name>rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avccontext</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avccontext</name><operator>-&gt;</operator><name>time_base</name></name><operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>avccontext</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_synthesis_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_block_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr> ;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>oggvorbis_decode_close</name><argument_list>(<argument><expr><name>avccontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>conv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pcm</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_int16_t</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>ogg_int16_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>mono</name></decl> ;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mono</name> <operator>=</operator> <name><name>pcm</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>samples</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>mono</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">32767.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr> ;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oggvorbis_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avccontext</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OggVorbisDecContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>avccontext</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>pcm</name></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name> <modifier>*</modifier></type><name>op</name><init>= <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>, <decl><type ref="prev"/><name>total_samples</name></decl>, <decl><type ref="prev"/><name>total_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">8192</literal><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avccontext</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>packet</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vorbis_synthesis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vb</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vorbis_synthesis_blockin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vb</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_samples</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

<expr_stmt><expr><name>total_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>samples</name> <operator>=</operator> <call><name>vorbis_synthesis_pcmout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcm</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>conv</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>pcm</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>output</name> <operator>+</operator> <name>total_bytes</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>vi</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><name>total_bytes</name> <operator>+=</operator> <name>samples</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>context</name><operator>-&gt;</operator><name>vi</name><operator>.</operator><name>channels</name></name></expr> ;</expr_stmt>

<expr_stmt><expr><name>total_samples</name> <operator>+=</operator> <name>samples</name></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_synthesis_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vd</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>total_samples</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <name>total_samples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oggvorbis_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avccontext</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>OggVorbisDecContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>avccontext</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl> ;</decl_stmt>

<expr_stmt><expr><call><name>vorbis_block_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_dsp_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_info_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vi</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<expr_stmt><expr><call><name>vorbis_comment_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>vc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr> ;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libvorbis_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libvorbis"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libvorbis"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VORBIS</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OggVorbisDecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>oggvorbis_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>oggvorbis_decode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>oggvorbis_decode_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
