<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\idcinvideo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUFFMAN_TABLE_SIZE</name></cpp:macro> <cpp:value>64 * 1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUF_TOKENS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PALETTE_COUNT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>hnode</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>children</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>hnode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IdcinContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hnode</name></type> <name><name>huff_nodes</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><name>HUF_TOKENS</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>num_huff_nodes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>IdcinContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>huff_smallest_node</name><parameter_list>(<parameter><decl><type><name>hnode</name> <modifier>*</modifier></type><name>hnodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_hnodes</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best</name></decl>, <decl><type ref="prev"/><name>best_node</name></decl>;</decl_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <literal type="number">99999999</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>best_node</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_hnodes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>hnodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>used</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>hnodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hnodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>&lt;</operator> <name>best</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name><name>hnodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_node</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>best_node</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hnodes</name><index>[<expr><name>best_node</name></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>best_node</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>huff_build_tree</name><parameter_list>(<parameter><decl><type><name>IdcinContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>hnode</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hnodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_hnodes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_hnodes</name> <operator>=</operator> <name>HUF_TOKENS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hnodes</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>huff_nodes</name><index>[<expr><name>prev</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HUF_TOKENS</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hnodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>&amp;</operator><name><name>hnodes</name><index>[<expr><name>num_hnodes</name></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>huff_smallest_node</name><argument_list>(<argument><expr><name>hnodes</name></expr></argument>, <argument><expr><name>num_hnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>huff_smallest_node</name><argument_list>(<argument><expr><name>hnodes</name></expr></argument>, <argument><expr><name>num_hnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>hnodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>count</name> <operator>+</operator>

<name><name>hnodes</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_hnodes</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_huff_nodes</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name>num_hnodes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>idcin_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IdcinContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>histogram_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>histograms</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <name>HUFFMAN_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" id CIN video: expected extradata size of %d\n"</literal></expr></argument>, <argument><expr><name>HUFFMAN_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>histograms</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>HUF_TOKENS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>huff_nodes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name><name>histograms</name><index>[<expr><name>histogram_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>huff_build_tree</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>idcin_decode_vlcs</name><parameter_list>(<parameter><decl><type><name>IdcinContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hnode</name> <modifier>*</modifier></type><name>hnodes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_pos</name></decl>, <decl><type ref="prev"/><name>node_num</name></decl>, <decl><type ref="prev"/><name>dat_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>bit_pos</name> <operator>=</operator> <name>dat_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>;</condition>

<incr><expr><name>y</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>node_num</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_huff_nodes</name><index>[<expr><name>prev</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hnodes</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>huff_nodes</name><index>[<expr><name>prev</name></expr>]</index></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>node_num</name> <operator>&gt;=</operator> <name>HUF_TOKENS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bit_pos</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>dat_pos</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Huffman decode error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bit_pos</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>dat_pos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node_num</name> <operator>=</operator> <name><name>hnodes</name><index>[<expr><name>node_num</name></expr>]</index></name><operator>.</operator><name><name>children</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_pos</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>node_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>node_num</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>idcin_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IdcinContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pal_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PALETTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pal_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>idcin_decode_vlcs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pal</name> <operator>&amp;&amp;</operator> <name>pal_size</name> <operator>==</operator> <name>AVPALETTE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Palette size %d is wrong\n"</literal></expr></argument>, <argument><expr><name>pal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>idcin_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"max_pixels"</literal></expr>, <expr><literal type="string">"320*240"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_idcin_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"idcinvideo"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"id Quake II CIN video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_IDCIN</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IdcinContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>idcin_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>idcin_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>idcin_defaults</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
