<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\jpeg2000dsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpeg2000dsp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>f_ict_params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.402f</literal></expr>,

<expr><literal type="number">0.34413f</literal></expr>,

<expr><literal type="number">0.71414f</literal></expr>,

<expr><literal type="number">1.772f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>i_ict_params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">91881</literal></expr>,

<expr><literal type="number">22553</literal></expr>,

<expr><literal type="number">46802</literal></expr>,

<expr><literal type="number">116130</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ict_float</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src0</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>csize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name>_src0</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src1</name> <init>= <expr><name>_src1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src2</name> <init>= <expr><name>_src2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>i0f</name></decl>, <decl><type ref="prev"/><name>i1f</name></decl>, <decl><type ref="prev"/><name>i2f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i0f</name> <operator>=</operator> <operator>*</operator><name>src0</name> <operator>+</operator> <operator>(</operator><name><name>f_ict_params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>*</operator><name>src2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i1f</name> <operator>=</operator> <operator>*</operator><name>src0</name> <operator>-</operator> <operator>(</operator><name><name>f_ict_params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>*</operator><name>src1</name><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>f_ict_params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>*</operator><name>src2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i2f</name> <operator>=</operator> <operator>*</operator><name>src0</name> <operator>+</operator> <operator>(</operator><name><name>f_ict_params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>*</operator><name>src1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src0</name><operator>++</operator> <operator>=</operator> <name>i0f</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src1</name><operator>++</operator> <operator>=</operator> <name>i1f</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src2</name><operator>++</operator> <operator>=</operator> <name>i2f</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ict_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src0</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>csize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name>_src0</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src1</name> <init>= <expr><name>_src1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src2</name> <init>= <expr><name>_src2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i0</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <operator>*</operator><name>src0</name> <operator>+</operator> <operator>*</operator><name>src2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">26345U</literal> <operator>*</operator> <operator>*</operator><name>src2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <operator>*</operator><name>src0</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>i_ict_params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>*</operator><name>src1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>i_ict_params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>*</operator><name>src2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <operator>*</operator><name>src0</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>*</operator><name>src1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">14942U</literal> <operator>*</operator> <operator>*</operator><name>src1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src0</name><operator>++</operator> <operator>=</operator> <name>i0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src1</name><operator>++</operator> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src2</name><operator>++</operator> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rct_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src0</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>csize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name>_src0</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src1</name> <init>= <expr><name>_src1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src2</name> <init>= <expr><name>_src2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i0</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>csize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <operator>*</operator><name>src0</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>src2</name> <operator>+</operator> <operator>*</operator><name>src1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name>i1</name> <operator>+</operator> <operator>*</operator><name>src2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i1</name> <operator>+</operator> <operator>*</operator><name>src1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src0</name><operator>++</operator> <operator>=</operator> <name>i0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src1</name><operator>++</operator> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src2</name><operator>++</operator> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_jpeg2000dsp_init</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mct_decode</name><index>[<expr><name>FF_DWT97</name></expr>]</index></name> <operator>=</operator> <name>ict_float</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mct_decode</name><index>[<expr><name>FF_DWT53</name></expr>]</index></name> <operator>=</operator> <name>rct_int</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mct_decode</name><index>[<expr><name>FF_DWT97_INT</name></expr>]</index></name> <operator>=</operator> <name>ict_int</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_jpeg2000dsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
