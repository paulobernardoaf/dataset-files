<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\flac_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flac.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_MAX_SEQUENTIAL_HEADERS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_MIN_HEADERS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_AVG_FRAME_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_HEADER_BASE_SCORE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_HEADER_CHANGED_PENALTY</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_HEADER_CRC_FAIL_PENALTY</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_HEADER_NOT_PENALIZED_YET</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_HEADER_NOT_SCORED_YET</name></cpp:macro> <cpp:value>-100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAME_HEADER_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>FLACHeaderMarker</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>link_penalty</name><index>[<expr><name>FLAC_MAX_SEQUENTIAL_HEADERS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_score</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FLACFrameInfo</name></type> <name>fi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>FLACHeaderMarker</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>FLACHeaderMarker</name></name> <modifier>*</modifier></type><name>best_child</name></decl>;</decl_stmt> 

}</block></struct></type> <name>FLACHeaderMarker</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FLACParseContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>best_header</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_headers_found</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nb_headers_buffered</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>best_header_valid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>fifo_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>end_padded</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wrap_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>wrap_buf_allocated_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FLACFrameInfo</name></type> <name>last_fi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>last_fi_valid</name></decl>;</decl_stmt> 

}</block></struct></type> <name>FLACParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>frame_header_is_valid</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>FLACFrameInfo</name> <modifier>*</modifier></type><name>fi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_FRAME_HEADER_SIZE</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>ff_flac_decode_frame_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>fi</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flac_fifo_read_wrap</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wrap_buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>allocated_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>start</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>start</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp_buf</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>wrap_buf</name></expr></argument>, <argument><expr><name>allocated_size</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"couldn't reallocate wrap buffer of size %d"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>wrap_buf</name> <operator>=</operator> <name>tmp_buf</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seg_len</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>seg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_buf</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>tmp_buf</name> <operator>+</operator> <name>seg_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>seg_len</name> <operator>-</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>seg_len</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<return>return <expr><operator>*</operator><name>wrap_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flac_fifo_read</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>rptr</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>*</operator><name>len</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>start</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_headers_search_validate</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACFrameInfo</name></type> <name>fi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>header_buf</name> <operator>=</operator> <call><name>flac_fifo_read_wrap</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>MAX_FRAME_HEADER_SIZE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>wrap_buf</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>wrap_buf_allocated_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>frame_header_is_valid</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>header_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier><modifier>*</modifier></type><name>end_handle</name> <init>= <expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>end_handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_handle</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>end_handle</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>end_handle</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>end_handle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>end_handle</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"couldn't allocate FLACHeaderMarker\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>end_handle</name><operator>)</operator><operator>-&gt;</operator><name>fi</name></name> <operator>=</operator> <name>fi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>end_handle</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FLAC_MAX_SEQUENTIAL_HEADERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>end_handle</name><operator>)</operator><operator>-&gt;</operator><name>link_penalty</name></name><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>FLAC_HEADER_NOT_PENALIZED_YET</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_found</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_headers_search</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod_offset</name> <init>= <expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mod_offset</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFFF8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>find_headers_search_validate</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>search_start</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0x01010101</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80808080</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFFF8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>find_headers_search_validate</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>search_start</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_new_headers</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>search_end</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>read_len</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>search_end</name> <operator>=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>MAX_FRAME_HEADER_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>read_len</name> <operator>=</operator> <name>search_end</name> <operator>-</operator> <name>search_start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>flac_fifo_read</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>search_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>find_headers_search</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>, <argument><expr><name>search_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>search_start</name> <operator>+=</operator> <name>read_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>search_start</name> <operator>!=</operator> <name>search_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>wrap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wrap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>read_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>read_len</name> <operator>=</operator> <name>search_end</name> <operator>-</operator> <operator>(</operator><name>search_start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>flac_fifo_read</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>search_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wrap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name>wrap</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFFF8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>find_headers_search_validate</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>search_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>search_start</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>find_headers_search</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>, <argument><expr><name>search_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>search_start</name> <operator>+=</operator> <name>read_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name> <operator>&amp;&amp;</operator> <name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr>;</init> <condition><expr><name>end</name></expr>;</condition> <incr><expr><name>end</name> <operator>=</operator> <name><name>end</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_header_fi_mismatch</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>,

<parameter><decl><type><name>FLACFrameInfo</name> <modifier>*</modifier></type><name>header_fi</name></decl></parameter>,

<parameter><decl><type><name>FLACFrameInfo</name> <modifier>*</modifier></type><name>child_fi</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log_level_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>deduction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child_fi</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>!=</operator> <name><name>header_fi</name><operator>-&gt;</operator><name>samplerate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deduction</name> <operator>+=</operator> <name>FLAC_HEADER_CHANGED_PENALTY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name> <operator>+</operator> <name>log_level_offset</name></expr></argument>,

<argument><expr><literal type="string">"sample rate change detected in adjacent frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child_fi</name><operator>-&gt;</operator><name>bps</name></name> <operator>!=</operator> <name><name>header_fi</name><operator>-&gt;</operator><name>bps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deduction</name> <operator>+=</operator> <name>FLAC_HEADER_CHANGED_PENALTY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name> <operator>+</operator> <name>log_level_offset</name></expr></argument>,

<argument><expr><literal type="string">"bits per sample change detected in adjacent frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child_fi</name><operator>-&gt;</operator><name>is_var_size</name></name> <operator>!=</operator> <name><name>header_fi</name><operator>-&gt;</operator><name>is_var_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deduction</name> <operator>+=</operator> <name>FLAC_HEADER_BASE_SCORE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name> <operator>+</operator> <name>log_level_offset</name></expr></argument>,

<argument><expr><literal type="string">"blocking strategy change detected in adjacent frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child_fi</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <name><name>header_fi</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deduction</name> <operator>+=</operator> <name>FLAC_HEADER_CHANGED_PENALTY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name> <operator>+</operator> <name>log_level_offset</name></expr></argument>,

<argument><expr><literal type="string">"number of channels change detected in adjacent frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>deduction</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_header_mismatch</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>,

<parameter><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>header</name></decl></parameter>,

<parameter><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>child</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log_level_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACFrameInfo</name> <modifier>*</modifier></type><name>header_fi</name> <init>= <expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>fi</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>child_fi</name> <init>= <expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>fi</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deduction</name></decl>, <decl><type ref="prev"/><name>deduction_expected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>deduction</name> <operator>=</operator> <call><name>check_header_fi_mismatch</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>header_fi</name></expr></argument>, <argument><expr><name>child_fi</name></expr></argument>,

<argument><expr><name>log_level_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>child_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name> <operator>-</operator> <name><name>header_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name>

<operator>!=</operator> <name><name>header_fi</name><operator>-&gt;</operator><name>blocksize</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>child_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name>

<operator>!=</operator> <name><name>header_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>expected_frame_num</name></decl>, <decl><type ref="prev"/><name>expected_sample_num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>expected_frame_num</name> <operator>=</operator> <name>expected_sample_num</name> <operator>=</operator> <name><name>header_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>curr</name> <operator>!=</operator> <name>child</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FLAC_MAX_SEQUENTIAL_HEADERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>link_penalty</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>FLAC_HEADER_CRC_FAIL_PENALTY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>expected_frame_num</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>expected_sample_num</name> <operator>+=</operator> <name><name>curr</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>blocksize</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>expected_frame_num</name> <operator>==</operator> <name><name>child_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name> <operator>||</operator>

<name>expected_sample_num</name> <operator>==</operator> <name><name>child_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>deduction_expected</name> <operator>=</operator> <ternary><condition><expr><name>deduction</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>deduction</name> <operator>+=</operator> <name>FLAC_HEADER_CHANGED_PENALTY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name> <operator>+</operator> <name>log_level_offset</name></expr></argument>,

<argument><expr><literal type="string">"sample/frame number mismatch in adjacent frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>deduction</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>deduction_expected</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inverted_test</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FLAC_MAX_SEQUENTIAL_HEADERS</name> <operator>&amp;&amp;</operator> <name>curr</name> <operator>!=</operator> <name>child</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>link_penalty</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>FLAC_HEADER_CRC_FAIL_PENALTY</name> <operator>||</operator>

<name><name>header</name><operator>-&gt;</operator><name>link_penalty</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>FLAC_HEADER_NOT_PENALIZED_YET</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>header</name><operator>-&gt;</operator><name>link_penalty</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name>FLAC_HEADER_CRC_FAIL_PENALTY</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>start</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>inverted_test</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>header</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>link_penalty</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator>

<name>FLAC_HEADER_CRC_FAIL_PENALTY</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>inverted_test</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>read_len</name> <operator>=</operator> <name><name>end</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>start</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>flac_fifo_read</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name><name>start</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>read_len</name> <operator>=</operator> <operator>(</operator><name><name>end</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>start</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>-</operator> <name>read_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>flac_fifo_read</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name><name>end</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name>read_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>crc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crc</name> <operator>^</operator> <operator>!</operator><name>inverted_test</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deduction</name> <operator>+=</operator> <name>FLAC_HEADER_CRC_FAIL_PENALTY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name> <operator>+</operator> <name>log_level_offset</name></expr></argument>,

<argument><expr><literal type="string">"crc check failed from offset %i (frame %"</literal><name>PRId64</name><literal type="string">") to %i (frame %"</literal><name>PRId64</name><literal type="string">")\n"</literal></expr></argument>,

<argument><expr><name><name>header</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>header_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name></expr></argument>,

<argument><expr><name><name>child</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>child_fi</name><operator>-&gt;</operator><name>frame_or_sample_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>deduction</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>score_header</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>, <parameter><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>child_score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base_score</name> <init>= <expr><name>FLAC_HEADER_BASE_SCORE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>max_score</name></name> <operator>!=</operator> <name>FLAC_HEADER_NOT_SCORED_YET</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>header</name><operator>-&gt;</operator><name>max_score</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>last_fi_valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base_score</name> <operator>-=</operator> <call><name>check_header_fi_mismatch</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>last_fi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>fi</name></name></expr></argument>,

<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>max_score</name></name> <operator>=</operator> <name>base_score</name></expr>;</expr_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dist</name> <operator>&lt;</operator> <name>FLAC_MAX_SEQUENTIAL_HEADERS</name> <operator>&amp;&amp;</operator> <name>child</name></expr>;</condition> <incr><expr><name>dist</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>link_penalty</name><index>[<expr><name>dist</name></expr>]</index></name> <operator>==</operator> <name>FLAC_HEADER_NOT_PENALIZED_YET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>link_penalty</name><index>[<expr><name>dist</name></expr>]</index></name> <operator>=</operator> <call><name>check_header_mismatch</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,

<argument><expr><name>child</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child_score</name> <operator>=</operator> <call><name>score_header</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>header</name><operator>-&gt;</operator><name>link_penalty</name><index>[<expr><name>dist</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>FLAC_HEADER_BASE_SCORE</name> <operator>+</operator> <name>child_score</name> <operator>&gt;</operator> <name><name>header</name><operator>-&gt;</operator><name>max_score</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>best_child</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>max_score</name></name> <operator>=</operator> <name>base_score</name> <operator>+</operator> <name>child_score</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>header</name><operator>-&gt;</operator><name>max_score</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>score_sequences</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>max_score</name></name> <operator>=</operator> <name>FLAC_HEADER_NOT_SCORED_YET</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>score_header</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>max_score</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_best_header</name><parameter_list>(<parameter><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name><name>header</name><operator>-&gt;</operator><name>best_child</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>header</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>header</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_header_mismatch</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>channels</name></name> <operator>!=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator>

<operator>!</operator><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_flac_set_channel_layout</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>samplerate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>blocksize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <call><name>flac_fifo_read_wrap</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>*</operator><name>poutbuf_size</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>wrap_buf</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>wrap_buf_allocated_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_USE_CODEC_TS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>is_var_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>frame_or_sample_num</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>best_child</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>frame_or_sample_num</name></name> <operator>*</operator> <name><name>header</name><operator>-&gt;</operator><name>fi</name><operator>.</operator><name>blocksize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>last_fi_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>last_fi</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>fi</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>child</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flac_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_headers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>read_end</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>read_start</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FLACFrameInfo</name></type> <name>fi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>frame_header_is_valid</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>fi</name><operator>.</operator><name>blocksize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>fi</name><operator>.</operator><name>samplerate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PARSER_FLAG_USE_CODEC_TS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>fi</name><operator>.</operator><name>frame_or_sample_num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fi</name><operator>.</operator><name>is_var_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>pts</name></name> <operator>*=</operator> <name><name>fi</name><operator>.</operator><name>blocksize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header_valid</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_best_header</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>poutbuf</name></expr></argument>, <argument><expr><name>poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name> <operator>&amp;&amp;</operator> <name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>best_child</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>best_child</name> <init>= <expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>best_child</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr>;</init> <condition><expr><name>curr</name> <operator>!=</operator> <name>best_child</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name>temp</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>!=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"dropping low score %i frame header from offset %i to %i\n"</literal></expr></argument>,

<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>max_score</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_fifo_drain</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>, <argument><expr><name><name>best_child</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>best_child</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name><name>best_child</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>best_child</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>best_child</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name> <operator>&gt;=</operator> <name>FLAC_MIN_HEADERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name> <operator>=</operator> <name>best_child</name></expr>;</expr_stmt>

<return>return <expr><call><name>get_best_header</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>poutbuf</name></expr></argument>, <argument><expr><name>poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr>;</init> <condition><expr><name>curr</name> <operator>!=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name>temp</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>buf_size</name> <operator>&amp;&amp;</operator> <name>read_end</name> <operator>&lt;</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name> <operator>&amp;&amp;</operator>

<name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name> <operator>&lt;</operator> <name>FLAC_MIN_HEADERS</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>buf_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fpc</name><operator>-&gt;</operator><name>end_padded</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start_offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>end_padded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>read_end</name> <operator>=</operator> <name>read_start</name> <operator>+</operator> <name>MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_desired</name> <init>= <expr><name>FLAC_MIN_HEADERS</name> <operator>-</operator> <name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>read_end</name> <operator>=</operator> <name>read_end</name> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <name>read_end</name></expr></argument>,

<argument><expr><name>nb_desired</name> <operator>*</operator> <name>FLAC_AVG_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name>FLAC_AVG_FRAME_SIZE</name> <operator>&gt;</operator>

<name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name> <operator>*</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>handle_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>read_end</name> <operator>-</operator> <name>read_start</name>

<operator>&amp;&amp;</operator> <call><name>av_fifo_realloc2</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>read_end</name> <operator>-</operator> <name>read_start</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"couldn't reallocate buffer of size %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>read_end</name> <operator>-</operator> <name>read_start</name><operator>)</operator> <operator>+</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>handle_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>read_start</name></expr></argument>,

<argument><expr><name>read_end</name> <operator>-</operator> <name>read_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>pad</name><index>[<expr><name>MAX_FRAME_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pad</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start_offset</name> <operator>=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<operator>(</operator><operator>(</operator><name>read_end</name> <operator>-</operator> <name>read_start</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>MAX_FRAME_HEADER_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>start_offset</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_headers</name> <operator>=</operator> <call><name>find_new_headers</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_headers</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"find_new_headers couldn't allocate FLAC header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>handle_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name> <operator>=</operator> <name>nb_headers</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fpc</name><operator>-&gt;</operator><name>end_padded</name></name> <operator>&amp;&amp;</operator> <name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name> <operator>&lt;</operator> <name>FLAC_MIN_HEADERS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>read_end</name> <operator>&lt;</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>read_start</name> <operator>=</operator> <name>read_end</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>handle_error</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>end_padded</name></name> <operator>||</operator> <name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_found</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>score_sequences</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>end_padded</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>warp</name> <init>= <expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name><operator>-&gt;</operator><name>wptr</name></name> <operator>-</operator> <name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&lt;</operator> <name>MAX_FRAME_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name><operator>-&gt;</operator><name>wptr</name></name> <operator>-=</operator> <name>MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name><operator>-&gt;</operator><name>wndx</name></name> <operator>-=</operator> <name>MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>warp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name><operator>-&gt;</operator><name>wptr</name></name> <operator>+=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator>

<name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>read_start</name> <operator>=</operator> <name>read_end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>curr</name> <operator>=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name> <operator>||</operator> <name><name>curr</name><operator>-&gt;</operator><name>max_score</name></name> <operator>&gt;</operator> <name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>max_score</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name> <operator>&amp;&amp;</operator> <name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>max_score</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_size</name> <operator>||</operator> <name>read_end</name> <operator>!=</operator> <name>buf</name> <operator>||</operator> <name><name>fpc</name><operator>-&gt;</operator><name>nb_headers_buffered</name></name> <operator>&lt;</operator> <name>FLAC_MIN_HEADERS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header_valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Junk frame till offset %i\n"</literal></expr></argument>,

<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <call><name>flac_fifo_read_wrap</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>poutbuf_size</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>wrap_buf</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>wrap_buf_allocated_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>buf_size</name></expr> ?</condition><then> <expr><operator>(</operator><name>read_end</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>fpc</name><operator>-&gt;</operator><name>best_header</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator>

<call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_best_header</name><argument_list>(<argument><expr><name>fpc</name></expr></argument>, <argument><expr><name>poutbuf</name></expr></argument>, <argument><expr><name>poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>handle_error</name>:</label>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>buf_size</name></expr> ?</condition><then> <expr><name>read_end</name> <operator>-</operator> <name>buf</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>flac_parse_init</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name> <operator>=</operator> <call><name>av_fifo_alloc_array</name><argument_list>(<argument><expr><name>FLAC_MIN_HEADERS</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>FLAC_AVG_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>fpc</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"couldn't allocate fifo_buf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flac_parse_close</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FLACParseContext</name> <modifier>*</modifier></type><name>fpc</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FLACHeaderMarker</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>curr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>fpc</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>fifo_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fpc</name><operator>-&gt;</operator><name>wrap_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_flac_parser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_FLAC</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FLACParseContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parser_init</name> <operator>=</operator> <name>flac_parse_init</name></expr>,

<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>flac_parse</name></expr>,

<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>flac_parse_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
