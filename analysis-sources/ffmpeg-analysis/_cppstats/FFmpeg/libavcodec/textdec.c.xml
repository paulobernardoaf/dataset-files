<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\textdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linebreaks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keep_ass_markup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>readorder</name></decl>;</decl_stmt>

}</block></struct></type> <name>TextContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TextContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_SUBTITLE_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"keep_ass_markup"</literal></expr>, <expr><literal type="string">"Set if ASS tags must be escaped"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>keep_ass_markup</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>flags</name><operator>=</operator><name>SD</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>text_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TextContext</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_ass_bprint_text_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>linebreaks</name></name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>keep_ass_markup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ass_add_rect</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>readorder</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>text_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TextContext</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_RO_FLUSH_NOOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>readorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_CLASS</name><parameter_list>(<parameter><type><name>decname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass decname ##_decoder_class = { .class_name = #decname " decoder", .item_name = av_default_item_name, .option = decname ##_options, .version = LIBAVUTIL_VERSION_INT, }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TEXT_DECODER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>text_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_CLASS</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_text_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"text"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Raw text subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TextContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TEXT</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>text_decode_frame</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_ass_subtitle_header_default</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>text_decoder_class</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>text_flush</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VPLAYER_DECODER</name> <operator>||</operator> <name>CONFIG_PJS_DECODER</name> <operator>||</operator> <name>CONFIG_SUBVIEWER1_DECODER</name> <operator>||</operator> <name>CONFIG_STL_DECODER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>linebreak_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TextContext</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>text</name><operator>-&gt;</operator><name>linebreaks</name></name> <operator>=</operator> <literal type="string">"|"</literal></expr>;</expr_stmt>

<return>return <expr><call><name>ff_ass_subtitle_header_default</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VPLAYER_DECODER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vplayer_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_CLASS</name><argument_list>(<argument><expr><name>vplayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vplayer_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vplayer"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VPlayer subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TextContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VPLAYER</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>text_decode_frame</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>linebreak_init</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vplayer_decoder_class</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>text_flush</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_STL_DECODER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stl_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_CLASS</name><argument_list>(<argument><expr><name>stl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_stl_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"stl"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Spruce subtitle format"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TextContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_STL</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>text_decode_frame</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>linebreak_init</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>stl_decoder_class</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>text_flush</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PJS_DECODER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pjs_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_CLASS</name><argument_list>(<argument><expr><name>pjs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_pjs_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pjs"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PJS subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TextContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PJS</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>text_decode_frame</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>linebreak_init</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>pjs_decoder_class</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>text_flush</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SUBVIEWER1_DECODER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>subviewer1_options</name></cpp:macro> <cpp:value>options</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_CLASS</name><argument_list>(<argument><expr><name>subviewer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_subviewer1_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"subviewer1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SubViewer1 subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TextContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SUBVIEWER1</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>text_decode_frame</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>linebreak_init</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>subviewer1_decoder_class</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>text_flush</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
