<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\utvideoenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"huffman.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>huff_cmp_sym</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HuffEntry</name> <modifier>*</modifier></type><name>aa</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>aa</name><operator>-&gt;</operator><name>sym</name></name> <operator>-</operator> <name><name>bb</name><operator>-&gt;</operator><name>sym</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>utvideo_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>utvideo_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>subsampled_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>original_format</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_info_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slice_stride</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>original_format</name> <operator>=</operator> <name>UTVIDEO_RGB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>original_format</name> <operator>=</operator> <name>UTVIDEO_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"4:2:0 video requires even width and height.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_BT709</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>original_format</name> <operator>=</operator> <name>UTVIDEO_420</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"4:2:2 video requires even width.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_BT709</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>original_format</name> <operator>=</operator> <name>UTVIDEO_422</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_BT709</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>original_format</name> <operator>=</operator> <name>UTVIDEO_444</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown pixel format: %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_llvidencdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>llvidencdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Prediction method %d is not supported in Ut Video.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name> <operator>==</operator> <name>FF_PRED_PLANE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Plane prediction is not supported in Ut Video.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>=</operator> <name><name>ff_ut_pred_order</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>prediction_method</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_GRADIENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Gradient prediction is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <literal type="number">256</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Slice count %d is not supported in Ut Video (theoretical range is 0-256).\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>subsampled_height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>log2_chroma_h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <name>subsampled_height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Slice count %d is larger than the subsampling-applied height %d.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><name>subsampled_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>utvideo_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_stride</name></name> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate temporary buffer 1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>utvideo_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>original_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_info_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <name>subsampled_height</name> <operator>/</operator> <literal type="number">120</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>COMP_HUFF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mangle_rgb_planes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>planes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>stride</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sg</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sr</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>g</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>planes</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>sg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>sr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>sg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>sr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sa</name> <operator>+=</operator> <name><name>stride</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>dst_stride</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sg</name> <operator>+=</operator> <name><name>stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sb</name> <operator>+=</operator> <name><name>stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sr</name> <operator>+=</operator> <name><name>stride</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>B</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>median_predict</name><parameter_list>(<parameter><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name>B</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llvidencdsp</name><operator>.</operator><name>sub_median_pred</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>count_usage</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>counts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>counts</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calculate_codes</name><parameter_list>(<parameter><decl><type><name>HuffEntry</name> <modifier>*</modifier></type><name>he</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>he</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>he</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ff_ut_huff_cmp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>he</name><index>[<expr><name>last</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="number">0x80000000u</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>he</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>he</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>huff_cmp_sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_huff_codes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>HuffEntry</name> <modifier>*</modifier></type><name>he</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>he</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name><name>he</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_plane</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_no</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lengths</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>counts</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HuffEntry</name></type> <name><name>he</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slice_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmask</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>!</operator><name>plane_no</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sstart</name></decl>, <decl><type ref="prev"/><name>send</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>symbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PRED_NONE</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>

<expr_stmt><expr><name>send</name> <operator>=</operator> <name>height</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>width</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><name>src</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>send</name> <operator>-</operator> <name>sstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>PRED_LEFT</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>

<expr_stmt><expr><name>send</name> <operator>=</operator> <name>height</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llvidencdsp</name><operator>.</operator><name>sub_left_predict</name></name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>width</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>send</name> <operator>-</operator> <name>sstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>PRED_MEDIAN</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>

<expr_stmt><expr><name>send</name> <operator>=</operator> <name>height</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>median_predict</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>width</name></expr></argument>,

<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>send</name> <operator>-</operator> <name>sstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown prediction mode: %d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>count_usage</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>symbol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>symbol</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>symbol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>counts</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>counts</name><index>[<expr><name>symbol</name></expr>]</index></name> <operator>==</operator> <name>width</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>height</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>symbol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_huff_gen_len_table</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>, <argument><expr><name>counts</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sym</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>calculate_codes</name><argument_list>(<argument><expr><name>he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>send</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>

<expr_stmt><expr><name>send</name> <operator>=</operator> <name>height</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>write_huff_codes</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>width</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>,

<argument><expr><name>width</name> <operator>*</operator> <name>height</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><name>send</name> <operator>-</operator> <name>sstart</name></expr></argument>, <argument><expr><name>he</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_len</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name>slice_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>,

<argument><expr><name>slice_len</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_seek_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>

<name>offset</name> <operator>-</operator> <name>slice_len</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_buffer</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>, <argument><expr><name>slice_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_seek_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>offset</name></expr></argument>,

<argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_len</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bytestream2_seek_p</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>utvideo_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">256</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>+</operator> <name>width</name> <operator>*</operator> <name>height</name><operator>)</operator> <operator>*</operator>

<name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice_bits_size</name></name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>height</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate temporary buffer 2.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mangle_rgb_planes</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_stride</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_plane</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>slice_stride</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_stride</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error encoding plane %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_plane</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error encoding plane %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_plane</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>width</name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error encoding plane %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_plane</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>width</name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name>height</name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error encoding plane %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown pixel format: %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>frame_info</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>frame_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <init>= <expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(UtvideoContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"pred"</literal></expr>, <expr><literal type="string">"Prediction method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_pred</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRED_LEFT</name></expr> }</block></expr>, <expr><name>PRED_NONE</name></expr>, <expr><name>PRED_MEDIAN</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRED_NONE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRED_LEFT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"gradient"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRED_GRADIENT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"median"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PRED_MEDIAN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>utvideo_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"utvideo"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_utvideo_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"utvideo"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Ut Video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_UTVIDEO</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UtvideoContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>utvideo_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>utvideo_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>utvideo_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>utvideo_encode_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRAP</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
