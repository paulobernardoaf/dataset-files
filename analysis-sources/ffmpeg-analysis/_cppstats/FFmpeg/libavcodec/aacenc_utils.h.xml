<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacenc_utils.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenctab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_STANDARD</name></cpp:macro> <cpp:value>0.4054f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_TO_ZERO</name></cpp:macro> <cpp:value>0.1054f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_QUANT</name></cpp:macro> <cpp:value>0.4054f</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>abs_pow34_v</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>pos_pow34</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>quant</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>coef</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>rounding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name>coef</name> <operator>*</operator> <name>Q</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>rounding</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>quantize_bands</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_signed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>rounding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>qc</name> <init>= <expr><name><name>scaled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>Q34</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>qc</name> <operator>+</operator> <name>rounding</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>maxval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_signed</name> <operator>&amp;&amp;</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>-</operator><name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>find_max_val</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>group_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>swb_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>maxval</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name>group_len</name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>swb_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxval</name></expr></argument>, <argument><expr><name><name>scaled</name><index>[<expr><name>w2</name><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>maxval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>find_min_book</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>maxval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>sf</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qmaxval</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qmaxval</name> <operator>=</operator> <name>maxval</name> <operator>*</operator> <name>Q34</name> <operator>+</operator> <name>C_QUANT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qmaxval</name> <operator>&gt;=</operator> <operator>(</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aac_maxval_cb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>aac_maxval_cb</name><index>[<expr><name>qmaxval</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>cb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>find_form_factor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>group_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>swb_size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thresh</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>nzslope</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>iswb_size</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>swb_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>iswb_sizem1</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>swb_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>ethresh</name> <init>= <expr><name>thresh</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>form</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>weight</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name>group_len</name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>e</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>e2</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>var</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxval</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>nzl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>swb_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>scaled</name><index>[<expr><name>w2</name><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxval</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>+=</operator> <name>s</name> <operator>*=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>ethresh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nzl</name> <operator>+=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nzslope</name> <operator>==</operator> <literal type="number">2.f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nzl</name> <operator>+=</operator> <operator>(</operator><name>s</name> <operator>/</operator> <name>ethresh</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>s</name> <operator>/</operator> <name>ethresh</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nzl</name> <operator>+=</operator> <call><name>ff_fast_powf</name><argument_list>(<argument><expr><name>s</name> <operator>/</operator> <name>ethresh</name></expr></argument>, <argument><expr><name>nzslope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;</operator> <name>thresh</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>frm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>*=</operator> <name>iswb_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>swb_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>scaled</name><index>[<expr><name>w2</name><operator>*</operator><literal type="number">128</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>e</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>var</name> <operator>+=</operator> <name>d</name><operator>*</operator><name>d</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>var</name> <operator>*</operator> <name>iswb_sizem1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>*=</operator> <name>iswb_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frm</name> <operator>=</operator> <name>e</name> <operator>/</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>e</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>var</name></expr></argument>,<argument><expr><name>maxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>form</name> <operator>+=</operator> <name>e2</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>frm</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>,<argument><expr><name>nzl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>weight</name> <operator>+=</operator> <name>e2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>weight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>form</name> <operator>/</operator> <name>weight</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">1.0f</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>coef2minsf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>coef</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>log2f</name><argument_list>(<argument><expr><name>coef</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">69</literal> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>coef2maxsf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>coef</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>log2f</name><argument_list>(<argument><expr><name>coef</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>quant_array_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>arr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>quant_min_err</name> <init>= <expr><name>INFINITY</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>error</name> <init>= <expr><operator>(</operator><name>val</name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>val</name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <name>quant_min_err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quant_min_err</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>float</name></type> <name>bval2bmax</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0.001f</literal> <operator>+</operator> <literal type="number">0.0035f</literal> <operator>*</operator> <operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>*</operator><name>b</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">15.5f</literal><operator>*</operator><literal type="number">15.5f</literal><operator>*</operator><literal type="number">15.5f</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_init_nextband_map</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nextband</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>prevband</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nextband</name><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>&lt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prevband</name> <operator>=</operator> <name><name>nextband</name><index>[<expr><name>prevband</name></expr>]</index></name> <operator>=</operator> <name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>nextband</name><index>[<expr><name>prevband</name></expr>]</index></name> <operator>=</operator> <name>prevband</name></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_nextband_remove</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nextband</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prevband</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>nextband</name><index>[<expr><name>prevband</name></expr>]</index></name> <operator>=</operator> <name><name>nextband</name><index>[<expr><name>band</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_sfdelta_can_remove_band</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>nextband</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_sf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>prev_sf</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name><name>nextband</name><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name> <operator>&gt;=</operator> <operator>(</operator><name>prev_sf</name> <operator>-</operator> <name>SCALE_MAX_DIFF</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name><name>nextband</name><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name> <operator>&lt;=</operator> <operator>(</operator><name>prev_sf</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_sfdelta_can_replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>nextband</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev_sf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_sf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>new_sf</name> <operator>&gt;=</operator> <operator>(</operator><name>prev_sf</name> <operator>-</operator> <name>SCALE_MAX_DIFF</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>new_sf</name> <operator>&lt;=</operator> <operator>(</operator><name>prev_sf</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name><name>nextband</name><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name> <operator>&gt;=</operator> <operator>(</operator><name>new_sf</name> <operator>-</operator> <name>SCALE_MAX_DIFF</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name><name>nextband</name><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name> <operator>&lt;=</operator> <operator>(</operator><name>new_sf</name> <operator>+</operator> <name>SCALE_MAX_DIFF</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>lcg_random</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>previous_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt> }</block> <decl><name>v</name> <init>= <expr><block>{ <expr><name>previous_val</name> <operator>*</operator> <literal type="number">1664525u</literal> <operator>+</operator> <literal type="number">1013904223</literal></expr> }</block></expr></init></decl>;</union>

<return>return <expr><name><name>v</name><operator>.</operator><name>s</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_IF</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (cond) { av_log(avctx, AV_LOG_ERROR, __VA_ARGS__); return AVERROR(EINVAL); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WARN_IF</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (cond) { av_log(avctx, AV_LOG_WARNING, __VA_ARGS__); }</cpp:value></cpp:define>

</unit>
