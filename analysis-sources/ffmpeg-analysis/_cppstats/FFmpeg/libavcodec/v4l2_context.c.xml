<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\v4l2_context.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/videodev2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_buffers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_fmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_m2m.h"</cpp:file></cpp:include>

<struct>struct <name>v4l2_format_update</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v4l2_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>update_v4l2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>av_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>update_avfmt</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>V4L2m2mContext</name> <modifier>*</modifier></type><name>ctx_to_m2mctx</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_OUTPUT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>container_of</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>V4L2m2mContext</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>container_of</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>V4L2m2mContext</name></expr></argument>, <argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>logger</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>avctx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>v4l2_get_width</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>v4l2_format</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>width</name></name></expr> </then><else>: <expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>v4l2_get_height</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>v4l2_format</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>height</name></name></expr> </then><else>: <expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVRational</name></type> <name>v4l2_get_sar</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>AVRational</name></name></type> <name>sar</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_cropcap</name></name></type> <name>cropcap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cropcap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cropcap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cropcap</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_CROPCAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cropcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sar</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>cropcap</name><operator>.</operator><name>pixelaspect</name><operator>.</operator><name>numerator</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <name><name>cropcap</name><operator>.</operator><name>pixelaspect</name><operator>.</operator><name>denominator</name></name></expr>;</expr_stmt>

<return>return <expr><name>sar</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>v4l2_resolution_changed</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v4l2_format</name></name> <modifier>*</modifier></type><name>fmt2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name> <modifier>*</modifier></type><name>fmt1</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name><name>fmt1</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>fmt2</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>width</name></name> <operator>||</operator>

<name><name>fmt1</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name><name>fmt2</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>height</name></name></expr>

</then><else>:

<expr><name><name>fmt1</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>fmt2</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name> <operator>||</operator>

<name><name>fmt1</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name><name>fmt2</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s changed (%dx%d) -&gt; (%dx%d)\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><call><name>v4l2_get_width</name><argument_list>(<argument><expr><name>fmt1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>v4l2_get_height</name><argument_list>(<argument><expr><name>fmt1</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>v4l2_get_width</name><argument_list>(<argument><expr><name>fmt2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>v4l2_get_height</name><argument_list>(<argument><expr><name>fmt2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>v4l2_type_supported</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE</name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE</name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>V4L2_BUF_TYPE_VIDEO_OUTPUT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>v4l2_get_framesize_compressed</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SZ_4K</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>&amp;&amp;</operator> <call><name>av_codec_is_decoder</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>SZ_4K</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>v4l2_save_to_context</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>v4l2_format_update</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>update_avfmt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>av_pix_fmt</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>av_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>update_v4l2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>pixelformat</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>v4l2_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>plane_fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sizeimage</name> <operator>=</operator>

<call><name>v4l2_get_framesize_compressed</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>update_v4l2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>v4l2_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>sizeimage</name></name> <operator>=</operator>

<call><name>v4l2_get_framesize_compressed</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_handle_event</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name></type> <name>cap_fmt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name></type> <name>out_fmt</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_event</name></name></type> <name>evt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>full_reinit</name></decl>, <decl><type ref="prev"/><name>reinit</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_DQEVENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s VIDIOC_DQEVENT\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>evt</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>V4L2_EVENT_SOURCE_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_G_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s VIDIOC_G_FMT\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_G_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cap_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s VIDIOC_G_FMT\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>full_reinit</name> <operator>=</operator> <call><name>v4l2_resolution_changed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>full_reinit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>v4l2_get_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>v4l2_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>v4l2_get_sar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reinit</name> <operator>=</operator> <call><name>v4l2_resolution_changed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cap_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reinit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>v4l2_get_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>v4l2_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cap_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <call><name>v4l2_get_sar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>capture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>full_reinit</name> <operator>||</operator> <name>reinit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reinit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>full_reinit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_m2m_codec_full_reinit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"v4l2_m2m_codec_full_reinit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<goto>goto <name>reinit_run</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reinit</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>capture</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"update avcodec height and width\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_m2m_codec_reinit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"v4l2_m2m_codec_reinit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<goto>goto <name>reinit_run</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>reinit_run</name>:</label>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_stop_decode</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_decoder_cmd</name></name></type> <name>cmd</name> <init>= <expr><block>{

<expr><operator>.</operator><name>cmd</name> <operator>=</operator> <name>V4L2_DEC_CMD_STOP</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_DECODER_CMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOTTY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_v4l2_context_set_status</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMOFF</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_stop_encode</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_encoder_cmd</name></name></type> <name>cmd</name> <init>= <expr><block>{

<expr><operator>.</operator><name>cmd</name> <operator>=</operator> <name>V4L2_ENC_CMD_STOP</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENCODER_CMD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOTTY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_v4l2_context_set_status</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMOFF</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>V4L2Buffer</name><modifier>*</modifier></type> <name>v4l2_dequeue_v4l2buf</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_plane</name></name></type> <name><name>planes</name><index>[<expr><name>VIDEO_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_buffer</name></name></type> <name>buf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>avbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pfd</name> <init>= <expr><block>{

<expr><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name> <operator>|</operator> <name>POLLPRI</name> <operator>|</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name></expr>, 

<expr><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>V4L2_TYPE_IS_OUTPUT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>draining</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <name>V4L2BUF_IN_DRIVER</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>start</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>start</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_OUTPUT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>draining</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pfd</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name> <operator>|</operator> <name>POLLPRI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pfd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLERR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>!=</operator> <name>V4L2BUF_AVAILABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s POLLERR\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s POLLERR\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLPRI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_handle_event</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name> <operator>|</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>V4L2_TYPE_IS_OUTPUT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>dequeue</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>dequeue</name>:</label>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>planes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>VIDEO_MAX_PLANES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name></name> <operator>=</operator> <name>planes</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_DQBUF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPIPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s VIDIOC_DQBUF, errno (%s)\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avbuf</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name><name>buf</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>V4L2BUF_AVAILABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avbuf</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>, <argument><expr><name>planes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>planes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avbuf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>m</name><operator>.</operator><name>planes</name></name> <operator>=</operator> <name><name>avbuf</name><operator>-&gt;</operator><name>planes</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>avbuf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>V4L2Buffer</name><modifier>*</modifier></type> <name>v4l2_getfree_v4l2buf</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_OUTPUT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

</block_content>}</block> while <condition>(<expr><call><name>v4l2_dequeue_v4l2buf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <name>V4L2BUF_AVAILABLE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_release_buffers</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_requestbuffers</name></name></type> <name>req</name> <init>= <expr><block>{

<expr><operator>.</operator><name>memory</name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>,

<expr><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>V4L2Plane_info</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>plane_info</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mm_addr</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mm_addr</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s unmap plane (%s))\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_REQBUFS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>v4l2_try_raw_format</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format</name></name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v4l2_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v4l2_fmt</name> <operator>=</operator> <call><name>ff_v4l2_format_avfmt_to_v4l2</name><argument_list>(<argument><expr><name>pixfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v4l2_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>pixelformat</name></name> <operator>=</operator> <name>v4l2_fmt</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name> <operator>=</operator> <name>v4l2_fmt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_TRY_FMT</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_get_raw_format</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pixfmt</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>av_pix_fmt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fmtdesc</name></name></type> <name>fdesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fdesc</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixfmt</name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_try_raw_format</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pixfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUM_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixfmt</name> <operator>=</operator> <call><name>ff_v4l2_format_v4l2_to_avfmt</name><argument_list>(<argument><expr><name><name>fdesc</name><operator>.</operator><name>pixelformat</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_RAWVIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_try_raw_format</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pixfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>fdesc</name><operator>.</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>pixfmt</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></for>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_get_coded_format</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_fmtdesc</name></name></type> <name>fdesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v4l2_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v4l2_fmt</name> <operator>=</operator> <call><name>ff_v4l2_format_avcodec_to_v4l2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>av_codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v4l2_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fdesc</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_ENUM_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fdesc</name><operator>.</operator><name>pixelformat</name></name> <operator>==</operator> <name>v4l2_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fdesc</name><operator>.</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>v4l2_fmt</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_context_set_status</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>streamon</name></name> <operator>=</operator> <operator>(</operator><name>cmd</name> <operator>==</operator> <name>VIDIOC_STREAMON</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_context_enqueue_frame</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2Buffer</name><modifier>*</modifier></type> <name>avbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_stop_encode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s stop_encode\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draining</name></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avbuf</name> <operator>=</operator> <call><name>v4l2_getfree_v4l2buf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_buffer_avframe_to_buf</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_v4l2_buffer_enqueue</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_context_enqueue_packet</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name><modifier>*</modifier></type> <name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2Buffer</name><modifier>*</modifier></type> <name>avbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_stop_decode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s stop_decode\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>draining</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>avbuf</name> <operator>=</operator> <call><name>v4l2_getfree_v4l2buf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_buffer_avpkt_to_buf</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_v4l2_buffer_enqueue</name><argument_list>(<argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_context_dequeue_frame</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name><modifier>*</modifier></type> <name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>avbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>avbuf</name> <operator>=</operator> <call><name>v4l2_dequeue_v4l2buf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avbuf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_v4l2_buffer_buf_to_avframe</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_context_dequeue_packet</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name><modifier>*</modifier></type> <name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2Buffer</name> <modifier>*</modifier></type><name>avbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>avbuf</name> <operator>=</operator> <call><name>v4l2_dequeue_v4l2buf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avbuf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_v4l2_buffer_buf_to_avpkt</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>avbuf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_context_get_format</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>probe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_format_update</name></name></type> <name>fmt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>av_codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_get_raw_format</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>av_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>update_avfmt</name></name> <operator>=</operator> <operator>!</operator><name>probe</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>v4l2_save_to_context</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_get_coded_format</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>v4l2_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>update_v4l2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>v4l2_save_to_context</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_TRY_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_context_set_format</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ioctl</name><argument_list>(<argument><expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><name>VIDIOC_S_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_v4l2_context_release</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_release_buffers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"V4L2 failed to unmap the %s buffers\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_v4l2_context_init</name><parameter_list>(<parameter><decl><type><name>V4L2Context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>ctx_to_m2mctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_requestbuffers</name></name></type> <name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>v4l2_type_supported</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"type %i not supported\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_G_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s VIDIOC_G_FMT failed\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_buffers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name>V4L2_MEMORY_MMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_REQBUFS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s VIDIOC_REQBUFS failed: %s\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_buffers</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_buffers</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>V4L2Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s malloc enomem\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>context</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_buffer_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s buffer[%d] initialization (%s)\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><call><name>logger</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s: %s %02d buffers initialized: %04ux%04u, sizeimage %08u, bytesperline %08u\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>av_fourcc2str</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>pixelformat</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>av_fourcc2str</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>pixelformat</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><name><name>req</name><operator>.</operator><name>count</name></name></expr></argument>,

<argument><expr><call><name>v4l2_get_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>v4l2_get_height</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>plane_fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sizeimage</name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>sizeimage</name></name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>V4L2_TYPE_IS_MULTIPLANAR</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>plane_fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytesperline</name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix</name><operator>.</operator><name>bytesperline</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>v4l2_release_buffers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
