<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegvideo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/motion_vector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg_er.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideodata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msmpeg4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wmv2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg1_intra_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>nCoeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>nCoeffs</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg1_inter_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>nCoeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>nCoeffs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>level</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>qscale</name> <operator>*</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>level</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>qscale</name> <operator>*</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg2_intra_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>nCoeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>=</operator> <name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>nCoeffs</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg2_intra_bitexact</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>nCoeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>=</operator> <name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_matrix</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>nCoeffs</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>level</name> <operator>*</operator> <name>qscale</name> <operator>*</operator> <name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name><operator>+=</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">63</literal></expr>]</index></name><operator>^=</operator><name>sum</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_mpeg2_inter_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>nCoeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>quant_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>=</operator> <name><name>ff_mpeg2_non_linear_qscale</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>qscale</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>quant_matrix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_matrix</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>nCoeffs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>level</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>qscale</name> <operator>*</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>-</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>level</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>qscale</name> <operator>*</operator>

<operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>quant_matrix</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name><operator>+=</operator><name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">63</literal></expr>]</index></name><operator>^=</operator><name>sum</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_h263_intra_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nCoeffs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qmul</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>qadd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator><literal type="number">63</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>nCoeffs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>-</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct_unquantize_h263_inter_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>qmul</name></decl>, <decl><type ref="prev"/><name>qadd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nCoeffs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qadd</name> <operator>=</operator> <operator>(</operator><name>qscale</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmul</name> <operator>=</operator> <name>qscale</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nCoeffs</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name><operator>.</operator><name>raster_end</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>nCoeffs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>-</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name>qmul</name> <operator>+</operator> <name>qadd</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gray16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while<condition>(<expr><name>h</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>h</name><operator>*</operator><name>linesize</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gray8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while<condition>(<expr><name>h</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>h</name><operator>*</operator><name>linesize</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dct_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264chroma_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>h264chroma</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_hpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpegvideodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vdsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_NOMC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gray16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gray16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gray16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gray8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gray8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gray8</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_intra</name></name> <operator>=</operator> <name>dct_unquantize_h263_intra_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_inter</name></name> <operator>=</operator> <name>dct_unquantize_h263_inter_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg1_intra</name></name> <operator>=</operator> <name>dct_unquantize_mpeg1_intra_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg1_inter</name></name> <operator>=</operator> <name>dct_unquantize_mpeg1_inter_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_intra</name></name> <operator>=</operator> <name>dct_unquantize_mpeg2_intra_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_intra</name></name> <operator>=</operator> <name>dct_unquantize_mpeg2_intra_bitexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_inter</name></name> <operator>=</operator> <name>dct_unquantize_mpeg2_inter_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_INTRINSICS_NEON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpv_common_init_neon</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpv_common_init_axp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpv_common_init_arm</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpv_common_init_ppc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpv_common_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpv_common_init_mips</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mpv_idct_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>mpeg4_studio_profile</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>studio_profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name></name></expr></argument>, <argument><expr><name>ff_alternate_vertical_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name></name></expr></argument>, <argument><expr><name>ff_alternate_vertical_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inter_scantable</name></name></expr></argument>, <argument><expr><name>ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name></name></expr></argument>, <argument><expr><name>ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_h_scantable</name></name></expr></argument>, <argument><expr><name>ff_alternate_horizontal_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_v_scantable</name></name></expr></argument>, <argument><expr><name>ff_alternate_vertical_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_picture</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ff_alloc_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_duplicate_context</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yc_size</name> <init>= <expr><name>y_size</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>c_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>yc_size</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>scratchpad</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>temp</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>b_scratchpad</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;me.map</argument>,

<argument>ME_MAP_SIZE * sizeof(uint32_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;me.score_map</argument>,

<argument>ME_MAP_SIZE * sizeof(uint32_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>noise_reduction</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;dct_error_sum</argument>,

<argument><literal type="number">2</literal> * <literal type="number">64</literal> * sizeof(int)</argument>, <argument>fail</argument>)</argument_list></macro>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;blocks</argument>, <argument><literal type="number">64</literal> * <literal type="number">12</literal> * <literal type="number">2</literal> * sizeof(int16_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;block32</argument>, <argument>sizeof(*s-&gt;block32)</argument>, <argument>fail</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dpcm_direction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;dpcm_macroblock</argument>, <argument>sizeof(*s-&gt;dpcm_macroblock)</argument>, <argument>fail</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"VCR2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val_base</name></name></expr></argument>,

<argument><expr><name>yc_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ac_val_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ac_val_base</name></name> <operator>+</operator> <name>y_size</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>c_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_duplicate_context</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>scratchpad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>temp</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>b_scratchpad</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>score_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dpcm_macroblock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ac_val_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>backup_duplicate_context</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>bak</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bak-&gt;a = src-&gt;a</cpp:value></cpp:define>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>scratchpad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>sc</name><operator>.</operator><name>b_scratchpad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>score_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>block32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dpcm_macroblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dpcm_direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>start_mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>end_mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>map_generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>dct_error_sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>dct_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>dct_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>ac_val_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>ac_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>ac_val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name><name>ac_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COPY</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_update_duplicate_context</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name></type> <name>bak</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>backup_duplicate_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bak</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>backup_duplicate_context</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"VCR2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pblocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_framesize_alloc</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>me</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>sc</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to allocate context "</literal>

<literal type="string">"scratch buffers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpeg_update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>context_initialized</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_bitstream_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>context_initialized</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_idct_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_mpv_common_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>s1</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>s1</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>context_reinit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>context_reinit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpv_common_frame_size_change</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>coded_picture_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>picture_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>picture</name></name> <operator>!=</operator> <name><name>s1</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>picture</name></name> <operator>&amp;&amp;</operator> <name><name>s1</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_PICTURE</name><parameter_list>(<parameter><type><name>pic</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {ff_mpeg_unref_picture(s-&gt;avctx, &amp;s-&gt;pic);if (s1-&gt;pic.f &amp;&amp; s1-&gt;pic.f-&gt;buf[0])ret = ff_mpeg_ref_picture(s-&gt;avctx, &amp;s-&gt;pic, &amp;s1-&gt;pic);elseret = ff_update_picture_tables(&amp;s-&gt;pic, &amp;s1-&gt;pic);if (ret &lt; 0)return ret;} while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>UPDATE_PICTURE</name><argument_list>(<argument><expr><name>current_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_PICTURE</name><argument_list>(<argument><expr><name>last_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_PICTURE</name><argument_list>(<argument><expr><name>next_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REBASE_PICTURE</name><parameter_list>(<parameter><type><name>pic</name></type></parameter>, <parameter><type><name>new_ctx</name></type></parameter>, <parameter><type><name>old_ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((pic &amp;&amp; pic &gt;= old_ctx-&gt;picture &amp;&amp; pic &lt; old_ctx-&gt;picture + MAX_PICTURE_COUNT) ? &amp;new_ctx-&gt;picture[pic - old_ctx-&gt;picture] : NULL)</cpp:value></cpp:define>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>=</operator> <call><name>REBASE_PICTURE</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>=</operator> <call><name>REBASE_PICTURE</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator> <call><name>REBASE_PICTURE</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_p_frame_damaged</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>next_p_frame_damaged</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>workaround_bugs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>padding_bug_score</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>padding_bug_score</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_time_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>last_time_base</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>pb_field_time</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>pb_field_time</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator>

<operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>last_time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>low_delay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>droppable</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>droppable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>divx_packed</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>divx_packed</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>allocated_bitstream_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>allocated_bitstream_buffer_size</name></name></expr></argument>,

<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>allocated_bitstream_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>,

<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>linesize</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_mpeg_framesize_alloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>me</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sc</name></name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate context "</literal>

<literal type="string">"scratch buffers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Context scratch buffers could not "</literal>

<literal type="string">"be allocated due to unknown size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>rtp_mode</name></name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s1</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_pict_type</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_lambda_for</name><index>[<expr><name><name>s1</name><operator>-&gt;</operator><name>pict_type</name></name></expr>]</index></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpv_common_defaults</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name> <operator>=</operator> <name>ff_mpeg1_dc_scale_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale_table</name></name> <operator>=</operator> <name>ff_default_chroma_qscale_table</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>progressive_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>progressive_sequence</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpv_decode_defaults</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_common_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpv_decode_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>workaround_bugs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>avpriv_toupper4</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_context_frame</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_size</name></decl>, <decl><type ref="prev"/><name>c_size</name></decl>, <decl><type ref="prev"/><name>yc_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mb_array_size</name></decl>, <decl><type ref="prev"/><name>mv_table_size</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_array_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_table_size</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>yc_size</name> <operator>=</operator> <name>y_size</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>c_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>yc_size</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;p_mv_table_base</argument>, <argument>mv_table_size * <literal type="number">2</literal> * sizeof(int16_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;b_forw_mv_table_base</argument>, <argument>mv_table_size * <literal type="number">2</literal> * sizeof(int16_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;b_back_mv_table_base</argument>, <argument>mv_table_size * <literal type="number">2</literal> * sizeof(int16_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;b_bidir_forw_mv_table_base</argument>, <argument>mv_table_size * <literal type="number">2</literal> * sizeof(int16_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;b_bidir_back_mv_table_base</argument>, <argument>mv_table_size * <literal type="number">2</literal> * sizeof(int16_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;b_direct_mv_table_base</argument>, <argument>mv_table_size * <literal type="number">2</literal> * sizeof(int16_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_mv_table_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;mb_type</argument>, <argument>mb_array_size * sizeof(uint16_t)</argument>, <argument>fail</argument>)</argument_list></macro> 

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;lambda_table</argument>, <argument>mb_array_size * sizeof(int)</argument>, <argument>fail</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cplx_tab</name></name></expr></argument>,

<argument><expr><name>mb_array_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_tab</name></name></expr></argument>,

<argument><expr><name>mb_array_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_ME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table_base</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name>mv_table_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table_base</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;b_field_select_table [i][j]</argument>, <argument>mb_array_size * <literal type="number">2</literal> * sizeof(uint8_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;p_field_mv_table_base[i][j]</argument>, <argument>mv_table_size * <literal type="number">2</literal> * sizeof(int16_t)</argument>, <argument>fail</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table_base</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument>s-&gt;avctx</argument>, <argument>s-&gt;p_field_select_table[i]</argument>, <argument>mb_array_size * <literal type="number">2</literal> * sizeof(uint8_t)</argument>, <argument>fail</argument>)</argument_list></macro>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coded_block_base</name></name></expr></argument>, <argument><expr><name>y_size</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_block</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_block_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbp_table</name></name></expr></argument> , <argument><expr><name>mb_array_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pred_dir_table</name></name></expr></argument>, <argument><expr><name>mb_array_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_plus</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val_base</name></name></expr></argument>, <argument><expr><name>yc_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val_base</name></name> <operator>+</operator> <name>y_size</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>c_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>yc_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val_base</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name></name></expr></argument>, <argument><expr><name>mb_array_size</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_array_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name></name></expr></argument>, <argument><expr><name>mb_array_size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_mpeg_er_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_context</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>score_map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_error_sum</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block32</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pblocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dpcm_direction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dpcm_macroblock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator><name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>scratchpad</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>temp</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>rd_scratchpad</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>b_scratchpad</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>allocated_bitstream_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table_base</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table_base</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_select_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_block_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbp_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pred_dir_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>er</name><operator>.</operator><name>error_status_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>er</name><operator>.</operator><name>er_temp_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cplx_tab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits_tab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_mpv_common_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_slices</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_slices</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"decoding to AV_PIX_FMT_NONE is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_slices</name> <operator>&gt;</operator> <name>MAX_THREADS</name> <operator>||</operator> <operator>(</operator><name>nb_slices</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_slices</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_slices</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>MAX_THREADS</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>max_slices</name> <operator>=</operator> <name>MAX_THREADS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"too many threads/slices (%d),"</literal>

<literal type="string">" reducing to %d\n"</literal></expr></argument>, <argument><expr><name>nb_slices</name></expr></argument>, <argument><expr><name>max_slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_slices</name> <operator>=</operator> <name>max_slices</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dct_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>,

<argument><expr><name>MAX_PICTURE_COUNT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Picture</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_context_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>state</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_slices</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_memdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_duplicate_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_mb_y</name> <operator>=</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <operator>(</operator><name>i</name><operator>)</operator> <operator>+</operator> <name>nb_slices</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>nb_slices</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>end_mb_y</name> <operator>=</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>nb_slices</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>nb_slices</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>init_duplicate_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>=</operator> <name>nb_slices</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_context_frame</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>p_mv_table_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_forw_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_back_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_forw_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_bidir_back_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_direct_mv_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table_base</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_field_select_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table_base</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>p_field_select_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dc_val_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coded_block_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbp_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pred_dir_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name><operator>.</operator><name>error_status_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name><operator>.</operator><name>er_temp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lambda_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cplx_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bits_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpv_common_frame_size_change</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>context_initialized</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free_duplicate_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_duplicate_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free_context_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>needs_realloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>init_context_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_slices</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_slices</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_memdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>init_duplicate_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>start_mb_y</name> <operator>=</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <operator>(</operator><name>i</name><operator>)</operator> <operator>+</operator> <name>nb_slices</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>nb_slices</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>end_mb_y</name> <operator>=</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>nb_slices</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>nb_slices</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_duplicate_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_mb_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>=</operator> <name>nb_slices</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpv_common_end</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return ;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free_duplicate_context</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>thread_context</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>free_duplicate_context</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>allocated_bitstream_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_free_picture_tables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>new_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_context_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gray_frame</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h_chroma_shift</name></decl>, <decl><type ref="prev"/><name>v_chroma_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_chroma_shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>,

<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>h_chroma_shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>,

<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>h_chroma_shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpv_frame_start</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_thread_can_start_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Attempt to start a frame outside SETUP state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>&amp;&amp;</operator>

<operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>needs_realloc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ff_find_unused_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no frame buffer available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>droppable</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coded_picture_number</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>alloc_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_TOP_FIELD</name><operator>)</operator> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>first_field</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>progressive_frame</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>field_picture</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>droppable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"L%p N%p C%p L%p N%p C%p type:%d drop:%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>droppable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h_chroma_shift</name></decl>, <decl><type ref="prev"/><name>v_chroma_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h_chroma_shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"allocating dummy last picture for B frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"warning: first frame is no keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ff_find_unused_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no frame buffer available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>alloc_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>,

<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>,

<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>h_chroma_shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>,

<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>h_chroma_shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FLV1</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H263</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ff_find_unused_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no frame buffer available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>alloc_picture</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

memset(s-&gt;last_picture.f-&gt;data, 0, sizeof(s-&gt;last_picture.f-&gt;data));

memset(s-&gt;next_picture.f-&gt;data, 0, sizeof(s-&gt;next_picture.f-&gt;data));

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpeg_ref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name><operator>!=</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator>

<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_intra</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg2_inter</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_intra</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_h263_inter</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_intra</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg1_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_mpeg1_inter</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_NOMC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>gray_frame</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpv_frame_end</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>reference</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_print_debug_info</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_print_debug_info2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mb_type</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>qscale_table</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>motion_val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mpv_export_qp_table</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>Picture</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qp_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>qscale_table_buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>offset</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<return>return <expr><call><name>av_frame_set_qp_table</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>, <argument><expr><name>qp_type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hpel_motion_lowres</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>field_based</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field_select</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h_edge_pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_edge_pos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>h264_chroma_mc_func</name> <modifier>*</modifier></type><name>pix_op</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lowres</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>op_index</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>lowres</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s_mask</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>lowres</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sx</name></decl>, <decl><type ref="prev"/><name>sy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>motion_x</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_y</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>motion_x</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>motion_y</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>+=</operator> <name>motion_x</name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>+=</operator> <name>motion_y</name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>src_x</name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>( <argument><expr><name>h_edge_pos</name> <operator>-</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name>sx</name><operator>)</operator> <operator>-</operator> <name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name>src_y</name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>v_edge_pos</name> <operator>&gt;&gt;</operator> <name>field_based</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name>sy</name><operator>)</operator> <operator>-</operator> <name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>field_based</name></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name> <operator>&lt;&lt;</operator> <name>field_based</name></expr></argument>,

<argument><expr><name>h_edge_pos</name></expr></argument>, <argument><expr><name>v_edge_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>(</operator><name>sx</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>lowres</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <operator>(</operator><name>sy</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>lowres</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>field_select</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>op_index</name></expr>]</index></name><operator>(</operator><name>dest</name><operator>,</operator> <name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>,</operator> <name>sx</name><operator>,</operator> <name>sy</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>emu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mpeg_motion_lowres</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>field_based</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bottom_field</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>field_select</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_picture</name></decl></parameter>,

<parameter><decl><type><name>h264_chroma_mc_func</name> <modifier>*</modifier></type><name>pix_op</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>motion_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>motion_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_cr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>, <decl><type ref="prev"/><name>uvsrc_x</name></decl>, <decl><type ref="prev"/><name>uvsrc_y</name></decl>, <decl><type ref="prev"/><name>sx</name></decl>, <decl><type ref="prev"/><name>sy</name></decl>, <decl><type ref="prev"/><name>uvsx</name></decl>, <decl><type ref="prev"/><name>uvsy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>uvlinesize</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lowres</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>op_index</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>lowres</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_s</name> <init>= <expr><literal type="number">8</literal><operator>&gt;&gt;</operator><name>lowres</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s_mask</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>lowres</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h_edge_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>lowres</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v_edge_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>lowres</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>field_based</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>field_based</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>motion_x</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_y</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>field_based</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>motion_y</name> <operator>+=</operator> <operator>(</operator><name>bottom_field</name> <operator>-</operator> <name>field_select</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>lowres</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>motion_x</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>motion_y</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>block_s</name> <operator>+</operator> <operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <operator>(</operator><name>mb_y</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>block_s</name> <operator>&gt;&gt;</operator> <name>field_based</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H263</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uvsx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>s_mask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>sx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>motion_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>s_mask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>sy</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name>src_x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name>src_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_H261</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name>motion_y</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsx</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>mx</name><operator>)</operator> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsy</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>my</name><operator>)</operator> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <name>block_s</name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <name>lowres</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name>mb_y</name> <operator>*</operator> <name>block_s</name> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <name>lowres</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name>motion_y</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsx</name> <operator>=</operator> <name>mx</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsy</name> <operator>=</operator> <name>my</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <name>block_s</name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <operator>(</operator><name>mb_y</name> <operator>*</operator> <name>block_s</name> <operator>&gt;&gt;</operator> <name>field_based</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>motion_x</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsx</name> <operator>=</operator> <name>mx</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsy</name> <operator>=</operator> <name>motion_y</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name>src_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><name>block_s</name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>lowres</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>uvsx</name> <operator>=</operator> <name>motion_x</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsy</name> <operator>=</operator> <name>motion_y</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_x</name> <operator>=</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsrc_y</name> <operator>=</operator> <name>src_y</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>src_y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cb</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>uvsrc_y</name> <operator>*</operator> <name>uvlinesize</name> <operator>+</operator> <name>uvsrc_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>uvsrc_y</name> <operator>*</operator> <name>uvlinesize</name> <operator>+</operator> <name>uvsrc_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>src_x</name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>( <argument><expr><name>h_edge_pos</name> <operator>-</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name>sx</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>block_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>uvsrc_y</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator> <name>src_y</name></expr></argument> &gt;</argument_list></name> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>v_edge_pos</name> <operator>&gt;&gt;</operator> <name>field_based</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name>sy</name><operator>)</operator> <operator>-</operator> <name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr_y</name></expr></argument>,

<argument><expr><name>linesize</name> <operator>&gt;&gt;</operator> <name>field_based</name></expr></argument>, <argument><expr><name>linesize</name> <operator>&gt;&gt;</operator> <name>field_based</name></expr></argument>,

<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">17</literal> <operator>+</operator> <name>field_based</name></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name> <operator>&lt;&lt;</operator> <name>field_based</name></expr></argument>, <argument><expr><name>h_edge_pos</name></expr></argument>,

<argument><expr><name>v_edge_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ubuf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">18</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vbuf</name> <init>=<expr><name>ubuf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>&amp;</operator> <name>FF_BUG_IEDGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vbuf</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>ubuf</name></expr></argument>, <argument><expr><name>ptr_cb</name></expr></argument>,

<argument><expr><name>uvlinesize</name> <operator>&gt;&gt;</operator> <name>field_based</name></expr></argument>, <argument><expr><name>uvlinesize</name> <operator>&gt;&gt;</operator> <name>field_based</name></expr></argument>,

<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>+</operator> <name>field_based</name></expr></argument>,

<argument><expr><name>uvsrc_x</name></expr></argument>, <argument><expr><name>uvsrc_y</name> <operator>&lt;&lt;</operator> <name>field_based</name></expr></argument>,

<argument><expr><name>h_edge_pos</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>v_edge_pos</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>ptr_cr</name></expr></argument>,

<argument><expr><name>uvlinesize</name> <operator>&gt;&gt;</operator> <name>field_based</name></expr></argument>,<argument><expr><name>uvlinesize</name> <operator>&gt;&gt;</operator> <name>field_based</name></expr></argument>,

<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>+</operator> <name>field_based</name></expr></argument>,

<argument><expr><name>uvsrc_x</name></expr></argument>, <argument><expr><name>uvsrc_y</name> <operator>&lt;&lt;</operator> <name>field_based</name></expr></argument>,

<argument><expr><name>h_edge_pos</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>v_edge_pos</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cb</name> <operator>=</operator> <name>ubuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cr</name> <operator>=</operator> <name>vbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bottom_field</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>field_select</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr_y</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cb</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_cr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>(</operator><name>sx</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>lowres</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <operator>(</operator><name>sy</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>lowres</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>lowres</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>ptr_y</name><operator>,</operator> <name>linesize</name><operator>,</operator> <name>h</name><operator>,</operator> <name>sx</name><operator>,</operator> <name>sy</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hc</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>h</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>bottom_field</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>h</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>uvsx</name> <operator>=</operator> <operator>(</operator><name>uvsx</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>lowres</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvsy</name> <operator>=</operator> <operator>(</operator><name>uvsy</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>lowres</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>op_index</name></expr>]</index></name><operator>(</operator><name>dest_cb</name><operator>,</operator> <name>ptr_cb</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator> <name>hc</name><operator>,</operator> <name>uvsx</name><operator>,</operator> <name>uvsy</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>op_index</name></expr>]</index></name><operator>(</operator><name>dest_cr</name><operator>,</operator> <name>ptr_cr</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator> <name>hc</name><operator>,</operator> <name>uvsx</name><operator>,</operator> <name>uvsy</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>chroma_4mv_motion_lowres</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_picture</name></decl></parameter>,

<parameter><decl><type><name>h264_chroma_mc_func</name> <modifier>*</modifier></type> <name>pix_op</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>my</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lowres</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>op_index</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>lowres</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_s</name> <init>= <expr><literal type="number">8</literal> <operator>&gt;&gt;</operator> <name>lowres</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>s_mask</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>lowres</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>h_edge_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v_edge_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>src_x</name></decl>, <decl><type ref="prev"/><name>src_y</name></decl>, <decl><type ref="prev"/><name>sx</name></decl>, <decl><type ref="prev"/><name>sy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>ff_h263_round_chroma</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>ff_h263_round_chroma</name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>mx</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>my</name> <operator>&amp;</operator> <name>s_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>*</operator> <name>block_s</name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name>block_s</name> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <name>lowres</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>src_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>src_x</name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>h_edge_pos</name> <operator>-</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name>sx</name><operator>)</operator> <operator>-</operator> <name>block_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator> <name>src_y</name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>v_edge_pos</name> <operator>-</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name>sy</name><operator>)</operator> <operator>-</operator> <name>block_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>h_edge_pos</name></expr></argument>, <argument><expr><name>v_edge_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sx</name> <operator>=</operator> <operator>(</operator><name>sx</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>lowres</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>=</operator> <operator>(</operator><name>sy</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>lowres</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>op_index</name></expr>]</index></name><operator>(</operator><name>dest_cb</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <name>block_s</name><operator>,</operator> <name>sx</name><operator>,</operator> <name>sy</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ref_picture</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>,

<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>h_edge_pos</name></expr></argument>, <argument><expr><name>v_edge_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pix_op</name><index>[<expr><name>op_index</name></expr>]</index></name><operator>(</operator><name>dest_cr</name><operator>,</operator> <name>ptr</name><operator>,</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name><operator>,</operator> <name>block_s</name><operator>,</operator> <name>sx</name><operator>,</operator> <name>sy</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>MPV_motion_lowres</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_picture</name></decl></parameter>,

<parameter><decl><type><name>h264_chroma_mc_func</name> <modifier>*</modifier></type><name>pix_op</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lowres</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_s</name> <init>= <expr><literal type="number">8</literal> <operator>&gt;&gt;</operator><name>lowres</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mb_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MV_TYPE_16X16</name></expr>:</case>

<expr_stmt><expr><call><name>mpeg_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>block_s</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MV_TYPE_8X8</name></expr>:</case>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>hpel_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>

<name><name>s</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator> <operator>*</operator> <name>block_s</name></expr></argument>,

<argument><expr><name><name>ref_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>mb_x</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>block_s</name></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>mb_y</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>block_s</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>h_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>lowres</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>v_edge_pos</name></name> <operator>&gt;&gt;</operator> <name>lowres</name></expr></argument>,

<argument><expr><name>block_s</name></expr></argument>, <argument><expr><name>block_s</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>chroma_4mv_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>ref_picture</name></expr></argument>,

<argument><expr><name>pix_op</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MV_TYPE_FIELD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpeg_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>block_s</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpeg_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>block_s</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref_picture</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpeg_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>block_s</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>MV_TYPE_16X8</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref2picture</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref2picture</name> <operator>=</operator> <name>ref_picture</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ref2picture</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mpeg_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ref2picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<literal type="number">2</literal> <operator>*</operator> <name>block_s</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>block_s</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>block_s</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>block_s</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>block_s</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MV_TYPE_DMV</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpeg_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>^</operator> <name>i</name></expr></argument>,

<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>block_s</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pix_op</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mpeg_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>ref_picture</name></expr></argument>, <argument><expr><name>pix_op</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>block_s</name></expr></argument>, <argument><expr><name>mb_y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix_op</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref_picture</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lowest_referenced_row</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>my_max</name> <init>= <expr><name>INT_MIN</name></expr></init></decl>, <decl><type ref="prev"/><name>my_min</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>qpel_shift</name> <init>= <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>quarter_sample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name></decl>, <decl><type ref="prev"/><name>off</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mvs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mcsel</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>unhandled</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MV_TYPE_16X16</name></expr>:</case>

<expr_stmt><expr><name>mvs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MV_TYPE_16X8</name></expr>:</case>

<expr_stmt><expr><name>mvs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MV_TYPE_8X8</name></expr>:</case>

<expr_stmt><expr><name>mvs</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>unhandled</name>;</goto>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mvs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>my_max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>my_max</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my_min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>my_min</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><name>my_min</name></expr></argument>, <argument><expr><name>my_max</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>qpel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<return>return <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<label><name>unhandled</name>:</label>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_dct</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_intra</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_dct</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_add</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_dequant_dct</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_add</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_clean_intra_table_entries</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wrap</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name></expr> ]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <name>wrap</name></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>wrap</name></expr>]</index></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <name>wrap</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coded_block</name><index>[<expr><name>xy</name></expr> ]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>coded_block</name><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>coded_block</name><index>[<expr><name>xy</name> <operator>+</operator> <name>wrap</name></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>coded_block</name><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>wrap</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name>wrap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name><index>[<expr><name>xy</name></expr>]</index></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>void</name></type> <name>mpv_reconstruct_mb_internal</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>lowres_flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_mpeg12</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_XVMC</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_mb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_mb</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><name>FF_DEBUG_DCT_COEFF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"DCT coeffs of MB at %dx%d:\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%5d"</literal></expr></argument>,

<argument><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_clean_intra_table_entries</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_mpeg12</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mbintra_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PSNR</name><operator>)</operator> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_skip_threshold</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_skip_factor</name></name> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>intra_only</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_decision</name></name> <operator>!=</operator> <name>FF_MB_DECISION_RD</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dct_linesize</name></decl>, <decl><type ref="prev"/><name>dct_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>op_pixels_func</name> <argument_list>(<argument><expr><operator>*</operator><name>op_pix</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qpel_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>op_qpix</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvlinesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>readable</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>encoding</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>draw_horiz_band</name></name> <operator>||</operator> <name>lowres_flag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name><init>= <expr><ternary><condition><expr><name>lowres_flag</name></expr> ?</condition><then> <expr><literal type="number">8</literal><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mbskip_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>!=</operator><name>AV_PICTURE_TYPE_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mbskip_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>reference</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mbskip_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mbskip_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dct_linesize</name> <operator>=</operator> <name>linesize</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_offset</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr> ?</condition><then> <expr><name>linesize</name></expr> </then><else>: <expr><name>linesize</name> <operator>*</operator> <name>block_size</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>readable</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>dest_y</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>b_scratchpad</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>b_scratchpad</name></name><operator>+</operator><literal type="number">16</literal><operator>*</operator><name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sc</name><operator>.</operator><name>b_scratchpad</name></name><operator>+</operator><literal type="number">32</literal><operator>*</operator><name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>HAVE_THREADS</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_FRAME</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,

<argument><expr><call><name>lowest_referenced_row</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_BACKWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,

<argument><expr><call><name>lowest_referenced_row</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>lowres_flag</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>h264_chroma_mc_func</name> <modifier>*</modifier></type><name>op_pix</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MPV_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>op_pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op_pix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_BACKWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MPV_motion_lowres</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>op_pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>op_qpix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>qpel_put</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name><operator>)</operator> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_B</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>op_pix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>op_pix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_no_rnd_pixels_tab</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_FORWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>op_pix</name></expr></argument>, <argument><expr><name>op_qpix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op_pix</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>avg_pixels_tab</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>op_qpix</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>qpel_avg</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>&amp;</operator> <name>MV_DIR_BACKWARD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mpv_motion</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>op_pix</name></expr></argument>, <argument><expr><name>op_qpix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_idct</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator>

<operator>||</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator>

<operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_idct</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip_idct</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator> <name><name>s</name><operator>-&gt;</operator><name>msmpeg4_version</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_MPEG2VIDEO</name>

<operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_MPEG4</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mpeg_quant</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest_y</name></expr></argument> , <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument> , <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>dct_linesize</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_offset</name> <operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>dest_cb</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dequant_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>dest_cr</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>is_mpeg12</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_WMV2</name><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest_y</name></expr></argument> , <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument> , <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>dct_linesize</name> <operator>=</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_offset</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr> ?</condition><then> <expr><name>uvlinesize</name></expr> </then><else>: <expr><name>uvlinesize</name><operator>*</operator><name>block_size</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>dest_cb</name><operator>+</operator><name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>dest_cr</name><operator>+</operator><name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>dest_cb</name><operator>+</operator><name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>dest_cr</name><operator>+</operator><name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>dest_cb</name><operator>+</operator><name>block_size</name><operator>+</operator><name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>dest_cr</name><operator>+</operator><name>block_size</name><operator>+</operator><name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>CONFIG_WMV2_DECODER</name> <operator>||</operator> <name>CONFIG_WMV2_ENCODER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_wmv2_add_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>act_block_size</name> <init>= <expr><name>block_size</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dpcm_direction</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name>act_block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <name>act_block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_linesize</name> <operator>=</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_offset</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr> ?</condition><then> <expr><name>uvlinesize</name></expr> </then><else>: <expr><name>uvlinesize</name><operator>*</operator><name>block_size</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">5</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">6</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">7</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <name>act_block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name> <operator>+</operator> <name>act_block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">9</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <name>act_block_size</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">10</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name> <operator>+</operator> <name>act_block_size</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>block32</name></name><operator>)</operator><index>[<expr><literal type="number">11</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dpcm_direction</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>dest_pcm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest_y</name></expr>, <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest_cb</name></expr>, <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest_cr</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>dct_linesize</name></expr>, <expr><name>uvlinesize</name></expr>, <expr><name>uvlinesize</name></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>vsub</name><operator>)</operator></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>hsub</name><operator>)</operator></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest_pcm</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dpcm_macroblock</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dest_pcm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dpcm_direction</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>dest_pcm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest_y</name></expr>, <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest_cb</name></expr>, <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>dest_cr</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>dct_linesize</name></expr>, <expr><name>uvlinesize</name></expr>, <expr><name>uvlinesize</name></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dest_pcm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>vsub</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>h</name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>vsub</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>h</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>h</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>w</name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>hsub</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>w</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>w</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dest_pcm</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>dpcm_macroblock</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dest_pcm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_MPEG1VIDEO</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name><operator>==</operator><name>AV_CODEC_ID_MPEG2VIDEO</name><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dest_y</name></expr></argument> , <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument> , <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>dct_offset</name> <operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_linesize</name> <operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>dest_cb</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_dct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>dest_cr</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name>dct_offset</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>dct_linesize</name> <operator>=</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dct_offset</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>interlaced_dct</name></name></expr> ?</condition><then> <expr><name>uvlinesize</name></expr> </then><else>: <expr><name>uvlinesize</name><operator>*</operator><name>block_size</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name> <operator>+</operator> <name>block_size</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <name>block_size</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dest_cr</name> <operator>+</operator> <name>block_size</name> <operator>+</operator> <name>dct_offset</name></expr></argument>, <argument><expr><name>dct_linesize</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>skip_idct</name>:</label>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>readable</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name>dest_y</name> <operator>,</operator> <name>linesize</name><operator>,</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name>dest_cb</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator> <name>dest_cr</name><operator>,</operator> <name>uvlinesize</name><operator>,</operator><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpv_reconstruct_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>==</operator> <name>FMT_MPEG1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mpv_reconstruct_mb_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>mpv_reconstruct_mb_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mpv_reconstruct_mb_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>mpv_reconstruct_mb_internal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpeg_draw_horiz_band</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_draw_horiz_band</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>first_field</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_init_block_index</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvlinesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>width_of_mb</name> <init>= <expr><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height_of_mb</name> <init>= <expr><literal type="number">4</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">2</literal> <operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">2</literal> <operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>width_of_mb</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>width_of_mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>width_of_mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_x_shift</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name><operator>==</operator><name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>draw_horiz_band</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name><operator>==</operator><name>PICT_FRAME</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name><operator>==</operator><name>PICT_FRAME</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name>linesize</name> <operator>&lt;&lt;</operator> <name>height_of_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>height_of_mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>height_of_mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>&lt;&lt;</operator> <name>height_of_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>height_of_mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>uvlinesize</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>height_of_mb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_y_shift</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpeg_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_picture_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpeg_unref_picture</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>closed_gop</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>state</name></name><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>frame_start_found</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>overread</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>overread_index</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>index</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_context</name><operator>.</operator><name>last_index</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_buffer_size</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_set_qscale</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qscale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>qscale</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>qscale</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name>qscale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_qscale_table</name><index>[<expr><name>qscale</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name><index>[ <expr><name>qscale</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name><index>[ <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale</name></name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mpv_report_decode_progress</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>partitioned_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>er</name><operator>.</operator><name>error_occurred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
