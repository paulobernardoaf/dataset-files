<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\atrac3.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac3data.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_CHANNELS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_JS_PAIRS</name></cpp:macro> <cpp:value>8 / 2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOINT_STEREO</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SINGLE</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES_PER_FRAME</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDCT_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>GainBlock</name> <block>{

<decl_stmt><decl><type><name>AtracGainInfo</name></type> <name><name>g_block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>GainBlock</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TonalComponent</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_coefs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>coef</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>TonalComponent</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ChannelUnit</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>bands_coded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_components</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>prev_frame</name><index>[<expr><name>SAMPLES_PER_FRAME</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gc_blk_switch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TonalComponent</name></type> <name><name>components</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GainBlock</name></type> <name><name>gain_block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>spectrum</name></expr></argument>)</argument_list></call><index>[<expr><name>SAMPLES_PER_FRAME</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>imdct_buf</name></expr></argument>)</argument_list></call><index>[<expr><name>SAMPLES_PER_FRAME</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>delay_buf1</name><index>[<expr><literal type="number">46</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>delay_buf2</name><index>[<expr><literal type="number">46</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>delay_buf3</name><index>[<expr><literal type="number">46</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ChannelUnit</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ATRAC3Context</name> <block>{

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coding_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelUnit</name> <modifier>*</modifier></type><name>units</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>matrix_coeff_index_prev</name><index>[<expr><name>MAX_JS_PAIRS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>matrix_coeff_index_now</name><index>[<expr><name>MAX_JS_PAIRS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>matrix_coeff_index_next</name><index>[<expr><name>MAX_JS_PAIRS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>weighting_delay</name><index>[<expr><name>MAX_JS_PAIRS</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>decoded_bytes_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>temp_buf</name><index>[<expr><literal type="number">1070</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scrambled_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AtracGCContext</name></type> <name>gainc_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

}</block></struct></type> <name>ATRAC3Context</name>;</typedef>

<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>mdct_window</name></expr></argument>)</argument_list></call><index>[<expr><name>MDCT_SIZE</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>atrac3_vlc_table</name><index>[<expr><literal type="number">4096</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>spectral_coeff_tab</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imlt</name><parameter_list>(<parameter><decl><type><name>ATRAC3Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>odd_band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>odd_band</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>input</name><index>[<expr><literal type="number">255</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><operator>.</operator><name>imdct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>mdct_window</name></expr></argument>, <argument><expr><name>MDCT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name>input</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>input</name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_be2ne32</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">0x537F6103U</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>off</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0x537F6103U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><name>off</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_be2ne32</name><argument_list>(<argument><expr><literal type="number">0x537F6103U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bytes</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Offset of %d"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>off</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_imdct_window</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">255</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>wi</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">256.0</literal> <operator>-</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>wj</name> <init>= <expr><call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">256.0</literal> <operator>-</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><name>wi</name> <operator>*</operator> <name>wi</name> <operator>+</operator> <name>wj</name> <operator>*</operator> <name>wj</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mdct_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mdct_window</name><index>[<expr><literal type="number">511</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>wi</name> <operator>/</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mdct_window</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>mdct_window</name><index>[<expr><literal type="number">511</literal> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>wj</name> <operator>/</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>atrac3_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ATRAC3Context</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_quant_spectral_coeffs</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selector</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>coding_flag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mantissas</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_codes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>huff_symb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>selector</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_codes</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>coding_flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_bits</name> <init>= <expr><name><name>clc_length_tab</name><index>[<expr><name>selector</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>selector</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_codes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num_bits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>mantissas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_codes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>num_bits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>mantissas</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name><name>mantissa_clc_tab</name><index>[<expr><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mantissas</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mantissa_clc_tab</name><index>[<expr><name>code</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>selector</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_codes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>huff_symb</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>spectral_coeff_tab</name><index>[<expr><name>selector</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>spectral_coeff_tab</name><index>[<expr><name>selector</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>huff_symb</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>huff_symb</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>huff_symb</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><name>code</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mantissas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_codes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>huff_symb</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>spectral_coeff_tab</name><index>[<expr><name>selector</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>spectral_coeff_tab</name><index>[<expr><name>selector</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mantissas</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name><name>mantissa_vlc_tab</name><index>[<expr><name>huff_symb</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mantissas</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mantissa_vlc_tab</name><index>[<expr><name>huff_symb</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_spectrum</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_subbands</name></decl>, <decl><type ref="prev"/><name>coding_mode</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>subband_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>subband_vlc_index</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sf_index</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mantissas</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale_factor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_subbands</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>coding_mode</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subband_vlc_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>subband_vlc_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sf_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>subband_tab</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>subband_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>subband_size</name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>first</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>subband_vlc_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>read_quant_spectral_coeffs</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>subband_vlc_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>coding_mode</name></expr></argument>,

<argument><expr><name>mantissas</name></expr></argument>, <argument><expr><name>subband_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale_factor</name> <operator>=</operator> <name><name>ff_atrac_sf_table</name><index>[<expr><name><name>sf_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>*</operator>

<name><name>inv_max_quant</name><index>[<expr><name><name>subband_vlc_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>first</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>first</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>first</name></expr>]</index></name> <operator>=</operator> <name><name>mantissas</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>scale_factor</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>output</name> <operator>+</operator> <name>first</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>subband_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>subband_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>output</name> <operator>+</operator> <name>first</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>SAMPLES_PER_FRAME</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>num_subbands</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_tonal_components</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>TonalComponent</name> <modifier>*</modifier></type><name>components</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_bands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_components</name></decl>, <decl><type ref="prev"/><name>coding_mode_selector</name></decl>, <decl><type ref="prev"/><name>coding_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>band_flags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mantissa</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>component_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_components</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_components</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coding_mode_selector</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coding_mode_selector</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coding_mode</name> <operator>=</operator> <name>coding_mode_selector</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_components</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coded_values_per_component</name></decl>, <decl><type ref="prev"/><name>quant_step_index</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>band_flags</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>coded_values_per_component</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>quant_step_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quant_step_index</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>coding_mode_selector</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coding_mode</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <operator>(</operator><name>num_bands</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coded_components</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band_flags</name><index>[<expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coded_components</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>coded_components</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>TonalComponent</name> <modifier>*</modifier></type><name>cmp</name> <init>= <expr><operator>&amp;</operator><name><name>components</name><index>[<expr><name>component_count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sf_index</name></decl>, <decl><type ref="prev"/><name>coded_values</name></decl>, <decl><type ref="prev"/><name>max_coded_values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale_factor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sf_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>component_count</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cmp</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>b</name> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_coded_values</name> <operator>=</operator> <name>SAMPLES_PER_FRAME</name> <operator>-</operator> <name><name>cmp</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>coded_values</name> <operator>=</operator> <name>coded_values_per_component</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>coded_values</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>max_coded_values</name></expr></argument>, <argument><expr><name>coded_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale_factor</name> <operator>=</operator> <name><name>ff_atrac_sf_table</name><index>[<expr><name>sf_index</name></expr>]</index></name> <operator>*</operator>

<name><name>inv_max_quant</name><index>[<expr><name>quant_step_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_quant_spectral_coeffs</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>quant_step_index</name></expr></argument>, <argument><expr><name>coding_mode</name></expr></argument>,

<argument><expr><name>mantissa</name></expr></argument>, <argument><expr><name>coded_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmp</name><operator>-&gt;</operator><name>num_coefs</name></name> <operator>=</operator> <name>coded_values</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>coded_values</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cmp</name><operator>-&gt;</operator><name>coef</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>mantissa</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name>scale_factor</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>component_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>component_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_gain_control</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>GainBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_bands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>level</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>gain</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>g_block</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <name>num_bands</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>gain</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>gain</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>lev_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <name><name>gain</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>loc_code</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>gain</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>level</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>loc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;&amp;</operator> <name><name>loc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>loc</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gain</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_tonal_components</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>spectrum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_components</name></decl></parameter>,

<parameter><decl><type><name>TonalComponent</name> <modifier>*</modifier></type><name>components</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>last_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>input</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_components</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>last_pos</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>+</operator> <name><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_coefs</name></expr></argument>, <argument><expr><name>last_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <name><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coef</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>&amp;</operator><name><name>spectrum</name><index>[<expr><name><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_coefs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>input</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><name>last_pos</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOLATE</name><parameter_list>(<parameter><type><name>old</name></type></parameter>, <parameter><type><name>new</name></type></parameter>, <parameter><type><name>nsample</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((old) + (nsample) * 0.125 * ((new) - (old)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reverse_matrixing</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>su1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>su2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>prev_code</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>curr_code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nsample</name></decl>, <decl><type ref="prev"/><name>band</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mc1_l</name></decl>, <decl><type ref="prev"/><name>mc1_r</name></decl>, <decl><type ref="prev"/><name>mc2_l</name></decl>, <decl><type ref="prev"/><name>mc2_r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>band</name> <operator>+=</operator> <literal type="number">256</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><name><name>prev_code</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s2</name> <init>= <expr><name><name>curr_code</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nsample</name> <operator>=</operator> <name>band</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mc1_l</name> <operator>=</operator> <name><name>matrix_coeffs</name><index>[<expr><name>s1</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mc1_r</name> <operator>=</operator> <name><name>matrix_coeffs</name><index>[<expr><name>s1</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mc2_l</name> <operator>=</operator> <name><name>matrix_coeffs</name><index>[<expr><name>s2</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mc2_r</name> <operator>=</operator> <name><name>matrix_coeffs</name><index>[<expr><name>s2</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>nsample</name> <operator>&lt;</operator> <name>band</name> <operator>+</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>nsample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c1</name> <init>= <expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c2</name> <init>= <expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c1</name> <operator>*</operator> <call><name>INTERPOLATE</name><argument_list>(<argument><expr><name>mc1_l</name></expr></argument>, <argument><expr><name>mc2_l</name></expr></argument>, <argument><expr><name>nsample</name> <operator>-</operator> <name>band</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name>c2</name> <operator>*</operator> <call><name>INTERPOLATE</name><argument_list>(<argument><expr><name>mc1_r</name></expr></argument>, <argument><expr><name>mc2_r</name></expr></argument>, <argument><expr><name>nsample</name> <operator>-</operator> <name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>=</operator> <name>c1</name> <operator>*</operator> <literal type="number">2.0</literal> <operator>-</operator> <name>c2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>s2</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init>;</init> <condition><expr><name>nsample</name> <operator>&lt;</operator> <name>band</name> <operator>+</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>nsample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c1</name> <init>= <expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c2</name> <init>= <expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>=</operator> <name>c2</name> <operator>*</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>-</operator> <name>c2</name><operator>)</operator> <operator>*</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>nsample</name> <operator>&lt;</operator> <name>band</name> <operator>+</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>nsample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c1</name> <init>= <expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c2</name> <init>= <expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>+</operator> <name>c2</name><operator>)</operator> <operator>*</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>=</operator> <name>c2</name> <operator>*</operator> <operator>-</operator><literal type="number">2.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>nsample</name> <operator>&lt;</operator> <name>band</name> <operator>+</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>nsample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>c1</name> <init>= <expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c2</name> <init>= <expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>=</operator> <name>c1</name> <operator>-</operator> <name>c2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_channel_weights</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>ch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>index</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">7.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>-</operator> <name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>channel_weighting</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>su1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>su2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>band</name></decl>, <decl><type ref="prev"/><name>nsample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">7</literal> <operator>||</operator> <name><name>p3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_channel_weights</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_channel_weights</name><argument_list>(<argument><expr><name><name>p3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">256</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>band</name> <operator>+=</operator> <literal type="number">256</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>nsample</name> <operator>=</operator> <name>band</name></expr>;</init> <condition><expr><name>nsample</name> <operator>&lt;</operator> <name>band</name> <operator>+</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>nsample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>*=</operator> <call><name>INTERPOLATE</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nsample</name> <operator>-</operator> <name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>*=</operator> <call><name>INTERPOLATE</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nsample</name> <operator>-</operator> <name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>nsample</name> <operator>&lt;</operator> <name>band</name> <operator>+</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>nsample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>su1</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>*=</operator> <name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>su2</name><index>[<expr><name>nsample</name></expr>]</index></name> <operator>*=</operator> <name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_channel_sound_unit</name><parameter_list>(<parameter><decl><type><name>ATRAC3Context</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>ChannelUnit</name> <modifier>*</modifier></type><name>snd</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channel_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coding_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>band</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>num_subbands</name></decl>, <decl><type ref="prev"/><name>last_tonal</name></decl>, <decl><type ref="prev"/><name>num_bands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GainBlock</name> <modifier>*</modifier></type><name>gain1</name> <init>= <expr><operator>&amp;</operator><name><name>snd</name><operator>-&gt;</operator><name>gain_block</name><index>[ <expr><name><name>snd</name><operator>-&gt;</operator><name>gc_blk_switch</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GainBlock</name> <modifier>*</modifier></type><name>gain2</name> <init>= <expr><operator>&amp;</operator><name><name>snd</name><operator>-&gt;</operator><name>gain_block</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name><name>snd</name><operator>-&gt;</operator><name>gc_blk_switch</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>coding_mode</name> <operator>==</operator> <name>JOINT_STEREO</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>channel_num</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,<argument><expr><literal type="string">"JS mono Sound Unit id != 3.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x28</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,<argument><expr><literal type="string">"Sound Unit id != 0x28.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>snd</name><operator>-&gt;</operator><name>bands_coded</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_gain_control</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>gain2</name></expr></argument>, <argument><expr><name><name>snd</name><operator>-&gt;</operator><name>bands_coded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>snd</name><operator>-&gt;</operator><name>num_components</name></name> <operator>=</operator> <call><name>decode_tonal_components</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>snd</name><operator>-&gt;</operator><name>components</name></name></expr></argument>,

<argument><expr><name><name>snd</name><operator>-&gt;</operator><name>bands_coded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>snd</name><operator>-&gt;</operator><name>num_components</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>snd</name><operator>-&gt;</operator><name>num_components</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_subbands</name> <operator>=</operator> <call><name>decode_spectrum</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>snd</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_tonal</name> <operator>=</operator> <call><name>add_tonal_components</name><argument_list>(<argument><expr><name><name>snd</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>, <argument><expr><name><name>snd</name><operator>-&gt;</operator><name>num_components</name></name></expr></argument>,

<argument><expr><name><name>snd</name><operator>-&gt;</operator><name>components</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bands</name> <operator>=</operator> <operator>(</operator><name><name>subband_tab</name><index>[<expr><name>num_subbands</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_tonal</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_bands</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>last_tonal</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>num_bands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>band</name> <operator>&lt;=</operator> <name>num_bands</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imlt</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>snd</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><name>band</name> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>snd</name><operator>-&gt;</operator><name>imdct_buf</name></name></expr></argument>, <argument><expr><name>band</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>snd</name><operator>-&gt;</operator><name>imdct_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>snd</name><operator>-&gt;</operator><name>imdct_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_atrac_gain_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gainc_ctx</name></name></expr></argument>, <argument><expr><name><name>snd</name><operator>-&gt;</operator><name>imdct_buf</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>snd</name><operator>-&gt;</operator><name>prev_frame</name><index>[<expr><name>band</name> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>gain1</name><operator>-&gt;</operator><name>g_block</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gain2</name><operator>-&gt;</operator><name>g_block</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><index>[<expr><name>band</name> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>snd</name><operator>-&gt;</operator><name>gc_blk_switch</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>databuf</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ATRAC3Context</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name> <operator>==</operator> <name>JOINT_STEREO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>js_databuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>js_pair</name></decl>, <decl><type ref="prev"/><name>js_block_align</name></decl>;</decl_stmt>

<expr_stmt><expr><name>js_block_align</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <name>ch</name> <operator>+</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>js_pair</name> <operator>=</operator> <name>ch</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>js_databuf</name> <operator>=</operator> <name>databuf</name> <operator>+</operator> <name>js_pair</name> <operator>*</operator> <name>js_block_align</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,

<argument><expr><name>js_databuf</name></expr></argument>, <argument><expr><name>js_block_align</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_channel_sound_unit</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>out_samples</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>JOINT_STEREO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>js_databuf</name> <operator>==</operator> <name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name> <operator>+</operator> <name>js_block_align</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>js_block_align</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ptr1</name><operator>++</operator></expr><operator>,</operator> <expr><name>ptr2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr2</name> <init>= <expr><name>js_databuf</name> <operator>+</operator> <name>js_block_align</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>js_block_align</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr2</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><operator>*</operator><name>ptr1</name> <operator>==</operator> <literal type="number">0xF8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ptr1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>js_block_align</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,

<argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name> <operator>+</operator> <name>js_block_align</name> <operator>-</operator> <name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_prev</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_now</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_now</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_next</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_next</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_channel_sound_unit</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>out_samples</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>JOINT_STEREO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>reverse_matrixing</name><argument_list>(<argument><expr><name><name>out_samples</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out_samples</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_prev</name><index>[<expr><name>js_pair</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_now</name><index>[<expr><name>js_pair</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_weighting</name><argument_list>(<argument><expr><name><name>out_samples</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out_samples</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,

<argument><expr><name>databuf</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_channel_sound_unit</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>out_samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name><name>out_samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>p1</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><name>p2</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p4</name> <init>= <expr><name>p3</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_atrac_iqmf</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delay_buf1</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>temp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac_iqmf</name><argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delay_buf2</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>temp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac_iqmf</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delay_buf3</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>temp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>al_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>databuf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ATRAC3Context</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_channel_sound_unit</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>out_samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name>get_bits_left</name><operator>(</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x28</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name><name>out_samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>p1</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><name>p2</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p4</name> <init>= <expr><name>p3</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_atrac_iqmf</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delay_buf1</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>temp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac_iqmf</name><argument_list>(<argument><expr><name>p4</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delay_buf2</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>temp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac_iqmf</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>delay_buf3</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>temp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>atrac3_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATRAC3Context</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>databuf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Frame too small (%d bytes). Truncated file?\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>SAMPLES_PER_FRAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>scrambled_stream</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_bytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>databuf</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>databuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>databuf</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame decoding error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>atrac3al_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>SAMPLES_PER_FRAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>al_decode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame decoding error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>atrac3_init_static_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_imdct_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac_generate_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>spectral_coeff_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>atrac3_vlc_table</name><index>[<expr><name><name>atrac3_vlc_offs</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spectral_coeff_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>atrac3_vlc_offs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<name><name>atrac3_vlc_offs</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spectral_coeff_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>huff_tab_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>huff_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>huff_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>atrac3_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>static_init_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>js_pair</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>delay</name></decl>, <decl><type ref="prev"/><name>samples_per_frame</name></decl>, <decl><type ref="prev"/><name>frame_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>edata_ptr</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATRAC3Context</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <name>MIN_CHANNELS</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Channel configuration error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>static_init_done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>atrac3_init_static_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>static_init_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ATRAC3AL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_per_frame</name> <operator>=</operator> <name>SAMPLES_PER_FRAME</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0x88E</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name> <operator>=</operator> <name>SINGLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"[0-1] %d\n"</literal></expr></argument>,

<argument><expr><call><name>bytestream_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>edata_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name> <operator>=</operator> <call><name>bytestream_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"[8-9] %d\n"</literal></expr></argument>,

<argument><expr><call><name>bytestream_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>frame_factor</name> <operator>=</operator> <call><name>bytestream_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,<argument><expr><literal type="string">"[12-13] %d\n"</literal></expr></argument>,

<argument><expr><call><name>bytestream_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>samples_per_frame</name> <operator>=</operator> <name>SAMPLES_PER_FRAME</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">0x88E</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name></expr> ?</condition><then> <expr><name>JOINT_STEREO</name></expr> </then><else>: <expr><name>SINGLE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>scrambled_stream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>!=</operator> <literal type="number">96</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>frame_factor</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>!=</operator> <literal type="number">152</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>frame_factor</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>!=</operator> <literal type="number">192</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>frame_factor</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown frame/channel/frame_factor "</literal>

<literal type="string">"configuration %d/%d/%d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>frame_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_per_frame</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name> <operator>=</operator> <call><name>bytestream_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>scrambled_stream</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown extradata size %d.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Version %d != 4.\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samples_per_frame</name> <operator>!=</operator> <name>SAMPLES_PER_FRAME</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown amount of samples per frame %d.\n"</literal></expr></argument>,

<argument><expr><name>samples_per_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>!=</operator> <literal type="number">0x88E</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown amount of delay %x != 0x88E.\n"</literal></expr></argument>,

<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name> <operator>==</operator> <name>SINGLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Single channels detected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name> <operator>==</operator> <name>JOINT_STEREO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid joint stereo channel configuration.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Joint stereo detected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown channel coding mode %x!\n"</literal></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>coding_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">32768</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing MDCT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>decoded_bytes_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>js_pair</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>js_pair</name> <operator>&lt;</operator> <name>MAX_JS_PAIRS</name></expr>;</condition> <incr><expr><name>js_pair</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weighting_delay</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_prev</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_now</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>matrix_coeff_index_next</name><index>[<expr><name>js_pair</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_atrac_init_gain_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gainc_ctx</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>units</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>q</name><operator>-&gt;</operator><name>units</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>units</name></name> <operator>||</operator> <operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>atrac3_decode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_atrac3_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"atrac3"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ATRAC3 (Adaptive TRansform Acoustic Coding 3)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ATRAC3</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ATRAC3Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>atrac3_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>atrac3_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>atrac3_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_atrac3al_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"atrac3al"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ATRAC3 AL (Adaptive TRansform Acoustic Coding 3 Advanced Lossless)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ATRAC3AL</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ATRAC3Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>atrac3_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>atrac3_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>atrac3al_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
