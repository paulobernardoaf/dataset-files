<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\lagarithrac.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>lag_rac</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>low</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>scale</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>hash_shift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bytestream_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bytestream</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bytestream_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>overread</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OVERREAD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>prob</name><index>[<expr><literal type="number">258</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>range_hash</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>lag_rac</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_lag_rac_init</name><parameter_list>(<parameter><decl><type><name>lag_rac</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lag_rac_refill</name><parameter_list>(<parameter><decl><type><name>lag_rac</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;=</operator> <literal type="number">0x800000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>range</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>low</name></name> <operator>|=</operator> <literal type="number">0xff</literal> <operator>&amp;</operator> <operator>(</operator><call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>bytestream_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>bytestream</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>overread</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>lag_get_rac</name><parameter_list>(<parameter><decl><type><name>lag_rac</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>range_scaled</name></decl>, <decl><type ref="prev"/><name>low_scaled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lag_rac_refill</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>range_scaled</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>range</name></name> <operator>&gt;&gt;</operator> <name><name>l</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;</operator> <name>range_scaled</name> <operator>*</operator> <name><name>l</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>low</name></name> <operator>&lt;</operator> <name>range_scaled</name> <operator>*</operator> <name><name>l</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>low_scaled</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>low</name></name> <operator>/</operator> <operator>(</operator><name>range_scaled</name><operator>&lt;&lt;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>hash_shift</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>range_hash</name><index>[<expr><name>low_scaled</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>low</name></name> <operator>&gt;=</operator> <name>range_scaled</name> <operator>*</operator> <name><name>l</name><operator>-&gt;</operator><name>prob</name><index>[<expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>range_scaled</name> <operator>*</operator> <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>prob</name><index>[<expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>l</name><operator>-&gt;</operator><name>prob</name><index>[<expr><name>val</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>range</name></name> <operator>-=</operator> <name>range_scaled</name> <operator>*</operator> <name><name>l</name><operator>-&gt;</operator><name>prob</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>range</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>low</name></name> <operator>-=</operator> <name>range_scaled</name> <operator>*</operator> <name><name>l</name><operator>-&gt;</operator><name>prob</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

</unit>
