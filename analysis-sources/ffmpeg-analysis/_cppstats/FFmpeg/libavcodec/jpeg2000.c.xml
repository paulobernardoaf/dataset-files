<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\jpeg2000.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpeg2000.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &gt;= 0 ? (a) &lt;&lt; (n) : (a) &gt;&gt; -(n))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tag_tree_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>h</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>res</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>res</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Jpeg2000TgtNode</name> <modifier>*</modifier></type><name>ff_jpeg2000_tag_tree_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pw</name> <init>= <expr><name>w</name></expr></init></decl>, <decl><type ref="prev"/><name>ph</name> <init>= <expr><name>h</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000TgtNode</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tt_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tt_size</name> <operator>=</operator> <call><name>tag_tree_size</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>res</name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>tt_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>h</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ph</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t</name> <operator>+</operator> <name>pw</name> <operator>*</operator> <name>ph</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ph</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pw</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name> <operator>*</operator> <name>pw</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>=</operator> <operator>&amp;</operator><name><name>t2</name><index>[<expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>w</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>parent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tag_tree_zero</name><parameter_list>(<parameter><decl><type><name>Jpeg2000TgtNode</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>siz</name> <init>= <expr><call><name>tag_tree_size</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>siz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vis</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ff_jpeg2000_sigctxno_lut</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getsigctxno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bandno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_E</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_W</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_N</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_S</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_NE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_NW</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_SE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_SW</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bandno</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bandno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">7</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">5</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name><operator>+</operator><name>v</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">7</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">6</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name><operator>+</operator><name>v</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name><operator>+</operator><name>v</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name><operator>+</operator><name>v</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name><operator>+</operator><name>v</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ff_jpeg2000_sgnctxno_lut</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ff_jpeg2000_xorbit_lut</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>contribtab</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ctxlbltab</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>xorbittab</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getsgnctxno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>xorbit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vcontrib</name></decl>, <decl><type ref="prev"/><name>hcontrib</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hcontrib</name> <operator>=</operator> <name><name>contribtab</name><index>[<expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_E</name></expr> ?</condition><then> <expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SGN_E</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index>

<index>[<expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_W</name></expr> ?</condition><then> <expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SGN_W</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vcontrib</name> <operator>=</operator> <name><name>contribtab</name><index>[<expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_S</name></expr> ?</condition><then> <expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SGN_S</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index>

<index>[<expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_N</name></expr> ?</condition><then> <expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>JPEG2000_T1_SGN_N</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xorbit</name> <operator>=</operator> <name><name>xorbittab</name><index>[<expr><name>hcontrib</name></expr>]</index><index>[<expr><name>vcontrib</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name><name>ctxlbltab</name><index>[<expr><name>hcontrib</name></expr>]</index><index>[<expr><name>vcontrib</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <name>av_cold</name></type> <name>ff_jpeg2000_init_tier1_luts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ff_jpeg2000_sigctxno_lut</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>getsigctxno</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ff_jpeg2000_sgnctxno_lut</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>getsgnctxno</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ff_jpeg2000_xorbit_lut</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_jpeg2000_set_significance</name><parameter_list>(<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>negative</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_W</name> <operator>|</operator> <name>JPEG2000_T1_SGN_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_E</name> <operator>|</operator> <name>JPEG2000_T1_SGN_E</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_N</name> <operator>|</operator> <name>JPEG2000_T1_SGN_N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_S</name> <operator>|</operator> <name>JPEG2000_T1_SGN_S</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_W</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_E</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_N</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_S</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_NW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_NE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_SW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_SIG_SE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_band_stepsize</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bandno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gbandno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reslevelno</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cbps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>qntsty</name><operator>-&gt;</operator><name>quantsty</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>gain</name></decl>;</decl_stmt>

<case>case <expr><name>JPEG2000_QSTY_NONE</name></expr>:</case>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_QSTY_SI</name></expr>:</case>

<case>case <expr><name>JPEG2000_QSTY_SE</name></expr>:</case>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>cbps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>=</operator> <call><name>ff_exp2fi</name><argument_list>(<argument><expr><name>gain</name> <operator>-</operator> <name><name>qntsty</name><operator>-&gt;</operator><name>expn</name><index>[<expr><name>gbandno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>*=</operator> <name><name>qntsty</name><operator>-&gt;</operator><name>mant</name><index>[<expr><name>gbandno</name></expr>]</index></name> <operator>/</operator> <literal type="number">2048.0</literal> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown quantization format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>!=</operator> <name>FF_DWT53</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lband</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>bandno</name> <operator>+</operator> <operator>(</operator><name>reslevelno</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>*=</operator> <name>F_LFTG_X</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lband</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>*=</operator> <name>F_LFTG_X</name> <operator>*</operator> <name>F_LFTG_X</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT97</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>*=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>F_LFTG_K</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels2decode</name></name> <operator>-</operator> <name>reslevelno</name><operator>)</operator> <operator>+</operator> <name>lband</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>&gt;</operator> <operator>(</operator><name>INT_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"stepsize out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>i_stepsize</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_prec</name><parameter_list>(<parameter><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>reslevel</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>precno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bandno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reslevelno</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_band_prec_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_band_prec_height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_codeblocks</name></decl>, <decl><type ref="prev"/><name>cblkno</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>decoded_layers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>log2_band_prec_width</name><operator>)</operator> <operator>+</operator> <name>precno</name> <operator>%</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name><operator>)</operator> <operator>*</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_band_prec_width</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>log2_band_prec_height</name><operator>)</operator> <operator>+</operator> <name>precno</name> <operator>/</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name><operator>)</operator> <operator>*</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_band_prec_height</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_band_prec_width</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_band_prec_height</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name> <operator>=</operator>

<call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name></expr></argument>)</argument_list></call>

<operator>-</operator> <operator>(</operator><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name> <operator>=</operator>

<call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name></expr></argument>)</argument_list></call>

<operator>-</operator> <operator>(</operator><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>cblkincl</name></name> <operator>=</operator>

<call><name>ff_jpeg2000_tag_tree_init</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr></argument>,

<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prec</name><operator>-&gt;</operator><name>cblkincl</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>zerobits</name></name> <operator>=</operator>

<call><name>ff_jpeg2000_tag_tree_init</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr></argument>,

<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prec</name><operator>-&gt;</operator><name>zerobits</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_codeblocks</name> <operator>=</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name> <operator>*</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_codeblocks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cblkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cblkno</name> <operator>&lt;</operator> <name>nb_codeblocks</name></expr>;</condition> <incr><expr><name>cblkno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>cblkno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Cx0</name></decl>, <decl><type ref="prev"/><name>Cy0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Cx0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Cx0</name> <operator>=</operator> <name>Cx0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cblkno</name> <operator>%</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>Cx0</name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cy0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>Cy0</name> <operator>=</operator> <name>Cy0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cblkno</name> <operator>/</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>Cy0</name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>Cx0</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>Cy0</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bandno</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>reslevelno</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bandno</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>reslevelno</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<name><name>comp</name><operator>-&gt;</operator><name>reslevel</name><index>[<expr><name>reslevelno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>lblock</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_band</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>reslevel</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bandno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gbandno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reslevelno</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cbps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>log2_band_prec_width</name></decl>, <decl><type ref="prev"/><name>log2_band_prec_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>declvl</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>precno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_precincts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_band_stepsize</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>qntsty</name></expr></argument>, <argument><expr><name>bandno</name></expr></argument>, <argument><expr><name>gbandno</name></expr></argument>, <argument><expr><name>reslevelno</name></expr></argument>, <argument><expr><name>cbps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reslevelno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name>declvl</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>log2_band_prec_width</name> <operator>=</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>log2_band_prec_height</name> <operator>=</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_width</name></name></expr></argument>,

<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_height</name></name></expr></argument>,

<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>bandno</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1LL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>declvl</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>declvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>log2_cblk_width</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_width</name></name></expr></argument>,

<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>log2_cblk_height</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_height</name></name></expr></argument>,

<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log2_band_prec_width</name> <operator>=</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>log2_band_prec_height</name> <operator>=</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_precincts</name> <operator>=</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_precincts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>band</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>prec</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>precno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>precno</name> <operator>&lt;</operator> <name>nb_precincts</name></expr>;</condition> <incr><expr><name>precno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_prec</name><argument_list>(<argument><expr><name>band</name></expr></argument>, <argument><expr><name>reslevel</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>,

<argument><expr><name>precno</name></expr></argument>, <argument><expr><name>bandno</name></expr></argument>, <argument><expr><name>reslevelno</name></expr></argument>,

<argument><expr><name>log2_band_prec_width</name></expr></argument>, <argument><expr><name>log2_band_prec_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_jpeg2000_init_component</name><parameter_list>(<parameter><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cbps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reslevelno</name></decl>, <decl><type ref="prev"/><name>bandno</name></decl>, <decl><type ref="prev"/><name>gbandno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>csize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels2decode</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"nreslevels2decode %d invalid or uninitialized\n"</literal></expr></argument>, <argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels2decode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>ff_jpeg2000_dwt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>dwt</name></name></expr></argument>, <argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name></name></expr></argument>,

<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels2decode</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>csize</name> <operator>=</operator> <operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator>

<operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32768</literal> <operator>||</operator>

<name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"component size too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT97</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>csize</name> <operator>+=</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>comp</name><operator>-&gt;</operator><name>f_data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>f_data</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>csize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>comp</name><operator>-&gt;</operator><name>f_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>comp</name><operator>-&gt;</operator><name>f_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>csize</name> <operator>+=</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>f_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>csize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>declvl</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>reslevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>declvl</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>=</operator> <name><name>codsty</name><operator>-&gt;</operator><name>log2_prec_widths</name><index>[<expr><name>reslevelno</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>=</operator> <name><name>codsty</name><operator>-&gt;</operator><name>log2_prec_heights</name><index>[<expr><name>reslevelno</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>||</operator> <operator>!</operator><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reslevelno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>nbands</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>nbands</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>=</operator>

<call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<operator>(</operator><name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name> <operator>=</operator>

<call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<operator>(</operator><name><name>reslevel</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>reslevel</name><operator>-&gt;</operator><name>nbands</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name> <operator>*</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>nbands</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>reslevel</name><operator>-&gt;</operator><name>band</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr><operator>,</operator> <expr><name>gbandno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_band</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>reslevel</name></expr></argument>,

<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>qntsty</name></expr></argument>,

<argument><expr><name>bandno</name></expr></argument>, <argument><expr><name>gbandno</name></expr></argument>, <argument><expr><name>reslevelno</name></expr></argument>,

<argument><expr><name>cbps</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_jpeg2000_reinit</name><parameter_list>(<parameter><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reslevelno</name></decl>, <decl><type ref="prev"/><name>bandno</name></decl>, <decl><type ref="prev"/><name>cblkno</name></decl>, <decl><type ref="prev"/><name>precno</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>rlevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>precno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>precno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>;</condition> <incr><expr><name>precno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tag_tree_zero</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>zerobits</name></name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tag_tree_zero</name><argument_list>(<argument><expr><name><name>prec</name><operator>-&gt;</operator><name>cblkincl</name></name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cblkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cblkno</name> <operator>&lt;</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name> <operator>*</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr>;</condition> <incr><expr><name>cblkno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>cblkno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>lblock</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_jpeg2000_cleanup</name><parameter_list>(<parameter><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reslevelno</name></decl>, <decl><type ref="prev"/><name>bandno</name></decl>, <decl><type ref="prev"/><name>precno</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>&amp;&amp;</operator> <name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>;</condition>

<incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>reslevel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reslevel</name> <operator>=</operator> <name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>band</name> <operator>=</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>precno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>precno</name> <operator>&lt;</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name><name>reslevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>;</condition> <incr><expr><name>precno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_code_blocks</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name> <operator>*</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prec</name><operator>-&gt;</operator><name>zerobits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prec</name><operator>-&gt;</operator><name>cblkincl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cblkno</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cblkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cblkno</name> <operator>&lt;</operator> <name>nb_code_blocks</name></expr>;</condition> <incr><expr><name>cblkno</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><operator>&amp;</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name><index>[<expr><name>cblkno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cblk</name><operator>-&gt;</operator><name>passes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cblk</name><operator>-&gt;</operator><name>data_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>band</name><operator>-&gt;</operator><name>prec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reslevel</name><operator>-&gt;</operator><name>band</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_dwt_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>dwt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>f_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
