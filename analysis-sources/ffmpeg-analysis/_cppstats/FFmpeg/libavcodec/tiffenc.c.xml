<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\tiffenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzw.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rle.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tiff.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIFF_MAX_ENTRY</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>type_sizes2</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>TiffEncoderContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bpp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>compr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bpp_tab_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>TiffPhotometric</name></name></type> <name>photometric_interpretation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>strips</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>strip_sizes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>strip_sizes_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>strip_offsets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>strip_offsets_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>yuv_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>yuv_line_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>entries</name><index>[<expr><name>TIFF_MAX_ENTRY</name> <operator>*</operator> <literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_entries</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>subsampling</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>LZWEncodeState</name></name> <modifier>*</modifier></type><name>lzws</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dpi</name></decl>;</decl_stmt> 

}</block></struct></type> <name>TiffEncoderContext</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>check_size</name><parameter_list>(<parameter><decl><type><name>TiffEncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>need</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>&lt;</operator> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name> <operator>+</operator> <name>need</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tnput</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TiffTypes</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<expr_stmt><expr><name>flip</name> <operator>^=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block><operator>)</operator><index>[<expr><name>type</name></expr>]</index></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>*</operator> <name><name>type_sizes2</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name> <operator>^</operator> <name>flip</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_entry</name><parameter_list>(<parameter><decl><type><name>TiffEncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TiffTags</name></name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>TiffTypes</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>entries_ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_entries</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>&lt;</operator> <name>TIFF_MAX_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entries_ptr</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entries_ptr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entries_ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type_sizes</name><index>[<expr><name>type</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>count</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tnput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entries_ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ptr_val</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entries_ptr</name></expr></argument>, <argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>type_sizes2</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tnput</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ptr_val</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_entries</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_entry1</name><parameter_list>(<parameter><decl><type><name>TiffEncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>TiffTags</name></name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TiffTypes</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>w</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dw</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>add_entry</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>TIFF_SHORT</name></expr> ?</condition><then> <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>w</name></expr> </then><else>: <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_strip</name><parameter_list>(<parameter><decl><type><name>TiffEncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>compr</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>

<case>case <expr><name>TIFF_DEFLATE</name></expr>:</case>

<case>case <expr><name>TIFF_ADOBE_DEFLATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>zlen</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compress</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zlen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Compressing failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>zlen</name></expr>;</return>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>TIFF_RAW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>check_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>n</name></expr>;</return>

<case>case <expr><name>TIFF_PACKBITS</name></expr>:</case>

<return>return <expr><call><name>ff_rle_encode</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>TIFF_LZW</name></expr>:</case>

<return>return <expr><call><name>ff_lzw_encode</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lzws</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported compression method: %d\n"</literal></expr></argument>,

<argument><expr><name>compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pack_yuv</name><parameter_list>(<parameter><decl><type><name>TiffEncoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pu</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>lnum</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>lnum</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pu</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pv</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>lnum</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pu</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pv</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_ENTRY</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>tag</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>count</name></type></parameter>, <parameter><type><name>ptr_val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ret = add_entry(s, tag, type, count, ptr_val); if (ret &lt; 0) goto fail; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_ENTRY1</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>tag</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ret = add_entry1(s, tag, type, val); if (ret &lt; 0) goto fail; } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TiffEncoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name> <init>= <expr><name>pict</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>strips</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>s</name><operator>-&gt;</operator><name>dpi</name></name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>bpp_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_yuv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>alpha</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift_h</name></decl>, <decl><type ref="prev"/><name>shift_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>packet_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <call><name>av_get_bits_per_pixel</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp_tab_size</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>AV_PIX_FMT_RGB48LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>photometric_interpretation</name></name> <operator>=</operator> <name>TIFF_PHOTOMETRIC_RGB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">0x28</literal></expr>;</expr_stmt>

<case>case <expr><name>AV_PIX_FMT_GRAY8A</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YA16LE</name></expr>:</case>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8A</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YA16LE</name></expr>;</expr_stmt>

<case>case <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_MONOBLACK</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>photometric_interpretation</name></name> <operator>=</operator> <name>TIFF_PHOTOMETRIC_BLACK_IS_ZERO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>photometric_interpretation</name></name> <operator>=</operator> <name>TIFF_PHOTOMETRIC_PALETTE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_MONOWHITE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>photometric_interpretation</name></name> <operator>=</operator> <name>TIFF_PHOTOMETRIC_WHITE_IS_ZERO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV440P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV410P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shift_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shift_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>photometric_interpretation</name></name> <operator>=</operator> <name>TIFF_PHOTOMETRIC_YCBCR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_yuv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"This colors format is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp_tab_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bpp_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_DEFLATE</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_ADOBE_DEFLATE</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_LZW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">8192</literal> <operator>/</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>strips</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_per_row</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bpp</name></name> <operator>*</operator>

<name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>packet_size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name>bytes_per_row</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_MIN_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>packet_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <operator>&amp;</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0x4949</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strips</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_mallocz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name></name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>strip_sizes_size</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>strips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_padded_mallocz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>strip_offsets_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>strips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yuv_line_size</name></name></expr></argument>, <argument><expr><name>bytes_per_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_DEFLATE</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_ADOBE_DEFLATE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>zbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zlen</name></decl>, <decl><type ref="prev"/><name>zn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zlen</name> <operator>=</operator> <name>bytes_per_row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>zbuf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>zlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zbuf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>zn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pack_yuv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zbuf</name> <operator>+</operator> <name>zn</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>, <argument><expr><name>bytes_per_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zbuf</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>bytes_per_row</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bytes_per_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>zn</name> <operator>+=</operator> <name>bytes_per_row</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_strip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>zbuf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>zn</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>zbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encode strip failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_LZW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lzws</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>ff_lzw_encode_state_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lzws</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name><index>[<expr><name>i</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_LZW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_lzw_encode_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lzws</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>-</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_start</name></name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>FF_LZW_TIFF</name></expr></argument>, <argument><expr><name>put_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name><index>[<expr><name>i</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pack_yuv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_strip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>bytes_per_row</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subsampling</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_strip</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>bytes_per_row</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encode strip failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name><index>[<expr><name>i</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr>]</index></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_LZW</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>i</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_lzw_encode_flush</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lzws</name></name></expr></argument>, <argument><expr><name>flush_put_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name><index>[<expr><operator>(</operator><name>i</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name></name><operator>)</operator></expr>]</index></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_LZW</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lzws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_SUBFILE</name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_WIDTH</name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_HEIGHT</name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp_tab_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_BPP</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp_tab_size</name></name></expr></argument>, <argument><expr><name>bpp_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_COMPR</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_PHOTOMETRIC</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>photometric_interpretation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_STRIP_OFFS</name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name>strips</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bpp_tab_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_SAMPLES_PER_PIXEL</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bpp_tab_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_ROWSPERSTRIP</name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_STRIP_SIZE</name></expr></argument>, <argument><expr><name>TIFF_LONG</name></expr></argument>, <argument><expr><name>strips</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_XRES</name></expr></argument>, <argument><expr><name>TIFF_RATIONAL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>y</name> <init>= <expr><call><name>av_mul_q</name><argument_list>(<argument><expr><call><name>av_make_q</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dpi</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_YRES</name></expr></argument>, <argument><expr><name>TIFF_RATIONAL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_RES_UNIT</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_SOFTWARE_NAME</name></expr></argument>, <argument><expr><name>TIFF_STRING</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>rgb</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <literal type="number">257</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <literal type="number">257</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">512</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>*</operator> <literal type="number">257</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_PAL</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>TIFF_EXTRASAMPLES</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_yuv</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>refbw</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_YCBCR_SUBSAMPLING</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>subsampling</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>==</operator> <name>AVCHROMA_LOC_TOPLEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ADD_ENTRY1</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_YCBCR_POSITIONING</name></expr></argument>, <argument><expr><name>TIFF_SHORT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_ENTRY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>TIFF_REFERENCE_BW</name></expr></argument>, <argument><expr><name>TIFF_RATIONAL</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>refbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>*</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>*</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TiffEncoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_ZLIB</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compr</name></name> <operator>==</operator> <name>TIFF_DEFLATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Deflate compression needs zlib compiled in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>AV_PICTURE_TYPE_I</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <init>= <expr><name>avctx</name></expr></init></decl>;</decl_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TiffEncoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>strip_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>strip_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>yuv_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TiffEncoderContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"dpi"</literal></expr>, <expr><literal type="string">"set the image resolution (in dpi)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dpi</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">72</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x10000</literal></expr>, <expr><name>AV_OPT_FLAG_VIDEO_PARAM</name><operator>|</operator><name>AV_OPT_FLAG_ENCODING_PARAM</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"compression_algo"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>compr</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TIFF_PACKBITS</name></expr> }</block></expr>, <expr><name>TIFF_RAW</name></expr>, <expr><name>TIFF_DEFLATE</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"compression_algo"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"packbits"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TIFF_PACKBITS</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"compression_algo"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"raw"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TIFF_RAW</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"compression_algo"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lzw"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TIFF_LZW</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"compression_algo"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"deflate"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TIFF_DEFLATE</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"compression_algo"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>tiffenc_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"TIFF encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_tiff_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tiff"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"TIFF image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TIFF</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TiffEncoderContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>encode_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_RGB48LE</name></expr>, <expr><name>AV_PIX_FMT_PAL8</name></expr>,

<expr><name>AV_PIX_FMT_RGBA</name></expr>, <expr><name>AV_PIX_FMT_RGBA64LE</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY8A</name></expr>, <expr><name>AV_PIX_FMT_GRAY16LE</name></expr>, <expr><name>AV_PIX_FMT_YA16LE</name></expr>,

<expr><name>AV_PIX_FMT_MONOBLACK</name></expr>, <expr><name>AV_PIX_FMT_MONOWHITE</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV410P</name></expr>, <expr><name>AV_PIX_FMT_YUV411P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>tiffenc_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
